{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18444",
    "id": 394406322,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzk0NDA2MzIy",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18444",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/18444.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/18444.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18444",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18444/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18444/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18444/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c34164896c62fc6307b4cc72c060a277263590bb",
    "number": 18444,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "RPC: Remove final comma for last entry of fixed-size arrays/objects in RPCResult",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "JSON doesn't allow a trailing comma in arrays\r\n",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-03-26T20:32:07Z",
    "updated_at": "2022-02-15T10:28:31Z",
    "closed_at": "2020-03-28T19:15:04Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-03-28T19:15:04Z",
    "merge_commit_sha": "6b4f182806d62f00035cd9edc8ea8b837138e7f0",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "luke-jr:bugfix_rr_arrfixed_comma",
      "ref": "bugfix_rr_arrfixed_comma",
      "sha": "c34164896c62fc6307b4cc72c060a277263590bb",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 2514537,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNTE0NTM3",
        "name": "bitcoin",
        "full_name": "luke-jr/bitcoin",
        "owner": {
          "login": "luke-jr",
          "id": 1095675,
          "node_id": "MDQ6VXNlcjEwOTU2NzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/luke-jr",
          "html_url": "https://github.com/luke-jr",
          "followers_url": "https://api.github.com/users/luke-jr/followers",
          "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
          "organizations_url": "https://api.github.com/users/luke-jr/orgs",
          "repos_url": "https://api.github.com/users/luke-jr/repos",
          "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/luke-jr/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/luke-jr/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/luke-jr/bitcoin",
        "archive_url": "https://api.github.com/repos/luke-jr/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/luke-jr/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/luke-jr/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/luke-jr/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/luke-jr/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/luke-jr/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/luke-jr/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/luke-jr/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/luke-jr/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/luke-jr/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/luke-jr/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/luke-jr/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/luke-jr/bitcoin/events",
        "forks_url": "https://api.github.com/repos/luke-jr/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/luke-jr/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/luke-jr/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/luke-jr/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/luke-jr/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/luke-jr/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/luke-jr/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/luke-jr/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/luke-jr/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/luke-jr/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/luke-jr/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/luke-jr/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/luke-jr/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/luke-jr/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/luke-jr/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/luke-jr/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:luke-jr/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/luke-jr/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/luke-jr/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/luke-jr/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/luke-jr/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/luke-jr/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/luke-jr/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/luke-jr/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/luke-jr/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/luke-jr/bitcoin/hooks",
        "svn_url": "https://github.com/luke-jr/bitcoin",
        "homepage": "",
        "language": "C++",
        "forks_count": 8,
        "stargazers_count": 20,
        "watchers_count": 20,
        "size": 240643,
        "default_branch": "readme",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-03-16T05:38:05Z",
        "created_at": "2011-10-04T20:22:23Z",
        "updated_at": "2023-03-18T20:43:12Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "1277ca401a796b5b26a9e85afc455ff92e20cdfb",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18444"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 9,
    "deletions": 1,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 0,
    "comments": 10
  },
  "events": [
    {
      "event": "labeled",
      "id": 3170038441,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMxNzAwMzg0NDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3170038441",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-26T20:52:08Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "commented",
      "id": 604727683,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDcyNzY4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604727683",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-26T22:51:55Z",
      "updated_at": "2020-03-26T22:51:55Z",
      "author_association": "MEMBER",
      "body": "linter failure:\r\n\r\n```\r\nCHECK_NONFATAL(condition) should be used instead of assert for RPC code.\r\nsrc/rpc/util.cpp:649:            assert(!m_inner.empty());\r\n```",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18444#issuecomment-604727683",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18444"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3170450829,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE3MDQ1MDgyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3170450829",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-26T23:35:04Z"
    },
    {
      "event": "commented",
      "id": 605107793,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTEwNzc5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605107793",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-27T16:53:38Z",
      "updated_at": "2020-03-27T16:53:38Z",
      "author_association": "MEMBER",
      "body": "Not sure if this is needed. The resulting doc is not JSON that you can copy paste into a JSON parser. Stuff like `...` or `n` or `true|false` isn't valid JSON either.\r\n\r\nThis is the rendered diff on my end:\r\n\r\n```diff\r\ndiff --git a/getblockstats b/getblockstats\r\nindex cff3f22..11fbf07 100644\r\n--- a/getblockstats\r\n+++ b/getblockstats\r\n@@ -23,7 +23,7 @@ Result:\r\n     n,                         (numeric) The 25th percentile feerate\r\n     n,                         (numeric) The 50th percentile feerate\r\n     n,                         (numeric) The 75th percentile feerate\r\n-    n,                         (numeric) The 90th percentile feerate\r\n+    n                          (numeric) The 90th percentile feerate\r\n   ],\r\n   \"height\" : n,                (numeric) The height of the block\r\n   \"ins\" : n,                   (numeric) The number of inputs (excluding coinbase)\r\n```\r\n\r\nMore broadly speaking, I don't see a valid use case for ARR_FIXED and it should probably be deprecated and removed in favour of self-documenting alternatives like a dictionary whose keys describe the value.\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18444#issuecomment-605107793",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18444"
    },
    {
      "event": "commented",
      "id": 605117330,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTExNzMzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605117330",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-27T17:07:42Z",
      "updated_at": "2020-03-27T17:07:42Z",
      "author_association": "MEMBER",
      "body": "#8501 uses it to transfer a potentially large data set of statistical samples.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18444#issuecomment-605117330",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18444"
    },
    {
      "event": "commented",
      "id": 605158444,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTE1ODQ0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605158444",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-27T17:52:51Z",
      "updated_at": "2020-03-27T17:52:51Z",
      "author_association": "MEMBER",
      "body": "Fair enough. Though, I still think that the output is primarily for documentation purposes and not to please an imaginary JSON language lawyer",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18444#issuecomment-605158444",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18444"
    },
    {
      "event": "commented",
      "id": 605451368,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTQ1MTM2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605451368",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T14:02:28Z",
      "updated_at": "2020-03-28T14:02:28Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, not a bugfix IMO.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18444#issuecomment-605451368",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18444"
    },
    {
      "event": "commented",
      "id": 605451593,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTQ1MTU5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605451593",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T14:04:17Z",
      "updated_at": "2020-03-28T14:04:17Z",
      "author_association": "MEMBER",
      "body": "If people want to do this, then it should also be done for fixed-size dicts",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18444#issuecomment-605451593",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18444"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzQxNjQ4OTZjNjJmYzYzMDdiNGNjNzJjMDYwYTI3NzI2MzU5MGJi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c34164896c62fc6307b4cc72c060a277263590bb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c34164896c62fc6307b4cc72c060a277263590bb",
      "tree": {
        "sha": "0d4295591d6c716b9756cdd9c0ccb957a4f4ae59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d4295591d6c716b9756cdd9c0ccb957a4f4ae59"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5236b2e267a58870239673c7ec85e5df0cb8fc8e",
          "sha": "5236b2e267a58870239673c7ec85e5df0cb8fc8e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5236b2e267a58870239673c7ec85e5df0cb8fc8e"
        }
      ],
      "message": "Bugfix: RPC: Remove final comma for last entry of fixed-size Arrays and Objects in RPCResult\n\nJSON doesn't allow a trailing comma in Arrays/Objects",
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-03-28T17:32:28Z"
      },
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-03-26T20:28:38Z"
      },
      "sha": "c34164896c62fc6307b4cc72c060a277263590bb"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3175162676,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE3NTE2MjY3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3175162676",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T17:33:11Z"
    },
    {
      "event": "commented",
      "id": 605493366,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTQ5MzM2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605493366",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T17:33:38Z",
      "updated_at": "2020-03-28T17:33:38Z",
      "author_association": "MEMBER",
      "body": "Extended it to handle JSON Objects",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18444#issuecomment-605493366",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18444"
    },
    {
      "event": "commented",
      "id": 605501283,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTUwMTI4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605501283",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T18:35:43Z",
      "updated_at": "2020-03-28T18:35:43Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, not a bugfix, but certainly a mild improvement.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18444#issuecomment-605501283",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18444"
    },
    {
      "event": "renamed",
      "id": 3175241806,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MzE3NTI0MTgwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3175241806",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T19:12:44Z",
      "rename": {
        "from": "Bugfix: RPC: Remove final comma for last entry of fixed-size arrays in RPCResult",
        "to": "RPC: Remove final comma for last entry of fixed-size arrays/objects in RPCResult"
      }
    },
    {
      "event": "merged",
      "id": 3175243521,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzE3NTI0MzUyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3175243521",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6b4f182806d62f00035cd9edc8ea8b837138e7f0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b4f182806d62f00035cd9edc8ea8b837138e7f0",
      "created_at": "2020-03-28T19:15:04Z"
    },
    {
      "event": "closed",
      "id": 3175243525,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzE3NTI0MzUyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3175243525",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T19:15:04Z"
    },
    {
      "event": "commented",
      "id": 605518660,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTUxODY2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605518660",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T20:57:50Z",
      "updated_at": "2020-03-28T20:57:50Z",
      "author_association": "MEMBER",
      "body": "Btw, this is the rendered diff:\r\n\r\n<details><summary>diff</summary>\r\n\r\n```diff\r\ndiff --git a/addmultisigaddress b/addmultisigaddress\r\nindex d061704..10fb22b 100644\r\n--- a/addmultisigaddress\r\n+++ b/addmultisigaddress\r\n@@ -19,8 +19,8 @@ Arguments:\r\n Result:\r\n {                            (json object)\r\n   \"address\" : \"str\",         (string) The value of the new multisig address\r\n   \"redeemScript\" : \"hex\",    (string) The string value of the hex-encoded redemption script\r\n-  \"descriptor\" : \"str\",      (string) The descriptor for this multisig\r\n+  \"descriptor\" : \"str\"       (string) The descriptor for this multisig\r\n }\r\n \r\n Examples:\r\ndiff --git a/analyzepsbt b/analyzepsbt\r\nindex 301fa25..2d38149 100644\r\n--- a/analyzepsbt\r\n+++ b/analyzepsbt\r\n@@ -8,30 +8,30 @@ Arguments:\r\n Result:\r\n {                                   (json object)\r\n   \"inputs\" : [                      (json array)\r\n     {                               (json object)\r\n       \"has_utxo\" : true|false,      (boolean) Whether a UTXO is provided\r\n       \"is_final\" : true|false,      (boolean) Whether the input is finalized\r\n       \"missing\" : {                 (json object, optional) Things that are missing that are required to complete this input\r\n         \"pubkeys\" : [               (json array, optional)\r\n           \"hex\",                    (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\r\n           ...\r\n         ],\r\n         \"signatures\" : [            (json array, optional)\r\n           \"hex\",                    (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\r\n           ...\r\n         ],\r\n         \"redeemscript\" : \"hex\",     (string, optional) Hash160 of the redeemScript that is missing\r\n-        \"witnessscript\" : \"hex\",    (string, optional) SHA256 of the witnessScript that is missing\r\n+        \"witnessscript\" : \"hex\"     (string, optional) SHA256 of the witnessScript that is missing\r\n       },\r\n-      \"next\" : \"str\",               (string, optional) Role of the next person that this input needs to go to\r\n+      \"next\" : \"str\"                (string, optional) Role of the next person that this input needs to go to\r\n     },\r\n     ...\r\n   ],\r\n   \"estimated_vsize\" : n,            (numeric, optional) Estimated vsize of the final signed transaction\r\n   \"estimated_feerate\" : n,          (numeric, optional) Estimated feerate of the final signed transaction in BTC/kB. Shown only if all UTXO slots in the PSBT have been filled\r\n   \"fee\" : n,                        (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled\r\n   \"next\" : \"str\",                   (string) Role of the next person that this psbt needs to go to\r\n-  \"error\" : \"str\",                  (string) Error message if there is one\r\n+  \"error\" : \"str\"                   (string) Error message if there is one\r\n }\r\n \r\n Examples:\r\ndiff --git a/bumpfee b/bumpfee\r\nindex 89596bb..9b21dfe 100644\r\n--- a/bumpfee\r\n+++ b/bumpfee\r\n@@ -36,13 +36,13 @@ Arguments:\r\n Result:\r\n {                    (json object)\r\n   \"psbt\" : \"str\",    (string) The base64-encoded unsigned PSBT of the new transaction. Only returned when wallet private keys are disabled.\r\n   \"txid\" : \"hex\",    (string) The id of the new transaction. Only returned when wallet private keys are enabled.\r\n   \"origfee\" : n,     (numeric) The fee of the replaced transaction.\r\n   \"fee\" : n,         (numeric) The fee of the new transaction.\r\n   \"errors\" : [       (json array) Errors encountered during processing (may be empty).\r\n     \"str\",           (string)\r\n     ...\r\n-  ],\r\n+  ]\r\n }\r\n \r\n Examples:\r\ndiff --git a/createmultisig b/createmultisig\r\nindex 432a1a3..e2d97b0 100644\r\n--- a/createmultisig\r\n+++ b/createmultisig\r\n@@ -15,8 +15,8 @@ Arguments:\r\n Result:\r\n {                            (json object)\r\n   \"address\" : \"str\",         (string) The value of the new multisig address.\r\n   \"redeemScript\" : \"hex\",    (string) The string value of the hex-encoded redemption script.\r\n-  \"descriptor\" : \"str\",      (string) The descriptor for this multisig\r\n+  \"descriptor\" : \"str\"       (string) The descriptor for this multisig\r\n }\r\n \r\n Examples:\r\ndiff --git a/createwallet b/createwallet\r\nindex 5a6ea93..c0244b0 100644\r\n--- a/createwallet\r\n+++ b/createwallet\r\n@@ -12,7 +12,7 @@ Arguments:\r\n Result:\r\n {                       (json object)\r\n   \"name\" : \"str\",       (string) The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.\r\n-  \"warning\" : \"str\",    (string) Warning message if wallet was not loaded cleanly.\r\n+  \"warning\" : \"str\"     (string) Warning message if wallet was not loaded cleanly.\r\n }\r\n \r\n Examples:\r\ndiff --git a/decodepsbt b/decodepsbt\r\nindex bd64cae..06e11e0 100644\r\n--- a/decodepsbt\r\n+++ b/decodepsbt\r\n@@ -8,91 +8,91 @@ Arguments:\r\n Result:\r\n {                                          (json object)\r\n   \"tx\" : {                                 (json object) The decoded network-serialized unsigned transaction.\r\n-      ...                                  The layout is the same as the output of decoderawtransaction.\r\n+      ..                                   The layout is the same as the output of decoderawtransaction.\r\n   },\r\n   \"unknown\" : {                            (json object) The unknown global fields\r\n     \"key\" : \"hex\",                         (string) (key-value pair) An unknown key-value pair\r\n     ...\r\n   },\r\n   \"inputs\" : [                             (json array)\r\n     {                                      (json object)\r\n       \"non_witness_utxo\" : {               (json object, optional) Decoded network transaction for non-witness UTXOs\r\n-          ...\r\n+          ..\r\n       },\r\n       \"witness_utxo\" : {                   (json object, optional) Transaction output for witness UTXOs\r\n         \"amount\" : n,                      (numeric) The value in BTC\r\n         \"scriptPubKey\" : {                 (json object)\r\n           \"asm\" : \"str\",                   (string) The asm\r\n           \"hex\" : \"hex\",                   (string) The hex\r\n           \"type\" : \"str\",                  (string) The type, eg 'pubkeyhash'\r\n-          \"address\" : \"str\",               (string)  Bitcoin address if there is one\r\n-        },\r\n+          \"address\" : \"str\"                (string)  Bitcoin address if there is one\r\n+        }\r\n       },\r\n       \"partial_signatures\" : {             (json object, optional)\r\n         \"pubkey\" : \"str\",                  (string) The public key and signature that corresponds to it.\r\n         ...\r\n       },\r\n       \"sighash\" : \"str\",                   (string, optional) The sighash type to be used\r\n       \"redeem_script\" : {                  (json object, optional)\r\n         \"asm\" : \"str\",                     (string) The asm\r\n         \"hex\" : \"hex\",                     (string) The hex\r\n-        \"type\" : \"str\",                    (string) The type, eg 'pubkeyhash'\r\n+        \"type\" : \"str\"                     (string) The type, eg 'pubkeyhash'\r\n       },\r\n       \"witness_script\" : {                 (json object, optional)\r\n         \"asm\" : \"str\",                     (string) The asm\r\n         \"hex\" : \"hex\",                     (string) The hex\r\n-        \"type\" : \"str\",                    (string) The type, eg 'pubkeyhash'\r\n+        \"type\" : \"str\"                     (string) The type, eg 'pubkeyhash'\r\n       },\r\n       \"bip32_derivs\" : [                   (json array, optional)\r\n         {                                  (json object, optional) The public key with the derivation path as the value.\r\n           \"master_fingerprint\" : \"str\",    (string) The fingerprint of the master key\r\n-          \"path\" : \"str\",                  (string) The path\r\n+          \"path\" : \"str\"                   (string) The path\r\n         },\r\n         ...\r\n       ],\r\n       \"final_scriptsig\" : {                (json object, optional)\r\n         \"asm\" : \"str\",                     (string) The asm\r\n-        \"hex\" : \"str\",                     (string) The hex\r\n+        \"hex\" : \"str\"                      (string) The hex\r\n       },\r\n       \"final_scriptwitness\" : [            (json array)\r\n         \"hex\",                             (string) hex-encoded witness data (if any)\r\n         ...\r\n       ],\r\n       \"unknown\" : {                        (json object) The unknown global fields\r\n         \"key\" : \"hex\",                     (string) (key-value pair) An unknown key-value pair\r\n         ...\r\n-      },\r\n+      }\r\n     },\r\n     ...\r\n   ],\r\n   \"outputs\" : [                            (json array)\r\n     {                                      (json object)\r\n       \"redeem_script\" : {                  (json object, optional)\r\n         \"asm\" : \"str\",                     (string) The asm\r\n         \"hex\" : \"hex\",                     (string) The hex\r\n-        \"type\" : \"str\",                    (string) The type, eg 'pubkeyhash'\r\n+        \"type\" : \"str\"                     (string) The type, eg 'pubkeyhash'\r\n       },\r\n       \"witness_script\" : {                 (json object, optional)\r\n         \"asm\" : \"str\",                     (string) The asm\r\n         \"hex\" : \"hex\",                     (string) The hex\r\n-        \"type\" : \"str\",                    (string) The type, eg 'pubkeyhash'\r\n+        \"type\" : \"str\"                     (string) The type, eg 'pubkeyhash'\r\n       },\r\n       \"bip32_derivs\" : [                   (json array, optional)\r\n         {                                  (json object)\r\n           \"pubkey\" : \"str\",                (string) The public key this path corresponds to\r\n           \"master_fingerprint\" : \"str\",    (string) The fingerprint of the master key\r\n-          \"path\" : \"str\",                  (string) The path\r\n+          \"path\" : \"str\"                   (string) The path\r\n         },\r\n         ...\r\n       ],\r\n       \"unknown\" : {                        (json object) The unknown global fields\r\n         \"key\" : \"hex\",                     (string) (key-value pair) An unknown key-value pair\r\n         ...\r\n-      },\r\n+      }\r\n     },\r\n     ...\r\n   ],\r\n-  \"fee\" : n,                               (numeric, optional) The transaction fee paid if all UTXOs slots in the PSBT have been filled.\r\n+  \"fee\" : n                                (numeric, optional) The transaction fee paid if all UTXOs slots in the PSBT have been filled.\r\n }\r\n \r\n Examples:\r\ndiff --git a/decoderawtransaction b/decoderawtransaction\r\nindex 607c3dd..7c70099 100644\r\n--- a/decoderawtransaction\r\n+++ b/decoderawtransaction\r\n@@ -14,45 +14,45 @@ Arguments:\r\n Result:\r\n {                           (json object)\r\n   \"txid\" : \"hex\",           (string) The transaction id\r\n   \"hash\" : \"hex\",           (string) The transaction hash (differs from txid for witness transactions)\r\n   \"size\" : n,               (numeric) The transaction size\r\n   \"vsize\" : n,              (numeric) The virtual transaction size (differs from size for witness transactions)\r\n   \"weight\" : n,             (numeric) The transaction's weight (between vsize*4 - 3 and vsize*4)\r\n   \"version\" : n,            (numeric) The version\r\n   \"locktime\" : xxx,         (numeric) The lock time\r\n   \"vin\" : [                 (json array)\r\n     {                       (json object)\r\n       \"txid\" : \"hex\",       (string) The transaction id\r\n       \"vout\" : n,           (numeric) The output number\r\n       \"scriptSig\" : {       (json object) The script\r\n         \"asm\" : \"str\",      (string) asm\r\n-        \"hex\" : \"hex\",      (string) hex\r\n+        \"hex\" : \"hex\"       (string) hex\r\n       },\r\n       \"txinwitness\" : [     (json array)\r\n         \"hex\",              (string) hex-encoded witness data (if any)\r\n         ...\r\n       ],\r\n-      \"sequence\" : n,       (numeric) The script sequence number\r\n+      \"sequence\" : n        (numeric) The script sequence number\r\n     },\r\n     ...\r\n   ],\r\n   \"vout\" : [                (json array)\r\n     {                       (json object)\r\n       \"value\" : n,          (numeric) The value in BTC\r\n       \"n\" : n,              (numeric) index\r\n       \"scriptPubKey\" : {    (json object)\r\n         \"asm\" : \"str\",      (string) the asm\r\n         \"hex\" : \"hex\",      (string) the hex\r\n         \"reqSigs\" : n,      (numeric) The required sigs\r\n         \"type\" : \"str\",     (string) The type, eg 'pubkeyhash'\r\n         \"addresses\" : [     (json array)\r\n           \"str\",            (string) bitcoin address\r\n           ...\r\n-        ],\r\n-      },\r\n+        ]\r\n+      }\r\n     },\r\n     ...\r\n-  ],\r\n+  ]\r\n }\r\n \r\n Examples:\r\ndiff --git a/decodescript b/decodescript\r\nindex 11044ea..d2d1618 100644\r\n--- a/decodescript\r\n+++ b/decodescript\r\n@@ -8,24 +8,24 @@ Arguments:\r\n Result:\r\n {                             (json object)\r\n   \"asm\" : \"str\",              (string) Script public key\r\n   \"type\" : \"str\",             (string) The output type (e.g. nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_scripthash, witness_v0_keyhash, witness_unknown)\r\n   \"reqSigs\" : n,              (numeric) The required signatures\r\n   \"addresses\" : [             (json array)\r\n     \"str\",                    (string) bitcoin address\r\n     ...\r\n   ],\r\n   \"p2sh\" : \"str\",             (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH)\r\n   \"segwit\" : {                (json object) Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness)\r\n     \"asm\" : \"str\",            (string) String representation of the script public key\r\n     \"hex\" : \"hex\",            (string) Hex string of the script public key\r\n     \"type\" : \"str\",           (string) The type of the script public key (e.g. witness_v0_keyhash or witness_v0_scripthash)\r\n     \"reqSigs\" : n,            (numeric) The required signatures (always 1)\r\n     \"addresses\" : [           (json array) (always length 1)\r\n       \"str\",                  (string) segwit address\r\n       ...\r\n     ],\r\n-    \"p2sh-segwit\" : \"str\",    (string) address of the P2SH script wrapping this witness redeem script\r\n-  },\r\n+    \"p2sh-segwit\" : \"str\"     (string) address of the P2SH script wrapping this witness redeem script\r\n+  }\r\n }\r\n \r\n Examples:\r\ndiff --git a/dumptxoutset b/dumptxoutset\r\nindex de6052e..0d22c4b 100644\r\n--- a/dumptxoutset\r\n+++ b/dumptxoutset\r\n@@ -9,9 +9,9 @@ Arguments:\r\n Result:\r\n {                         (json object)\r\n   \"coins_written\" : n,    (numeric) the number of coins written in the snapshot\r\n   \"base_hash\" : \"hex\",    (string) the hash of the base of the snapshot\r\n   \"base_height\" : n,      (numeric) the height of the base of the snapshot\r\n-  \"path\" : \"str\",         (string) the absolute path that the snapshot was written to\r\n+  \"path\" : \"str\"          (string) the absolute path that the snapshot was written to\r\n }\r\n \r\n Examples:\r\ndiff --git a/dumpwallet b/dumpwallet\r\nindex 6b8bd4a..93dda41 100644\r\n--- a/dumpwallet\r\n+++ b/dumpwallet\r\n@@ -10,7 +10,7 @@ Arguments:\r\n \r\n Result:\r\n {                        (json object)\r\n-  \"filename\" : \"str\",    (string) The filename with full absolute path\r\n+  \"filename\" : \"str\"     (string) The filename with full absolute path\r\n }\r\n \r\n Examples:\r\ndiff --git a/estimaterawfee b/estimaterawfee\r\nindex 59b4f17..7e7392d 100644\r\n--- a/estimaterawfee\r\n+++ b/estimaterawfee\r\n@@ -19,31 +19,31 @@ Arguments:\r\n Result:\r\n {                              (json object) Results are returned for any horizon which tracks blocks up to the confirmation target\r\n   \"short\" : {                  (json object, optional) estimate for short time horizon\r\n     \"feerate\" : n,             (numeric, optional) estimate fee rate in BTC/kB\r\n     \"decay\" : n,               (numeric) exponential decay (per block) for historical moving average of confirmation data\r\n     \"scale\" : n,               (numeric) The resolution of confirmation targets at this time horizon\r\n     \"pass\" : {                 (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\r\n       \"startrange\" : n,        (numeric) start of feerate range\r\n       \"endrange\" : n,          (numeric) end of feerate range\r\n       \"withintarget\" : n,      (numeric) number of txs over history horizon in the feerate range that were confirmed within target\r\n       \"totalconfirmed\" : n,    (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\r\n       \"inmempool\" : n,         (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\r\n-      \"leftmempool\" : n,       (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\r\n+      \"leftmempool\" : n        (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\r\n     },\r\n     \"fail\" : {                 (json object, optional) information about the highest range of feerates to fail to meet the threshold\r\n-        ...\r\n+        ..\r\n     },\r\n     \"errors\" : [               (json array, optional) Errors encountered during processing\r\n       \"str\",                   (string)\r\n       ...\r\n-    ],\r\n+    ]\r\n   },\r\n   \"medium\" : {                 (json object, optional) estimate for medium time horizon\r\n-      ...\r\n+      ..\r\n   },\r\n   \"long\" : {                   (json object, optional) estimate for long time horizon\r\n-      ...\r\n-  },\r\n+      ..\r\n+  }\r\n }\r\n \r\n Examples:\r\ndiff --git a/estimatesmartfee b/estimatesmartfee\r\nindex d182fd5..1899424 100644\r\n--- a/estimatesmartfee\r\n+++ b/estimatesmartfee\r\n@@ -20,13 +20,13 @@ Arguments:\r\n Result:\r\n {                   (json object)\r\n   \"feerate\" : n,    (numeric, optional) estimate fee rate in BTC/kB (only present if no errors were encountered)\r\n   \"errors\" : [      (json array) Errors encountered during processing\r\n     \"str\",          (string) error\r\n     ...\r\n   ],\r\n-  \"blocks\" : n,     (numeric) block number where estimate was found\r\n+  \"blocks\" : n      (numeric) block number where estimate was found\r\n                     The request target will be clamped between 2 and the highest target\r\n                     fee estimation is able to return based on how long it has been running.\r\n                     An error is returned if not enough transactions and blocks\r\n                     have been observed to make an estimate for any number of blocks.\r\n }\r\ndiff --git a/finalizepsbt b/finalizepsbt\r\nindex d770129..3d7e722 100644\r\n--- a/finalizepsbt\r\n+++ b/finalizepsbt\r\n@@ -12,8 +12,8 @@ Arguments:\r\n Result:\r\n {                             (json object)\r\n   \"psbt\" : \"str\",             (string) The base64-encoded partially signed transaction if not extracted\r\n   \"hex\" : \"hex\",              (string) The hex-encoded network transaction if extracted\r\n-  \"complete\" : true|false,    (boolean) If the transaction has a complete set of signatures\r\n+  \"complete\" : true|false     (boolean) If the transaction has a complete set of signatures\r\n }\r\n \r\n Examples:\r\ndiff --git a/fundrawtransaction b/fundrawtransaction\r\nindex ecb91d8..e034463 100644\r\n--- a/fundrawtransaction\r\n+++ b/fundrawtransaction\r\n@@ -49,8 +49,8 @@ Arguments:\r\n Result:\r\n {                     (json object)\r\n   \"hex\" : \"hex\",      (string) The resulting raw transaction (hex-encoded string)\r\n   \"fee\" : n,          (numeric) Fee in BTC the resulting transaction pays\r\n-  \"changepos\" : n,    (numeric) The position of the added change output, or -1\r\n+  \"changepos\" : n     (numeric) The position of the added change output, or -1\r\n }\r\n \r\n Examples:\r\ndiff --git a/getaddednodeinfo b/getaddednodeinfo\r\nindex 144c7db..96e6d64 100644\r\n--- a/getaddednodeinfo\r\n+++ b/getaddednodeinfo\r\n@@ -9,15 +9,15 @@ Arguments:\r\n Result:\r\n [                                (json array)\r\n   {                              (json object)\r\n     \"addednode\" : \"str\",         (string) The node IP address or name (as provided to addnode)\r\n     \"connected\" : true|false,    (boolean) If connected\r\n     \"addresses\" : [              (json array) Only when connected = true\r\n       {                          (json object)\r\n         \"address\" : \"str\",       (string) The bitcoin server IP and port we're connected to\r\n-        \"connected\" : \"str\",     (string) connection, inbound or outbound\r\n+        \"connected\" : \"str\"      (string) connection, inbound or outbound\r\n       },\r\n       ...\r\n-    ],\r\n+    ]\r\n   },\r\n   ...\r\n ]\r\ndiff --git a/getaddressesbylabel b/getaddressesbylabel\r\nindex 51c3d25..89b4abb 100644\r\n--- a/getaddressesbylabel\r\n+++ b/getaddressesbylabel\r\n@@ -8,7 +8,7 @@ Arguments:\r\n Result:\r\n {                         (json object) json object with addresses as keys\r\n   \"address\" : {           (json object) json object with information about address\r\n-    \"purpose\" : \"str\",    (string) Purpose of address (\"send\" for sending address, \"receive\" for receiving address)\r\n+    \"purpose\" : \"str\"     (string) Purpose of address (\"send\" for sending address, \"receive\" for receiving address)\r\n   },\r\n   ...\r\n }\r\ndiff --git a/getaddressinfo b/getaddressinfo\r\nindex 850e571..802cebe 100644\r\n--- a/getaddressinfo\r\n+++ b/getaddressinfo\r\n@@ -9,46 +9,46 @@ Arguments:\r\n Result:\r\n {                                   (json object)\r\n   \"address\" : \"str\",                (string) The bitcoin address validated.\r\n   \"scriptPubKey\" : \"hex\",           (string) The hex-encoded scriptPubKey generated by the address.\r\n   \"ismine\" : true|false,            (boolean) If the address is yours.\r\n   \"iswatchonly\" : true|false,       (boolean) If the address is watchonly.\r\n   \"solvable\" : true|false,          (boolean) If we know how to spend coins sent to this address, ignoring the possible lack of private keys.\r\n   \"desc\" : \"str\",                   (string, optional) A descriptor for spending coins sent to this address (only when solvable).\r\n   \"isscript\" : true|false,          (boolean) If the key is a script.\r\n   \"ischange\" : true|false,          (boolean) If the address was used for change output.\r\n   \"iswitness\" : true|false,         (boolean) If the address is a witness address.\r\n   \"witness_version\" : n,            (numeric, optional) The version number of the witness program.\r\n   \"witness_program\" : \"hex\",        (string, optional) The hex value of the witness program.\r\n   \"script\" : \"str\",                 (string, optional) The output script type. Only if isscript is true and the redeemscript is known. Possible\r\n                                     types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,\r\n                                     witness_v0_scripthash, witness_unknown.\r\n   \"hex\" : \"hex\",                    (string, optional) The redeemscript for the p2sh address.\r\n   \"pubkeys\" : [                     (json array, optional) Array of pubkeys associated with the known redeemscript (only if script is multisig).\r\n     \"str\",                          (string)\r\n     ...\r\n   ],\r\n   \"sigsrequired\" : n,               (numeric, optional) The number of signatures required to spend multisig output (only if script is multisig).\r\n   \"pubkey\" : \"hex\",                 (string, optional) The hex value of the raw public key for single-key addresses (possibly embedded in P2SH or P2WSH).\r\n   \"embedded\" : {                    (json object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known.\r\n-      ...                           Includes all\r\n+      ..                            Includes all\r\n                                     getaddressinfo output fields for the embedded address, excluding metadata (timestamp, hdkeypath,\r\n                                     hdseedid) and relation to the wallet (ismine, iswatchonly).\r\n   },\r\n   \"iscompressed\" : true|false,      (boolean, optional) If the pubkey is compressed.\r\n   \"label\" : \"str\",                  (string) DEPRECATED. The label associated with the address. Defaults to \"\". Replaced by the labels array below.\r\n   \"timestamp\" : xxx,                (numeric, optional) The creation time of the key, if available, expressed in UNIX epoch time.\r\n   \"hdkeypath\" : \"str\",              (string, optional) The HD keypath, if the key is HD and available.\r\n   \"hdseedid\" : \"hex\",               (string, optional) The Hash160 of the HD seed.\r\n   \"hdmasterfingerprint\" : \"hex\",    (string, optional) The fingerprint of the master key.\r\n   \"labels\" : [                      (json array) Array of labels associated with the address. Currently limited to one label but returned\r\n                                     as an array to keep the API stable if multiple labels are enabled in the future.\r\n     \"str\",                          (string) The label name. Defaults to \"\".\r\n     {                               (json object) label data, DEPRECATED, will be removed in 0.21. To re-enable, launch bitcoind with `-deprecatedrpc=labelspurpose`\r\n       \"name\" : \"str\",               (string) The label name. Defaults to \"\".\r\n-      \"purpose\" : \"str\",            (string) The purpose of the associated address (send or receive).\r\n+      \"purpose\" : \"str\"             (string) The purpose of the associated address (send or receive).\r\n     },\r\n     ...\r\n-  ],\r\n+  ]\r\n }\r\n \r\n Examples:\r\ndiff --git a/getbalances b/getbalances\r\nindex 171a471..a50ce7d 100644\r\n--- a/getbalances\r\n+++ b/getbalances\r\n@@ -4,16 +4,16 @@ Returns an object with all balances in BTC.\r\n Result:\r\n {                               (json object)\r\n   \"mine\" : {                    (json object) balances from outputs that the wallet can sign\r\n     \"trusted\" : n,              (numeric) trusted balance (outputs created by the wallet or confirmed outputs)\r\n     \"untrusted_pending\" : n,    (numeric) untrusted pending balance (outputs created by others that are in the mempool)\r\n     \"immature\" : n,             (numeric) balance from immature coinbase outputs\r\n-    \"used\" : n,                 (numeric) (only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\r\n+    \"used\" : n                  (numeric) (only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\r\n   },\r\n   \"watchonly\" : {               (json object) watchonly balances (not present if wallet does not watch anything)\r\n     \"trusted\" : n,              (numeric) trusted balance (outputs created by the wallet or confirmed outputs)\r\n     \"untrusted_pending\" : n,    (numeric) untrusted pending balance (outputs created by others that are in the mempool)\r\n-    \"immature\" : n,             (numeric) balance from immature coinbase outputs\r\n-  },\r\n+    \"immature\" : n              (numeric) balance from immature coinbase outputs\r\n+  }\r\n }\r\n \r\n Examples:\r\ndiff --git a/getblock b/getblock\r\nindex 69b05bf..3aeb9f8 100644\r\n--- a/getblock\r\n+++ b/getblock\r\n@@ -14,39 +14,39 @@ Result (for verbosity = 0):\r\n Result (for verbosity = 1):\r\n {                                 (json object)\r\n   \"hash\" : \"hex\",                 (string) the block hash (same as provided)\r\n   \"confirmations\" : n,            (numeric) The number of confirmations, or -1 if the block is not on the main chain\r\n   \"size\" : n,                     (numeric) The block size\r\n   \"strippedsize\" : n,             (numeric) The block size excluding witness data\r\n   \"weight\" : n,                   (numeric) The block weight as defined in BIP 141\r\n   \"height\" : n,                   (numeric) The block height or index\r\n   \"version\" : n,                  (numeric) The block version\r\n   \"versionHex\" : \"hex\",           (string) The block version formatted in hexadecimal\r\n   \"merkleroot\" : \"hex\",           (string) The merkle root\r\n   \"tx\" : [                        (json array) The transaction ids\r\n     \"hex\",                        (string) The transaction id\r\n     ...\r\n   ],\r\n   \"time\" : xxx,                   (numeric) The block time expressed in UNIX epoch time\r\n   \"mediantime\" : xxx,             (numeric) The median block time expressed in UNIX epoch time\r\n   \"nonce\" : n,                    (numeric) The nonce\r\n   \"bits\" : \"hex\",                 (string) The bits\r\n   \"difficulty\" : n,               (numeric) The difficulty\r\n   \"chainwork\" : \"hex\",            (string) Expected number of hashes required to produce the chain up to this block (in hex)\r\n   \"nTx\" : n,                      (numeric) The number of transactions in the block\r\n   \"previousblockhash\" : \"hex\",    (string) The hash of the previous block\r\n-  \"nextblockhash\" : \"hex\",        (string) The hash of the next block\r\n+  \"nextblockhash\" : \"hex\"         (string) The hash of the next block\r\n }\r\n \r\n Result (for verbosity = 2):\r\n {              (json object)\r\n     ...        Same output as verbosity = 1\r\n   \"tx\" : [     (json array)\r\n     {          (json object)\r\n-        ...    The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result\r\n+        ..     The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result\r\n     },\r\n     ...\r\n   ],\r\n-    ...        Same output as verbosity = 1\r\n+    ..         Same output as verbosity = 1\r\n }\r\n \r\n Examples:\r\ndiff --git a/getblockchaininfo b/getblockchaininfo\r\nindex d2d6764..4bc841e 100644\r\n--- a/getblockchaininfo\r\n+++ b/getblockchaininfo\r\n@@ -4,42 +4,42 @@ Returns an object containing various state info regarding blockchain processing.\r\n Result:\r\n {                                         (json object)\r\n   \"chain\" : \"str\",                        (string) current network name (main, test, regtest)\r\n   \"blocks\" : n,                           (numeric) the height of the most-work fully-validated chain. The genesis block has height 0\r\n   \"headers\" : n,                          (numeric) the current number of headers we have validated\r\n   \"bestblockhash\" : \"str\",                (string) the hash of the currently best block\r\n   \"difficulty\" : n,                       (numeric) the current difficulty\r\n   \"mediantime\" : n,                       (numeric) median time for the current best block\r\n   \"verificationprogress\" : n,             (numeric) estimate of verification progress [0..1]\r\n   \"initialblockdownload\" : true|false,    (boolean) (debug information) estimate of whether this node is in Initial Block Download mode\r\n   \"chainwork\" : \"hex\",                    (string) total amount of work in active chain, in hexadecimal\r\n   \"size_on_disk\" : n,                     (numeric) the estimated size of the block and undo files on disk\r\n   \"pruned\" : true|false,                  (boolean) if the blocks are subject to pruning\r\n   \"pruneheight\" : n,                      (numeric) lowest-height complete block stored (only present if pruning is enabled)\r\n   \"automatic_pruning\" : true|false,       (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\r\n   \"prune_target_size\" : n,                (numeric) the target size used by pruning (only present if automatic pruning is enabled)\r\n   \"softforks\" : {                         (json object) status of softforks\r\n     \"xxxx\" : {                            (json object) name of the softfork\r\n       \"type\" : \"str\",                     (string) one of \"buried\", \"bip9\"\r\n       \"bip9\" : {                          (json object) status of bip9 softforks (only for \"bip9\" type)\r\n         \"status\" : \"str\",                 (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\"\r\n         \"bit\" : n,                        (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status)\r\n         \"start_time\" : xxx,               (numeric) the minimum median time past of a block at which the bit gains its meaning\r\n         \"timeout\" : xxx,                  (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\r\n         \"since\" : n,                      (numeric) height of the first block to which the status applies\r\n         \"statistics\" : {                  (json object) numeric statistics about BIP9 signalling for a softfork (only for \"started\" status)\r\n           \"period\" : n,                   (numeric) the length in blocks of the BIP9 signalling period\r\n           \"threshold\" : n,                (numeric) the number of blocks with the version bit set required to activate the feature\r\n           \"elapsed\" : n,                  (numeric) the number of blocks elapsed since the beginning of the current period\r\n           \"count\" : n,                    (numeric) the number of blocks with the version bit set in the current period\r\n-          \"possible\" : true|false,        (boolean) returns false if there are not enough blocks left in this period to pass activation threshold\r\n-        },\r\n+          \"possible\" : true|false         (boolean) returns false if there are not enough blocks left in this period to pass activation threshold\r\n+        }\r\n       },\r\n       \"height\" : n,                       (numeric) height of the first block which the rules are or will be enforced (only for \"buried\" type, or \"bip9\" type with \"active\" status)\r\n-      \"active\" : true|false,              (boolean) true if the rules are enforced for the mempool and the next block\r\n+      \"active\" : true|false               (boolean) true if the rules are enforced for the mempool and the next block\r\n     },\r\n     ...\r\n   },\r\n-  \"warnings\" : \"str\",                     (string) any network and blockchain warnings\r\n+  \"warnings\" : \"str\"                      (string) any network and blockchain warnings\r\n }\r\n \r\n Examples:\r\ndiff --git a/getblockfilter b/getblockfilter\r\nindex 541b5d6..75c3f03 100644\r\n--- a/getblockfilter\r\n+++ b/getblockfilter\r\n@@ -9,7 +9,7 @@ Arguments:\r\n Result:\r\n {                      (json object)\r\n   \"filter\" : \"hex\",    (string) the hex-encoded filter data\r\n-  \"header\" : \"hex\",    (string) the hex-encoded filter header\r\n+  \"header\" : \"hex\"     (string) the hex-encoded filter header\r\n }\r\n \r\n Examples:\r\ndiff --git a/getblockheader b/getblockheader\r\nindex f06e705..51d93f8 100644\r\n--- a/getblockheader\r\n+++ b/getblockheader\r\n@@ -10,20 +10,20 @@ Arguments:\r\n Result (for verbose = true):\r\n {                                 (json object)\r\n   \"hash\" : \"hex\",                 (string) the block hash (same as provided)\r\n   \"confirmations\" : n,            (numeric) The number of confirmations, or -1 if the block is not on the main chain\r\n   \"height\" : n,                   (numeric) The block height or index\r\n   \"version\" : n,                  (numeric) The block version\r\n   \"versionHex\" : \"hex\",           (string) The block version formatted in hexadecimal\r\n   \"merkleroot\" : \"hex\",           (string) The merkle root\r\n   \"time\" : xxx,                   (numeric) The block time expressed in UNIX epoch time\r\n   \"mediantime\" : xxx,             (numeric) The median block time expressed in UNIX epoch time\r\n   \"nonce\" : n,                    (numeric) The nonce\r\n   \"bits\" : \"hex\",                 (string) The bits\r\n   \"difficulty\" : n,               (numeric) The difficulty\r\n   \"chainwork\" : \"hex\",            (string) Expected number of hashes required to produce the current chain\r\n   \"nTx\" : n,                      (numeric) The number of transactions in the block\r\n   \"previousblockhash\" : \"hex\",    (string) The hash of the previous block\r\n-  \"nextblockhash\" : \"hex\",        (string) The hash of the next block\r\n+  \"nextblockhash\" : \"hex\"         (string) The hash of the next block\r\n }\r\n \r\n Result (for verbose=false):\r\ndiff --git a/getblockstats b/getblockstats\r\nindex cff3f22..f90a23b 100644\r\n--- a/getblockstats\r\n+++ b/getblockstats\r\n@@ -15,40 +15,40 @@ Arguments:\r\n Result:\r\n {                              (json object)\r\n   \"avgfee\" : n,                (numeric) Average fee in the block\r\n   \"avgfeerate\" : n,            (numeric) Average feerate (in satoshis per virtual byte)\r\n   \"avgtxsize\" : n,             (numeric) Average transaction size\r\n   \"blockhash\" : \"hex\",         (string) The block hash (to check for potential reorgs)\r\n   \"feerate_percentiles\" : [    (json array) Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\r\n     n,                         (numeric) The 10th percentile feerate\r\n     n,                         (numeric) The 25th percentile feerate\r\n     n,                         (numeric) The 50th percentile feerate\r\n     n,                         (numeric) The 75th percentile feerate\r\n-    n,                         (numeric) The 90th percentile feerate\r\n+    n                          (numeric) The 90th percentile feerate\r\n   ],\r\n   \"height\" : n,                (numeric) The height of the block\r\n   \"ins\" : n,                   (numeric) The number of inputs (excluding coinbase)\r\n   \"maxfee\" : n,                (numeric) Maximum fee in the block\r\n   \"maxfeerate\" : n,            (numeric) Maximum feerate (in satoshis per virtual byte)\r\n   \"maxtxsize\" : n,             (numeric) Maximum transaction size\r\n   \"medianfee\" : n,             (numeric) Truncated median fee in the block\r\n   \"mediantime\" : n,            (numeric) The block median time past\r\n   \"mediantxsize\" : n,          (numeric) Truncated median transaction size\r\n   \"minfee\" : n,                (numeric) Minimum fee in the block\r\n   \"minfeerate\" : n,            (numeric) Minimum feerate (in satoshis per virtual byte)\r\n   \"mintxsize\" : n,             (numeric) Minimum transaction size\r\n   \"outs\" : n,                  (numeric) The number of outputs\r\n   \"subsidy\" : n,               (numeric) The block subsidy\r\n   \"swtotal_size\" : n,          (numeric) Total size of all segwit transactions\r\n   \"swtotal_weight\" : n,        (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\r\n   \"swtxs\" : n,                 (numeric) The number of segwit transactions\r\n   \"time\" : n,                  (numeric) The block time\r\n   \"total_out\" : n,             (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\r\n   \"total_size\" : n,            (numeric) Total size of all non-coinbase transactions\r\n   \"total_weight\" : n,          (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\r\n   \"totalfee\" : n,              (numeric) The fee total\r\n   \"txs\" : n,                   (numeric) The number of transactions (excluding coinbase)\r\n   \"utxo_increase\" : n,         (numeric) The increase/decrease in the number of unspent outputs\r\n-  \"utxo_size_inc\" : n,         (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\r\n+  \"utxo_size_inc\" : n          (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\r\n }\r\n \r\n Examples:\r\ndiff --git a/getblocktemplate b/getblocktemplate\r\nindex 73a1fab..bd06b2b 100644\r\n--- a/getblocktemplate\r\n+++ b/getblocktemplate\r\n@@ -25,51 +25,51 @@ Arguments:\r\n Result:\r\n {                                 (json object)\r\n   \"version\" : n,                  (numeric) The preferred block version\r\n   \"rules\" : [                     (json array) specific block rules that are to be enforced\r\n     \"str\",                        (string) rulename\r\n     ...\r\n   ],\r\n   \"vbavailable\" : {               (json object) set of pending, supported versionbit (BIP 9) softfork deployments\r\n     \"rulename\" : n,               (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule\r\n     ...\r\n   },\r\n   \"vbrequired\" : n,               (numeric) bit mask of versionbits the server requires set in submissions\r\n   \"previousblockhash\" : \"str\",    (string) The hash of current highest block\r\n   \"\" : [                          (json array) contents of non-coinbase transactions that should be included in the next block\r\n     {                             (json object)\r\n       \"data\" : \"hex\",             (string) transaction data encoded in hexadecimal (byte-for-byte)\r\n       \"txid\" : \"hex\",             (string) transaction id encoded in little-endian hexadecimal\r\n       \"hash\" : \"hex\",             (string) hash encoded in little-endian hexadecimal (including witness data)\r\n       \"depends\" : [               (json array) array of numbers\r\n         n,                        (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\r\n         ...\r\n       ],\r\n       \"fee\" : n,                  (numeric) difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\r\n       \"sigops\" : n,               (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\r\n-      \"weight\" : n,               (numeric) total transaction weight, as counted for purposes of block limits\r\n+      \"weight\" : n                (numeric) total transaction weight, as counted for purposes of block limits\r\n     },\r\n     ...\r\n   ],\r\n   \"coinbaseaux\" : {               (json object) data that should be included in the coinbase's scriptSig content\r\n-      ...\r\n+      ..\r\n   },\r\n   \"coinbasevalue\" : n,            (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\r\n   \"coinbasetxn\" : {               (json object) information for coinbase transaction\r\n-      ...\r\n+      ..\r\n   },\r\n   \"target\" : \"str\",               (string) The hash target\r\n   \"mintime\" : xxx,                (numeric) The minimum timestamp appropriate for the next block time, expressed in UNIX epoch time\r\n   \"mutable\" : [                   (json array) list of ways the block template may be changed\r\n     \"str\",                        (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\r\n     ...\r\n   ],\r\n   \"noncerange\" : \"hex\",           (string) A range of valid nonces\r\n   \"sigoplimit\" : n,               (numeric) limit of sigops in blocks\r\n   \"sizelimit\" : n,                (numeric) limit of block size\r\n   \"weightlimit\" : n,              (numeric) limit of block weight\r\n   \"curtime\" : xxx,                (numeric) current timestamp in UNIX epoch time\r\n   \"bits\" : \"str\",                 (string) compressed target of next block\r\n-  \"height\" : n,                   (numeric) The height of the next block\r\n+  \"height\" : n                    (numeric) The height of the next block\r\n }\r\n \r\n Examples:\r\ndiff --git a/getchaintips b/getchaintips\r\nindex f7d160c..2c60fb8 100644\r\n--- a/getchaintips\r\n+++ b/getchaintips\r\n@@ -4,16 +4,16 @@ Return information about all known tips in the block tree, including the main ch\r\n Result:\r\n [                        (json array)\r\n   {                      (json object)\r\n     \"height\" : n,        (numeric) height of the chain tip\r\n     \"hash\" : \"hex\",      (string) block hash of the tip\r\n     \"branchlen\" : n,     (numeric) zero for main chain, otherwise length of branch connecting the tip to the main chain\r\n-    \"status\" : \"str\",    (string) status of the chain, \"active\" for the main chain\r\n+    \"status\" : \"str\"     (string) status of the chain, \"active\" for the main chain\r\n                          Possible values for status:\r\n                          1.  \"invalid\"               This branch contains at least one invalid block\r\n                          2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid\r\n                          3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated\r\n                          4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated\r\n                          5.  \"active\"                This is the tip of the active main chain, which is certainly valid\r\n   },\r\n   ...\r\n ]\r\ndiff --git a/getchaintxstats b/getchaintxstats\r\nindex 5730b6d..64da9ab 100644\r\n--- a/getchaintxstats\r\n+++ b/getchaintxstats\r\n@@ -9,13 +9,13 @@ Arguments:\r\n Result:\r\n {                                       (json object)\r\n   \"time\" : xxx,                         (numeric) The timestamp for the final block in the window, expressed in UNIX epoch time\r\n   \"txcount\" : n,                        (numeric) The total number of transactions in the chain up to that point\r\n   \"window_final_block_hash\" : \"hex\",    (string) The hash of the final block in the window\r\n   \"window_final_block_height\" : n,      (numeric) The height of the final block in the window.\r\n   \"window_block_count\" : n,             (numeric) Size of the window in number of blocks\r\n   \"window_tx_count\" : n,                (numeric) The number of transactions in the window. Only returned if \"window_block_count\" is > 0\r\n   \"window_interval\" : n,                (numeric) The elapsed time in the window in seconds. Only returned if \"window_block_count\" is > 0\r\n-  \"txrate\" : n,                         (numeric) The average rate of transactions per second in the window. Only returned if \"window_interval\" is > 0\r\n+  \"txrate\" : n                          (numeric) The average rate of transactions per second in the window. Only returned if \"window_interval\" is > 0\r\n }\r\n \r\n Examples:\r\ndiff --git a/getdescriptorinfo b/getdescriptorinfo\r\nindex 7e3722b..d04f048 100644\r\n--- a/getdescriptorinfo\r\n+++ b/getdescriptorinfo\r\n@@ -8,10 +8,10 @@ Arguments:\r\n Result:\r\n {                                   (json object)\r\n   \"descriptor\" : \"str\",             (string) The descriptor in canonical form, without private keys\r\n   \"checksum\" : \"str\",               (string) The checksum for the input descriptor\r\n   \"isrange\" : true|false,           (boolean) Whether the descriptor is ranged\r\n   \"issolvable\" : true|false,        (boolean) Whether the descriptor is solvable\r\n-  \"hasprivatekeys\" : true|false,    (boolean) Whether the input descriptor contained at least one private key\r\n+  \"hasprivatekeys\" : true|false     (boolean) Whether the input descriptor contained at least one private key\r\n }\r\n \r\n Examples:\r\ndiff --git a/getmemoryinfo b/getmemoryinfo\r\nindex b66b7c4..4714343 100644\r\n--- a/getmemoryinfo\r\n+++ b/getmemoryinfo\r\n@@ -9,13 +9,13 @@ Arguments:\r\n Result (mode \"stats\"):\r\n {                         (json object)\r\n   \"locked\" : {            (json object) Information about locked memory manager\r\n     \"used\" : n,           (numeric) Number of bytes used\r\n     \"free\" : n,           (numeric) Number of bytes available in current arenas\r\n     \"total\" : n,          (numeric) Total number of bytes managed\r\n     \"locked\" : n,         (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\r\n     \"chunks_used\" : n,    (numeric) Number allocated chunks\r\n-    \"chunks_free\" : n,    (numeric) Number unused chunks\r\n-  },\r\n+    \"chunks_free\" : n     (numeric) Number unused chunks\r\n+  }\r\n }\r\n \r\n Result (mode \"mallocinfo\"):\r\ndiff --git a/getmempoolancestors b/getmempoolancestors\r\nindex 005c8b3..7d52fb9 100644\r\n--- a/getmempoolancestors\r\n+++ b/getmempoolancestors\r\n@@ -15,34 +15,34 @@ Result (for verbose = false):\r\n Result (for verbose = true):\r\n {                                       (json object)\r\n   \"vsize\" : n,                          (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\r\n   \"size\" : n,                           (numeric) (DEPRECATED) same as vsize. Only returned if bitcoind is started with -deprecatedrpc=size\r\n                                         size will be completely removed in v0.20.\r\n   \"weight\" : n,                         (numeric) transaction weight as defined in BIP 141.\r\n   \"fee\" : n,                            (numeric) transaction fee in BTC (DEPRECATED)\r\n   \"modifiedfee\" : n,                    (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\r\n   \"time\" : xxx,                         (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\r\n   \"height\" : n,                         (numeric) block height when transaction entered pool\r\n   \"descendantcount\" : n,                (numeric) number of in-mempool descendant transactions (including this one)\r\n   \"descendantsize\" : n,                 (numeric) virtual transaction size of in-mempool descendants (including this one)\r\n   \"descendantfees\" : n,                 (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\r\n   \"ancestorcount\" : n,                  (numeric) number of in-mempool ancestor transactions (including this one)\r\n   \"ancestorsize\" : n,                   (numeric) virtual transaction size of in-mempool ancestors (including this one)\r\n   \"ancestorfees\" : n,                   (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\r\n   \"wtxid\" : \"hex\",                      (string) hash of serialized transaction, including witness data\r\n   \"fees\" : {                            (json object)\r\n     \"base\" : n,                         (numeric) transaction fee in BTC\r\n     \"modified\" : n,                     (numeric) transaction fee with fee deltas used for mining priority in BTC\r\n     \"ancestor\" : n,                     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC\r\n-    \"descendant\" : n,                   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC\r\n+    \"descendant\" : n                    (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC\r\n   },\r\n   \"depends\" : [                         (json array) unconfirmed transactions used as inputs for this transaction\r\n     \"hex\",                              (string) parent transaction id\r\n     ...\r\n   ],\r\n   \"spentby\" : [                         (json array) unconfirmed transactions spending outputs from this transaction\r\n     \"hex\",                              (string) child transaction id\r\n     ...\r\n   ],\r\n   \"bip125-replaceable\" : true|false,    (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)\r\n   ...\r\n }\r\ndiff --git a/getmempooldescendants b/getmempooldescendants\r\nindex 77b25e0..3106229 100644\r\n--- a/getmempooldescendants\r\n+++ b/getmempooldescendants\r\n@@ -15,38 +15,38 @@ Result (for verbose = false):\r\n Result (for verbose = true):\r\n {                                         (json object)\r\n   \"transactionid\" : {                     (json object)\r\n     \"vsize\" : n,                          (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\r\n     \"size\" : n,                           (numeric) (DEPRECATED) same as vsize. Only returned if bitcoind is started with -deprecatedrpc=size\r\n                                           size will be completely removed in v0.20.\r\n     \"weight\" : n,                         (numeric) transaction weight as defined in BIP 141.\r\n     \"fee\" : n,                            (numeric) transaction fee in BTC (DEPRECATED)\r\n     \"modifiedfee\" : n,                    (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\r\n     \"time\" : xxx,                         (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\r\n     \"height\" : n,                         (numeric) block height when transaction entered pool\r\n     \"descendantcount\" : n,                (numeric) number of in-mempool descendant transactions (including this one)\r\n     \"descendantsize\" : n,                 (numeric) virtual transaction size of in-mempool descendants (including this one)\r\n     \"descendantfees\" : n,                 (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\r\n     \"ancestorcount\" : n,                  (numeric) number of in-mempool ancestor transactions (including this one)\r\n     \"ancestorsize\" : n,                   (numeric) virtual transaction size of in-mempool ancestors (including this one)\r\n     \"ancestorfees\" : n,                   (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\r\n     \"wtxid\" : \"hex\",                      (string) hash of serialized transaction, including witness data\r\n     \"fees\" : {                            (json object)\r\n       \"base\" : n,                         (numeric) transaction fee in BTC\r\n       \"modified\" : n,                     (numeric) transaction fee with fee deltas used for mining priority in BTC\r\n       \"ancestor\" : n,                     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC\r\n-      \"descendant\" : n,                   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC\r\n+      \"descendant\" : n                    (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC\r\n     },\r\n     \"depends\" : [                         (json array) unconfirmed transactions used as inputs for this transaction\r\n       \"hex\",                              (string) parent transaction id\r\n       ...\r\n     ],\r\n     \"spentby\" : [                         (json array) unconfirmed transactions spending outputs from this transaction\r\n       \"hex\",                              (string) child transaction id\r\n       ...\r\n     ],\r\n     \"bip125-replaceable\" : true|false,    (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)\r\n     ...\r\n-  },\r\n+  }\r\n }\r\n \r\n Examples:\r\ndiff --git a/getmempoolentry b/getmempoolentry\r\nindex 18d2d18..f5877ce 100644\r\n--- a/getmempoolentry\r\n+++ b/getmempoolentry\r\n@@ -8,34 +8,34 @@ Arguments:\r\n Result:\r\n {                                       (json object)\r\n   \"vsize\" : n,                          (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\r\n   \"size\" : n,                           (numeric) (DEPRECATED) same as vsize. Only returned if bitcoind is started with -deprecatedrpc=size\r\n                                         size will be completely removed in v0.20.\r\n   \"weight\" : n,                         (numeric) transaction weight as defined in BIP 141.\r\n   \"fee\" : n,                            (numeric) transaction fee in BTC (DEPRECATED)\r\n   \"modifiedfee\" : n,                    (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\r\n   \"time\" : xxx,                         (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\r\n   \"height\" : n,                         (numeric) block height when transaction entered pool\r\n   \"descendantcount\" : n,                (numeric) number of in-mempool descendant transactions (including this one)\r\n   \"descendantsize\" : n,                 (numeric) virtual transaction size of in-mempool descendants (including this one)\r\n   \"descendantfees\" : n,                 (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\r\n   \"ancestorcount\" : n,                  (numeric) number of in-mempool ancestor transactions (including this one)\r\n   \"ancestorsize\" : n,                   (numeric) virtual transaction size of in-mempool ancestors (including this one)\r\n   \"ancestorfees\" : n,                   (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\r\n   \"wtxid\" : \"hex\",                      (string) hash of serialized transaction, including witness data\r\n   \"fees\" : {                            (json object)\r\n     \"base\" : n,                         (numeric) transaction fee in BTC\r\n     \"modified\" : n,                     (numeric) transaction fee with fee deltas used for mining priority in BTC\r\n     \"ancestor\" : n,                     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC\r\n-    \"descendant\" : n,                   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC\r\n+    \"descendant\" : n                    (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC\r\n   },\r\n   \"depends\" : [                         (json array) unconfirmed transactions used as inputs for this transaction\r\n     \"hex\",                              (string) parent transaction id\r\n     ...\r\n   ],\r\n   \"spentby\" : [                         (json array) unconfirmed transactions spending outputs from this transaction\r\n     \"hex\",                              (string) child transaction id\r\n     ...\r\n   ],\r\n   \"bip125-replaceable\" : true|false,    (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)\r\n   ...\r\n }\r\ndiff --git a/getmempoolinfo b/getmempoolinfo\r\nindex 8cf6000..673f34b 100644\r\n--- a/getmempoolinfo\r\n+++ b/getmempoolinfo\r\n@@ -5,12 +5,12 @@ Returns details on the active state of the TX memory pool.\r\n Result:\r\n {                           (json object)\r\n   \"loaded\" : true|false,    (boolean) True if the mempool is fully loaded\r\n   \"size\" : n,               (numeric) Current tx count\r\n   \"bytes\" : n,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\r\n   \"usage\" : n,              (numeric) Total memory usage for the mempool\r\n   \"maxmempool\" : n,         (numeric) Maximum memory usage for the mempool\r\n   \"mempoolminfee\" : n,      (numeric) Minimum fee rate in BTC/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\r\n-  \"minrelaytxfee\" : n,      (numeric) Current minimum relay fee for transactions\r\n+  \"minrelaytxfee\" : n       (numeric) Current minimum relay fee for transactions\r\n }\r\n \r\n Examples:\r\ndiff --git a/getmininginfo b/getmininginfo\r\nindex 6ba4d2d..9311905 100644\r\n--- a/getmininginfo\r\n+++ b/getmininginfo\r\n@@ -4,13 +4,13 @@ Returns a json object containing mining-related information.\r\n Result:\r\n {                              (json object)\r\n   \"blocks\" : n,                (numeric) The current block\r\n   \"currentblockweight\" : n,    (numeric, optional) The block weight of the last assembled block (only present if a block was ever assembled)\r\n   \"currentblocktx\" : n,        (numeric, optional) The number of block transactions of the last assembled block (only present if a block was ever assembled)\r\n   \"difficulty\" : n,            (numeric) The current difficulty\r\n   \"networkhashps\" : n,         (numeric) The network hashes per second\r\n   \"pooledtx\" : n,              (numeric) The size of the mempool\r\n   \"chain\" : \"str\",             (string) current network name (main, test, regtest)\r\n-  \"warnings\" : \"str\",          (string) any network and blockchain warnings\r\n+  \"warnings\" : \"str\"           (string) any network and blockchain warnings\r\n }\r\n \r\n Examples:\r\ndiff --git a/getnettotals b/getnettotals\r\nindex ca8497c..c7aac0d 100644\r\n--- a/getnettotals\r\n+++ b/getnettotals\r\n@@ -6,16 +6,16 @@ and current time.\r\n Result:\r\n {                                              (json object)\r\n   \"totalbytesrecv\" : n,                        (numeric) Total bytes received\r\n   \"totalbytessent\" : n,                        (numeric) Total bytes sent\r\n   \"timemillis\" : xxx,                          (numeric) Current UNIX time in milliseconds\r\n   \"uploadtarget\" : {                           (json object)\r\n     \"timeframe\" : n,                           (numeric) Length of the measuring timeframe in seconds\r\n     \"target\" : n,                              (numeric) Target in bytes\r\n     \"target_reached\" : true|false,             (boolean) True if target is reached\r\n     \"serve_historical_blocks\" : true|false,    (boolean) True if serving historical blocks\r\n     \"bytes_left_in_cycle\" : n,                 (numeric) Bytes left in current time cycle\r\n-    \"time_left_in_cycle\" : n,                  (numeric) Seconds left in current time cycle\r\n-  },\r\n+    \"time_left_in_cycle\" : n                   (numeric) Seconds left in current time cycle\r\n+  }\r\n }\r\n \r\n Examples:\r\ndiff --git a/getnetworkinfo b/getnetworkinfo\r\nindex 7b3388d..6f0923c 100644\r\n--- a/getnetworkinfo\r\n+++ b/getnetworkinfo\r\n@@ -4,38 +4,38 @@ Returns an object containing various state info regarding P2P networking.\r\n Result:\r\n {                                                    (json object)\r\n   \"version\" : n,                                     (numeric) the server version\r\n   \"subversion\" : \"str\",                              (string) the server subversion string\r\n   \"protocolversion\" : n,                             (numeric) the protocol version\r\n   \"localservices\" : \"hex\",                           (string) the services we offer to the network\r\n   \"localservicesnames\" : [                           (json array) the services we offer to the network, in human-readable form\r\n     \"str\",                                           (string) the service name\r\n     ...\r\n   ],\r\n   \"localrelay\" : true|false,                         (boolean) true if transaction relay is requested from peers\r\n   \"timeoffset\" : n,                                  (numeric) the time offset\r\n   \"connections\" : n,                                 (numeric) the number of connections\r\n   \"networkactive\" : true|false,                      (boolean) whether p2p networking is enabled\r\n   \"networks\" : [                                     (json array) information per network\r\n     {                                                (json object)\r\n       \"name\" : \"str\",                                (string) network (ipv4, ipv6 or onion)\r\n       \"limited\" : true|false,                        (boolean) is the network limited using -onlynet?\r\n       \"reachable\" : true|false,                      (boolean) is the network reachable?\r\n       \"proxy\" : \"str\",                               (string) (\"host:port\") the proxy that is used for this network, or empty if none\r\n-      \"proxy_randomize_credentials\" : true|false,    (boolean) Whether randomized credentials are used\r\n+      \"proxy_randomize_credentials\" : true|false     (boolean) Whether randomized credentials are used\r\n     },\r\n     ...\r\n   ],\r\n   \"relayfee\" : n,                                    (numeric) minimum relay fee for transactions in BTC/kB\r\n   \"incrementalfee\" : n,                              (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in BTC/kB\r\n   \"localaddresses\" : [                               (json array) list of local addresses\r\n     {                                                (json object)\r\n       \"address\" : \"str\",                             (string) network address\r\n       \"port\" : n,                                    (numeric) network port\r\n-      \"score\" : n,                                   (numeric) relative score\r\n+      \"score\" : n                                    (numeric) relative score\r\n     },\r\n     ...\r\n   ],\r\n-  \"warnings\" : \"str\",                                (string) any network and blockchain warnings\r\n+  \"warnings\" : \"str\"                                 (string) any network and blockchain warnings\r\n }\r\n \r\n Examples:\r\ndiff --git a/getnodeaddresses b/getnodeaddresses\r\nindex 621c0c5..817ee0c 100644\r\n--- a/getnodeaddresses\r\n+++ b/getnodeaddresses\r\n@@ -8,10 +8,10 @@ Arguments:\r\n Result:\r\n [                         (json array)\r\n   {                       (json object)\r\n     \"time\" : xxx,         (numeric) The UNIX epoch time of when the node was last seen\r\n     \"services\" : n,       (numeric) The services offered\r\n     \"address\" : \"str\",    (string) The address of the node\r\n-    \"port\" : n,           (numeric) The port of the node\r\n+    \"port\" : n            (numeric) The port of the node\r\n   },\r\n   ...\r\n ]\r\ndiff --git a/getpeerinfo b/getpeerinfo\r\nindex 247f098..a0306af 100644\r\n--- a/getpeerinfo\r\n+++ b/getpeerinfo\r\n@@ -5,52 +5,52 @@ Returns data about each connected network node as a json array of objects.\r\n Result:\r\n [                                  (json array)\r\n   {                                (json object)\r\n     \"id\" : n,                      (numeric) Peer index\r\n     \"addr\" : \"str\",                (string) (host:port) The IP address and port of the peer\r\n     \"addrbind\" : \"str\",            (string) (ip:port) Bind address of the connection to the peer\r\n     \"addrlocal\" : \"str\",           (string) (ip:port) Local address as reported by the peer\r\n     \"mapped_as\" : n,               (numeric) The AS in the BGP route to the peer used for diversifying\r\n                                    peer selection (only available if the asmap config flag is set)\r\n     \"services\" : \"hex\",            (string) The services offered\r\n     \"servicesnames\" : [            (json array) the services offered, in human-readable form\r\n       \"str\",                       (string) the service name if it is recognised\r\n       ...\r\n     ],\r\n     \"relaytxes\" : true|false,      (boolean) Whether peer has asked us to relay transactions to it\r\n     \"lastsend\" : xxx,              (numeric) The UNIX epoch time of the last send\r\n     \"lastrecv\" : xxx,              (numeric) The UNIX epoch time of the last receive\r\n     \"bytessent\" : n,               (numeric) The total bytes sent\r\n     \"bytesrecv\" : n,               (numeric) The total bytes received\r\n     \"conntime\" : xxx,              (numeric) The UNIX epoch time of the connection\r\n     \"timeoffset\" : n,              (numeric) The time offset in seconds\r\n     \"pingtime\" : n,                (numeric) ping time (if available)\r\n     \"minping\" : n,                 (numeric) minimum observed ping time (if any at all)\r\n     \"pingwait\" : n,                (numeric) ping wait (if non-zero)\r\n     \"version\" : n,                 (numeric) The peer version, such as 70001\r\n     \"subver\" : \"str\",              (string) The string version\r\n     \"inbound\" : true|false,        (boolean) Inbound (true) or Outbound (false)\r\n     \"addnode\" : true|false,        (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection\r\n     \"startingheight\" : n,          (numeric) The starting height (block) of the peer\r\n     \"banscore\" : n,                (numeric) The ban score\r\n     \"synced_headers\" : n,          (numeric) The last header we have in common with this peer\r\n     \"synced\r\n```\r\n\r\n</details>",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18444#issuecomment-605518660",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18444"
    },
    {
      "event": "commented",
      "id": 605518791,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTUxODc5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605518791",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-28T20:59:06Z",
      "updated_at": "2020-03-28T20:59:06Z",
      "author_association": "MEMBER",
      "body": "[diff.txt](https://github.com/bitcoin/bitcoin/files/4397881/diff.txt)\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18444#issuecomment-605518791",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18444"
    },
    {
      "event": "referenced",
      "id": 3175468715,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMxNzU0Njg3MTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3175468715",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7e681a5f06f2a061b148da6f76c7e4fbaa4f2cb5",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/7e681a5f06f2a061b148da6f76c7e4fbaa4f2cb5",
      "created_at": "2020-03-29T00:57:04Z"
    },
    {
      "event": "referenced",
      "id": 4201030918,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyMDEwMzA5MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4201030918",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c077bd1fcf594af463bbc198bb85a8a6d7e94152",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/c077bd1fcf594af463bbc198bb85a8a6d7e94152",
      "created_at": "2021-01-13T12:43:32Z"
    },
    {
      "event": "locked",
      "id": 6073770239,
      "node_id": "LOE_lADOABII584jFv0ezwAAAAFqBmD_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6073770239",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T10:28:31Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": []
}