{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
    "id": 238597259,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjM4NTk3MjU5",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14955",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/14955.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/14955.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/223de8d94d6522f795ec3c2e7db27469f24aa68c",
    "number": 14955,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Switch all RNG code to the built-in PRNG",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This does not remove OpenSSL, but makes our own PRNG the 'main' one; for GetStrongRandBytes, the OpenSSL RNG is still used (indirectly, by feeding its output into our PRNG state).\r\n\r\nIt includes a few policy changes (regarding what entropy is seeded when).\r\n\r\nBefore this PR:\r\n* GetRand*:\r\n  * OpenSSL\r\n* GetStrongRand*:\r\n  * CPU cycle counter\r\n  * Perfmon data (on Windows, once 10 min)\r\n  * /dev/urandom (or equivalent)\r\n  * rdrand (if available)\r\n* From scheduler when idle:\r\n  * CPU cycle counter before and after 1ms sleep\r\n* At startup:\r\n  * CPU cycle counter before and after 1ms sleep\r\n\r\nAfter this PR:\r\n* GetRand*:\r\n  * Stack pointer (which indirectly identifies thread and some call stack information)\r\n  * rdrand (if available)\r\n  * CPU cycle counter\r\n* GetStrongRand*:\r\n  * Stack pointer (which indirectly identifies thread and some call stack information)\r\n  * rdrand (if available)\r\n  * CPU cycle counter\r\n  * /dev/urandom (or equivalent)\r\n  * OpenSSL\r\n  * CPU cycle counter again\r\n* From scheduler when idle:\r\n  * Stack pointer (which indirectly identifies thread and some call stack information)\r\n  * rdrand (if available)\r\n  * CPU cycle counter before and after 1ms sleep\r\n  * Perfmon data (on Windows, once every 10 min)\r\n* At startup:\r\n  * Stack pointer (which indirectly identifies thread and some call stack information)\r\n  * rdrand (if available)\r\n  * CPU cycle counter\r\n  * /dev/urandom (or equivalent)\r\n  * OpenSSL\r\n  * CPU cycle counter again\r\n  * Perfmon data (on Windows, once every 10 min)\r\n\r\nThe interface of random.h is also simplified, and documentation is added.\r\n\r\nThis implements most of #14623.",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      },
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2018-12-14T03:02:58Z",
    "updated_at": "2021-12-16T14:50:30Z",
    "closed_at": "2019-01-21T18:47:31Z",
    "mergeable_state": "unknown",
    "merged_at": "2019-01-21T18:47:31Z",
    "merge_commit_sha": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "sipa:201812_generic_rand",
      "ref": "201812_generic_rand",
      "sha": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 1458655,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDU4NjU1",
        "name": "bitcoin",
        "full_name": "sipa/bitcoin",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bitcoin",
        "archive_url": "https://api.github.com/repos/sipa/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sipa/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sipa/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sipa/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sipa/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sipa/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sipa/bitcoin/hooks",
        "svn_url": "https://github.com/sipa/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "TypeScript",
        "forks_count": 20,
        "stargazers_count": 81,
        "watchers_count": 81,
        "size": 215860,
        "default_branch": "lows",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T11:52:48Z",
        "created_at": "2011-03-09T10:46:59Z",
        "updated_at": "2023-04-30T00:52:17Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "fcb6694a9945d2a02f40587e18bd395ef64048e0",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 344,
    "deletions": 185,
    "changed_files": 8,
    "commits": 14,
    "review_comments": 103,
    "comments": 26
  },
  "events": [
    {
      "event": "labeled",
      "id": 2025885783,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIwMjU4ODU3ODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2025885783",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T03:15:05Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "labeled",
      "id": 2025885784,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIwMjU4ODU3ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2025885784",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T03:15:05Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 447210304,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzIxMDMwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447210304",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T04:33:23Z",
      "updated_at": "2018-12-14T04:33:23Z",
      "author_association": "MEMBER",
      "body": "Compile failure on macOS (10.14.2):\r\n```\r\n./autogen.sh\r\n./configure\r\nmake check\r\n\r\n  CXX      libbitcoin_util_a-logging.o\r\n  CXX      libbitcoin_util_a-random.o\r\nrandom.cpp:394:41: error: expected ';' after top level declarator\r\nstatic unsigned char rng_state[32] = {0} GUARDED_BY(cs_rng_state);\r\n                                        ^\r\n                                        ;\r\nrandom.cpp:394:42: warning: declaration does not declare anything [-Wmissing-declarations]\r\nstatic unsigned char rng_state[32] = {0} GUARDED_BY(cs_rng_state);\r\n                                         ^\r\n./threadsafety.h:18:23: note: expanded from macro 'GUARDED_BY'\r\n#define GUARDED_BY(x) __attribute__((guarded_by(x)))\r\n                      ^\r\nrandom.cpp:395:32: error: expected ';' after top level declarator\r\nstatic uint64_t rng_counter = 0 GUARDED_BY(cs_rng_state);\r\n                               ^\r\n                               ;\r\nrandom.cpp:395:33: warning: declaration does not declare anything [-Wmissing-declarations]\r\nstatic uint64_t rng_counter = 0 GUARDED_BY(cs_rng_state);\r\n                                ^\r\n./threadsafety.h:18:23: note: expanded from macro 'GUARDED_BY'\r\n#define GUARDED_BY(x) __attribute__((guarded_by(x)))\r\n                      ^\r\n2 warnings and 2 errors generated.\r\nmake[2]: *** [libbitcoin_util_a-random.o] Error 1\r\nmake[1]: *** [check-recursive] Error 1\r\nmake: *** [check-recursive] Error 1\r\n```",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447210304",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "commented",
      "id": 447223906,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzIyMzkwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447223906",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T06:04:14Z",
      "updated_at": "2018-12-14T06:04:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "Might be desirable to stick the openssl stuff behind a define already,  I expect we'll be able to ship 0.18 without linking bitcoind to openssl. ",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447223906",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2026078359,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjAyNjA3ODM1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2026078359",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T06:24:33Z"
    },
    {
      "event": "commented",
      "id": 447235764,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzIzNTc2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447235764",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T07:08:22Z",
      "updated_at": "2018-12-14T07:08:22Z",
      "author_association": "MEMBER",
      "body": "@fanquake Hopefully fixed.\n\n@gmaxwell There are probably a few entropy sources we want to add first, I think.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447235764",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "mentioned",
      "id": 2026132009,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjAyNjEzMjAwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2026132009",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T07:08:22Z"
    },
    {
      "event": "subscribed",
      "id": 2026132011,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwMjYxMzIwMTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2026132011",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T07:08:22Z"
    },
    {
      "event": "mentioned",
      "id": 2026132016,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjAyNjEzMjAxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2026132016",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T07:08:22Z"
    },
    {
      "event": "subscribed",
      "id": 2026132017,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwMjYxMzIwMTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2026132017",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T07:08:22Z"
    },
    {
      "event": "commented",
      "id": 447242460,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzI0MjQ2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447242460",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T07:44:03Z",
      "updated_at": "2018-12-14T07:44:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa I am eager to add entropy sources!  (but I meant behind a ifdef that is currently on... just since I think you're touching the only remaining callsites)",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447242460",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "mentioned",
      "id": 2026181357,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjAyNjE4MTM1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2026181357",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T07:44:03Z"
    },
    {
      "event": "subscribed",
      "id": 2026181358,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwMjYxODEzNTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2026181358",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T07:44:03Z"
    },
    {
      "event": "commented",
      "id": 447254979,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzI1NDk3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447254979",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T08:39:25Z",
      "updated_at": "2019-01-17T11:05:49Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#13746](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13746.html) (-masterdatadir for datadir bootstrapping by kallewoof)\n* [#13339](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13339.html) (wallet: Replace %w by wallet name in -walletnotify script by promag)\n* [#11082](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/11082.html) (Add new bitcoin_rw.conf file that is used for settings modified by this software itself by luke-jr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447254979",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "reviewed",
      "id": 185096424,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg1MDk2NDI0",
      "url": null,
      "actor": null,
      "commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#pullrequestreview-185096424",
      "submitted_at": "2018-12-14T13:22:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2027536550,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjAyNzUzNjU1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2027536550",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T18:47:00Z"
    },
    {
      "event": "reviewed",
      "id": 185297862,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg1Mjk3ODYy",
      "url": null,
      "actor": null,
      "commit_id": "0af8348738c447f008c60bc1374221acfdc135d9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#pullrequestreview-185297862",
      "submitted_at": "2018-12-14T21:49:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
    },
    {
      "event": "reviewed",
      "id": 185299504,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg1Mjk5NTA0",
      "url": null,
      "actor": null,
      "commit_id": "ff85bace119469709c8c5446abed231cb883b1ee",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#pullrequestreview-185299504",
      "submitted_at": "2018-12-14T21:54:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
    },
    {
      "event": "reviewed",
      "id": 185301179,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg1MzAxMTc5",
      "url": null,
      "actor": null,
      "commit_id": "0af8348738c447f008c60bc1374221acfdc135d9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#pullrequestreview-185301179",
      "submitted_at": "2018-12-14T22:00:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
    },
    {
      "event": "labeled",
      "id": 2031498073,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIwMzE0OTgwNzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2031498073",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-17T22:01:42Z",
      "label": {
        "name": "Needs gitian build",
        "color": "8c9e07"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2031809714,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjAzMTgwOTcxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2031809714",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-18T01:33:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2031811981,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjAzMTgxMTk4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2031811981",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-18T01:34:47Z"
    },
    {
      "event": "commented",
      "id": 448064015,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODA2NDAxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448064015",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-18T01:37:20Z",
      "updated_at": "2018-12-18T01:37:20Z",
      "author_association": "MEMBER",
      "body": "Made a number of improvements, and split the history out into hopefully more self-contained commits.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448064015",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2031926463,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjAzMTkyNjQ2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2031926463",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-18T03:17:18Z"
    },
    {
      "event": "unlabeled",
      "id": 2032515665,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjAzMjUxNTY2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2032515665",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-18T10:01:53Z",
      "label": {
        "name": "Needs gitian build",
        "color": "8c9e07"
      }
    },
    {
      "event": "commented",
      "id": 448208214,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODIwODIxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448208214",
      "actor": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-18T12:43:55Z",
      "updated_at": "2018-12-18T12:46:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "In constructor of CTxMemPool require to call random functions, but the constructor of the mutex has not being called yet. (Maybe it is an undefined behavior or it's a bug of VC++)\r\nhttps://github.com/bitcoin/bitcoin/blob/e7b88ecbc920321290941bc68e4a71634889c3cb/src/validation.cpp#L244\r\n```\r\n \ttest_bitcoin.exe!SeedStartup(CSHA512 & hasher={...}) 第 417 行\tC++\r\n \ttest_bitcoin.exe!ProcRand(unsigned char * out=0x00000031da8febb8, int num=8, RNGLevel level=STARTUP) 第 462 行\tC++\r\n \ttest_bitcoin.exe!GetRandBytes(unsigned char * buf=0x00000031da8febb8, int num=8) 第 476 行\tC++\r\n \ttest_bitcoin.exe!GetRand(unsigned __int64 nMax=18446744073709551615) 第 491 行\tC++\r\n \ttest_bitcoin.exe!SaltedTxidHasher::SaltedTxidHasher() 第 1093 行\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> >::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> >() 第 284 行\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > >::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > >() 第 284 行\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<unsigned __int64,boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > > >::cons<unsigned __int64,boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > > >() 第 284 行\tC++\r\n \ttest_bitcoin.exe!boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>() 第 485 行\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type> > > >::cons<boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type> > > >() 第 284 行\tC++\r\n \ttest_bitcoin.exe!boost::multi_index::multi_index_container<CTxMemPoolEntry,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid,SaltedTxidHasher,boost::mpl::na,boost::mpl::na>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee>,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,std::allocator<CTxMemPoolEntry> >::multi_index_container<CTxMemPoolEntry,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid,SaltedTxidHasher,boost::mpl::na,boost::mpl::na>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee>,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,std::allocator<CTxMemPoolEntry> >() 第 177 行\tC++\r\n \ttest_bitcoin.exe!CTxMemPool::CTxMemPool(CBlockPolicyEstimator * estimator=0x00007ff65afbfe60) 第 328 行\tC++\r\n>\ttest_bitcoin.exe!`dynamic initializer for 'mempool''() 第 244 行\tC++\r\n \ttest_bitcoin.exe!_initterm(void(*)() * first=0x00007ff65a49c000, void(*)() * last=0x00007ff65a49f848) 第 22 行\tC++\r\n \t[外部程式碼]\t\r\n",
      "user": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448208214",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2034221197,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjAzNDIyMTE5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2034221197",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-18T22:00:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2034761737,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjAzNDc2MTczNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2034761737",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-19T05:14:57Z"
    },
    {
      "event": "commented",
      "id": 448479910,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODQ3OTkxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448479910",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-19T06:04:10Z",
      "updated_at": "2018-12-19T06:04:10Z",
      "author_association": "MEMBER",
      "body": "@ken2812221 That was helpful, thanks! I think I've fixed it, but the same error still appears. Can you check what line number it's on now?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448479910",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "mentioned",
      "id": 2034813699,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjAzNDgxMzY5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2034813699",
      "actor": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-19T06:04:10Z"
    },
    {
      "event": "subscribed",
      "id": 2034813700,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwMzQ4MTM3MDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2034813700",
      "actor": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-19T06:04:10Z"
    },
    {
      "event": "commented",
      "id": 448525945,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODUyNTk0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448525945",
      "actor": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-19T09:21:47Z",
      "updated_at": "2018-12-19T09:21:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "```\r\n \ttest_bitcoin.exe!std::_Load_relaxed_4(volatile unsigned long * _Tgt=0x0000000000000074) 第 1338 行\tC++\r\n \ttest_bitcoin.exe!std::_Atomic_load_4(volatile unsigned long * _Tgt=0x0000000000000074, std::memory_order _Order=memory_order_relaxed) 第 1357 行\tC++\r\n \ttest_bitcoin.exe!std::atomic_load_explicit(const std::_Atomic_uint * _Atom=0x0000000000000074, std::memory_order _Order=memory_order_relaxed) 第 495 行\tC++\r\n \ttest_bitcoin.exe!std::_Atomic_uint::load(std::memory_order _Order=memory_order_relaxed) 第 630 行\tC++\r\n \ttest_bitcoin.exe!BCLog::Logger::WillLogCategory(BCLog::LogFlags category=RAND) 第 83 行\tC++\r\n \ttest_bitcoin.exe!LogAcceptCategory(BCLog::LogFlags category=RAND) 第 117 行\tC++\r\n \ttest_bitcoin.exe!LogPrint<char [15],char [19],unsigned long>(const BCLog::LogFlags & category=RAND, const char[15] & <args_0>=..., const char[19] & <args_1>=..., const unsigned long & <args_2>=707688) 第 150 行\tC++\r\n>\ttest_bitcoin.exe!RandAddSeedPerfmon(CSHA512 & hasher={...}) 第 199 行\tC++\r\n \ttest_bitcoin.exe!SeedStartup(CSHA512 & hasher={...}, `anonymous-namespace'::RNGState & rng={...}) 第 456 行\tC++\r\n \ttest_bitcoin.exe!ProcRand(unsigned char * out=0x0000009f8cd8eb78, int num=8, RNGLevel level=FAST) 第 493 行\tC++\r\n \ttest_bitcoin.exe!GetRandBytes(unsigned char * buf=0x0000009f8cd8eb78, int num=8) 第 508 行\tC++\r\n \ttest_bitcoin.exe!GetRand(unsigned __int64 nMax=18446744073709551615) 第 523 行\tC++\r\n \ttest_bitcoin.exe!SaltedTxidHasher::SaltedTxidHasher() 第 1093 行\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> >::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> >() 第 284 行\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > >::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > >() 第 284 行\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<unsigned __int64,boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > > >::cons<unsigned __int64,boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > > >() 第 284 行\tC++\r\n \ttest_bitcoin.exe!boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>() 第 485 行\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type> > > >::cons<boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type> > > >() 第 284 行\tC++\r\n \ttest_bitcoin.exe!boost::multi_index::multi_index_container<CTxMemPoolEntry,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid,SaltedTxidHasher,boost::mpl::na,boost::mpl::na>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee>,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,std::allocator<CTxMemPoolEntry> >::multi_index_container<CTxMemPoolEntry,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid,SaltedTxidHasher,boost::mpl::na,boost::mpl::na>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee>,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,std::allocator<CTxMemPoolEntry> >() 第 177 行\tC++\r\n \ttest_bitcoin.exe!CTxMemPool::CTxMemPool(CBlockPolicyEstimator * estimator=0x00007ff689f81fb0) 第 328 行\tC++\r\n \ttest_bitcoin.exe!`dynamic initializer for 'mempool''() 第 244 行\tC++\r\n \ttest_bitcoin.exe!_initterm(void(*)() * first=0x00007ff68945e000, void(*)() * last=0x00007ff689461830) 第 22 行\tC++\r\n \t[外部程式碼]\t\r\n```\r\ng_logger has not been newed.\r\nhttps://github.com/bitcoin/bitcoin/blob/f080c65a09a8f3b223c9b5d8e3562320bf258fcd/src/logging.cpp#L24",
      "user": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448525945",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "commented",
      "id": 448535124,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODUzNTEyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448535124",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-19T09:51:51Z",
      "updated_at": "2018-12-19T09:51:51Z",
      "author_association": "MEMBER",
      "body": "@ken2812221 Thanks so much; this was an actual bug.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448535124",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "mentioned",
      "id": 2035200568,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjAzNTIwMDU2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2035200568",
      "actor": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-19T09:51:51Z"
    },
    {
      "event": "subscribed",
      "id": 2035200570,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwMzUyMDA1NzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2035200570",
      "actor": {
        "login": "ken2812221",
        "id": 11154118,
        "node_id": "MDQ6VXNlcjExMTU0MTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ken2812221",
        "html_url": "https://github.com/ken2812221",
        "followers_url": "https://api.github.com/users/ken2812221/followers",
        "following_url": "https://api.github.com/users/ken2812221/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ken2812221/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ken2812221/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
        "organizations_url": "https://api.github.com/users/ken2812221/orgs",
        "repos_url": "https://api.github.com/users/ken2812221/repos",
        "events_url": "https://api.github.com/users/ken2812221/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ken2812221/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-19T09:51:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2035201754,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjAzNTIwMTc1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2035201754",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-19T09:52:23Z"
    },
    {
      "event": "comment_deleted",
      "id": 2035372309,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQyMDM1MzcyMzA5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2035372309",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-19T11:05:50Z"
    },
    {
      "event": "comment_deleted",
      "id": 2035806438,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQyMDM1ODA2NDM4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2035806438",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-19T14:25:37Z"
    },
    {
      "event": "commented",
      "id": 448786480,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODc4NjQ4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448786480",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-19T23:25:43Z",
      "updated_at": "2018-12-20T00:34:38Z",
      "author_association": "MEMBER",
      "body": "I've made a few policy changes still:\r\n* Startup no longer includes the benchmark-1ms-sleep test, but still does strengthening.\r\n* The background seeding (called by the scheduler during idle times) no longer sources OpenSSL and /dev/random, as doing so every millisecond seems very much overkill. (it still includes rdrand as that has negligable CPU overhead).\r\n* The seeders are renamed to \"fast\" (called by GetRand*), \"slow\" (called by GetStrongRand*), \"background\" (called by idle scheduler), and \"startup\" (called only once at startup).\r\n\r\nThe global-order-independent initialization now uses a function which stores the RNG state in a local static variable. C++11 guarantees that it is initialized on first call, even if called multiple times simultaneously. I've benchmarked this approach and it's even faster than using `std::call_once` (2ns vs 1.8ns); I believe it's due to this approach using inline code generated by the compiler instead of a library call into pthread.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448786480",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "reviewed",
      "id": 186943436,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg2OTQzNDM2",
      "url": null,
      "actor": null,
      "commit_id": "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#pullrequestreview-186943436",
      "submitted_at": "2018-12-20T10:56:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
    },
    {
      "event": "comment_deleted",
      "id": 2039641461,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQyMDM5NjQxNDYx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2039641461",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-20T23:27:56Z"
    },
    {
      "event": "reviewed",
      "id": 187245945,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg3MjQ1OTQ1",
      "url": null,
      "actor": null,
      "commit_id": "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#pullrequestreview-187245945",
      "submitted_at": "2018-12-21T01:28:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2040389723,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA0MDM4OTcyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2040389723",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-21T09:27:20Z"
    },
    {
      "event": "reviewed",
      "id": 187575485,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg3NTc1NDg1",
      "url": null,
      "actor": null,
      "commit_id": "c2f3b3f4a4b1f1eea806f070dfa41edb52a6cb26",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#pullrequestreview-187575485",
      "submitted_at": "2018-12-22T01:43:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2042611576,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA0MjYxMTU3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2042611576",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-23T21:28:21Z"
    },
    {
      "event": "commented",
      "id": 450685606,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDY4NTYwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450685606",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-31T20:00:06Z",
      "updated_at": "2018-12-31T20:00:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "utACK",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-450685606",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "commented",
      "id": 451219690,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTIxOTY5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451219690",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-03T17:39:58Z",
      "updated_at": "2019-01-03T17:39:58Z",
      "author_association": "MEMBER",
      "body": "Anything I can do to simplify review here? I can move the strengthening loop to a separate PR if that helps.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-451219690",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2054214458,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA1NDIxNDQ1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2054214458",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-04T10:39:28Z"
    },
    {
      "event": "commented",
      "id": 451414412,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTQxNDQxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451414412",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-04T11:00:58Z",
      "updated_at": "2019-01-04T11:00:58Z",
      "author_association": "MEMBER",
      "body": "I've removed the hash strengthening from this PR; I'll open a separate PR for it later.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-451414412",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "commented",
      "id": 451670244,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY3MDI0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451670244",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-05T16:42:43Z",
      "updated_at": "2019-01-09T16:08:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "Bonus points for the removal of `NO_THREAD_SAFETY_ANALYSIS` (for `locking_callback`) and also the various `noexcept` additions.",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-451670244",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "commented",
      "id": 452363804,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjM2MzgwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452363804",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-08T16:33:42Z",
      "updated_at": "2019-01-08T16:33:42Z",
      "author_association": "MEMBER",
      "body": "> Bonus points for the removal of NO_THREAD_SAFETY_ANALYSIS (for locking_callback) and also the various noexcept additions.\r\n\r\nGetting rid of `CInit` is wonderful too :tada:\r\n\r\nutACK 3a82a46eaa1f1c9e55635f8940a2bda7d3d2a817",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452363804",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "commented",
      "id": 452741242,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mjc0MTI0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452741242",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-09T15:40:05Z",
      "updated_at": "2019-01-09T15:40:05Z",
      "author_association": "MEMBER",
      "body": "@sipa when you say it implements \"most of\" the issue, which parts are missing?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452741242",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "mentioned",
      "id": 2063421243,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA2MzQyMTI0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2063421243",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-09T15:40:05Z"
    },
    {
      "event": "subscribed",
      "id": 2063421244,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwNjM0MjEyNDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2063421244",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-09T15:40:05Z"
    },
    {
      "event": "commented",
      "id": 452749504,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mjc0OTUwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452749504",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-09T16:00:55Z",
      "updated_at": "2019-01-09T16:00:55Z",
      "author_association": "MEMBER",
      "body": "@instagibbs There are some potential entropy sources that can still be added (environment data, and a strengthening loop). And of course removing OpenSSL once we have sufficient replacements for all of it.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452749504",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "mentioned",
      "id": 2063484038,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA2MzQ4NDAzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2063484038",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-09T16:00:55Z"
    },
    {
      "event": "subscribed",
      "id": 2063484042,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwNjM0ODQwNDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2063484042",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-09T16:00:55Z"
    },
    {
      "event": "commented",
      "id": 452749817,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mjc0OTgxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452749817",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-09T16:01:42Z",
      "updated_at": "2019-01-09T16:01:42Z",
      "author_association": "MEMBER",
      "body": "\"Abstract out seeding/extracting entropy into RandExtract.\" <--- commit message refers to presumably old name of function",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452749817",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "reviewed",
      "id": 190811506,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkwODExNTA2",
      "url": null,
      "actor": null,
      "commit_id": "0c442f32d8cd48c23867032b0ff6320260e0d806",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK https://github.com/bitcoin/bitcoin/pull/14955/commits/3a82a46eaa1f1c9e55635f8940a2bda7d3d2a817, though I'd like a \"RAND_add\" explanation as noted",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#pullrequestreview-190811506",
      "submitted_at": "2019-01-09T17:00:50Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2063832018,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA2MzgzMjAxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2063832018",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-09T18:19:59Z"
    },
    {
      "event": "commented",
      "id": 452823765,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjgyMzc2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452823765",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-09T19:22:30Z",
      "updated_at": "2019-01-09T19:22:30Z",
      "author_association": "MEMBER",
      "body": "re-utACK https://github.com/bitcoin/bitcoin/pull/14955/commits/b1ee8608f2b1700505e24f09ee141d4608c36078",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452823765",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "added_to_project",
      "id": 2066720731,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQyMDY2NzIwNzMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2066720731",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-10T19:03:56Z",
      "project_card": {
        "id": 16396729,
        "url": "https://api.github.com/projects/columns/cards/16396729",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "commented",
      "id": 453363222,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzM2MzIyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/453363222",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-11T03:20:44Z",
      "updated_at": "2019-01-11T03:20:44Z",
      "author_association": "MEMBER",
      "body": "Added two commits:\n\n* Turn RNGState into a class with private fields (makes it easier to make sure no code can accidentally wipe it or so), suggested by @pstratem on IRC.\n* Allocate the RNGState in the mlocked pool, suggested by @gmaxwell on IRC.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-453363222",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "mentioned",
      "id": 2067559743,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA2NzU1OTc0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2067559743",
      "actor": {
        "login": "pstratem",
        "id": 620611,
        "node_id": "MDQ6VXNlcjYyMDYxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pstratem",
        "html_url": "https://github.com/pstratem",
        "followers_url": "https://api.github.com/users/pstratem/followers",
        "following_url": "https://api.github.com/users/pstratem/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pstratem/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pstratem/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
        "organizations_url": "https://api.github.com/users/pstratem/orgs",
        "repos_url": "https://api.github.com/users/pstratem/repos",
        "events_url": "https://api.github.com/users/pstratem/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pstratem/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-11T03:20:44Z"
    },
    {
      "event": "subscribed",
      "id": 2067559745,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwNjc1NTk3NDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2067559745",
      "actor": {
        "login": "pstratem",
        "id": 620611,
        "node_id": "MDQ6VXNlcjYyMDYxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pstratem",
        "html_url": "https://github.com/pstratem",
        "followers_url": "https://api.github.com/users/pstratem/followers",
        "following_url": "https://api.github.com/users/pstratem/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pstratem/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pstratem/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
        "organizations_url": "https://api.github.com/users/pstratem/orgs",
        "repos_url": "https://api.github.com/users/pstratem/repos",
        "events_url": "https://api.github.com/users/pstratem/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pstratem/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-11T03:20:44Z"
    },
    {
      "event": "mentioned",
      "id": 2067559747,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA2NzU1OTc0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2067559747",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-11T03:20:44Z"
    },
    {
      "event": "subscribed",
      "id": 2067559749,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwNjc1NTk3NDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2067559749",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-11T03:20:45Z"
    },
    {
      "event": "reviewed",
      "id": 191797506,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkxNzk3NTA2",
      "url": null,
      "actor": null,
      "commit_id": "5dfb99059491b1db9133cf0e6b0158ff4bdc9ef0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Mostly reviewed this, but need to finish up last few commits. Two suggestions:\r\n\r\n- It would be good to add information from #14623 and #14955 descriptions to a code comment (or maybe a doc/random.md document) to document the new design. It would be a shame if this PR were merged as-is and all the considerations that went into designing it wound up buried in commit history.\r\n\r\n- There should be a release note about this change. Probably not necessary to go into detail about the design, but it would be good to have a short overall description and call out any changes to user-visible behavior like logging.\r\n\r\nMy review status:\r\n\r\n- [X] 5dfb99059491b1db9133cf0e6b0158ff4bdc9ef0 Use FRC::randbytes instead of reading >32 bytes from RNG (1/13)\r\n- [X] ede7e302d55eb37936268caffcc4b31839e58283 Don't log RandAddSeedPerfmon details (2/13)\r\n- [X] 2ce2c827115748ebea121e6e2abfded260f50ea6 Remove adding timestamps in sanity check to OpenSSL RNG (3/13)\r\n- [X] 2dcb3e938a210b1bbaa178ad6f9a5d418c4e2939 Automatically initialize RNG on first use. (4/13)\r\n- [X] d29f3b967313db206b43c92df93f76cafa0fb843 Add thread safety annotations to RNG state (5/13)\r\n- [X] cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab Abstract out seeding/extracting entropy into RNGState::MixExtract (6/13)\r\n- [ ] 7c82fd09b9e7bdf62f8aa4d4d92acf9865a0476b Switch all RNG code to the built-in PRNG. (7/13)\r\n- [ ] d121e29d26836efaad600d5cfb1fcc884c48d17a Remove hwrand_initialized. (8/13)\r\n- [ ] 5749bfea805a1c37b2122ebc42827d4fef1fc25b Sprinkle some sweet noexcepts over the RNG code (9/13)\r\n- [ ] 214fcf143c3f2cafb8d89c551d5de00b5da6ffa5 Use our own locking instead of using OpenSSL in multithreaded mode (10/13)\r\n- [ ] b1ee8608f2b1700505e24f09ee141d4608c36078 DRY: Implement GetRand using FastRandomContext::randrange (11/13)\r\n- [ ] 0259c0bbdd8cb4dd6d924c78279bb9382fbdc445 Encapsulate RNGState better (12/13)\r\n- [ ] 10a00393aecafe42cef65074f04656f2f05e9d13 Use secure allocator for RNG state (13/13)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#pullrequestreview-191797506",
      "submitted_at": "2019-01-11T20:03:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTU3Y2E5MWRhMjNjNmE1ZDkxMzk5ZmZjN2ZjMDlhOTliNmQ0Yzc2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76",
      "tree": {
        "sha": "67e68099bd1d3705608631c854f027c5ed5c403a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67e68099bd1d3705608631c854f027c5ed5c403a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d71d0d7b7f3f1452ec59c68f9e57f62f60d6dbb3",
          "sha": "d71d0d7b7f3f1452ec59c68f9e57f62f60d6dbb3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d71d0d7b7f3f1452ec59c68f9e57f62f60d6dbb3"
        }
      ],
      "message": "Use FRC::randbytes instead of reading >32 bytes from RNG\n\nThere was only one place in the codebase where we're directly reading >32 bytes from\nthe RNG. One possibility would be to make the built-in RNG support large reads, but\nusing FastRandomContext lets us reuse code better.\n\nThere is no change in behavior here, because the FastRandomContext constructor\nuses GetRandBytes internally.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-13T17:53:47Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-18T01:00:06Z"
      },
      "sha": "6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2070652522,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA3MDY1MjUyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2070652522",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-13T18:19:58Z"
    },
    {
      "event": "commented",
      "id": 453855697,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mzg1NTY5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/453855697",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-13T18:54:26Z",
      "updated_at": "2019-01-13T18:54:26Z",
      "author_association": "MEMBER",
      "body": "@ryanofsky Thanks for the review. I've addressed most of your comments, and added a bunch of comments to random.h. I'll let others comment on the need for adding release notes about it, but my thinking was to only make a note once we fully remove OpenSSL (which may or may not be in the same release).\r\n\r\nI've tried to not interfere with existing review too much by keeping the commit order and not rebased, but if desired by reviewers I can probably split up the big \"Switch all RNG code to the built-in PRNG.\" commit.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-453855697",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "mentioned",
      "id": 2070665833,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA3MDY2NTgzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2070665833",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-13T18:54:27Z"
    },
    {
      "event": "subscribed",
      "id": 2070665835,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwNzA2NjU4MzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2070665835",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-13T18:54:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2070667640,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA3MDY2NzY0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2070667640",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-13T18:58:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2070669422,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA3MDY2OTQyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2070669422",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-13T19:03:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2070739031,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA3MDczOTAzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2070739031",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-13T21:58:53Z"
    },
    {
      "event": "commented",
      "id": 454012249,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDAxMjI0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/454012249",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-14T13:55:16Z",
      "updated_at": "2019-01-14T14:05:55Z",
      "author_association": "MEMBER",
      "body": "> I'll let others comment on the need for adding release notes about it, but my thinking was to only make a note once we fully remove OpenSSL (which may or may not be in the same release).\r\n\r\nIMO, a release note is unnecessary for this (apart from the automatically-generated changelog line). It is an internal change, there are hardly or no user-visible changes, the user doesn't need to *do* anything like change the configuration.\r\nWarning sort of \"the random number generator changed, be careful\" would be bad signaling (better not upgrade at all then?), we need to be **really** sure that this is safe before merging.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-454012249",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "reviewed",
      "id": 192357622,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyMzU3NjIy",
      "url": null,
      "actor": null,
      "commit_id": "d76cc6dbb9e1c5c6a0f3b002932ba4033b722255",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 76831bf79bb453dc00bc8f5a94a784581e1212d3. Changes since last review: dropped SanityCheck cleanup commit 2ce2c827115748ebea121e6e2abfded260f50ea6, added documentation commit 76831bf79bb453dc00bc8f5a94a784581e1212d3, made various suggested changes in other commits.\r\n\r\n- [X] 6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76 Use FRC::randbytes instead of reading >32 bytes from RNG (1/13)\r\n- [X] 1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a Don't log RandAddSeedPerfmon details (2/13)\r\n- [X] 2a02d2c369ee06cbc334a0dd7150ec72ef83a182 Automatically initialize RNG on first use. (3/13)\r\n- [X] 9a4aae5427a3a71298413b9348073512dbb43056 Add thread safety annotations to RNG state (4/13)\r\n- [X] d76cc6dbb9e1c5c6a0f3b002932ba4033b722255 Abstract out seeding/extracting entropy into RNGState::MixExtract (5/13)\r\n- [X] 85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4 Switch all RNG code to the built-in PRNG. (6/13)\r\n- [X] 604ae2bb9789a213711f5f53e0c74225e74bb085 Remove hwrand_initialized. (7/13)\r\n- [X] 6ff775ff80b090494d115753ddcf488a3cf923a9 Sprinkle some sweet noexcepts over the RNG code (8/13)\r\n- [X] fa2eabe154d00bf6c54f604acbe758186d044639 Use our own locking instead of using OpenSSL in multithreaded mode (9/13)\r\n- [X] d8972a68a63a2dddd910d340b8ff05b81fd877bc DRY: Implement GetRand using FastRandomContext::randrange (10/13)\r\n- [X] 7939daa351a31a36f2086771611b501418536989 Encapsulate RNGState better (11/13)\r\n- [X] 9505dc55c4fcaa61d0fc97558dd22c7fdb879900 Use secure allocator for RNG state (12/13)\r\n- [x] 76831bf79bb453dc00bc8f5a94a784581e1212d3 Document RNG design in random.h (13/13)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#pullrequestreview-192357622",
      "submitted_at": "2019-01-14T22:09:55Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2076173650,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA3NjE3MzY1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2076173650",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-16T00:56:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2076327979,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA3NjMyNzk3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2076327979",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-16T03:04:05Z"
    },
    {
      "event": "reviewed",
      "id": 193025955,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkzMDI1OTU1",
      "url": null,
      "actor": null,
      "commit_id": "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "tACK 3b001b0 on macOS 10.14.2\r\n\r\nDespite the volume of my comments, they're all about additional clarification, which can always be done later (though I think they'll be helpful for other reviewers).\r\n\r\nThis new code is more readable than before, which is very nice for something as critical as RNG stuff. The breakdown into smaller commits is really helpful.\r\n\r\nThis needs testing on Windows, e.g. because there's `#ifdef WIN32` stuff.\r\n\r\nChecking the benchmarks would also be useful (IIRC there's a bot for that).\r\n\r\n* 6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76 \"There was only one place in the codebase where we're directly reading >32 bytes from the RNG\": what happens in that case? If bad, maybe add an assert or comment in `GenerateAuthCookie` that `const size_t COOKIE_SIZE = 32;` shouldn't be increased.\r\n\r\n* 1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a the usage of `RandAddSeedPerfmon` is a bit weird\r\n\r\nIt's called by all operating systems, but its entire content is wrapped in `#ifdef WIN32`. On top of that, it can now fail without complaining (because it's non-critical). If `static bool warned` is hard to deal with, why not give the function a return value?  Maybe move both the `ifdef` and failure handling to the caller of this function (with or without the log statement). Both callers already know this is a Windows only thing, as evidenced by their comments.\r\n\r\n* 2a02d2c369ee06cbc334a0dd7150ec72ef83a182 I got confused by the names  `HWRandInit` and `HWRandReport`, so suggested alternative names inline.\r\n\r\n* 772fce745c51aa9d09f93e13eeb822e889ae25f7  OpenSSL [docs](https://www.openssl.org/docs/man1.0.2/crypto/threads.html) say \"OpenSSL can generally be used safely in multi-threaded applications provided that at least two callback functions are set, the locking_function and threadid_func\", but we're not using the latter. Do we meet the conditions stated further down the doc for when that's safe?\r\n\r\n* b83c06a622652853238f3c35b9303194eafec1c1 what benefits do you expect from the `noexcept` sprinkling? Safety, readability or performance? What's the worst case scenario if you're wrong about any of them?\r\n\r\n* 63dc0adf7c98b20eb9ca590c97547b9681d2b48c previously we only used `secure_allocator` in `CKey` and (wallet) `CCrypter`. Not sure if it matters at all to expand its usage, but I don't pretent to even remotely understand the existing magic in `secure_allocator` (written by @theuni four years ago).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#pullrequestreview-193025955",
      "submitted_at": "2019-01-16T13:18:30Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
    },
    {
      "event": "commented",
      "id": 454884964,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDg4NDk2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/454884964",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-16T18:19:58Z",
      "updated_at": "2019-01-16T18:19:58Z",
      "author_association": "MEMBER",
      "body": "> 6a57ca9 \"There was only one place in the codebase where we're directly reading >32 bytes from the RNG\": what happens in that case? If bad, maybe add an assert or comment in GenerateAuthCookie that const size_t COOKIE_SIZE = 32; shouldn't be increased.\r\n\r\nThere already is an assert: `assert(num <= 32);` in `ProcRand()`.\r\n\r\n> 1a3b26e the usage of RandAddSeedPerfmon is a bit weird. It's called by all operating systems, but its entire content is wrapped in #ifdef WIN32. On top of that, it can now fail without complaining (because it's non-critical). If static bool warned is hard to deal with, why not give the function a return value? Maybe move both the ifdef and failure handling to the caller of this function (with or without the log statement). Both callers already know this is a Windows only thing, as evidenced by their comments.\r\n\r\nAs I've pointed out before, we may want to add similar perfmon data for other platforms.\r\n\r\n> 772fce7 OpenSSL docs say \"OpenSSL can generally be used safely in multi-threaded applications provided that at least two callback functions are set, the locking_function and threadid_func\", but we're not using the latter. Do we meet the conditions stated further down the doc for when that's safe?\r\n\r\nThe docs also point out that on systems with thread-safe errno, its address is used as thread identifier. I believe that's the case on all supported platforms.\r\n\r\n> b83c06a what benefits do you expect from the noexcept sprinkling? Safety, readability or performance? What's the worst case scenario if you're wrong about any of them?\r\n\r\nMaking the function's behavior more explicit to developers, and performance. The worst case about being wrong about them is that certain optimizations can't be used (for example, when a constructor can directly or indirectly throw, more complicated deconstructors are needed; or when a move operator can throw it can't be used for efficiently moving data between containers and necessitating a copy/delete instead).\r\n\r\n> 63dc0ad previously we only used secure_allocator in CKey and (wallet) CCrypter. Not sure if it matters at all to expand its usage, but I don't pretent to even remotely understand the existing magic in secure_allocator\r\n\r\nIt shouldn't. It's the right tool for the job (preventing sensitive material from leaking into swap files), so I don't see why we shouldn't use it.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-454884964",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "reviewed",
      "id": 193362488,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkzMzYyNDg4",
      "url": null,
      "actor": null,
      "commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 3b001b09e840c04b06c0ec6689ed666d68e58cb1. Changes since last review: moving openssl init/locking code instead of removing it, adding commit comments about openssl seeding and function renames, adding code comment about noexcept.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#pullrequestreview-193362488",
      "submitted_at": "2019-01-16T22:05:03Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDFjYzUwOTM5NDlmOGVhOTQ4N2E2ODcyNDE2MmM4YjM5MDM1YWQ4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d1cc5093949f8ea9487a68724162c8b39035ad8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2d1cc5093949f8ea9487a68724162c8b39035ad8",
      "tree": {
        "sha": "d51c54e8f9dfd05b4c81ae51a8fffd82cfe53c47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d51c54e8f9dfd05b4c81ae51a8fffd82cfe53c47"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76",
          "sha": "6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76"
        }
      ],
      "message": "Don't log RandAddSeedPerfmon details\n\nThese are hard to deal with, as in a follow-up this function can get\ncalled before the logging infrastructure is initialized.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-16T23:08:03Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-19T09:50:36Z"
      },
      "sha": "2d1cc5093949f8ea9487a68724162c8b39035ad8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWZkZTE0ZTNhZmU2ZjcxNTZlYmI2ZGY2Y2QwZTNhZTEyNjM1Yjg5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
      "tree": {
        "sha": "cd906acda4ca6c7233b9d4776e1fc129c6dbdfed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd906acda4ca6c7233b9d4776e1fc129c6dbdfed"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d1cc5093949f8ea9487a68724162c8b39035ad8",
          "sha": "2d1cc5093949f8ea9487a68724162c8b39035ad8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2d1cc5093949f8ea9487a68724162c8b39035ad8"
        }
      ],
      "message": "Automatically initialize RNG on first use.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-16T23:46:27Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-18T00:48:21Z"
      },
      "sha": "05fde14e3afe6f7156ebb6df6cd0e3ae12635b89"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2Y1NGQxYzgyYjEzMWQ4MTdiMjBjZDlkYWE3NWY5ZDNjOTQ3NWUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3f54d1c82b131d817b20cd9daa75f9d3c9475e1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f54d1c82b131d817b20cd9daa75f9d3c9475e1",
      "tree": {
        "sha": "06cc865fcc9c9dcb678a8e5a36f5be275209782e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06cc865fcc9c9dcb678a8e5a36f5be275209782e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
          "sha": "05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89"
        }
      ],
      "message": "Rename some hardware RNG related functions",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-16T23:46:31Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-16T23:15:21Z"
      },
      "sha": "d3f54d1c82b131d817b20cd9daa75f9d3c9475e1"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2078889856,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA3ODg4OTg1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2078889856",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-17T00:00:15Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWU4YjliZjBmNGZkMmI4MDFlZTcyY2YxOTE1ODhjOGIzYTY3YzNj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c",
      "tree": {
        "sha": "acf20ab38f866d16f4287a4220e3588c936d1c99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acf20ab38f866d16f4287a4220e3588c936d1c99"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3f54d1c82b131d817b20cd9daa75f9d3c9475e1",
          "sha": "d3f54d1c82b131d817b20cd9daa75f9d3c9475e1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f54d1c82b131d817b20cd9daa75f9d3c9475e1"
        }
      ],
      "message": "Add thread safety annotations to RNG state",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:31:34Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-18T01:03:30Z"
      },
      "sha": "aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2NjM2QzYWEzNDZlOTYyMDYyODFhMzkxYmMyOTg3NGNmNWVlN2Y0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ccc3d3aa346e96206281a391bc29874cf5ee7f4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2ccc3d3aa346e96206281a391bc29874cf5ee7f4",
      "tree": {
        "sha": "9c32dd35ce9134f4268855545ead5714b1a7813f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c32dd35ce9134f4268855545ead5714b1a7813f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c",
          "sha": "aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c"
        }
      ],
      "message": "Abstract out seeding/extracting entropy into RNGState::MixExtract",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:31:37Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-18T00:04:35Z"
      },
      "sha": "2ccc3d3aa346e96206281a391bc29874cf5ee7f4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmU0MGE4YjU2MmFkODQ5YTVmNWU4YjIxY2ViMzc1ZTQ2MDM4MjQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16e40a8b562ad849a5f5e8b21ceb375e46038243",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/16e40a8b562ad849a5f5e8b21ceb375e46038243",
      "tree": {
        "sha": "82f3ecf3b995e3e00eafffd94773038606890404",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82f3ecf3b995e3e00eafffd94773038606890404"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ccc3d3aa346e96206281a391bc29874cf5ee7f4",
          "sha": "2ccc3d3aa346e96206281a391bc29874cf5ee7f4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2ccc3d3aa346e96206281a391bc29874cf5ee7f4"
        }
      ],
      "message": "Integrate util/system's CInit into RNGState\n\nThis guarantees that OpenSSL is initialized properly whenever randomness\nis used, even when that randomness is invoked from global constructors.\n\nNote that this patch uses Mutex directly, rather than CCriticalSection.\nThis is because the lock-detection code is not necessarily initialized\nduring global constructors.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:33:08Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-16T00:03:54Z"
      },
      "sha": "16e40a8b562ad849a5f5e8b21ceb375e46038243"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDcwMzJlNGYwNjY3NzdjOTdjNThiMTM5NDg4NDcxNmUyMTM3OTBh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d7032e4f066777c97c58b1394884716e213790a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9d7032e4f066777c97c58b1394884716e213790a",
      "tree": {
        "sha": "16a2de523fc29912c6f6e37d63795b46b6234a97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16a2de523fc29912c6f6e37d63795b46b6234a97"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16e40a8b562ad849a5f5e8b21ceb375e46038243",
          "sha": "16e40a8b562ad849a5f5e8b21ceb375e46038243",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/16e40a8b562ad849a5f5e8b21ceb375e46038243"
        }
      ],
      "message": "Switch all RNG code to the built-in PRNG.\n\nIt includes the following policy changes:\n* All GetRand* functions seed the stack pointer and rdrand result\n  (in addition to the performance counter)\n* The periodic entropy added by the idle scheduler now seeds stack pointer,\n  rdrand and perfmon data (once every 10 minutes) in addition to\n  just a sleep timing.\n* The entropy added when calling GetStrongRandBytes no longer includes\n  the once-per-10-minutes perfmon data on windows (it is moved to the\n  idle scheduler instead, where latency matters less).\n\nOther changes:\n* OpenSSL is no longer seeded directly anywhere. Instead, any generated\n  randomness through our own RNG is fed back to OpenSSL (after an\n  additional hashing step to prevent leaking our RNG state).\n* Seeding that was previously done directly in RandAddSeedSleep is now\n  moved to SeedSleep(), which is indirectly invoked through ProcRand\n  from RandAddSeedSleep.\n* Seeding that was previously done directly in GetStrongRandBytes()\n  is now moved to SeedSlow(), which is indirectly invoked through\n  ProcRand from GetStrongRandBytes().",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:34:56Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-14T02:37:29Z"
      },
      "sha": "9d7032e4f066777c97c58b1394884716e213790a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWE4ZTUwODM3YTA5MzJiMzFhMjQxOTg4ZmQ2OGQ2NzMwYTIwNDhh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ea8e50837a0932b31a241988fd68d6730a2048a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4ea8e50837a0932b31a241988fd68d6730a2048a",
      "tree": {
        "sha": "03c43d9e325c5ce2bba307bc096c1626586121a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03c43d9e325c5ce2bba307bc096c1626586121a2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d7032e4f066777c97c58b1394884716e213790a",
          "sha": "9d7032e4f066777c97c58b1394884716e213790a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9d7032e4f066777c97c58b1394884716e213790a"
        }
      ],
      "message": "Remove hwrand_initialized.\n\n All access to hwrand is now gated by GetRNGState, which initializes the hwrand code.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:34:56Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-18T00:22:22Z"
      },
      "sha": "4ea8e50837a0932b31a241988fd68d6730a2048a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWYyNTJlZGE4NzM1NmZhMzI5YzgzOGE3YmY1Njk4MDg0ODk2NDhm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1f252eda87356fa329c838a7bf569808489648f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a1f252eda87356fa329c838a7bf569808489648f",
      "tree": {
        "sha": "0acb8aa71ee5c1a119cdc75b791d6542d7af0d8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0acb8aa71ee5c1a119cdc75b791d6542d7af0d8b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ea8e50837a0932b31a241988fd68d6730a2048a",
          "sha": "4ea8e50837a0932b31a241988fd68d6730a2048a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4ea8e50837a0932b31a241988fd68d6730a2048a"
        }
      ],
      "message": "Sprinkle some sweet noexcepts over the RNG code",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:34:56Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-17T23:11:33Z"
      },
      "sha": "a1f252eda87356fa329c838a7bf569808489648f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTIxNDZlNzgyZDQwMWFhMWNlN2Q5ODlkNjIzMDZhYWJjODVmMjJl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/152146e782d401aa1ce7d989d62306aabc85f22e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/152146e782d401aa1ce7d989d62306aabc85f22e",
      "tree": {
        "sha": "d53ba894771ed716950149e0d5559e0f2d7d2ecd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d53ba894771ed716950149e0d5559e0f2d7d2ecd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1f252eda87356fa329c838a7bf569808489648f",
          "sha": "a1f252eda87356fa329c838a7bf569808489648f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a1f252eda87356fa329c838a7bf569808489648f"
        }
      ],
      "message": "DRY: Implement GetRand using FastRandomContext::randrange",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:34:57Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-04T10:00:44Z"
      },
      "sha": "152146e782d401aa1ce7d989d62306aabc85f22e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGRiMzFiYjBhMTMyYWZhNTBiNTM1MDE5NmNmMjZmMDA2NGZlM2Uy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cddb31bb0a132afa50b5350196cf26f0064fe3e2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cddb31bb0a132afa50b5350196cf26f0064fe3e2",
      "tree": {
        "sha": "216523d5bfa9047b8955396fa056876b0d0762ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/216523d5bfa9047b8955396fa056876b0d0762ac"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/152146e782d401aa1ce7d989d62306aabc85f22e",
          "sha": "152146e782d401aa1ce7d989d62306aabc85f22e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/152146e782d401aa1ce7d989d62306aabc85f22e"
        }
      ],
      "message": "Encapsulate RNGState better",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:34:57Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-11T02:19:50Z"
      },
      "sha": "cddb31bb0a132afa50b5350196cf26f0064fe3e2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmU2MGNhOTg1MzBlMGE4NjVmZjZjNmZkM2M1NjMzYWVjMTFhNTE1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2e60ca98530e0a865ff6c6fd3c5633aec11a515",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f2e60ca98530e0a865ff6c6fd3c5633aec11a515",
      "tree": {
        "sha": "dbed713723856c2e75ebcb08b6287fad7cdf04d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbed713723856c2e75ebcb08b6287fad7cdf04d2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cddb31bb0a132afa50b5350196cf26f0064fe3e2",
          "sha": "cddb31bb0a132afa50b5350196cf26f0064fe3e2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cddb31bb0a132afa50b5350196cf26f0064fe3e2"
        }
      ],
      "message": "Use secure allocator for RNG state",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:34:57Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-11T02:34:17Z"
      },
      "sha": "f2e60ca98530e0a865ff6c6fd3c5633aec11a515"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjNkZThkOTRkNjUyMmY3OTVlYzNjMmU3ZGIyNzQ2OWYyNGFhNjhj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "tree": {
        "sha": "60448895cf16e6ea5fef6dba41253bcc06208a9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60448895cf16e6ea5fef6dba41253bcc06208a9a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2e60ca98530e0a865ff6c6fd3c5633aec11a515",
          "sha": "f2e60ca98530e0a865ff6c6fd3c5633aec11a515",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f2e60ca98530e0a865ff6c6fd3c5633aec11a515"
        }
      ],
      "message": "Document RNG design in random.h",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:35:54Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-13T18:51:17Z"
      },
      "sha": "223de8d94d6522f795ec3c2e7db27469f24aa68c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2078944927,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA3ODk0NDkyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2078944927",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-17T00:36:16Z"
    },
    {
      "event": "commented",
      "id": 455151917,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTE1MTkxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/455151917",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-17T12:16:24Z",
      "updated_at": "2019-01-17T12:16:24Z",
      "author_association": "MEMBER",
      "body": "Wonderful, re-tACK 223de8d",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-455151917",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "commented",
      "id": 455291623,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTI5MTYyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/455291623",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-17T19:05:25Z",
      "updated_at": "2019-01-17T19:05:25Z",
      "author_association": "MEMBER",
      "body": "FWIW, I've benchmarked this before and after this PR on my system. GetRandBytes goes from around ~1 μs to ~3 μs. GetStrongRandBytes stays around ~10 μs. Note that GetRandBytes is no longer called inside tight loops since #14624.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-455291623",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14955"
    },
    {
      "event": "reviewed",
      "id": 194216647,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk0MjE2NjQ3",
      "url": null,
      "actor": null,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 223de8d94d6522f795ec3c2e7db27469f24aa68c. All changes since last review are renames or comment improvements.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#pullrequestreview-194216647",
      "submitted_at": "2019-01-18T18:04:17Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
    },
    {
      "event": "merged",
      "id": 2087107228,
      "node_id": "MDExOk1lcmdlZEV2ZW50MjA4NzEwNzIyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2087107228",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at": "2019-01-21T18:47:31Z"
    },
    {
      "event": "closed",
      "id": 2087107229,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjA4NzEwNzIyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2087107229",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-21T18:47:31Z"
    },
    {
      "event": "referenced",
      "id": 2087107433,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIwODcxMDc0MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2087107433",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6e6b3b944d12a252a0fd9a1d68fec9843dd5b4f8",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e6b3b944d12a252a0fd9a1d68fec9843dd5b4f8",
      "created_at": "2019-01-21T18:47:39Z"
    },
    {
      "event": "removed_from_project",
      "id": 2087452649,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50MjA4NzQ1MjY0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2087452649",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-21T22:49:49Z",
      "project_card": {
        "id": 16396729,
        "url": "https://api.github.com/projects/columns/cards/16396729",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 4596237253,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1OTYyMzcyNTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4596237253",
      "actor": {
        "login": "random-zebra",
        "id": 18186894,
        "node_id": "MDQ6VXNlcjE4MTg2ODk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18186894?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/random-zebra",
        "html_url": "https://github.com/random-zebra",
        "followers_url": "https://api.github.com/users/random-zebra/followers",
        "following_url": "https://api.github.com/users/random-zebra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/random-zebra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/random-zebra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/random-zebra/subscriptions",
        "organizations_url": "https://api.github.com/users/random-zebra/orgs",
        "repos_url": "https://api.github.com/users/random-zebra/repos",
        "events_url": "https://api.github.com/users/random-zebra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/random-zebra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "93f43f0f81f06ba017db8378fe1bbbfec01f7d1f",
      "commit_url": "https://api.github.com/repos/PIVX-Project/PIVX/commits/93f43f0f81f06ba017db8378fe1bbbfec01f7d1f",
      "created_at": "2021-04-14T23:12:20Z"
    },
    {
      "event": "referenced",
      "id": 5286734492,
      "node_id": "REFE_lADOABII584XTWDTzwAAAAE7HSqc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5286734492",
      "actor": {
        "login": "dzutto",
        "id": 88999501,
        "node_id": "MDQ6VXNlcjg4OTk5NTAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/88999501?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dzutto",
        "html_url": "https://github.com/dzutto",
        "followers_url": "https://api.github.com/users/dzutto/followers",
        "following_url": "https://api.github.com/users/dzutto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dzutto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dzutto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dzutto/subscriptions",
        "organizations_url": "https://api.github.com/users/dzutto/orgs",
        "repos_url": "https://api.github.com/users/dzutto/repos",
        "events_url": "https://api.github.com/users/dzutto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dzutto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4cbecd4510a62910519725aee8633d8b0166546e",
      "commit_url": "https://api.github.com/repos/dzutto/dash/commits/4cbecd4510a62910519725aee8633d8b0166546e",
      "created_at": "2021-09-10T22:09:28Z"
    },
    {
      "event": "referenced",
      "id": 5288036768,
      "node_id": "REFE_lADOABII584XTWDTzwAAAAE7MQmg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5288036768",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "be79070f605c562ebdefb101649e658490deca47",
      "commit_url": "https://api.github.com/repos/dashpay/dash/commits/be79070f605c562ebdefb101649e658490deca47",
      "created_at": "2021-09-11T20:52:39Z"
    },
    {
      "event": "locked",
      "id": 5778890614,
      "node_id": "LOE_lADOABII584XTWDTzwAAAAFYct92",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778890614",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T14:50:30Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745482",
      "pull_request_review_id": 185096424,
      "id": 241745482,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NTQ4Mg==",
      "diff_hunk": "@@ -129,18 +135,41 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n-void RandAddSeed()\n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n {\n-    // Seed with CPU performance counter\n-    int64_t nCounter = GetPerformanceCounter();\n-    RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();\n+        hasher.Write((const unsigned char*)&perf, sizeof(perf));\n+    } while (GetTimeMicros() < start + microseconds);\n+    // Write resulting strengthened hash into output hasher\n+    local_hasher.Finalize(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // Best effort clean up\n+    memory_cleanse(buffer, sizeof(buffer));\n+    local_hasher.Reset();\n }\n \n-static void RandAddSeedPerfmon()\n+static void RandAddSeedPerfmon(CSHA512& hasher)",
      "path": "src/random.cpp",
      "position": 78,
      "original_position": 84,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Surround `RandAddSeedPerfmon(CSHA512& hasher)` with `#ifdef WIN32`?",
      "created_at": "2018-12-14T12:54:51Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745482",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745648",
      "pull_request_review_id": 185096424,
      "id": 241745648,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NTY0OA==",
      "diff_hunk": "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);",
      "path": "src/random.cpp",
      "position": 333,
      "original_position": 195,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`#ifdef WIN32` for this call?",
      "created_at": "2018-12-14T12:55:30Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 454,
      "original_line": 454,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745852",
      "pull_request_review_id": 185096424,
      "id": 241745852,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NTg1Mg==",
      "diff_hunk": "@@ -345,12 +440,26 @@ void GetStrongRandBytes(unsigned char* out, int num)\n         hasher.Finalize(buf);\n         memcpy(rng_state, buf + 32, 32);\n     }\n+    if (num > 0) {\n+        memcpy(out, buf, num);\n+    }\n \n-    // Produce output\n-    memcpy(out, buf, num);\n-    memory_cleanse(buf, 64);\n+    // For anything but the 'fast' level, feed the resulting state (after an additional hashing step) back into OpenSSL.\n+    if (level != RNGLevel::FAST) {\n+        CSHA512().Write(buf, sizeof(buf)).Finalize(buf);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_add(buf, sizeof(buf), 64);\n+    }\n+\n+    // Best effort clean up of randomness data on the stack.\n+    memory_cleanse(buf, sizeof(buf));\n+    hasher.Reset();\n }\n \n+void GetRandBytes(unsigned char* out, int num) { ProcRand(out, num, RNGLevel::FAST); }",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Make sure definition and declaration parameter names match.",
      "created_at": "2018-12-14T12:56:23Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745852",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746192",
      "pull_request_review_id": 185096424,
      "id": 241746192,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NjE5Mg==",
      "diff_hunk": "@@ -448,10 +557,6 @@ bool Random_SanityCheck()\n     uint64_t stop = GetPerformanceCounter();\n     if (stop == start) return false;\n \n-    // We called GetPerformanceCounter. Use it as entropy.\n-    RAND_add((const unsigned char*)&start, sizeof(start), 1);\n-    RAND_add((const unsigned char*)&stop, sizeof(stop), 1);\n-\n     return true;",
      "path": "src/random.cpp",
      "position": 469,
      "original_position": 320,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Change to `return stop != start;`?",
      "created_at": "2018-12-14T12:57:53Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746192",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746569",
      "pull_request_review_id": 185096424,
      "id": 241746569,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NjU2OQ==",
      "diff_hunk": "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static int64_t last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);\n+        hasher.Write(buffer, 32);\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_screen();\n     }\n-    memory_cleanse(buf, 64);\n+#endif\n+\n+    // Everything that the 'fast', 'medium', and 'slow' seeders include.\n+    SeedSlow(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static std::once_flag g_rng_initialized;\n+static Mutex cs_rng_state;\n+static unsigned char rng_state[32] GUARDED_BY(cs_rng_state) = {0};\n+static uint64_t rng_counter GUARDED_BY(cs_rng_state) = 0;\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    MEDIUM, //!< Automatically called by GetStrongRandBytes\n+    SLOW, //!< Called by RandSeed() and at startup\n+    STARTUP, //!< Called only at startup.\n+};\n+\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)",
      "path": "src/random.cpp",
      "position": 358,
      "original_position": 238,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~~`ProcRand(…)` doesn't throw – candidate for `noexcept`?~~",
      "created_at": "2018-12-14T12:59:24Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746569",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 476,
      "original_line": 476,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746664",
      "pull_request_review_id": 185096424,
      "id": 241746664,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NjY2NA==",
      "diff_hunk": "@@ -13,33 +13,45 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n-\n /**\n- * Functions to gather random data via the OpenSSL PRNG\n+ * Generate random data via the internal PRNG.\n+ *\n+ * These functions are designed to be fast (sub microsecond), but do not necessarily\n+ * meaninfully add entropy to the PRNG state.",
      "path": "src/random.h",
      "position": null,
      "original_position": 12,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be \"meaningfully\" :-)",
      "created_at": "2018-12-14T12:59:45Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858285",
      "pull_request_review_id": 185243981,
      "id": 241858285,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTg1ODI4NQ==",
      "diff_hunk": "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);",
      "path": "src/random.cpp",
      "position": 333,
      "original_position": 195,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "in_reply_to_id": 241745648,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need for. Perhaps we'll extend the function to do something useful on other platforms too.",
      "created_at": "2018-12-14T19:05:48Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858285",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 454,
      "original_line": 454,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858449",
      "pull_request_review_id": 185244208,
      "id": 241858449,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTg1ODQ0OQ==",
      "diff_hunk": "@@ -129,18 +135,41 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n-void RandAddSeed()\n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n {\n-    // Seed with CPU performance counter\n-    int64_t nCounter = GetPerformanceCounter();\n-    RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();\n+        hasher.Write((const unsigned char*)&perf, sizeof(perf));\n+    } while (GetTimeMicros() < start + microseconds);\n+    // Write resulting strengthened hash into output hasher\n+    local_hasher.Finalize(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // Best effort clean up\n+    memory_cleanse(buffer, sizeof(buffer));\n+    local_hasher.Reset();\n }\n \n-static void RandAddSeedPerfmon()\n+static void RandAddSeedPerfmon(CSHA512& hasher)",
      "path": "src/random.cpp",
      "position": 78,
      "original_position": 84,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "in_reply_to_id": 241745482,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd rather not. Limiting the ifdefs to just one place is preferable imo.",
      "created_at": "2018-12-14T19:06:25Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858449",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858504",
      "pull_request_review_id": 185244261,
      "id": 241858504,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTg1ODUwNA==",
      "diff_hunk": "@@ -448,10 +557,6 @@ bool Random_SanityCheck()\n     uint64_t stop = GetPerformanceCounter();\n     if (stop == start) return false;\n \n-    // We called GetPerformanceCounter. Use it as entropy.\n-    RAND_add((const unsigned char*)&start, sizeof(start), 1);\n-    RAND_add((const unsigned char*)&stop, sizeof(stop), 1);\n-\n     return true;",
      "path": "src/random.cpp",
      "position": 469,
      "original_position": 320,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "in_reply_to_id": 241746192,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not touching this code.",
      "created_at": "2018-12-14T19:06:35Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858504",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241901024",
      "pull_request_review_id": 185297862,
      "id": 241901024,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTkwMTAyNA==",
      "diff_hunk": "@@ -135,6 +135,39 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n+{\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "0af8348738c447f008c60bc1374221acfdc135d9",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "SeedTimestamp() ? ",
      "created_at": "2018-12-14T21:49:14Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241901024",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241901024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241902056",
      "pull_request_review_id": 185299264,
      "id": 241902056,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTkwMjA1Ng==",
      "diff_hunk": "@@ -135,6 +135,39 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n+{\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "0af8348738c447f008c60bc1374221acfdc135d9",
      "in_reply_to_id": 241901024,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe not because I think you should change the strengthening function (just the local_hasher) to 4-wide sha256d64 in order to increase the \"work\" done per unit time, and seed timestamp takes a hasher. We'll do a lot more work with sha-ni/aes and that sha256d64-4-way is probably the most optimized work function in the codebase.",
      "created_at": "2018-12-14T21:54:00Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241902056",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241902056"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241902258",
      "pull_request_review_id": 185299504,
      "id": 241902258,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTkwMjI1OA==",
      "diff_hunk": "@@ -272,71 +268,116 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n+static void SeedFast(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n+\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-void RandAddSeedSleep()\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedMedium(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // Sleep for 1ms\n+    MilliSleep(1);\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n-    {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n-    }\n-    memory_cleanse(buf, 64);\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "ff85bace119469709c8c5446abed231cb883b1ee",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "SeedTimestamp()",
      "created_at": "2018-12-14T21:54:53Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241902258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241902258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241903570",
      "pull_request_review_id": 185301179,
      "id": 241903570,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTkwMzU3MA==",
      "diff_hunk": "@@ -326,6 +359,19 @@ static void SeedSlow(CSHA512& hasher)\n \n     // Windows performance monitor data (once every 10 minutes)\n     RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "0af8348738c447f008c60bc1374221acfdc135d9",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd kinda feel better about this if it just directly took the cs_rng_state lock and read the state here instead of calling GetRandBytes... at least then the code won't mysteriously crash if someone upgrades GetRandBytes to use ::Slow.",
      "created_at": "2018-12-14T22:00:40Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241903570",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241903570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242359341",
      "pull_request_review_id": 185850825,
      "id": 242359341,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM1OTM0MQ==",
      "diff_hunk": "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static int64_t last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);\n+        hasher.Write(buffer, 32);\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_screen();\n     }\n-    memory_cleanse(buf, 64);\n+#endif\n+\n+    // Everything that the 'fast', 'medium', and 'slow' seeders include.\n+    SeedSlow(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static std::once_flag g_rng_initialized;\n+static Mutex cs_rng_state;\n+static unsigned char rng_state[32] GUARDED_BY(cs_rng_state) = {0};\n+static uint64_t rng_counter GUARDED_BY(cs_rng_state) = 0;\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    MEDIUM, //!< Automatically called by GetStrongRandBytes\n+    SLOW, //!< Called by RandSeed() and at startup\n+    STARTUP, //!< Called only at startup.\n+};\n+\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)",
      "path": "src/random.cpp",
      "position": 358,
      "original_position": 238,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "in_reply_to_id": 241746569,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It does throw when threads get interrupted apparently (as it has a sleep inside).",
      "created_at": "2018-12-17T23:42:50Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242359341",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242359341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 476,
      "original_line": 476,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380140",
      "pull_request_review_id": 185874949,
      "id": 242380140,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM4MDE0MA==",
      "diff_hunk": "@@ -345,12 +440,26 @@ void GetStrongRandBytes(unsigned char* out, int num)\n         hasher.Finalize(buf);\n         memcpy(rng_state, buf + 32, 32);\n     }\n+    if (num > 0) {\n+        memcpy(out, buf, num);\n+    }\n \n-    // Produce output\n-    memcpy(out, buf, num);\n-    memory_cleanse(buf, 64);\n+    // For anything but the 'fast' level, feed the resulting state (after an additional hashing step) back into OpenSSL.\n+    if (level != RNGLevel::FAST) {\n+        CSHA512().Write(buf, sizeof(buf)).Finalize(buf);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_add(buf, sizeof(buf), 64);\n+    }\n+\n+    // Best effort clean up of randomness data on the stack.\n+    memory_cleanse(buf, sizeof(buf));\n+    hasher.Reset();\n }\n \n+void GetRandBytes(unsigned char* out, int num) { ProcRand(out, num, RNGLevel::FAST); }",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "in_reply_to_id": 241745852,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2018-12-18T01:33:20Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380140",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380430",
      "pull_request_review_id": 185875241,
      "id": 242380430,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM4MDQzMA==",
      "diff_hunk": "@@ -13,33 +13,45 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n-\n /**\n- * Functions to gather random data via the OpenSSL PRNG\n+ * Generate random data via the internal PRNG.\n+ *\n+ * These functions are designed to be fast (sub microsecond), but do not necessarily\n+ * meaninfully add entropy to the PRNG state.",
      "path": "src/random.h",
      "position": null,
      "original_position": 12,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "in_reply_to_id": 241746664,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2018-12-18T01:34:56Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380430",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380554",
      "pull_request_review_id": 185875374,
      "id": 242380554,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM4MDU1NA==",
      "diff_hunk": "@@ -135,6 +135,39 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n+{\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "0af8348738c447f008c60bc1374221acfdc135d9",
      "in_reply_to_id": 241901024,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done (using `SeedTimestamp()`).\r\n\r\nLeaving this for now; switching to SHA256-based code requires some refactoring to make sure there are no initialization order issues.",
      "created_at": "2018-12-18T01:35:36Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380554",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380709",
      "pull_request_review_id": 185875546,
      "id": 242380709,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM4MDcwOQ==",
      "diff_hunk": "@@ -326,6 +359,19 @@ static void SeedSlow(CSHA512& hasher)\n \n     // Windows performance monitor data (once every 10 minutes)\n     RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "0af8348738c447f008c60bc1374221acfdc135d9",
      "in_reply_to_id": 241903570,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've abstracted the update-the-global-RNG-and-extract-entropy into a separate function, which is invoked from both this seeder and RandProc.",
      "created_at": "2018-12-18T01:36:36Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380709",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242853403",
      "pull_request_review_id": 186464421,
      "id": 242853403,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Mjg1MzQwMw==",
      "diff_hunk": "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static int64_t last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);\n+        hasher.Write(buffer, 32);\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_screen();\n     }\n-    memory_cleanse(buf, 64);\n+#endif\n+\n+    // Everything that the 'fast', 'medium', and 'slow' seeders include.\n+    SeedSlow(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static std::once_flag g_rng_initialized;\n+static Mutex cs_rng_state;\n+static unsigned char rng_state[32] GUARDED_BY(cs_rng_state) = {0};\n+static uint64_t rng_counter GUARDED_BY(cs_rng_state) = 0;\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    MEDIUM, //!< Automatically called by GetStrongRandBytes\n+    SLOW, //!< Called by RandSeed() and at startup\n+    STARTUP, //!< Called only at startup.\n+};\n+\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)",
      "path": "src/random.cpp",
      "position": 358,
      "original_position": 238,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "in_reply_to_id": 241746569,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Uh, ok. Thanks!",
      "created_at": "2018-12-19T09:56:19Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242853403",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242853403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 476,
      "original_line": 476,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243231044",
      "pull_request_review_id": 186943436,
      "id": 243231044,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzIzMTA0NA==",
      "diff_hunk": "@@ -129,18 +135,41 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n-void RandAddSeed()\n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n {\n-    // Seed with CPU performance counter\n-    int64_t nCounter = GetPerformanceCounter();\n-    RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();\n+        hasher.Write((const unsigned char*)&perf, sizeof(perf));\n+    } while (GetTimeMicros() < start + microseconds);",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe we should be checking for shutdown interruption in this loop?  At 10ms it isn't critical...",
      "created_at": "2018-12-20T10:56:41Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243231044",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243231044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243467195",
      "pull_request_review_id": 187245945,
      "id": 243467195,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzQ2NzE5NQ==",
      "diff_hunk": "@@ -272,86 +294,215 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n-{\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n+namespace {\n+struct RNGState {\n+    Mutex cs;\n+    Mutex cs_openssl;\n+    unsigned char state[32] GUARDED_BY(cs) = {0};\n+    uint64_t counter GUARDED_BY(cs) = 0;\n+\n+    RNGState() noexcept\n+    {\n+        HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n+     *\n+     * If this function has never been called with full_init = true, false is returned any nothing happens.\n+     */\n+    bool MixExtract(unsigned char* out, int num, CSHA512&& hasher, bool full_init) noexcept\n+    {\n+        assert(num >= 0 && num <= 32);\n+        unsigned char buf[64];\n+        {\n+            WAIT_LOCK(cs, lock);\n+            if (counter == 0 && !full_init) return false;\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);\n+        return true;\n+    }\n+};\n+\n+RNGState& GetRNGState() noexcept\n+{\n+    // This C++11 idiom relies on the guarantee that static variable are initialized\n+    // on first call, even when multiple parallel calls are permitted.\n+    static std::unique_ptr<RNGState> g_rng{new RNGState()};\n+    return *g_rng;\n+}\n }\n \n-static void AddDataToRng(void* data, size_t len);\n+static void SeedTimestamp(CSHA512& hasher) noexcept\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher) noexcept\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n+\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedSlow(CSHA512& hasher, RNGState& rng) noexcept\n+{\n+    unsigned char buffer[32];\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(rng.cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n     }\n-    memory_cleanse(buf, 64);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedStrengthen(CSHA512& hasher, RNGState& rng)\n {\n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write the actual RNG state into the hasher, so it goes through the strengthening as well.\n+        unsigned char buf[32];\n+        if (rng.MixExtract(buf, 32, CSHA512(), false)) {\n+            hasher.Write(buf, 32);\n+            memory_cleanse(buf, 32);\n+        }\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedBackground(CSHA512& hasher, RNGState& rng)\n+{\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Strengthen every minute\n+    SeedStrengthen(hasher, rng);\n+}\n+\n+static void SeedStartup(CSHA512& hasher, RNGState& rng) noexcept\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(rng.cs_openssl);\n+        RAND_screen();\n+    }\n+#endif\n+\n+    // Everything that the 'slow' seeder includes.\n+    SeedSlow(hasher, rng);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Strengthen every minute\n+    SeedStrengthen(hasher, rng);\n+}\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    SLOW, //!< Automatically called by GetStrongRandBytes\n+    BACKGROUND, //!< Called by RandSeed()\n+};\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)\n+{\n+    // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).\n+    RNGState& rng = GetRNGState();\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    assert(num <= 32);\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+    CSHA512 hasher;\n+    switch (level) {\n+    case RNGLevel::FAST:\n+        SeedFast(hasher);\n+        break;\n+    case RNGLevel::SLOW:\n+        SeedSlow(hasher, rng);\n+        break;\n+    case RNGLevel::BACKGROUND:\n+        SeedBackground(hasher, rng);\n+        break;\n     }\n \n     // Combine with and update state\n-    {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+    if (!rng.MixExtract(out, num, std::move(hasher), false)) {\n+        // On the first invocation, restart but with SeedStartup.",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 358,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Kinda weird that on non-init it throws out all its work.  Why not on non-init, have mixextract still write to out?  Then the research can read that in.   I feel a little uncomfortable with the brittleness of mixextract having a codepath that just returns without updating out.",
      "created_at": "2018-12-21T01:28:11Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243467195",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243467195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243529294",
      "pull_request_review_id": 187323517,
      "id": 243529294,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzUyOTI5NA==",
      "diff_hunk": "@@ -272,86 +294,215 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n-{\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n+namespace {\n+struct RNGState {\n+    Mutex cs;\n+    Mutex cs_openssl;\n+    unsigned char state[32] GUARDED_BY(cs) = {0};\n+    uint64_t counter GUARDED_BY(cs) = 0;\n+\n+    RNGState() noexcept\n+    {\n+        HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n+     *\n+     * If this function has never been called with full_init = true, false is returned any nothing happens.\n+     */\n+    bool MixExtract(unsigned char* out, int num, CSHA512&& hasher, bool full_init) noexcept\n+    {\n+        assert(num >= 0 && num <= 32);\n+        unsigned char buf[64];\n+        {\n+            WAIT_LOCK(cs, lock);\n+            if (counter == 0 && !full_init) return false;\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);\n+        return true;\n+    }\n+};\n+\n+RNGState& GetRNGState() noexcept\n+{\n+    // This C++11 idiom relies on the guarantee that static variable are initialized\n+    // on first call, even when multiple parallel calls are permitted.\n+    static std::unique_ptr<RNGState> g_rng{new RNGState()};\n+    return *g_rng;\n+}\n }\n \n-static void AddDataToRng(void* data, size_t len);\n+static void SeedTimestamp(CSHA512& hasher) noexcept\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher) noexcept\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n+\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedSlow(CSHA512& hasher, RNGState& rng) noexcept\n+{\n+    unsigned char buffer[32];\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(rng.cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n     }\n-    memory_cleanse(buf, 64);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedStrengthen(CSHA512& hasher, RNGState& rng)\n {\n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write the actual RNG state into the hasher, so it goes through the strengthening as well.\n+        unsigned char buf[32];\n+        if (rng.MixExtract(buf, 32, CSHA512(), false)) {\n+            hasher.Write(buf, 32);\n+            memory_cleanse(buf, 32);\n+        }\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedBackground(CSHA512& hasher, RNGState& rng)\n+{\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Strengthen every minute\n+    SeedStrengthen(hasher, rng);\n+}\n+\n+static void SeedStartup(CSHA512& hasher, RNGState& rng) noexcept\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(rng.cs_openssl);\n+        RAND_screen();\n+    }\n+#endif\n+\n+    // Everything that the 'slow' seeder includes.\n+    SeedSlow(hasher, rng);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Strengthen every minute\n+    SeedStrengthen(hasher, rng);\n+}\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    SLOW, //!< Automatically called by GetStrongRandBytes\n+    BACKGROUND, //!< Called by RandSeed()\n+};\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)\n+{\n+    // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).\n+    RNGState& rng = GetRNGState();\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    assert(num <= 32);\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+    CSHA512 hasher;\n+    switch (level) {\n+    case RNGLevel::FAST:\n+        SeedFast(hasher);\n+        break;\n+    case RNGLevel::SLOW:\n+        SeedSlow(hasher, rng);\n+        break;\n+    case RNGLevel::BACKGROUND:\n+        SeedBackground(hasher, rng);\n+        break;\n     }\n \n     // Combine with and update state\n-    {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+    if (!rng.MixExtract(out, num, std::move(hasher), false)) {\n+        // On the first invocation, restart but with SeedStartup.",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 358,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "in_reply_to_id": 243467195,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2018-12-21T09:27:57Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243529294",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243529294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243721722",
      "pull_request_review_id": 187575485,
      "id": 243721722,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzcyMTcyMg==",
      "diff_hunk": "@@ -272,86 +294,217 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n-{\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n+namespace {\n+struct RNGState {\n+    Mutex cs;\n+    Mutex cs_openssl;\n+    unsigned char state[32] GUARDED_BY(cs) = {0};\n+    uint64_t counter GUARDED_BY(cs) = 0;\n+    bool initialized GUARDED_BY(cs) = false;\n+\n+    RNGState() noexcept\n+    {\n+        HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n+     *\n+     * If this function has never been called with full_init = true, false is returned.\n+     */\n+    bool MixExtract(unsigned char* out, int num, CSHA512&& hasher, bool full_init) noexcept\n+    {\n+        assert(num >= 0 && num <= 32);\n+        unsigned char buf[64];\n+        bool ret;\n+        {\n+            WAIT_LOCK(cs, lock);\n+            ret = (initialized |= full_init);\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);\n+        return ret;\n+    }\n+};\n+\n+RNGState& GetRNGState() noexcept\n+{\n+    // This C++11 idiom relies on the guarantee that static variable are initialized\n+    // on first call, even when multiple parallel calls are permitted.\n+    static std::unique_ptr<RNGState> g_rng{new RNGState()};\n+    return *g_rng;\n+}\n }\n \n-static void AddDataToRng(void* data, size_t len);\n+static void SeedTimestamp(CSHA512& hasher) noexcept\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher) noexcept\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n+\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedSlow(CSHA512& hasher, RNGState& rng) noexcept\n+{\n+    unsigned char buffer[32];\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(rng.cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n     }\n-    memory_cleanse(buf, 64);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedStrengthen(CSHA512& hasher, RNGState& rng)\n {\n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write the actual RNG state into the hasher, so it goes through the strengthening as well.\n+        unsigned char buf[32];\n+        if (rng.MixExtract(buf, 32, CSHA512(), false)) {",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 265,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "c2f3b3f4a4b1f1eea806f070dfa41edb52a6cb26",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this one can ignore the return value of mix extract.",
      "created_at": "2018-12-22T01:43:00Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243721722",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243721722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243900544",
      "pull_request_review_id": 187782038,
      "id": 243900544,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzkwMDU0NA==",
      "diff_hunk": "@@ -272,86 +294,217 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n-{\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n+namespace {\n+struct RNGState {\n+    Mutex cs;\n+    Mutex cs_openssl;\n+    unsigned char state[32] GUARDED_BY(cs) = {0};\n+    uint64_t counter GUARDED_BY(cs) = 0;\n+    bool initialized GUARDED_BY(cs) = false;\n+\n+    RNGState() noexcept\n+    {\n+        HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n+     *\n+     * If this function has never been called with full_init = true, false is returned.\n+     */\n+    bool MixExtract(unsigned char* out, int num, CSHA512&& hasher, bool full_init) noexcept\n+    {\n+        assert(num >= 0 && num <= 32);\n+        unsigned char buf[64];\n+        bool ret;\n+        {\n+            WAIT_LOCK(cs, lock);\n+            ret = (initialized |= full_init);\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);\n+        return ret;\n+    }\n+};\n+\n+RNGState& GetRNGState() noexcept\n+{\n+    // This C++11 idiom relies on the guarantee that static variable are initialized\n+    // on first call, even when multiple parallel calls are permitted.\n+    static std::unique_ptr<RNGState> g_rng{new RNGState()};\n+    return *g_rng;\n+}\n }\n \n-static void AddDataToRng(void* data, size_t len);\n+static void SeedTimestamp(CSHA512& hasher) noexcept\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher) noexcept\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n+\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedSlow(CSHA512& hasher, RNGState& rng) noexcept\n+{\n+    unsigned char buffer[32];\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(rng.cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n     }\n-    memory_cleanse(buf, 64);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedStrengthen(CSHA512& hasher, RNGState& rng)\n {\n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write the actual RNG state into the hasher, so it goes through the strengthening as well.\n+        unsigned char buf[32];\n+        if (rng.MixExtract(buf, 32, CSHA512(), false)) {",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 265,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "c2f3b3f4a4b1f1eea806f070dfa41edb52a6cb26",
      "in_reply_to_id": 243721722,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2018-12-25T10:54:28Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243900544",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243900544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246447713",
      "pull_request_review_id": 190811506,
      "id": 246447713,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ0NzcxMw==",
      "diff_hunk": "@@ -292,6 +292,32 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, int num, CSHA512&& hasher)\n+    {\n+        assert(num >= 0 && num <= 32);",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "0c442f32d8cd48c23867032b0ff6320260e0d806",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: also assert if `out==nullptr` that `num==0`, I believe memcpy to nullptr is technically undefined",
      "created_at": "2019-01-09T16:23:15Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246447713",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246447713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 299,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246448377",
      "pull_request_review_id": 190811506,
      "id": 246448377,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ0ODM3Nw==",
      "diff_hunk": "@@ -292,6 +292,32 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, int num, CSHA512&& hasher)",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "0c442f32d8cd48c23867032b0ff6320260e0d806",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "mu-nit: any reason `num` is a signed integer? could simplify assertion below by being unsigned",
      "created_at": "2019-01-09T16:24:46Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246448377",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246448377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246459148",
      "pull_request_review_id": 190811506,
      "id": 246459148,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ1OTE0OA==",
      "diff_hunk": "@@ -329,61 +319,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedSleep(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    RAND_screen();\n+#endif\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    // Everything that the 'slow' seeder includes.\n+    SeedSlow(hasher);\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    SLOW, //!< Automatically called by GetStrongRandBytes\n+    SLEEP, //!< Called by RandAddSeedSleep()\n+};\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)\n+{\n+    // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).\n+    RNGState& rng = GetRNGState();\n+\n+    assert(num <= 32);\n+\n+    CSHA512 hasher;\n+    switch (level) {\n+    case RNGLevel::FAST:\n+        SeedFast(hasher);\n+        break;\n+    case RNGLevel::SLOW:\n+        SeedSlow(hasher);\n+        break;\n+    case RNGLevel::SLEEP:\n+        SeedSleep(hasher);\n+        break;\n     }\n \n     // Combine with and update state\n-    rng.MixExtract(out, num, std::move(hasher));\n+    if (!rng.MixExtract(out, num, std::move(hasher), false)) {\n+        // On the first invocation, also seed with SeedStartup().\n+        CSHA512 startup_hasher;\n+        SeedStartup(startup_hasher);\n+        rng.MixExtract(out, num, std::move(startup_hasher), true);\n+    }\n \n-    // Produce output\n-    memcpy(out, buf, num);\n-    memory_cleanse(buf, 64);\n+    // For anything but the 'fast' level, feed the resulting RNG output (after an additional hashing step) back into OpenSSL.\n+    if (level != RNGLevel::FAST) {\n+        unsigned char buf[64];\n+        CSHA512().Write(out, num).Finalize(buf);\n+        RAND_add(buf, sizeof(buf), 8 * num);",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 229,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "ca3459b669eddd4bdfd7e15886d25d40e04ad52f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can there be a description on why `8 * num`?  Not following this one based on the docs.\r\n\r\n\"The entropy argument is (the lower bound of) an estimate of how much randomness is contained in buf, measured in bytes.\"",
      "created_at": "2019-01-09T16:52:25Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246459148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246459148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 435,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246475876",
      "pull_request_review_id": 190847485,
      "id": 246475876,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ3NTg3Ng==",
      "diff_hunk": "@@ -329,61 +319,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedSleep(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    RAND_screen();\n+#endif\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    // Everything that the 'slow' seeder includes.\n+    SeedSlow(hasher);\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    SLOW, //!< Automatically called by GetStrongRandBytes\n+    SLEEP, //!< Called by RandAddSeedSleep()\n+};\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)\n+{\n+    // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).\n+    RNGState& rng = GetRNGState();\n+\n+    assert(num <= 32);\n+\n+    CSHA512 hasher;\n+    switch (level) {\n+    case RNGLevel::FAST:\n+        SeedFast(hasher);\n+        break;\n+    case RNGLevel::SLOW:\n+        SeedSlow(hasher);\n+        break;\n+    case RNGLevel::SLEEP:\n+        SeedSleep(hasher);\n+        break;\n     }\n \n     // Combine with and update state\n-    rng.MixExtract(out, num, std::move(hasher));\n+    if (!rng.MixExtract(out, num, std::move(hasher), false)) {\n+        // On the first invocation, also seed with SeedStartup().\n+        CSHA512 startup_hasher;\n+        SeedStartup(startup_hasher);\n+        rng.MixExtract(out, num, std::move(startup_hasher), true);\n+    }\n \n-    // Produce output\n-    memcpy(out, buf, num);\n-    memory_cleanse(buf, 64);\n+    // For anything but the 'fast' level, feed the resulting RNG output (after an additional hashing step) back into OpenSSL.\n+    if (level != RNGLevel::FAST) {\n+        unsigned char buf[64];\n+        CSHA512().Write(out, num).Finalize(buf);\n+        RAND_add(buf, sizeof(buf), 8 * num);",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 229,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "ca3459b669eddd4bdfd7e15886d25d40e04ad52f",
      "in_reply_to_id": 246459148,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I misunderstood the API and assumed the entropy argument was measured in bits.\n\nI don't think this matters much, modern RNGs don't really measure entropy anymore. But I'll fix it.",
      "created_at": "2019-01-09T17:41:28Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246475876",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246475876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 435,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246488452",
      "pull_request_review_id": 190863580,
      "id": 246488452,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ4ODQ1Mg==",
      "diff_hunk": "@@ -292,6 +292,32 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, int num, CSHA512&& hasher)",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "0c442f32d8cd48c23867032b0ff6320260e0d806",
      "in_reply_to_id": 246448377,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2019-01-09T18:20:01Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246488452",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246488452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246488505",
      "pull_request_review_id": 190863643,
      "id": 246488505,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ4ODUwNQ==",
      "diff_hunk": "@@ -329,61 +319,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedSleep(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    RAND_screen();\n+#endif\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    // Everything that the 'slow' seeder includes.\n+    SeedSlow(hasher);\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    SLOW, //!< Automatically called by GetStrongRandBytes\n+    SLEEP, //!< Called by RandAddSeedSleep()\n+};\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)\n+{\n+    // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).\n+    RNGState& rng = GetRNGState();\n+\n+    assert(num <= 32);\n+\n+    CSHA512 hasher;\n+    switch (level) {\n+    case RNGLevel::FAST:\n+        SeedFast(hasher);\n+        break;\n+    case RNGLevel::SLOW:\n+        SeedSlow(hasher);\n+        break;\n+    case RNGLevel::SLEEP:\n+        SeedSleep(hasher);\n+        break;\n     }\n \n     // Combine with and update state\n-    rng.MixExtract(out, num, std::move(hasher));\n+    if (!rng.MixExtract(out, num, std::move(hasher), false)) {\n+        // On the first invocation, also seed with SeedStartup().\n+        CSHA512 startup_hasher;\n+        SeedStartup(startup_hasher);\n+        rng.MixExtract(out, num, std::move(startup_hasher), true);\n+    }\n \n-    // Produce output\n-    memcpy(out, buf, num);\n-    memory_cleanse(buf, 64);\n+    // For anything but the 'fast' level, feed the resulting RNG output (after an additional hashing step) back into OpenSSL.\n+    if (level != RNGLevel::FAST) {\n+        unsigned char buf[64];\n+        CSHA512().Write(out, num).Finalize(buf);\n+        RAND_add(buf, sizeof(buf), 8 * num);",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 229,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "ca3459b669eddd4bdfd7e15886d25d40e04ad52f",
      "in_reply_to_id": 246459148,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2019-01-09T18:20:10Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246488505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246488505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 435,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246488679",
      "pull_request_review_id": 190863865,
      "id": 246488679,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ4ODY3OQ==",
      "diff_hunk": "@@ -292,6 +292,32 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, int num, CSHA512&& hasher)\n+    {\n+        assert(num >= 0 && num <= 32);",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "0c442f32d8cd48c23867032b0ff6320260e0d806",
      "in_reply_to_id": 246447713,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done (by adding an assert in the `if (num) {` branch).",
      "created_at": "2019-01-09T18:20:43Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246488679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246488679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 299,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247219641",
      "pull_request_review_id": 191797506,
      "id": 247219641,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzIxOTY0MQ==",
      "diff_hunk": "@@ -181,12 +181,12 @@ void PaymentServerTests::paymentServerTests()\n     QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), true);\n \n     // Test BIP70 DoS protection:\n-    unsigned char randData[BIP70_MAX_PAYMENTREQUEST_SIZE + 1];\n-    GetRandBytes(randData, sizeof(randData));\n+    auto randdata = FastRandomContext().randbytes(BIP70_MAX_PAYMENTREQUEST_SIZE + 1);",
      "path": "src/qt/test/paymentservertests.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "5dfb99059491b1db9133cf0e6b0158ff4bdc9ef0",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Use FRC::randbytes instead of reading >32 bytes from RNG\" (5dfb99059491b1db9133cf0e6b0158ff4bdc9ef0)\r\n\r\nNote: seeding behavior is unchanged here because FastRandomContext just calls GetRandBytes internally.",
      "created_at": "2019-01-11T18:55:57Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247219641",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247219641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 184,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247221335",
      "pull_request_review_id": 191797506,
      "id": 247221335,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzIyMTMzNQ==",
      "diff_hunk": "@@ -166,13 +166,6 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n-    } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);",
      "path": "src/random.cpp",
      "position": 104,
      "original_position": 8,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "ede7e302d55eb37936268caffcc4b31839e58283",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Don't log RandAddSeedPerfmon details\" (ede7e302d55eb37936268caffcc4b31839e58283)\r\n\r\nI think this code needs a comment saying why it's safe to ignore the error and skip seeding when the call fails. Just reading the new code, I would be wondering why RandFailure() isn't called.\r\n\r\nIt would also be good to mention loss of the printf warning in release notes.",
      "created_at": "2019-01-11T19:01:35Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247221335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247221335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": 173,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247223913",
      "pull_request_review_id": 191797506,
      "id": 247223913,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzIyMzkxMw==",
      "diff_hunk": "@@ -441,10 +441,6 @@ bool Random_SanityCheck()\n     uint64_t stop = GetPerformanceCounter();\n     if (stop == start) return false;\n \n-    // We called GetPerformanceCounter. Use it as entropy.",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2ce2c827115748ebea121e6e2abfded260f50ea6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Remove adding timestamps in sanity check to OpenSSL RNG\" (2ce2c827115748ebea121e6e2abfded260f50ea6)\r\n\r\nWhat's the benefit to dropping these calls? Commit message only says why it is not harmful to remove them, not why it is good to remove them.",
      "created_at": "2019-01-11T19:10:08Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247223913",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247223913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 451,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247230067",
      "pull_request_review_id": 191797506,
      "id": 247230067,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzIzMDA2Nw==",
      "diff_hunk": "@@ -178,7 +178,7 @@ void GetOSRand(unsigned char *ent32);\n  */\n bool Random_SanityCheck();\n \n-/** Initialize the RNG. */\n+/** Report information about the RNG used. */",
      "path": "src/random.h",
      "position": null,
      "original_position": 5,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2dcb3e938a210b1bbaa178ad6f9a5d418c4e2939",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Automatically initialize RNG on first use.\" (2dcb3e938a210b1bbaa178ad6f9a5d418c4e2939)\r\n\r\nNew comment is confusing about when this should be called. Would suggest:\r\n\r\n```c++\r\n/**\r\n * Initialize global RNG state and log any CPU features that are used.\r\n *\r\n * Calling this function is optional. RNG state will be initialized when first\r\n * needed if it is not called.\r\n */\r\n```",
      "created_at": "2019-01-11T19:30:11Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247230067",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247230067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247233048",
      "pull_request_review_id": 191797506,
      "id": 247233048,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzIzMzA0OA==",
      "diff_hunk": "@@ -292,6 +292,33 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        {\n+            WAIT_LOCK(cs, lock);",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Abstract out seeding/extracting entropy into RNGState::MixExtract\" (cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab)\r\n\r\nThis is moved code, but can it just use `LOCK` instead of `WAIT_LOCK`?",
      "created_at": "2019-01-11T19:40:19Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247233048",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247233048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 302,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247234852",
      "pull_request_review_id": 191797506,
      "id": 247234852,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzIzNDg1Mg==",
      "diff_hunk": "@@ -292,6 +292,33 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];",
      "path": "src/random.cpp",
      "position": 172,
      "original_position": 9,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Abstract out seeding/extracting entropy into RNGState::MixExtract\" (cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab)\r\n\r\nIt would be good to check the buffer size. Maybe:\r\n\r\n```c++\r\nstatic_assert(sizeof(buf) == hasher.OUTPUT_SIZE);\r\n```",
      "created_at": "2019-01-11T19:46:10Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247234852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247234852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357030",
      "pull_request_review_id": 191984763,
      "id": 247357030,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM1NzAzMA==",
      "diff_hunk": "@@ -181,12 +181,12 @@ void PaymentServerTests::paymentServerTests()\n     QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), true);\n \n     // Test BIP70 DoS protection:\n-    unsigned char randData[BIP70_MAX_PAYMENTREQUEST_SIZE + 1];\n-    GetRandBytes(randData, sizeof(randData));\n+    auto randdata = FastRandomContext().randbytes(BIP70_MAX_PAYMENTREQUEST_SIZE + 1);",
      "path": "src/qt/test/paymentservertests.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "5dfb99059491b1db9133cf0e6b0158ff4bdc9ef0",
      "in_reply_to_id": 247219641,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added comment in commit.",
      "created_at": "2019-01-13T18:21:48Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 184,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357036",
      "pull_request_review_id": 191984772,
      "id": 247357036,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM1NzAzNg==",
      "diff_hunk": "@@ -166,13 +166,6 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n-    } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);",
      "path": "src/random.cpp",
      "position": 104,
      "original_position": 8,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "ede7e302d55eb37936268caffcc4b31839e58283",
      "in_reply_to_id": 247221335,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment and a TODO.",
      "created_at": "2019-01-13T18:22:03Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357036",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": 173,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357052",
      "pull_request_review_id": 191984795,
      "id": 247357052,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM1NzA1Mg==",
      "diff_hunk": "@@ -441,10 +441,6 @@ bool Random_SanityCheck()\n     uint64_t stop = GetPerformanceCounter();\n     if (stop == start) return false;\n \n-    // We called GetPerformanceCounter. Use it as entropy.",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2ce2c827115748ebea121e6e2abfded260f50ea6",
      "in_reply_to_id": 247223913,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "They were hard to maintain in an earlier iteration of this patch. I've removed the commit now, and kept the functionality in the big switchover commit.",
      "created_at": "2019-01-13T18:22:42Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357052",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 451,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357055",
      "pull_request_review_id": 191984800,
      "id": 247357055,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM1NzA1NQ==",
      "diff_hunk": "@@ -178,7 +178,7 @@ void GetOSRand(unsigned char *ent32);\n  */\n bool Random_SanityCheck();\n \n-/** Initialize the RNG. */\n+/** Report information about the RNG used. */",
      "path": "src/random.h",
      "position": null,
      "original_position": 5,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2dcb3e938a210b1bbaa178ad6f9a5d418c4e2939",
      "in_reply_to_id": 247230067,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-01-13T18:22:50Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357059",
      "pull_request_review_id": 191984806,
      "id": 247357059,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM1NzA1OQ==",
      "diff_hunk": "@@ -292,6 +292,33 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        {\n+            WAIT_LOCK(cs, lock);",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab",
      "in_reply_to_id": 247233048,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-01-13T18:22:58Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357059",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 302,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357064",
      "pull_request_review_id": 191984812,
      "id": 247357064,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM1NzA2NA==",
      "diff_hunk": "@@ -292,6 +292,33 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];",
      "path": "src/random.cpp",
      "position": 172,
      "original_position": 9,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab",
      "in_reply_to_id": 247234852,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-01-13T18:23:05Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357064",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357064"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247370960",
      "pull_request_review_id": 191999726,
      "id": 247370960,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM3MDk2MA==",
      "diff_hunk": "@@ -292,6 +292,33 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];",
      "path": "src/random.cpp",
      "position": 172,
      "original_position": 9,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab",
      "in_reply_to_id": 247234852,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I had to change it to `CSHA512::OUTPUT_SIZE`, as clang didn't agree `hasher.OUTPUT_SIZE` was a compile-time constant.",
      "created_at": "2019-01-14T00:46:18Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247370960",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247370960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247654362",
      "pull_request_review_id": 192357622,
      "id": 247654362,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY1NDM2Mg==",
      "diff_hunk": "@@ -298,6 +298,34 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n+        {\n+            LOCK(cs);\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            assert(out != nullptr);\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);",
      "path": "src/random.cpp",
      "position": 195,
      "original_position": 30,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "d76cc6dbb9e1c5c6a0f3b002932ba4033b722255",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Abstract out seeding/extracting entropy into RNGState::MixExtract\" (d76cc6dbb9e1c5c6a0f3b002932ba4033b722255)\r\n\r\nDoes it matter that `memory_cleanse` isn't called on the hasher object?",
      "created_at": "2019-01-14T20:54:16Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247654362",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247654362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 353,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247660403",
      "pull_request_review_id": 192357622,
      "id": 247660403,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY2MDQwMw==",
      "diff_hunk": "@@ -174,7 +164,7 @@ static void RandAddSeedPerfmon()\n     }\n     RegCloseKey(HKEY_PERFORMANCE_DATA);\n     if (ret == ERROR_SUCCESS) {\n-        RAND_add(vData.data(), nSize, nSize / 100.0);",
      "path": "src/random.cpp",
      "position": 97,
      "original_position": 24,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Switch all RNG code to the built-in PRNG.\" (85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4)\r\n\r\nCommit message could mention now seeding openssl differently than before: no longer here, no longer in cinit, additionally in MixExtract and SeedStartup.",
      "created_at": "2019-01-14T21:13:04Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247660403",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247660403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 167,
      "original_line": 167,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247664982",
      "pull_request_review_id": 192357622,
      "id": 247664982,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY2NDk4Mg==",
      "diff_hunk": "@@ -337,61 +327,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()",
      "path": "src/random.cpp",
      "position": 240,
      "original_position": 89,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Switch all RNG code to the built-in PRNG.\" (85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4)\r\n\r\nNote: functionality previously in RandAddSeedSleep() is now in SeedSleep().",
      "created_at": "2019-01-14T21:27:01Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247664982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247664982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 284,
      "original_line": 284,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247665730",
      "pull_request_review_id": 192357622,
      "id": 247665730,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY2NTczMA==",
      "diff_hunk": "@@ -337,61 +327,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)",
      "path": "src/random.cpp",
      "position": 310,
      "original_position": 142,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Switch all RNG code to the built-in PRNG.\" (85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4)\r\n\r\nNote: functionality previously in GetStrongRandBytes() is now in SeedSlow().",
      "created_at": "2019-01-14T21:29:14Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247665730",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247665730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 319,
      "original_line": 319,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247670035",
      "pull_request_review_id": 192357622,
      "id": 247670035,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY3MDAzNQ==",
      "diff_hunk": "@@ -441,11 +441,11 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n     }\n }\n \n-void GetRandBytes(unsigned char* buf, int num) { ProcRand(buf, num, RNGLevel::FAST); }\n-void GetStrongRandBytes(unsigned char* buf, int num) { ProcRand(buf, num, RNGLevel::SLOW); }\n+void GetRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::FAST); }\n+void GetStrongRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::SLOW); }",
      "path": "src/random.cpp",
      "position": 413,
      "original_position": 86,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "6ff775ff80b090494d115753ddcf488a3cf923a9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Sprinkle some sweet noexcepts over the RNG code\" (6ff775ff80b090494d115753ddcf488a3cf923a9)\r\n\r\nI don't know best practices around noexcept, but it seems like there are parts of ProcRand that could throw exceptions. Maybe it would be worth saying in a comment somewhere how noexcept is used in random.cpp/h code.",
      "created_at": "2019-01-14T21:43:32Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247670035",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247670035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 514,
      "original_line": 514,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247673931",
      "pull_request_review_id": 192357622,
      "id": 247673931,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY3MzkzMQ==",
      "diff_hunk": "@@ -86,47 +83,6 @@ const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n \n-/** Init OpenSSL library multithreading support */\n-static std::unique_ptr<CCriticalSection[]> ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n-{\n-    if (mode & CRYPTO_LOCK) {\n-        ENTER_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    } else {\n-        LEAVE_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    }\n-}\n-\n-// Singleton for wrapping OpenSSL setup/teardown.\n-class CInit\n-{\n-public:\n-    CInit()\n-    {\n-        // Init OpenSSL library multithreading support\n-        ppmutexOpenSSL.reset(new CCriticalSection[CRYPTO_num_locks()]);\n-        CRYPTO_set_locking_callback(locking_callback);\n-\n-        // OpenSSL can optionally load a config file which lists optional loadable modules and engines.\n-        // We don't use them so we don't require the config. However some of our libs may call functions\n-        // which attempt to load the config file, possibly resulting in an exit() or crash if it is missing\n-        // or corrupt. Explicitly tell OpenSSL not to try to load the file. The result for our libs will be\n-        // that the config appears to have been loaded and there are no modules/engines available.\n-        OPENSSL_no_config();\n-    }\n-\n-    ~CInit()\n-    {\n-        // Securely erase the memory used by the PRNG\n-        RAND_cleanup();",
      "path": "src/util/system.cpp",
      "position": 53,
      "original_position": 46,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "fa2eabe154d00bf6c54f604acbe758186d044639",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Use our own locking instead of using OpenSSL in multithreaded mode\" (fa2eabe154d00bf6c54f604acbe758186d044639)\r\n\r\nWhy is calling RAND_cleanup no longer necessary?",
      "created_at": "2019-01-14T21:54:55Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247673931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247673931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 128,
      "original_line": 128,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247674434",
      "pull_request_review_id": 192357622,
      "id": 247674434,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY3NDQzNA==",
      "diff_hunk": "@@ -86,47 +83,6 @@ const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n \n-/** Init OpenSSL library multithreading support */\n-static std::unique_ptr<CCriticalSection[]> ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n-{\n-    if (mode & CRYPTO_LOCK) {\n-        ENTER_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    } else {\n-        LEAVE_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    }\n-}\n-\n-// Singleton for wrapping OpenSSL setup/teardown.\n-class CInit\n-{\n-public:\n-    CInit()\n-    {\n-        // Init OpenSSL library multithreading support\n-        ppmutexOpenSSL.reset(new CCriticalSection[CRYPTO_num_locks()]);\n-        CRYPTO_set_locking_callback(locking_callback);",
      "path": "src/util/system.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "fa2eabe154d00bf6c54f604acbe758186d044639",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Use our own locking instead of using OpenSSL in multithreaded mode\" (fa2eabe154d00bf6c54f604acbe758186d044639)\r\n\r\nI don't understand how the two parts of this commit relate:\r\n\r\n- removing `CRYPTO_set_locking_callback()` call\r\n- adding `cs_openssl` mutex\r\n\r\nIs the idea that calls like `RAND_add` and `RAND_bytes` are no longer thread safe without `set_locking_callback`, so now we need to serialize calls with our own mutex? If this is the case, why don't we need to lock the same mutex in qt payment server code using openssl?",
      "created_at": "2019-01-14T21:56:26Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247674434",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247674434"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 108,
      "original_line": 108,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119274",
      "pull_request_review_id": 192934747,
      "id": 248119274,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODExOTI3NA==",
      "diff_hunk": "@@ -298,6 +298,34 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n+        {\n+            LOCK(cs);\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            assert(out != nullptr);\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);",
      "path": "src/random.cpp",
      "position": 195,
      "original_position": 30,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "d76cc6dbb9e1c5c6a0f3b002932ba4033b722255",
      "in_reply_to_id": 247654362,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps it does, though we're all over the code only using memory_cleanse for memory buffers directly, and I feel slightly uneasy to invoke on the state of complex objects.\r\n\r\nMaybe in a separate change we can add a Cleanse() method to CSHA512 and others, and start using those were useful?",
      "created_at": "2019-01-16T00:57:47Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119274",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 353,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119311",
      "pull_request_review_id": 192934801,
      "id": 248119311,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODExOTMxMQ==",
      "diff_hunk": "@@ -174,7 +164,7 @@ static void RandAddSeedPerfmon()\n     }\n     RegCloseKey(HKEY_PERFORMANCE_DATA);\n     if (ret == ERROR_SUCCESS) {\n-        RAND_add(vData.data(), nSize, nSize / 100.0);",
      "path": "src/random.cpp",
      "position": 97,
      "original_position": 24,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4",
      "in_reply_to_id": 247660403,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-01-16T00:58:00Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119311",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 167,
      "original_line": 167,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119329",
      "pull_request_review_id": 192934830,
      "id": 248119329,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODExOTMyOQ==",
      "diff_hunk": "@@ -337,61 +327,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()",
      "path": "src/random.cpp",
      "position": 240,
      "original_position": 89,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4",
      "in_reply_to_id": 247664982,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-01-16T00:58:07Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119329",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 284,
      "original_line": 284,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119354",
      "pull_request_review_id": 192934860,
      "id": 248119354,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODExOTM1NA==",
      "diff_hunk": "@@ -337,61 +327,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)",
      "path": "src/random.cpp",
      "position": 310,
      "original_position": 142,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4",
      "in_reply_to_id": 247665730,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-01-16T00:58:15Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 319,
      "original_line": 319,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119398",
      "pull_request_review_id": 192934925,
      "id": 248119398,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODExOTM5OA==",
      "diff_hunk": "@@ -441,11 +441,11 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n     }\n }\n \n-void GetRandBytes(unsigned char* buf, int num) { ProcRand(buf, num, RNGLevel::FAST); }\n-void GetStrongRandBytes(unsigned char* buf, int num) { ProcRand(buf, num, RNGLevel::SLOW); }\n+void GetRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::FAST); }\n+void GetStrongRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::SLOW); }",
      "path": "src/random.cpp",
      "position": 413,
      "original_position": 86,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "6ff775ff80b090494d115753ddcf488a3cf923a9",
      "in_reply_to_id": 247670035,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added a comment on the use of noexcept and why it's not used for everything.",
      "created_at": "2019-01-16T00:58:33Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119398",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119398"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 514,
      "original_line": 514,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119545",
      "pull_request_review_id": 192935105,
      "id": 248119545,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODExOTU0NQ==",
      "diff_hunk": "@@ -86,47 +83,6 @@ const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n \n-/** Init OpenSSL library multithreading support */\n-static std::unique_ptr<CCriticalSection[]> ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n-{\n-    if (mode & CRYPTO_LOCK) {\n-        ENTER_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    } else {\n-        LEAVE_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    }\n-}\n-\n-// Singleton for wrapping OpenSSL setup/teardown.\n-class CInit\n-{\n-public:\n-    CInit()\n-    {\n-        // Init OpenSSL library multithreading support\n-        ppmutexOpenSSL.reset(new CCriticalSection[CRYPTO_num_locks()]);\n-        CRYPTO_set_locking_callback(locking_callback);\n-\n-        // OpenSSL can optionally load a config file which lists optional loadable modules and engines.\n-        // We don't use them so we don't require the config. However some of our libs may call functions\n-        // which attempt to load the config file, possibly resulting in an exit() or crash if it is missing\n-        // or corrupt. Explicitly tell OpenSSL not to try to load the file. The result for our libs will be\n-        // that the config appears to have been loaded and there are no modules/engines available.\n-        OPENSSL_no_config();\n-    }\n-\n-    ~CInit()\n-    {\n-        // Securely erase the memory used by the PRNG\n-        RAND_cleanup();",
      "path": "src/util/system.cpp",
      "position": 53,
      "original_position": 46,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "fa2eabe154d00bf6c54f604acbe758186d044639",
      "in_reply_to_id": 247673931,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've reverted this change for other reasons. I don't think RAND_cleanup is particularly important, but let's keep it for now as long as we're using the OpenSSL RNG.",
      "created_at": "2019-01-16T00:59:24Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119545",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119545"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 128,
      "original_line": 128,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248120121",
      "pull_request_review_id": 192935818,
      "id": 248120121,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODEyMDEyMQ==",
      "diff_hunk": "@@ -86,47 +83,6 @@ const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n \n-/** Init OpenSSL library multithreading support */\n-static std::unique_ptr<CCriticalSection[]> ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n-{\n-    if (mode & CRYPTO_LOCK) {\n-        ENTER_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    } else {\n-        LEAVE_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    }\n-}\n-\n-// Singleton for wrapping OpenSSL setup/teardown.\n-class CInit\n-{\n-public:\n-    CInit()\n-    {\n-        // Init OpenSSL library multithreading support\n-        ppmutexOpenSSL.reset(new CCriticalSection[CRYPTO_num_locks()]);\n-        CRYPTO_set_locking_callback(locking_callback);",
      "path": "src/util/system.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "fa2eabe154d00bf6c54f604acbe758186d044639",
      "in_reply_to_id": 247674434,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, that was the reasoning. I assumed the payment server code was already not multithreaded (because it's synchronized through the UI), but reading more about OpenSSL's multithreading design, it seems that X509 processing has a bunch of global state which needs locking, so your comment made me uneasy about this.\r\n\r\nI've replaced it with a (less satisfying...) commit that moves the `CInit` logic to `RNGState`. This is necessary, as we're now invoking OpenSSL based RNG code from global constructors, possibly before the CInit object is creator (and RNGState is always created whenever needed, even before global constructors). Perhaps this was a problem in the old code too.",
      "created_at": "2019-01-16T01:02:45Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248120121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248120121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 108,
      "original_line": 108,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248121024",
      "pull_request_review_id": 192936973,
      "id": 248121024,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODEyMTAyNA==",
      "diff_hunk": "@@ -129,18 +135,41 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n-void RandAddSeed()\n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n {\n-    // Seed with CPU performance counter\n-    int64_t nCounter = GetPerformanceCounter();\n-    RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();\n+        hasher.Write((const unsigned char*)&perf, sizeof(perf));\n+    } while (GetTimeMicros() < start + microseconds);",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "in_reply_to_id": 243231044,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Marking as resolved as the hardening code is removed from this PR.",
      "created_at": "2019-01-16T01:08:40Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248121024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248121024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248194305",
      "pull_request_review_id": 193025955,
      "id": 248194305,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODE5NDMwNQ==",
      "diff_hunk": "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "path": "src/random.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does this refer to an accidental scenario, where a user ends up generating the same private keys or accidentally signing with the same nonce? Or also a malicious scenario?\r\n\r\nSo do I understand correctly that the reason `FastRandomContext` needs to *fast* is (mostly) this, or are there also areas of code that need the additional performance?",
      "created_at": "2019-01-16T08:52:21Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248194305",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248194305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248206611",
      "pull_request_review_id": 193025955,
      "id": 248206611,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIwNjYxMQ==",
      "diff_hunk": "@@ -166,13 +166,12 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n-            warned = true;\n-        }\n+        // Performance data is only used as a last resort to improve entropy.",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"as a last resort\" makes it sound really important, which contradicts \"it is isn't considered critical\".\r\n\r\nMaybe say (in a followup PR): \r\n```\r\n// Performance data provides additional entropy, but failure to read it isn't\r\n// considered critical, so we don't call RandFailure().\r\n```",
      "created_at": "2019-01-16T09:30:32Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248206611",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248206611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248206697",
      "pull_request_review_id": 193025955,
      "id": 248206697,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIwNjY5Nw==",
      "diff_hunk": "@@ -166,13 +166,12 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n-            warned = true;\n-        }\n+        // Performance data is only used as a last resort to improve entropy.\n+        // Failure to read it is isn't conidered critical, so we don't call",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo \"conidered\" (but see above)",
      "created_at": "2019-01-16T09:30:47Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248206697",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248206697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248218873",
      "pull_request_review_id": 193025955,
      "id": 248218873,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIxODg3Mw==",
      "diff_hunk": "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"and\" is ambiguous, is it part of \"Rand\" or does the function name mean \"(init?) HardWare Random (number generator) and Report\"?\r\n\r\nSuggestion: `ReportHardwareRNG()`",
      "created_at": "2019-01-16T10:05:19Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248218873",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248218873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248227342",
      "pull_request_review_id": 193025955,
      "id": 248227342,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIyNzM0Mg==",
      "diff_hunk": "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()\n+{\n+    assert(hwrand_initialized.load(std::memory_order_relaxed));",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggested comment above (for those not intimately familiar with `std::atomic`, who might initially think `load()` is some sort of initialisation performing side-effect):\r\n```\r\n// Ensure `HWRandInit()` was called first\r\n```\r\nThen again, it goes away in a later commit.",
      "created_at": "2019-01-16T10:29:10Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248227342",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248227342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248228186",
      "pull_request_review_id": 193025955,
      "id": 248228186,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIyODE4Ng==",
      "diff_hunk": "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add comment that this currently looks for `rdrand` support in the CPU. \r\nSuggested name: `InitHardwareRNG()`",
      "created_at": "2019-01-16T10:31:46Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248228186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248228186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248230465",
      "pull_request_review_id": 193025955,
      "id": 248230465,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIzMDQ2NQ==",
      "diff_hunk": "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()\n+{\n+    assert(hwrand_initialized.load(std::memory_order_relaxed));\n+    if (rdrand_supported) {\n+        // This must be done in a separate function, as HWRandInit() may be indirectly called\n+        // from global constructors, before logging is initialized.\n+        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n+    }\n+}\n+\n #else\n-static void RDRandInit() {}\n+static void HWRandInit() {}",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe clarify constraints that would apply to future hardware RNGs. E.g. is this an appropriate place to interface with a USB based RNG? Or does it have to be in the CPU for availability and latency reasons? Is it OK to use a lower quality CPU RNG for this, because it's strictly additional entropy?",
      "created_at": "2019-01-16T10:38:27Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248230465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248230465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248231617",
      "pull_request_review_id": 193025955,
      "id": 248231617,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIzMTYxNw==",
      "diff_hunk": "@@ -278,6 +288,26 @@ void GetRandBytes(unsigned char* buf, int num)\n     }\n }\n \n+namespace {\n+struct RNGState {\n+    Mutex cs;\n+    unsigned char state[32] = {0};",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe clarify why you chose 32 back in #10338, assuming that reasoning still applies:\r\n```\r\n// As we're already using SHA512 to combine the multiple entropy sources,\r\n// which produces 64 bytes, we can use the last 32 of those as an additional\r\n// input for the next call. This makes sure that the produced data is secure\r\n// as long as any entropy source in the past was reliable.\r\n```",
      "created_at": "2019-01-16T10:42:14Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248231617",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248231617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248236954",
      "pull_request_review_id": 193025955,
      "id": 248236954,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIzNjk1NA==",
      "diff_hunk": "@@ -178,7 +178,12 @@ void GetOSRand(unsigned char *ent32);\n  */\n bool Random_SanityCheck();\n \n-/** Initialize the RNG. */\n+/**\n+ * Initialize global RNG state and log any CPU features that are used.\n+ *\n+ * Calling this function is optional. RNG state will be initialized when first\n+ * needed if it is not called.",
      "path": "src/random.h",
      "position": 172,
      "original_position": 9,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add comment that `rng.state` is initialised to zeros, i.e. initialisation just refers to the C++ action, not to the broader sense of the word (which might include seeding).",
      "created_at": "2019-01-16T10:58:55Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248236954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248236954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 235,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248246123",
      "pull_request_review_id": 193025955,
      "id": 248246123,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI0NjEyMw==",
      "diff_hunk": "@@ -298,6 +298,34 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n+        {\n+            LOCK(cs);",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "d76cc6dbb9e1c5c6a0f3b002932ba4033b722255",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thread safety n00b question: what did `WAIT_LOCK` do and why is `LOCK` fine here? ",
      "created_at": "2019-01-16T11:29:30Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248246123",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248246123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 309,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248249382",
      "pull_request_review_id": 193025955,
      "id": 248249382,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI0OTM4Mg==",
      "diff_hunk": "@@ -298,6 +298,34 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n+        {\n+            LOCK(cs);\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            assert(out != nullptr);\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);",
      "path": "src/random.cpp",
      "position": 195,
      "original_position": 30,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "d76cc6dbb9e1c5c6a0f3b002932ba4033b722255",
      "in_reply_to_id": 247654362,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Such a `Cleanse()` method might indeed improve readability, and maybe even offers a way to automatically detect where it's potentially missing. Would it then also make sense to have a `unsigned char []` alternative with a `Cleanse()` method? E.g. `hygienic_char []` :-)",
      "created_at": "2019-01-16T11:41:41Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248249382",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248249382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 353,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248256491",
      "pull_request_review_id": 193025955,
      "id": 248256491,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI1NjQ5MQ==",
      "diff_hunk": "@@ -86,47 +83,6 @@ const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n \n-/** Init OpenSSL library multithreading support */\n-static std::unique_ptr<CCriticalSection[]> ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n-{\n-    if (mode & CRYPTO_LOCK) {\n-        ENTER_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    } else {\n-        LEAVE_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    }\n-}\n-\n-// Singleton for wrapping OpenSSL setup/teardown.\n-class CInit\n-{\n-public:\n-    CInit()\n-    {\n-        // Init OpenSSL library multithreading support\n-        ppmutexOpenSSL.reset(new CCriticalSection[CRYPTO_num_locks()]);\n-        CRYPTO_set_locking_callback(locking_callback);",
      "path": "src/util/system.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "fa2eabe154d00bf6c54f604acbe758186d044639",
      "in_reply_to_id": 247674434,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add the above as a comment, so we can consider this once BIP70 goes away.",
      "created_at": "2019-01-16T12:09:16Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248256491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248256491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 108,
      "original_line": 108,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248260207",
      "pull_request_review_id": 193025955,
      "id": 248260207,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI2MDIwNw==",
      "diff_hunk": "@@ -331,14 +307,19 @@ struct RNGState {\n         CRYPTO_set_locking_callback(nullptr);\n     }\n \n-    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n-    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n+     *\n+     * If this function has never been called with full_init = true, false is returned.",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you explain why this function must be called at least twice before it's OK to use?",
      "created_at": "2019-01-16T12:23:35Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248260207",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248260207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 312,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248261482",
      "pull_request_review_id": 193025955,
      "id": 248261482,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI2MTQ4Mg==",
      "diff_hunk": "@@ -297,6 +280,7 @@ struct RNGState {\n     Mutex cs;\n     unsigned char state[32] GUARDED_BY(cs) = {0};\n     uint64_t counter GUARDED_BY(cs) = 0;\n+    bool initialized GUARDED_BY(cs) = false;",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This might lead to confusion with the other meaning of initialized that's referred to in \"Initialize global RNG state\".",
      "created_at": "2019-01-16T12:28:11Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248261482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248261482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248271203",
      "pull_request_review_id": 193025955,
      "id": 248271203,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI3MTIwMw==",
      "diff_hunk": "@@ -380,61 +362,128 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n     }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedSleep(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    // Sleep for 1ms\n+    MilliSleep(1);\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+    // Windows performance monitor data (once every 10 minutes)",
      "path": "src/random.cpp",
      "position": 332,
      "original_position": 189,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"every 10 minutes\" includes the first usage, right?",
      "created_at": "2019-01-16T12:59:56Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248271203",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248271203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 453,
      "original_line": 453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248272384",
      "pull_request_review_id": 193025955,
      "id": 248272384,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI3MjM4NA==",
      "diff_hunk": "@@ -380,61 +362,128 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n     }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.",
      "path": "src/random.cpp",
      "position": 261,
      "original_position": 123,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Assuming it's always CPU based and not same external device, so this assumption should be stated in the empty / placeholder `HWRandInit` implementations for other architectures.",
      "created_at": "2019-01-16T13:03:35Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248272384",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248272384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 409,
      "original_line": 409,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248397267",
      "pull_request_review_id": 193283085,
      "id": 248397267,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODM5NzI2Nw==",
      "diff_hunk": "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "path": "src/random.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "in_reply_to_id": 248194305,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Does this refer to an accidental scenario, where a user ends up generating the same private keys or accidentally signing with the same nonce? Or also a malicious scenario?\r\n\r\nDoes it matter whether it can be triggered accidentally or intentionally?\r\n\r\n> So do I understand correctly that the reason FastRandomContext needs to fast is (mostly) this, or are there also areas of code that need the additional performance?\r\n\r\nI don't understand the question or the relation with the code you're commenting on.",
      "created_at": "2019-01-16T18:22:02Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248397267",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248397267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248398342",
      "pull_request_review_id": 193284478,
      "id": 248398342,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODM5ODM0Mg==",
      "diff_hunk": "@@ -166,13 +166,12 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n-            warned = true;\n-        }\n+        // Performance data is only used as a last resort to improve entropy.",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a",
      "in_reply_to_id": 248206611,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> \"as a last resort\" makes it sound really important, which contradicts \"it is isn't considered critical\".\r\n\r\nI don't understand the contradiction.\r\n\r\nWe generally assume that the OS RNG is providing us with good randomness. It's only in highly unlikely (but hard to prevent) scenarios that it fails at that. As a last resort belt-and-suspenders, we also seed entropy from elsewhere. However, that additional entropy (perfmon data here) isn't necessarily good, or to be relied upon. It's just there to make an otherwise fatal but unlikely error less dramatic, but it can't be more than a best effort regardless.",
      "created_at": "2019-01-16T18:25:10Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248398342",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248398342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248398859",
      "pull_request_review_id": 193285095,
      "id": 248398859,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODM5ODg1OQ==",
      "diff_hunk": "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": 248218873,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're nitpicking. Nowhere do we use a naming style where a lowercase character after an uppercase one starts a new word.",
      "created_at": "2019-01-16T18:26:36Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248398859",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248398859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248399032",
      "pull_request_review_id": 193285332,
      "id": 248399032,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODM5OTAzMg==",
      "diff_hunk": "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()\n+{\n+    assert(hwrand_initialized.load(std::memory_order_relaxed));",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": 248227342,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seriously, read the documentation if this isn't clear.",
      "created_at": "2019-01-16T18:27:04Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248399032",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248399032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248399514",
      "pull_request_review_id": 193285936,
      "id": 248399514,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODM5OTUxNA==",
      "diff_hunk": "@@ -331,14 +307,19 @@ struct RNGState {\n         CRYPTO_set_locking_callback(nullptr);\n     }\n \n-    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n-    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n+     *\n+     * If this function has never been called with full_init = true, false is returned.",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "in_reply_to_id": 248260207,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It doesn't?\r\n\r\nWe just want to make sure it's at least once initialized with sufficient entropy before the caller (ProcRand) wants to use its output.",
      "created_at": "2019-01-16T18:28:23Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248399514",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248399514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 312,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248399701",
      "pull_request_review_id": 193286158,
      "id": 248399701,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODM5OTcwMQ==",
      "diff_hunk": "@@ -380,61 +362,128 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n     }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedSleep(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    // Sleep for 1ms\n+    MilliSleep(1);\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+    // Windows performance monitor data (once every 10 minutes)",
      "path": "src/random.cpp",
      "position": 332,
      "original_position": 189,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "in_reply_to_id": 248271203,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, but not through this code path.",
      "created_at": "2019-01-16T18:28:54Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248399701",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248399701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 453,
      "original_line": 453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248400496",
      "pull_request_review_id": 193287146,
      "id": 248400496,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQwMDQ5Ng==",
      "diff_hunk": "@@ -178,7 +178,12 @@ void GetOSRand(unsigned char *ent32);\n  */\n bool Random_SanityCheck();\n \n-/** Initialize the RNG. */\n+/**\n+ * Initialize global RNG state and log any CPU features that are used.\n+ *\n+ * Calling this function is optional. RNG state will be initialized when first\n+ * needed if it is not called.",
      "path": "src/random.h",
      "position": 172,
      "original_position": 9,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": 248236954,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, it does refer to the broader sense, including seeding.",
      "created_at": "2019-01-16T18:31:09Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248400496",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248400496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 235,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248400704",
      "pull_request_review_id": 193287408,
      "id": 248400704,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQwMDcwNA==",
      "diff_hunk": "@@ -298,6 +298,34 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n+        {\n+            LOCK(cs);",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "d76cc6dbb9e1c5c6a0f3b002932ba4033b722255",
      "in_reply_to_id": 248246123,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The only difference is that it lets you specify the name of the lock variable.",
      "created_at": "2019-01-16T18:31:40Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248400704",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248400704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 309,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248405785",
      "pull_request_review_id": 193293744,
      "id": 248405785,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQwNTc4NQ==",
      "diff_hunk": "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "path": "src/random.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "in_reply_to_id": 248194305,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was trying to understand _why_ it needs to be fast. The explanation here suggests it's mostly about protecting against some sort of VM replay scenario. But in later commits it's clear that there's also a performance concern, e.g. the Perfmon can take two seconds.",
      "created_at": "2019-01-16T18:46:17Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248405785",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248405785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248407517",
      "pull_request_review_id": 193295949,
      "id": 248407517,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQwNzUxNw==",
      "diff_hunk": "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "path": "src/random.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "in_reply_to_id": 248194305,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, I see. I think you're looking at it the wrong way. Of course there are many places in the code where we need fast randomness (of various sizes); the issue that the speed concern means we can't do very good seeding, so we need a separate function for the few places where we _really_ need good randomness (GetStrongRandBytes).",
      "created_at": "2019-01-16T18:51:09Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248407517",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248407517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248408522",
      "pull_request_review_id": 193297172,
      "id": 248408522,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQwODUyMg==",
      "diff_hunk": "@@ -166,13 +166,12 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n-            warned = true;\n-        }\n+        // Performance data is only used as a last resort to improve entropy.",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a",
      "in_reply_to_id": 248206611,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The way I read the phrase \"as a last resort\" is: *if* there was a way to detect that our RNG attempts thus far have failed, we try this thing as a last resort. In the last resort also fails, that's critical. Hence the contraction.\r\n\r\nBut because we normally can't detect if we actually needed the last resort, we don't know if the failure was critical, and most likely it wasn't.",
      "created_at": "2019-01-16T18:53:54Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248408522",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248408522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248409459",
      "pull_request_review_id": 193298383,
      "id": 248409459,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQwOTQ1OQ==",
      "diff_hunk": "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": 248218873,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I spent at least half an hour being confused about what `HWRandInit` and `HWRandReport` were doing, otherwise I wouldn't have brought up this up.",
      "created_at": "2019-01-16T18:56:30Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248409459",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248409459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248412403",
      "pull_request_review_id": 193302217,
      "id": 248412403,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQxMjQwMw==",
      "diff_hunk": "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "path": "src/random.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "in_reply_to_id": 248194305,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I do understand that fast also implies weak. The question is why you would ever accept weak, if you already code from strong. The obvious answer is performance. But the comment here talks about a VM replay scenario.\r\n\r\nBut now I see what confused me: \"These entropy sources are very fast, and mostly designed to protect against situations  where a VM state restore\" - the part after \"and\" doesn't refer to \"fast\"; they are an _additional_ benefit of these sources.",
      "created_at": "2019-01-16T19:05:21Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248412403",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248412403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248412855",
      "pull_request_review_id": 193302820,
      "id": 248412855,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQxMjg1NQ==",
      "diff_hunk": "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "path": "src/random.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "in_reply_to_id": 248194305,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "FastButStillHardToReplayRandomContext :-P",
      "created_at": "2019-01-16T19:06:48Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248412855",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248412855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248413469",
      "pull_request_review_id": 193303637,
      "id": 248413469,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQxMzQ2OQ==",
      "diff_hunk": "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "path": "src/random.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "in_reply_to_id": 248194305,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, `FastRandomContext` does *not* protect against replay. `GetRand*()` does.\r\n\r\nThe constructor of FRC does use GetRandBytes, but once you have a RFC, any replay is going to result in repeated randomness produced by RFC.\r\n",
      "created_at": "2019-01-16T19:08:51Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248413469",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248413469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248419894",
      "pull_request_review_id": 193312370,
      "id": 248419894,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQxOTg5NA==",
      "diff_hunk": "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "path": "src/random.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "in_reply_to_id": 248194305,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah yes, see #14623 about keeping `FastRandomContext` available for \"non-critical random numbers needed inside tight loops\".",
      "created_at": "2019-01-16T19:29:20Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248419894",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248419894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248458454",
      "pull_request_review_id": 193362488,
      "id": 248458454,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ1ODQ1NA==",
      "diff_hunk": "@@ -278,6 +288,26 @@ void GetRandBytes(unsigned char* buf, int num)\n     }\n }\n \n+namespace {\n+struct RNGState {\n+    Mutex cs;",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Automatically initialize RNG on first use.\" (2a02d2c369ee06cbc334a0dd7150ec72ef83a182)\r\n\r\nIgnore if this is a pain, or if there is nostalgia for critical sections, but you might want to use `m_mutex` instead of `cs` here, and `m_openssl_mutex` instead of `cs_openssl` in 772fce745c51aa9d09f93e13eeb822e889ae25f7",
      "created_at": "2019-01-16T21:32:19Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248458454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248458454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248467631",
      "pull_request_review_id": 193362488,
      "id": 248467631,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ2NzYzMQ==",
      "diff_hunk": "@@ -336,6 +337,8 @@ struct RNGState {\n         memory_cleanse(buf, 64);\n         return ret;\n     }\n+\n+    Mutex& GetOpenSSLLock(int i) { return cs_openssl[i]; }",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "bfd3a23f277c16236ba6ea7391a98277226c1470",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Encapsulate RNGState better\" (bfd3a23f277c16236ba6ea7391a98277226c1470)\r\n\r\nSeems more accurate to call it Mutex than Lock (as in 7939daa351a31a36f2086771611b501418536989), if Mutex is the object that gets locked, and Lock is the object that locks it.",
      "created_at": "2019-01-16T22:02:16Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248467631",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248467631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248496977",
      "pull_request_review_id": 193410076,
      "id": 248496977,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5Njk3Nw==",
      "diff_hunk": "@@ -166,13 +166,12 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n-            warned = true;\n-        }\n+        // Performance data is only used as a last resort to improve entropy.",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a",
      "in_reply_to_id": 248206611,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Reformulated the text a bit.",
      "created_at": "2019-01-17T00:00:33Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248496977",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248496977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497019",
      "pull_request_review_id": 193410131,
      "id": 248497019,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzAxOQ==",
      "diff_hunk": "@@ -166,13 +166,12 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n-            warned = true;\n-        }\n+        // Performance data is only used as a last resort to improve entropy.\n+        // Failure to read it is isn't conidered critical, so we don't call",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a",
      "in_reply_to_id": 248206697,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2019-01-17T00:00:53Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497110",
      "pull_request_review_id": 193410257,
      "id": 248497110,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzExMA==",
      "diff_hunk": "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": 248228186,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, added a separate commit with renames and the comments on HWRNG performance you suggested elsewhere.",
      "created_at": "2019-01-17T00:01:23Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497144",
      "pull_request_review_id": 193410301,
      "id": 248497144,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzE0NA==",
      "diff_hunk": "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()\n+{\n+    assert(hwrand_initialized.load(std::memory_order_relaxed));\n+    if (rdrand_supported) {\n+        // This must be done in a separate function, as HWRandInit() may be indirectly called\n+        // from global constructors, before logging is initialized.\n+        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n+    }\n+}\n+\n #else\n-static void RDRandInit() {}\n+static void HWRandInit() {}",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": 248230465,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment.",
      "created_at": "2019-01-17T00:01:34Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497144",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497222",
      "pull_request_review_id": 193410399,
      "id": 248497222,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzIyMg==",
      "diff_hunk": "@@ -278,6 +288,26 @@ void GetRandBytes(unsigned char* buf, int num)\n     }\n }\n \n+namespace {\n+struct RNGState {\n+    Mutex cs;\n+    unsigned char state[32] = {0};",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": 248231617,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a similar comment to the RNGState::m_state variable.",
      "created_at": "2019-01-17T00:01:57Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497222",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497286",
      "pull_request_review_id": 193410471,
      "id": 248497286,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzI4Ng==",
      "diff_hunk": "@@ -297,6 +280,7 @@ struct RNGState {\n     Mutex cs;\n     unsigned char state[32] GUARDED_BY(cs) = {0};\n     uint64_t counter GUARDED_BY(cs) = 0;\n+    bool initialized GUARDED_BY(cs) = false;",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "in_reply_to_id": 248261482,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed to `m_strongly_seeded`.",
      "created_at": "2019-01-17T00:02:18Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497286",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497334",
      "pull_request_review_id": 193410528,
      "id": 248497334,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzMzNA==",
      "diff_hunk": "@@ -380,61 +362,128 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n     }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedSleep(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    // Sleep for 1ms\n+    MilliSleep(1);\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+    // Windows performance monitor data (once every 10 minutes)",
      "path": "src/random.cpp",
      "position": 332,
      "original_position": 189,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "in_reply_to_id": 248271203,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, I see the confusion. Removed that phrasing.",
      "created_at": "2019-01-17T00:02:36Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497334",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 453,
      "original_line": 453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497372",
      "pull_request_review_id": 193410574,
      "id": 248497372,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzM3Mg==",
      "diff_hunk": "@@ -380,61 +362,128 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n     }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.",
      "path": "src/random.cpp",
      "position": 261,
      "original_position": 123,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "in_reply_to_id": 248272384,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-01-17T00:02:48Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497372",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 409,
      "original_line": 409,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497443",
      "pull_request_review_id": 193410667,
      "id": 248497443,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzQ0Mw==",
      "diff_hunk": "@@ -278,6 +288,26 @@ void GetRandBytes(unsigned char* buf, int num)\n     }\n }\n \n+namespace {\n+struct RNGState {\n+    Mutex cs;",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "in_reply_to_id": 248458454,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-01-17T00:03:09Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497443",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497470",
      "pull_request_review_id": 193410691,
      "id": 248497470,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzQ3MA==",
      "diff_hunk": "@@ -336,6 +337,8 @@ struct RNGState {\n         memory_cleanse(buf, 64);\n         return ret;\n     }\n+\n+    Mutex& GetOpenSSLLock(int i) { return cs_openssl[i]; }",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "original_commit_id": "bfd3a23f277c16236ba6ea7391a98277226c1470",
      "in_reply_to_id": 248467631,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-01-17T00:03:18Z",
      "updated_at": "2019-01-17T00:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 341,
      "side": "RIGHT"
    }
  ]
}