{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
    "id": 1063336065,
    "node_id": "PR_kwDOABII584_YTiB",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/26152",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/26152.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/26152.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
    "number": 26152,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Bump unconfirmed ancestor transactions to target feerate",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "_**Depends on https://github.com/bitcoin/bitcoin/pull/27021.** If you are interested in this PR, please consider reviewing #27021 first._\r\n\r\nThe commits\r\n\r\n- [mempool] add function to calculate all connected mempool entries\r\n- Implement Mini version of BlockAssembler to calculate mining scores\r\n- [unit test] CalculateCluster and MiniMiner unit tests\r\n- [fuzz] Add MiniMiner target + diff fuzz\r\n\r\nare part of #27021 and only part of this pullrequest because #26152 builds on #27021. Please leave any review comments pertaining to these commits on #27021.\r\n\r\nThe new commits for #26152 are:\r\n\r\n- [node] interface to get bump fees\r\n- Bump unconfirmed parent txs to target feerate\r\n- Amend bumpfee for inputs with overlapping ancestry\r\n\r\n----\r\n\r\nReduces the effective value of unconfirmed UTXOs by the fees necessary to bump their ancestor transactions to the same feerate.\r\n\r\nWhile the individual UTXOs always account for their full ancestry before coin-selection, we can correct potential overestimates with a second pass where we establish the ancestry and bump fee for the whole input set collectively.\r\n\r\nFixes #9645 \r\nFixes #9864 \r\nFixes #15553",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      },
      {
        "id": 1648013533,
        "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
        "name": "Review club",
        "description": "",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2022-09-21T20:52:28Z",
    "updated_at": "2023-06-07T07:33:12Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "af9870da13dbd5f199bdc76ef003a998fe4578a0",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "Xekyo:2022-09-ancestor-aware-funding",
      "ref": "2022-09-ancestor-aware-funding",
      "sha": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 23979970,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMzk3OTk3MA==",
        "name": "bitcoin",
        "full_name": "Xekyo/bitcoin",
        "owner": {
          "login": "Xekyo",
          "id": 4060799,
          "node_id": "MDQ6VXNlcjQwNjA3OTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Xekyo",
          "html_url": "https://github.com/Xekyo",
          "followers_url": "https://api.github.com/users/Xekyo/followers",
          "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
          "organizations_url": "https://api.github.com/users/Xekyo/orgs",
          "repos_url": "https://api.github.com/users/Xekyo/repos",
          "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Xekyo/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/Xekyo/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Xekyo/bitcoin",
        "archive_url": "https://api.github.com/repos/Xekyo/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Xekyo/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Xekyo/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Xekyo/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Xekyo/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Xekyo/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Xekyo/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Xekyo/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Xekyo/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Xekyo/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Xekyo/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Xekyo/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Xekyo/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Xekyo/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Xekyo/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Xekyo/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Xekyo/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Xekyo/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Xekyo/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Xekyo/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Xekyo/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Xekyo/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Xekyo/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Xekyo/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Xekyo/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Xekyo/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Xekyo/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Xekyo/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Xekyo/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Xekyo/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Xekyo/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Xekyo/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Xekyo/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Xekyo/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Xekyo/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Xekyo/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Xekyo/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Xekyo/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Xekyo/bitcoin/hooks",
        "svn_url": "https://github.com/Xekyo/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 200902,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-05T22:31:39Z",
        "created_at": "2014-09-12T23:11:53Z",
        "updated_at": "2023-05-11T06:24:44Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "904631e0fc00ac9c8a03d1ce226d071bf88c00db",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34341,
        "stargazers_count": 69825,
        "watchers_count": 69825,
        "size": 234259,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T15:59:50Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T15:20:57Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
      }
    },
    "author_association": "MEMBER",
    "draft": true,
    "additions": 1854,
    "deletions": 13,
    "changed_files": 17,
    "commits": 7,
    "review_comments": 140,
    "comments": 25
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 7434358340,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAG7H05E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7434358340",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-21T21:16:53Z"
    },
    {
      "event": "commented",
      "id": 1254331602,
      "node_id": "IC_kwDOABII585Kw5TS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1254331602",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-21T23:24:48Z",
      "updated_at": "2023-04-13T05:25:50Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [fanquake](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1116611222), [glozow](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1117618586), [jonatack](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118062799), [t-bast](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118109036), [ishaanam](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1122523189), [andrewtoth](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1187092079), [stickies-v](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1188589097), [LarryRuane](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1198255084), [josibake](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1206585147) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27419](https://github.com/bitcoin/bitcoin/pull/27419) (refactor: Extract common/args from util/system by TheCharlatan)\n* [#27385](https://github.com/bitcoin/bitcoin/pull/27385) (net, refactor: extract Network and BIP155Network logic to node/network by jonatack)\n* [#27308](https://github.com/bitcoin/bitcoin/pull/27308) (bumpfee: avoid making bumped transactions with too low fee when replacing outputs by achow101)\n* [#27286](https://github.com/bitcoin/bitcoin/pull/27286) (wallet: Keep track of the wallet's own transaction outputs in memory by achow101)\n* [#26902](https://github.com/bitcoin/bitcoin/pull/26902) (wallet: do not backdate locktime if it may lead to fingerprinting by rodentrabies)\n* [#26467](https://github.com/bitcoin/bitcoin/pull/26467) (bumpfee: Allow the user to choose which output is change by achow101)\n* [#25273](https://github.com/bitcoin/bitcoin/pull/25273) (wallet: Pass through transaction locktime and preset input sequences and scripts to CreateTransaction by achow101)\n* [#24128](https://github.com/bitcoin/bitcoin/pull/24128) (wallet: BIP 326 sequence based anti-fee-snipe for taproot inputs by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1254331602",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "reviewed",
      "id": 1116611222,
      "node_id": "PRR_kwDOABII585CjiKW",
      "url": null,
      "actor": null,
      "commit_id": "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1116611222",
      "submitted_at": "2022-09-22T08:33:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "review_requested",
      "id": 7437339121,
      "node_id": "RRE_lADOABII585SV7NTzwAAAAG7TMnx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7437339121",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T08:34:30Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 7437339136,
      "node_id": "RRE_lADOABII585SV7NTzwAAAAG7TMoA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7437339136",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T08:34:30Z",
      "requested_reviewer": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7442551693,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAG7nFON",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7442551693",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T19:55:27Z"
    },
    {
      "event": "commented",
      "id": 1255484595,
      "node_id": "IC_kwDOABII585K1Syz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1255484595",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T19:56:21Z",
      "updated_at": "2022-09-22T19:56:21Z",
      "author_association": "MEMBER",
      "body": "Thanks @fanquake, I fixed the two issues.\r\n\r\nI also added a test for a transaction using `subtractfeefromamount`",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1255484595",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "mentioned",
      "id": 7442556958,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAG7nGge",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7442556958",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T19:56:21Z"
    },
    {
      "event": "subscribed",
      "id": 7442556963,
      "node_id": "SE_lADOABII585SV7NTzwAAAAG7nGgj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7442556963",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T19:56:21Z"
    },
    {
      "event": "reviewed",
      "id": 1117618586,
      "node_id": "PRR_kwDOABII585CnYGa",
      "url": null,
      "actor": null,
      "commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "HUGE Concept ACK obviously 🥳 🥳 \r\n\r\n~This needs to obey -maxtxfee, so I'd suggest that coin selection keeps track of what ancestors the tx has and how much of the fees is ancestors vs this transaction. And we'd want a test where the target feerate is just below maxtxfee and there are low-feerate ancestors to bump, and so `total fees paid / size of this tx` is higher than maxtxfee, but actually you're just paying to bump.~\r\n\r\n~Also, given that there is a (small) chance of overpayment, it would be good to check that -maxtxfee protects against something drastic. For example, a test where all the coins share 1 large parent? It will overestimate and -maxtxfee should make sure the tx isn't sent?~ edit: this is totally wrong",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1117618586",
      "submitted_at": "2022-09-22T20:09:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1118029972,
      "node_id": "PRR_kwDOABII585Co8iU",
      "url": null,
      "actor": null,
      "commit_id": "26f96f0e13ab801993cd7b95282230d45ee8ce65",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118029972",
      "submitted_at": "2022-09-23T07:37:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1118045668,
      "node_id": "PRR_kwDOABII585CpAXk",
      "url": null,
      "actor": null,
      "commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118045668",
      "submitted_at": "2022-09-23T07:52:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1118062799,
      "node_id": "PRR_kwDOABII585CpEjP",
      "url": null,
      "actor": null,
      "commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118062799",
      "submitted_at": "2022-09-23T08:04:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1118076665,
      "node_id": "PRR_kwDOABII585CpH75",
      "url": null,
      "actor": null,
      "commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118076665",
      "submitted_at": "2022-09-23T08:16:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1118109036,
      "node_id": "PRR_kwDOABII585CpP1s",
      "url": null,
      "actor": null,
      "commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK, thanks a lot for working on this, it will be very helpful!\r\nAnd this set of internal utility functions will very likely be useful for many things in the future.\r\nI'll create a set of E2E tests in eclair to run against this branch when I have a bit more time, I'll let you know the results.",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118109036",
      "submitted_at": "2022-09-23T08:47:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "labeled",
      "id": 7446310623,
      "node_id": "LE_lADOABII585SV7NTzwAAAAG71a7f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7446310623",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-23T10:43:50Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "commented",
      "id": 1256381127,
      "node_id": "IC_kwDOABII585K4trH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256381127",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-23T15:49:00Z",
      "updated_at": "2022-09-23T15:49:00Z",
      "author_association": "MEMBER",
      "body": "I ran a first set of tests from within eclair against https://github.com/bitcoin/bitcoin/pull/26152/commits/a07ac02d2bc6500a03c29a0413bb913735dca46f, and everything is looking good :+1: ",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1256381127",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "reviewed",
      "id": 1122523189,
      "node_id": "PRR_kwDOABII585C6Fg1",
      "url": null,
      "actor": null,
      "commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1122523189",
      "submitted_at": "2022-09-27T18:52:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7471492341,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAG9Vez1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471492341",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T19:15:31Z"
    },
    {
      "event": "commented",
      "id": 1259945661,
      "node_id": "IC_kwDOABII585LGT69",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1259945661",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T19:19:18Z",
      "updated_at": "2022-09-27T20:25:26Z",
      "author_association": "MEMBER",
      "body": "@jonatack, @t-bast: Thanks for the review and testing. I made an attempt of getting rid of the getters on MockMempoolEntry, but what I did interfered with the calls made on properties of actual mempool entries. Will have to shift my approach.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1259945661",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "mentioned",
      "id": 7471515035,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAG9VkWb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471515035",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T19:19:18Z"
    },
    {
      "event": "subscribed",
      "id": 7471515039,
      "node_id": "SE_lADOABII585SV7NTzwAAAAG9VkWf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471515039",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T19:19:18Z"
    },
    {
      "event": "mentioned",
      "id": 7471515043,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAG9VkWj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471515043",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T19:19:18Z"
    },
    {
      "event": "subscribed",
      "id": 7471515046,
      "node_id": "SE_lADOABII585SV7NTzwAAAAG9VkWm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471515046",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T19:19:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7471937780,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAG9XLj0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471937780",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:01Z"
    },
    {
      "event": "commented",
      "id": 1260008562,
      "node_id": "IC_kwDOABII585LGjRy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1260008562",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:04Z",
      "updated_at": "2022-09-27T20:25:43Z",
      "author_association": "MEMBER",
      "body": "@glozow: Maybe for\r\n\r\n> This needs to obey -maxtxfee\r\n\r\nMaybe we can add a `maxtxfee` check to the filter introduced in #25729 for max weight after input sets are produced for different subsets of the available coins. Perhaps a separate PR that builds both on this one here and #25729.\r\n\r\n@jonatack, @t-bast:\r\nFixed whitespace issues, applied the propose change to a class for the `struct MockMempoolEntry`, amended comments in Chain interface. Thanks!\r\n",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1260008562",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "mentioned",
      "id": 7471938059,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAG9XLoL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471938059",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:04Z"
    },
    {
      "event": "subscribed",
      "id": 7471938068,
      "node_id": "SE_lADOABII585SV7NTzwAAAAG9XLoU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471938068",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:04Z"
    },
    {
      "event": "mentioned",
      "id": 7471942175,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAG9XMof",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471942175",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:44Z"
    },
    {
      "event": "subscribed",
      "id": 7471942184,
      "node_id": "SE_lADOABII585SV7NTzwAAAAG9XMoo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471942184",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:44Z"
    },
    {
      "event": "mentioned",
      "id": 7471942195,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAG9XMoz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471942195",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:44Z"
    },
    {
      "event": "subscribed",
      "id": 7471942199,
      "node_id": "SE_lADOABII585SV7NTzwAAAAG9XMo3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471942199",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:44Z"
    },
    {
      "event": "reviewed",
      "id": 1123725020,
      "node_id": "PRR_kwDOABII585C-q7c",
      "url": null,
      "actor": null,
      "commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": ">> This needs to obey -maxtxfee\r\n\r\n> Maybe we can add a maxtxfee check to the filter introduced in https://github.com/bitcoin/bitcoin/pull/25729 for max weight after input sets are produced for different subsets of the available coins. Perhaps a separate PR that builds both on this one here and https://github.com/bitcoin/bitcoin/pull/25729.\r\n\r\n~Not sure if this is scope creep, but seems like breaking maxtxfee would be a bug and should probably be done in the same PR? Why not build this on top of #25729?~ ignore",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1123725020",
      "submitted_at": "2022-09-28T14:24:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7685032156,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHKEEjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7685032156",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-27T18:53:40Z"
    },
    {
      "event": "commented",
      "id": 1293951299,
      "node_id": "IC_kwDOABII585NICFD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1293951299",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-27T19:08:57Z",
      "updated_at": "2022-10-27T19:08:57Z",
      "author_association": "MEMBER",
      "body": "- Reordered members vs initialization\r\n- Removed special casing of UTXOs without relatives in CalculateBumpFee\r\n- Call CalculateBumpFee once for the whole UTXO pool instead of introducing chain-interface dependency on every UTXO\r\n\r\nTodos:\r\n- Prevent exceeding `maxtxfee`\r\n- Add test for bumpfee RPC\r\n- Add secondary modus for CalculateBumpFee that treats the provided UTXOs as being spent together. This allows us to recalculate the bumpfee of all inputs together to resolve our overpayment caveat. ",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1293951299",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "labeled",
      "id": 7686411631,
      "node_id": "LE_lADOABII585SV7NTzwAAAAHKJVVv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7686411631",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-27T22:55:59Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1300814643,
      "node_id": "IC_kwDOABII585NiNsz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300814643",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T16:19:58Z",
      "updated_at": "2022-11-02T16:19:58Z",
      "author_association": "MEMBER",
      "body": "@glozow: looking more into this, I realized that the `maxtxfee` refers to an absolute fee, not a feerate. `maxtxfee` is checked after a transaction is built, so I don't see how ancestor aware funding changes anything in regard to `maxtxfee`—we still check at the end whether the amount of fee is allowed, regardless how we calculated the fee. If you meant `maxtxfeerate`, that is used to check raw transactions on submission in `sendrawtx`, so it doesn't apply here either.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1300814643",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "mentioned",
      "id": 7725110962,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAHMc9ay",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7725110962",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T16:19:58Z"
    },
    {
      "event": "subscribed",
      "id": 7725110977,
      "node_id": "SE_lADOABII585SV7NTzwAAAAHMc9bB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7725110977",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T16:19:58Z"
    },
    {
      "event": "commented",
      "id": 1301002778,
      "node_id": "IC_kwDOABII585Ni7oa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301002778",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T17:42:09Z",
      "updated_at": "2022-11-02T17:42:09Z",
      "author_association": "MEMBER",
      "body": "> maxtxfee refers to an absolute fee, not a feerate. maxtxfee is checked after a transaction is built, so I don't see how ancestor aware funding changes anything in regard to maxtxfee\r\n\r\nAh for some reason I thought it was a feerate, apologies. Question: is it better to only enforce `-maxtxfee` on the fees paid for the tx itself and not on the fees used to bump its ancestors? Or would the user expect that it's applied to any tx, bumping or not?",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1301002778",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "commented",
      "id": 1301062904,
      "node_id": "IC_kwDOABII585NjKT4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301062904",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T18:38:45Z",
      "updated_at": "2022-11-02T18:38:45Z",
      "author_association": "MEMBER",
      "body": "> Question: is it better to only enforce `-maxtxfee` on the fees paid for the tx itself and not on the fees used to bump its ancestors? Or would the user expect that it's applied to any tx, bumping or not?\r\n\r\nI think that `-maxtxfee` should be expected to behave the same regardless of bumping, it's a context-free check.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1301062904",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7726569570,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHMihhi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7726569570",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T19:23:47Z"
    },
    {
      "event": "commented",
      "id": 1301111044,
      "node_id": "IC_kwDOABII585NjWEE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301111044",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T19:26:26Z",
      "updated_at": "2022-11-02T19:26:26Z",
      "author_association": "MEMBER",
      "body": "Latest changes:\r\n- Fixed bug where the outpoints spent by a transaction to be replaced got set to a bumpfee of 0\r\n- Added a test for preset inputs and the `bumpfee` RPC\r\n- Rebased\r\n\r\nRemaining Todo:\r\n- Add secondary modus for CalculateBumpFee that treats the provided UTXOs as being spent together. This allows us to recalculate the bumpfee of all inputs together to resolve our overpayment caveat.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1301111044",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "unlabeled",
      "id": 7726640008,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAHMiyuI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7726640008",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T19:33:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7736468155,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHNISK7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7736468155",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-03T23:07:32Z"
    },
    {
      "event": "labeled",
      "id": 7745501793,
      "node_id": "LE_lADOABII585SV7NTzwAAAAHNqvph",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7745501793",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-05T09:47:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1304553544,
      "node_id": "IC_kwDOABII585NwehI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1304553544",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-05T14:09:19Z",
      "updated_at": "2022-11-05T14:09:34Z",
      "author_association": "MEMBER",
      "body": "Update:\r\n\r\n<s>Caveat: If multiple UTXOs share ancestry, this implementation will overpay by bumping shared ancestors once per descendant.</s>\r\n\r\nAfter calculating an input set candidate, we recalculate the bumpfee for the collective set of inputs and correct our fee estimation if there was an overestimate due to overlapping ancestries.\r\n\r\nLeft to do:\r\n• rebase\r\n• clean up tests\r\n• clean up commits\r\n• touch up commit messages",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1304553544",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7755223722,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHOP1Kq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7755223722",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T18:20:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7755413005,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHOQjYN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7755413005",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T18:49:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7755482401,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHOQ0Uh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7755482401",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T19:00:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7755624814,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHORXFu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7755624814",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T19:19:16Z"
    },
    {
      "event": "unlabeled",
      "id": 7755644921,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAHORb_5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7755644921",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T19:22:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1306080540,
      "node_id": "IC_kwDOABII585N2TUc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1306080540",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T19:22:32Z",
      "updated_at": "2022-11-07T19:22:32Z",
      "author_association": "MEMBER",
      "body": "Cleaned up tests, redrew commits, touched up commit messages, rebased.\r\n\r\n**Ready for review.** :partying_face:",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1306080540",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "ready_for_review",
      "id": 7755647363,
      "node_id": "RFRE_lADOABII585SV7NTzwAAAAHORcmD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7755647363",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T19:22:35Z"
    },
    {
      "event": "reviewed",
      "id": 1173244112,
      "node_id": "PRR_kwDOABII585F7kjQ",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Are there any functional tests that test for fee calculation for a transaction with both an input with an unconfirmed ancestor and a confirmed input? I couldn't find one by looking at the descriptions of the functional tests.",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1173244112",
      "submitted_at": "2022-11-09T05:11:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "labeled",
      "id": 7803899672,
      "node_id": "LE_lADOABII585SV7NTzwAAAAHRJg8Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7803899672",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-14T12:58:55Z",
      "label": {
        "name": "Review club",
        "color": "0052cc"
      }
    },
    {
      "event": "subscribed",
      "id": 7809501638,
      "node_id": "SE_lADOABII585SV7NTzwAAAAHRe4nG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7809501638",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-15T01:19:12Z"
    },
    {
      "event": "reviewed",
      "id": 1183993011,
      "node_id": "PRR_kwDOABII585Gkkyz",
      "url": null,
      "actor": null,
      "commit_id": "ad8bffe548a2536f925e6911c7d50c1aaab1a59e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1183993011",
      "submitted_at": "2022-11-17T09:56:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1187092079,
      "node_id": "PRR_kwDOABII585GwZZv",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1187092079",
      "submitted_at": "2022-11-19T17:45:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1188589097,
      "node_id": "PRR_kwDOABII585G2G4p",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. Finished going through the code in the first 2 commits, more comments to come as I progress.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1188589097",
      "submitted_at": "2022-11-22T01:30:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1190768828,
      "node_id": "PRR_kwDOABII585G-bC8",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1190768828",
      "submitted_at": "2022-11-23T17:57:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "commented",
      "id": 1330485399,
      "node_id": "IC_kwDOABII585PTZiX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1330485399",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-29T11:30:16Z",
      "updated_at": "2022-11-29T11:30:16Z",
      "author_association": "MEMBER",
      "body": "Needs rebase after 8597260872bbef86524996ec695ffb30ec596416",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1330485399",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "reviewed",
      "id": 1198255084,
      "node_id": "PRR_kwDOABII585Ha-vs",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "898ad9d5904f1b689d18d94f20d92500cf443758\r\nConcept ACK\r\nLGTM, suggestions are minor. I'll continue reviewing.",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1198255084",
      "submitted_at": "2022-11-29T22:58:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "labeled",
      "id": 7920286929,
      "node_id": "LE_lADOABII585SV7NTzwAAAAHYFfzR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7920286929",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T09:45:45Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1186932380,
      "node_id": "PRR_kwDOABII585Gvyac",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1186932380",
      "submitted_at": "2022-11-30T18:05:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1198749149,
      "node_id": "PRR_kwDOABII585Hc3Xd",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1198749149",
      "submitted_at": "2022-12-02T00:08:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1203025818,
      "node_id": "PRR_kwDOABII585HtLea",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1203025818",
      "submitted_at": "2022-12-02T20:12:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1205584712,
      "node_id": "PRR_kwDOABII585H28NI",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1205584712",
      "submitted_at": "2022-12-06T01:25:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1205980356,
      "node_id": "PRR_kwDOABII585H4czE",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1205980356",
      "submitted_at": "2022-12-06T06:44:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1206585147,
      "node_id": "PRR_kwDOABII585H6wc7",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nStill in the process of reviewing (have reviewed up to and most of b669fd94f84e679d4549ef0abe1b0483e1406152), but left a few comments. \r\n\r\nSome general feedback: \r\n\r\nI noticed a lot of asserts being used. As I understand it, this is going to be a functionality exposed to the wallet, so wouldn't it be better to replace asserts with error messages that can be returned to the wallet? Seems better than crashing the node, IMO.\r\n\r\nAlso, the `MiniMiner` function is quite complicated. It might be worth adding a high-level overview to the PR description for the `MiniMiner::MiniMiner` as it seems like this is where a lot of the logic is. In particular, it seems to be working with several caches, so perhaps describing the general flow would be helpful. Take this feedback with a grain of salt, tho, as I'm not super familiar with the mempool and that could be why I'm struggling to follow the steps :sweat_smile: ",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1206585147",
      "submitted_at": "2022-12-06T15:06:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1206979066,
      "node_id": "PRR_kwDOABII585H8Qn6",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Hopefully this is helpful and not annoying, but here's a branch that makes the first couple commits less assert-happy and applies some of the suggestions to miniminer: https://github.com/glozow/bitcoin/tree/26152-fixups",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1206979066",
      "submitted_at": "2022-12-06T17:16:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "commented",
      "id": 1340645477,
      "node_id": "IC_kwDOABII585P6KBl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1340645477",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-07T09:28:29Z",
      "updated_at": "2022-12-07T09:28:29Z",
      "author_association": "MEMBER",
      "body": "> Hopefully this is helpful and not annoying, but here's a branch that makes the first couple commits less assert-happy and applies some of the suggestions to miniminer: https://github.com/glozow/bitcoin/tree/26152-fixups\r\n\r\nlgtm! ",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1340645477",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "reviewed",
      "id": 1208822643,
      "node_id": "PRR_kwDOABII585IDStz",
      "url": null,
      "actor": null,
      "commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1208822643",
      "submitted_at": "2022-12-07T17:16:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "commented",
      "id": 1344506798,
      "node_id": "IC_kwDOABII585QI4uu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1344506798",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-09T16:24:23Z",
      "updated_at": "2022-12-09T16:24:23Z",
      "author_association": "MEMBER",
      "body": "Two thoughts:\r\n\r\n1) I think this could be split up into two PRs; one for `MiniMiner` and another for the wallet logic. My reasoning here is the MiniMiner code seems like it could be useful outside of the wallet use case and thus could be merged independently and both parts by themselves seem complex enough that splitting it into two might make things easier to review.\r\n\r\n2) per @LarryRuane 's comment [#26152 (comment)](https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1038492630), I'm also not totally convinced we need the `to_be_replaced` logic in `MiniMiner`. I took out all of the code relating to `to_be_replaced` and the unit and functional tests still pass. It's possible this is due to insufficient test coverage, in which case having a test case to demonstrate why this logic is necessary would be super helpful. I have a few more thoughts regarding whether `MiniMiner` or the wallet should be handling the conflicting transactions logic, but I'll try to add a concrete example in a test case to first convince myself and also make the conversation more productive",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1344506798",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "mentioned",
      "id": 8000111025,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAHc2AGx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8000111025",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-09T16:24:23Z"
    },
    {
      "event": "subscribed",
      "id": 8000111042,
      "node_id": "SE_lADOABII585SV7NTzwAAAAHc2AHC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8000111042",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-09T16:24:23Z"
    },
    {
      "event": "commented",
      "id": 1344541489,
      "node_id": "IC_kwDOABII585QJBMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1344541489",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-09T17:01:45Z",
      "updated_at": "2022-12-09T17:01:45Z",
      "author_association": "MEMBER",
      "body": "> I'm also not totally convinced we need the to_be_replaced logic in MiniMiner. I took out all of the code relating to to_be_replaced and the unit and functional tests still pass. It's possible this is due to insufficient test coverage\r\n\r\nI would say this is at least 95% due to insufficient coverage in the unit tests (pretty sparse at the moment). I don't think it's possible to hit very much of the replacement-related logic through functional tests, because our (1) RBF rules currently do not allow any additional unconfirmed inputs so we won't actually ask MiniMiner to calculate much, (2) our wallet will never try to replace something with descendants and (3) our wallet will always use all the inputs from the replacee (so the size of `to_be_replaced` is always 1 and the set of unconfirmed ancestors is identical before and after).\r\n\r\nBut maybe this is a good reason *to* remove it! If it never executes because of how our wallet operates, and the wallet is the only client of this interface, then it would be complexity for no reason. We could just use `CalculateTotalBumpFees()` for a replacement (since that's all the unconfirmed inputs we'll use) and only add logic for replacements if (1) ever changes in the future.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1344541489",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "commented",
      "id": 1345580773,
      "node_id": "IC_kwDOABII585QM-7l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1345580773",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-11T15:16:40Z",
      "updated_at": "2022-12-11T15:16:40Z",
      "author_association": "MEMBER",
      "body": "> But maybe this is a good reason _to_ remove it! If it never executes because of how our wallet operates, and the wallet is the only client of this interface, then it would be complexity for no reason.\r\n\r\nI think this is a good reason to leave it out for now. I started writing a unit test to try and cover different replacement scenarios, but it felt a little silly to be writing tests for scenarios that would never actually happen to due the RBF rules and how the wallet behaves.\r\n\r\nI also haven't been able to think of a scenario where `MiniMiner` would return an incorrect bumpfee if it didn't have the \"to be replaced logic\" if `MiniMiner` was given a set of \"reasonable\" outpoints in the first place. @Xekyo perhaps you have an example that I haven't thought of?\r\n\r\ntldr; imo we should prefer a simpler implementation which makes as few assumptions as possible and add in more complexity if/when it is needed.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1345580773",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "mentioned",
      "id": 8007879743,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAHdTow_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8007879743",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-11T15:16:40Z"
    },
    {
      "event": "subscribed",
      "id": 8007879746,
      "node_id": "SE_lADOABII585SV7NTzwAAAAHdToxC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8007879746",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-11T15:16:40Z"
    },
    {
      "event": "reviewed",
      "id": 1220130696,
      "node_id": "PRR_kwDOABII585IubeI",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Just FYI, I added a commit with a benchmark to the [branch](https://github.com/LarryRuane/bitcoin/commits/2022-11-pr26152-refactor) I mentioned earlier (with an alternate implementation of `MiniMiner`); feel free to cherry-pick this commit. It also seems useful as a stress test -- most of my comments below are the result of running the benchmark.",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1220130696",
      "submitted_at": "2022-12-16T06:31:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1187107175,
      "node_id": "PRR_kwDOABII585GwdFn",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "WIP: I’ve addressed all comments up to https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1344506798\r\n\r\nI am currently evaluating whether splitting this PR in two makes sense, and still need to investigate @LarryRuane’s alternative branch.\r\n\r\nRedesignating this PR to draft to signal that it’s not ready for review at the moment.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1187107175",
      "submitted_at": "2023-01-31T21:48:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8404085476,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH07Crk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8404085476",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-31T21:49:17Z"
    },
    {
      "event": "convert_to_draft",
      "id": 8404098782,
      "node_id": "CTDE_lADOABII585SV7NTzwAAAAH07F7e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8404098782",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-31T21:51:13Z"
    },
    {
      "event": "unlabeled",
      "id": 8404521593,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAH08tJ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8404521593",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-31T22:55:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 8412009407,
      "node_id": "LE_lADOABII585SV7NTzwAAAAH1ZRO_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8412009407",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T16:01:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8415634712,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH1nGUY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8415634712",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T23:29:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8415883910,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH1oDKG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8415883910",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-02T00:17:46Z"
    },
    {
      "event": "commented",
      "id": 1412961365,
      "node_id": "IC_kwDOABII585UOBRV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412961365",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-02T00:29:51Z",
      "updated_at": "2023-02-02T00:30:49Z",
      "author_association": "MEMBER",
      "body": "I’ve split the four commits that establish the **MiniMiner** logic into their own PR #27021. I’ll work on implementing the remaining open comments from here in the new PR. New review of the first four commits should please be added to #27021 forth going.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1412961365",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "unlabeled",
      "id": 8415989498,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAH1oc76",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8415989498",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-02T00:33:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8541698617,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH9H_o5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8541698617",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-16T22:22:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8541713647,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH9IDTv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8541713647",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-16T22:25:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8548691619,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH9iq6j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8548691619",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T16:09:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8548701692,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH9itX8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8548701692",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T16:11:02Z"
    },
    {
      "event": "commented",
      "id": 1434867163,
      "node_id": "IC_kwDOABII585VhlXb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434867163",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T16:16:20Z",
      "updated_at": "2023-02-17T16:16:20Z",
      "author_association": "MEMBER",
      "body": "Since last comment:\r\n\r\n- Rebased on-top of the latest version of #27021.\r\n- Addressed that `CalculateTotalBumpFee` now returns an std::optional<CAmount> because we automatically fail calculation for (too) large clusters of unconfirmed transactions\r\n- Waiting for #27021 before opening for review",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1434867163",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "commented",
      "id": 1435036691,
      "node_id": "IC_kwDOABII585ViOwT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1435036691",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T17:55:25Z",
      "updated_at": "2023-02-17T17:55:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "For anyone wanting to review this PR and would like some help with basic mempool concepts, I made a video: https://youtu.be/sQ05azzTp9o.",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1435036691",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "milestoned",
      "id": 8595085505,
      "node_id": "MIE_lADOABII585SV7NTzwAAAAIATpjB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8595085505",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-23T19:08:59Z",
      "milestone": {
        "title": "25.0"
      }
    },
    {
      "event": "labeled",
      "id": 8619046746,
      "node_id": "LE_lADOABII585SV7NTzwAAAAIBvDda",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8619046746",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-27T18:37:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8664287417,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAIEboi5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8664287417",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-03T23:13:00Z"
    },
    {
      "event": "commented",
      "id": 1454249283,
      "node_id": "IC_kwDOABII585WrhVD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1454249283",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-03T23:13:07Z",
      "updated_at": "2023-03-03T23:13:07Z",
      "author_association": "MEMBER",
      "body": "Rebased on latest version of #27021 ",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1454249283",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8756540726,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAIJ7jU2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8756540726",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-15T15:03:30Z"
    },
    {
      "event": "commented",
      "id": 1470172234,
      "node_id": "IC_kwDOABII585XoQxK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1470172234",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-15T15:04:36Z",
      "updated_at": "2023-03-15T15:04:36Z",
      "author_association": "MEMBER",
      "body": "Rebased on latest version of https://github.com/bitcoin/bitcoin/pull/27021. If you are interested in having #26152 in Bitcoin Core v25.0, please consider making time to review #27021.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1470172234",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU2NDg0ZjBmZGM0NDI2MWU3MjM1NjNmNTlkZjg4NmQ1YWNkZDg1MWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56484f0fdc44261e723563f59df886d5acdd851f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/56484f0fdc44261e723563f59df886d5acdd851f",
      "tree": {
        "sha": "354fbe250f28b741424519a6b9118e88dba5317f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/354fbe250f28b741424519a6b9118e88dba5317f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 354fbe250f28b741424519a6b9118e88dba5317f\nparent 68e484afbbc2e43ad7f2140275cf4e09e45b80ae\nauthor glozow <gloriajzhao@gmail.com> 1645444090 +0000\ncommitter Murch <murch@murch.one> 1679952912 -0400\n\n[mempool] find connected mempool entries with GatherClusters(…)\n\nWe limit GatherClusters’s result to a maximum of 500 transactions as\nclusters can be made arbitrarily large by third parties.\n\nCo-authored-by: Murch <murch@murch.one>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmQiDBAACgkQe6A1yluQ\nFxO8Sw//Vhl62Z7bO3q+/89Sx2LTFC86jqA4fL1AmAkvIx7Jhj/na5YLMCjD1eih\nSU9kJa9YXLU1aDF1YovSaSRjUAFND8Z9UJrZwAv9ZGGHAkNd9La0sJVoOGhRhC60\n/9wVqRrFjlChTejUVqsDZ8d65ronMMBOnUq66Tjv0qiVLcFpS7U998NiCRuVbUec\n57+p9fyzevYNggaopMJ580XgOv/hHX9PMwdtbMMDgEq3XR9kIP+xtRBWbFW5ULjJ\nNK6ANRusSWcVruTM7eW6iB45p6Zg+lhJN79PgfB42KUWPyhNOT9scYY3AiCFsY5I\nsXSmCkkEncenYD9rXCA7KqFg6HuC/nkRTIyDcVV7CKuPcuItIkgOj88M3FFQZsai\nYZHPaH6jPZd2fEsKWkIJ8VS27Lv77u34Rjp+xfdwro/w7+gmGTJOA0OIOfp5iE8s\nugegWM+a1ph1uHdYSVqNUGqTACErwjZHoDouPYkEFwIaYHID9K01QBOgeX2gIG4u\nFSziena33UFhAHK03pMa/dqY43mtBGVR3Tt3qvnIryPGtUsF9cK6NkVRe34ktntD\nfEyZV2OlIoZzGphA1O6KIMYxG9qYrKYC9Z0Md1/y1BhhtRDEzS4YwVTb86ClxYR3\nLK9BToaPZuZ5eQy1y5fr3s1LCm+9Eft3Deo/9JcADar4+JjMX4Q=\n=S7mj\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68e484afbbc2e43ad7f2140275cf4e09e45b80ae",
          "sha": "68e484afbbc2e43ad7f2140275cf4e09e45b80ae",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/68e484afbbc2e43ad7f2140275cf4e09e45b80ae"
        }
      ],
      "message": "[mempool] find connected mempool entries with GatherClusters(…)\n\nWe limit GatherClusters’s result to a maximum of 500 transactions as\nclusters can be made arbitrarily large by third parties.\n\nCo-authored-by: Murch <murch@murch.one>",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-03-27T21:35:12Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-02-21T11:48:10Z"
      },
      "sha": "56484f0fdc44261e723563f59df886d5acdd851f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU5YWZjYzgzNTQ4ZWE2N2E4NjNkYWM3Yjc1ZDAwMGJjOGY2YTcwMjM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59afcc83548ea67a863dac7b75d000bc8f6a7023",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/59afcc83548ea67a863dac7b75d000bc8f6a7023",
      "tree": {
        "sha": "705f187a3f8300c3202751ac35b76ce67e7a1b4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/705f187a3f8300c3202751ac35b76ce67e7a1b4e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 705f187a3f8300c3202751ac35b76ce67e7a1b4e\nparent 56484f0fdc44261e723563f59df886d5acdd851f\nauthor glozow <gloriajzhao@gmail.com> 1659623870 +0100\ncommitter Murch <murch@murch.one> 1680210184 -0400\n\nImplement Mini version of BlockAssembler to calculate mining scores\n\nRewrite the same algo instead of reusing BlockAssembler because we have\na few extra requirements that would make the changes invasive and\ndifficult to review:\n\n- Only operate on the relevant transactions rather than full mempool\n- Remove transactions that will be replaced so they can't bump their ancestors\n- Don't hold mempool lock outside of the constructor\n- Skip things like max block weight and IsFinalTx\n- Additionally calculate fees to bump remaining ancestor packages to target feerate\n\nCo-authored-by: Murch <murch@murch.one>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmQl+QgACgkQe6A1yluQ\nFxO0/RAAu0P2M6fAA/9jNcDWrmwKC/q3aneC7wnAcgiG5nJbMGbwnmqvw4y6FQ9V\nVL29edha+QggfR9W+LT6DSav7BCYyU/FPWYa8owFNY7Ct5VWF4inU3l2IKtZwODh\nOGAO30E1U5SGwHSqSBhfzeZ7O8WdaRwymwgMY33ZLOge5KK3IfZy9dXilPmKos2q\nVXLoy1AaX58d2I6oL0wGvXhMnS7naWZsm62Ws6qvgcH2fg2vSzwK18BWCTDPJ5kY\nK8Qpeq1NpTK1nL0yFgAnCB6hKdm/RPZ1Ws4TdlwD72j1GDW+3aloG3oC8upvdVD/\nqa0KVC3bkvnzs09IqtXdsEfRfFe4EuKXDzWSfUk6L/FIKR2KYIauP3jLumswLOs1\nDQ9baHrkzqb7AJWTkco/ysRrZ7jhV1rA+eXhE8Z4ARkmWr+YBjN8u2cZ5ZnC7ktM\nWIto3h1tjyflaBXwvfLmQkNwPlIWwrwYaieQ2KSuFcr/RQK5lwWIg7pBddsf+Vnu\n41XznkGnVKmP4lX7imDo0WRgYdU+h/0BDL0EFEjCwFY7LnG4cijc9A6ykTBvZUx8\nUctGVh0v94eAkJTMVNn6nSmLmhH2AjcyVrs9+uNJXrLxM5HrpAdcbNuW3SGKP9MW\ng5ksrGe2ki9rpkh2UV7Bg4FH0JUOCLS07QRDN4ZrDipNxWZIV/0=\n=Ivp5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56484f0fdc44261e723563f59df886d5acdd851f",
          "sha": "56484f0fdc44261e723563f59df886d5acdd851f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/56484f0fdc44261e723563f59df886d5acdd851f"
        }
      ],
      "message": "Implement Mini version of BlockAssembler to calculate mining scores\n\nRewrite the same algo instead of reusing BlockAssembler because we have\na few extra requirements that would make the changes invasive and\ndifficult to review:\n\n- Only operate on the relevant transactions rather than full mempool\n- Remove transactions that will be replaced so they can't bump their ancestors\n- Don't hold mempool lock outside of the constructor\n- Skip things like max block weight and IsFinalTx\n- Additionally calculate fees to bump remaining ancestor packages to target feerate\n\nCo-authored-by: Murch <murch@murch.one>",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-03-30T21:03:04Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-08-04T14:37:50Z"
      },
      "sha": "59afcc83548ea67a863dac7b75d000bc8f6a7023"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8900705838,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAIShf4u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8900705838",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-31T18:20:21Z"
    },
    {
      "event": "commented",
      "id": 1492411947,
      "node_id": "IC_kwDOABII585Y9GYr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1492411947",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-31T18:21:22Z",
      "updated_at": "2023-03-31T18:21:22Z",
      "author_association": "MEMBER",
      "body": "Rebased on latest version of #27021, then rebased on master to resolve merge conflicts. \r\n\r\nNeeded to reintroduce access to the Chain interface in `ChooseSelectionResult()`.",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1492411947",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "unlabeled",
      "id": 8906016004,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAIS1wUE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8906016004",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-02T08:32:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "demilestoned",
      "id": 8933714025,
      "node_id": "DEME_lADOABII585SV7NTzwAAAAIUfahp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8933714025",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-05T10:47:51Z",
      "milestone": {
        "title": "25.0"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNmM2YyZDU5ZWEyOTQ2YTdiN2NjOGNiMDIyMmZiNjAyZDYyNjQ1ZDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f3f2d59ea2946a7b7cc8cb0222fb602d62645d0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3f3f2d59ea2946a7b7cc8cb0222fb602d62645d0",
      "tree": {
        "sha": "9b4001e0954c2454831266e1bcd441416bb3bb8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b4001e0954c2454831266e1bcd441416bb3bb8f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9b4001e0954c2454831266e1bcd441416bb3bb8f\nparent 59afcc83548ea67a863dac7b75d000bc8f6a7023\nauthor glozow <gloriajzhao@gmail.com> 1660208319 +0100\ncommitter Murch <murch@murch.one> 1680808534 -0400\n\n[unit test] GatherClusters and MiniMiner unit tests\n\nCo-authored-by: Murch <murch@murch.one>\nCo-authored-by: theStack <sebastian.falbesoner@gmail.com>\nCo-authored-by: furszy <matiasfurszyfer@protonmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmQvGlgACgkQe6A1yluQ\nFxORrxAAp1EL5J64Gb174LOlzPJmbC234xWfCOF6bvrK4tLzx+4jmrC6X7qFlgj9\nDu+0uA/zuJNBp2XsStiLjJJfZhtfm6CHfw1/QO6DvN5Ycc8O7l1goipwqECkMrVh\nMx8dXQLmJOtsR/fazrTZWfADXCGpFn54eU6a8EGs0K9x43ZoVcr5esZ826jmXe+v\n4fikKrUYXcljwhNJJYSzZRIAx/InYm4ihJClWyssyhINHUKtVzO7mjGTeYs6T/S6\nvZeOLwiirv/wvbDNFeA/J9ZsKG45Fz+oZT3/ixEZd9JjoYQ8E+aBKqq94AQTNypE\nA/jzvWFa6DXIAxNy0MUckZ/HQ54uhA2iyecYztokQEgBEqSQfky+YcwIE4m90Uyt\nsUCEMBaK9FYrSBs83Mo+DgfWkdkhWiiMGX0dYrnQrzEX06gJKAv952eyBVs9SYEQ\n5ujj4v5WZ3193ypmPuUJbtXbehBpsZZ7TE4Y1RGwlrLp9RNIOBdMDC0KcSsBOF3k\nBiuxV7Q7kCopIC2KBZVDNNajXOeA8JcBOPZEL0AYO1NkpS8XHht8Q4Qyabm+k/BK\nUnvQjBXxwr4MBTs/mpZCgpAGTVW74hjQmYlrn/4mfQ9OilxVQoaeGt9qQMkUhu+4\nS5/q3uAusLKTPiFKgCN1dODs4OWejmrQLuh2ZXeqS3nW2RSh13o=\n=z7wT\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59afcc83548ea67a863dac7b75d000bc8f6a7023",
          "sha": "59afcc83548ea67a863dac7b75d000bc8f6a7023",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/59afcc83548ea67a863dac7b75d000bc8f6a7023"
        }
      ],
      "message": "[unit test] GatherClusters and MiniMiner unit tests\n\nCo-authored-by: Murch <murch@murch.one>\nCo-authored-by: theStack <sebastian.falbesoner@gmail.com>\nCo-authored-by: furszy <matiasfurszyfer@protonmail.com>",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-04-06T19:15:34Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-08-11T08:58:39Z"
      },
      "sha": "3f3f2d59ea2946a7b7cc8cb0222fb602d62645d0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZiNjA1YjkxYzFmYWYyYzdmN2NjMGM5ZDM5YjRmY2ZkNjZkYzI5NjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b605b91c1faf2c7f7cc0c9d39b4fcfd66dc2965",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6b605b91c1faf2c7f7cc0c9d39b4fcfd66dc2965",
      "tree": {
        "sha": "fba2ac3d51c419bf8a5028d358876ac12e063dbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fba2ac3d51c419bf8a5028d358876ac12e063dbc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fba2ac3d51c419bf8a5028d358876ac12e063dbc\nparent 3f3f2d59ea2946a7b7cc8cb0222fb602d62645d0\nauthor glozow <gloriajzhao@gmail.com> 1676561504 +0000\ncommitter Murch <murch@murch.one> 1680808539 -0400\n\n[fuzz] Add MiniMiner target + diff fuzz against BlockAssembler\n\nCo-authored-by: dergoegge <n.goeggi@gmail.com>\nCo-authored-by: mzumsande <mzumsande@gmail.com>\nCo-authored-by: Murch <murch@murch.one>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmQvGlsACgkQe6A1yluQ\nFxP0DQ//XdYZQ1gAcnjmAR03UUFfL8LRXUWrSTBmYAQUtBqDregxgQWiIEAOFZ7Y\nm/XtH4pw35yw+zBB73XDzEBqx886JN3/Mt8NG67e241klcjLNuz0j0dVSPeRoLgQ\nPHzqpCRw/N1w1cFVqjIAtf/3PE8hThw6WaJ1u39Wqv9C6epqQQVNx9UGSwr9eO0C\nJLV/q5TGDKnWyyQlhJsZJ21ocqUa7tTo8nwCdGTZb8tIQ6kzxSHtPvE0O+9Cf0Br\nVZWGzXDESEvRo/WL5ERUn5HEbedY1IJmGPDQG6NmD7EWlGrxPR0uvl9HAqVHLHZq\nM9f2PYYsPzTS5rGzLEQSPMuP/JsRprmEnXAXGmDWk+0KKfMhBtj4dnO7cbvdRtus\nlF5V+wkcJFRAtVlsvzfWm032pA3L9FG/wE+FqkU/huTm+OzkTtTifnCQG18EzF9V\nCeDGpgRHKx7ScVQZcctOT+gCJBIZda69cP+oSZcxJ0M7dVZSSv/CxAy65q/1ourv\nuQ4HrKEUj1qIBoyegRPeWwc42Pwu6ZuDHfkCTZd0snchYlr1eopC+C7FgGeVqCRD\nqlGdxOCSXR+veGH/23bSpAjVPb+O0K0mkXrJot0RWJ9b1XHV8tmexiZx/nkB/t+z\nlouUHnlSL6tGvF1m4P2pKzWJ9Wt50naK6akaPxbP/UU+M5jGCE8=\n=ekm5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f3f2d59ea2946a7b7cc8cb0222fb602d62645d0",
          "sha": "3f3f2d59ea2946a7b7cc8cb0222fb602d62645d0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3f3f2d59ea2946a7b7cc8cb0222fb602d62645d0"
        }
      ],
      "message": "[fuzz] Add MiniMiner target + diff fuzz against BlockAssembler\n\nCo-authored-by: dergoegge <n.goeggi@gmail.com>\nCo-authored-by: mzumsande <mzumsande@gmail.com>\nCo-authored-by: Murch <murch@murch.one>",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-04-06T19:15:39Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-02-16T15:31:44Z"
      },
      "sha": "6b605b91c1faf2c7f7cc0c9d39b4fcfd66dc2965"
    },
    {
      "event": "labeled",
      "id": 9014312467,
      "node_id": "LE_lADOABII585SV7NTzwAAAAIZS34T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9014312467",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-15T13:14:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1509820500,
      "node_id": "IC_kwDOABII585Z_ghU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1509820500",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-15T13:14:08Z",
      "updated_at": "2023-04-15T13:14:08Z",
      "author_association": "MEMBER",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1509820500",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGEzZGNiZjVmOGU3NTZiZTIzYWUzNzg2NDRhMjYxMWFjZmM2MjlkNzI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3dcbf5f8e756be23ae378644a2611acfc629d72",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a3dcbf5f8e756be23ae378644a2611acfc629d72",
      "tree": {
        "sha": "fb0856f754edd8628ab32de963302e6e349344e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb0856f754edd8628ab32de963302e6e349344e6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fb0856f754edd8628ab32de963302e6e349344e6\nparent 6b605b91c1faf2c7f7cc0c9d39b4fcfd66dc2965\nauthor glozow <gloriajzhao@gmail.com> 1646825002 +0000\ncommitter Murch <murch@murch.one> 1684282338 -0400\n\n[node] interface to get bump fees\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmRkG+IACgkQe6A1yluQ\nFxNvTA/9GiTbozMvBTWuymDnUeq7NGi1cYZbLY6Ep3SluTXdHlxT8YEyRGmMPSHE\nhfK3BYXX788qMqPlgjlTG8MbOLs8FOBj2TEdeIPQSaZPv9LYe0cY5//UWZRivDVt\ncGOkpVwFCFqVA4yiCXveQRgXeOzIGa4Puf4SC0QZ3Wa6VYYy/NuNpxc7hcpWLEFu\neMR826Rj7Vd7r0wG8dY39NSV1be5V+ciKIynawKVA33CS0+7spHeTNpy/IOMGBbx\n75jnW0bvxVxImpadPV7REdbLP4CTbPrj0Bx7DBJcCjmwGQMhrnvDh9P8Pw9o8hXm\nGO8hptCKbWu1LEEL4MlOxbqR/HeAgdxyZ3b2viSkKtfnXFshYdPZEfEKIGzK1hXW\n2GmF8ziooSiSx21Qr9h9RVySKhFXUNEIKd9kthNpS9wdv69J9/qnJG2FdxKt8V6A\noYq9eQt76RWz51l4I/Sjb1pqrSsDuoMyWEuF7zoAj7T3Xm6AfOJrWXB/qwbe3JAT\nopDNUFmqudCgIo6ONWD5pCbJavIaaa4y4SfP7vLDjF7sS/BQLZGT2n4SWO9VsP0x\nXe85uL8W/6XvUZSNCsGPE/a0DF4L1YKNL+l3tkg4zqc73dAvcU7iXE557jD0RIMv\nt2xOlQu+WNKUsf0xitb9WjvIJVwMNeJUhEu1bHA/KunICNJJRb4=\n=UvjO\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b605b91c1faf2c7f7cc0c9d39b4fcfd66dc2965",
          "sha": "6b605b91c1faf2c7f7cc0c9d39b4fcfd66dc2965",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6b605b91c1faf2c7f7cc0c9d39b4fcfd66dc2965"
        }
      ],
      "message": "[node] interface to get bump fees",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-05-17T00:12:18Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-03-09T11:23:22Z"
      },
      "sha": "a3dcbf5f8e756be23ae378644a2611acfc629d72"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ3ZjlkOTViNDQxYjg3NDdiZjVjYzc1OWQxYTFjZjQ0NDgzMDg5OGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47f9d95b441b8747bf5cc759d1a1cf444830898d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/47f9d95b441b8747bf5cc759d1a1cf444830898d",
      "tree": {
        "sha": "cd33e27647ab7e6aacf0064e1017679e46bbcdfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd33e27647ab7e6aacf0064e1017679e46bbcdfc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree cd33e27647ab7e6aacf0064e1017679e46bbcdfc\nparent a3dcbf5f8e756be23ae378644a2611acfc629d72\nauthor Murch <murch@murch.one> 1667416816 -0400\ncommitter Murch <murch@murch.one> 1684290106 -0400\n\nBump unconfirmed parent txs to target feerate\n\nWhen a transaction uses an unconfirmed input, preceding this commit it\nwould not consider the feerate of the parent transaction. Given a parent\ntransaction with a lower ancestor feerate, this resulted in the new\ntransaction's ancestor feerate undershooting the target feerate.\n\nThis commit changes how we calculate the effective value of unconfirmed UTXOs.\nThe effective value of unconfirmed UTXOs is decreased by the fee\nnecessary to bump its ancestry to the target feerate. This also impacts\nthe calculation of the waste metric: since the estimate for the current\nfee is increased by the bump fees, unconfirmed UTXOs current fees appear less\nfavorable compared to their unchanged long term fees.\n\nThis has one caveat: if multiple UTXOs have overlapping ancestries, each\nof their individual estimates will account for bumping all ancestors.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmRkOjoACgkQe6A1yluQ\nFxMh8RAAxch5/OuyDBTn9UWUybHI7pTxD4fkMLd3UPpnZNpfdsj8YVzMY6/p9t8+\nsfmfhSBgaKwZpLA0QIWYehZLZOwYfH0BLchIbky8fHSspnGfVqf404aAvbb5s1tZ\nls7tsR540YgoJqpuWIIjgMwEeHXiDJduv9OqEmlt45wlzw5aEUP9lOR2GALEJ0S3\nhGdHkk6WJTTMkY8yPKS+4eUYPzOEHPvEK2Jaw7y9phw5ZKRGwzboOCBfz0/KPqDx\nvmP/Dye6mfGq2FHRFEjm8WsRsT+HHysVcWaiNpPgcbhGHgdn+G06MAQ5AfakdTPa\nKQhbocQrdtpoWwIaPlLxz12WoOy+7m3bkATQuOr+js3jc5EEaUo7UDKB7HA1vUD3\nGwv0RnaUXCrGFlTRy6T2AnS4Fub0Ho9b1oaB3EKva/FV/JI6fH8/PgVw3cPzpXRx\no4VFTca7UNZ42qU7+28xHRqYiI4bzOCbFRc2VMnjTgSmlcW1H272B6AqDoRQ340b\nuNH75d92LIiNnRgPSQ6Z93iPQJtGjWSjaMx1ECY1axMJlWDAndVqFVMkWK4unKf7\nOH9O9zloyYfxEP77yPYQKfE5Rxjio3RlB3N+YerDfGpyIkhBHOCbl2WwAFqEaHul\nege3+JGyiWPGArO012sKB+2oKW77j7q9ijn5SnlKeXqjFCIMoFo=\n=F/L/\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3dcbf5f8e756be23ae378644a2611acfc629d72",
          "sha": "a3dcbf5f8e756be23ae378644a2611acfc629d72",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a3dcbf5f8e756be23ae378644a2611acfc629d72"
        }
      ],
      "message": "Bump unconfirmed parent txs to target feerate\n\nWhen a transaction uses an unconfirmed input, preceding this commit it\nwould not consider the feerate of the parent transaction. Given a parent\ntransaction with a lower ancestor feerate, this resulted in the new\ntransaction's ancestor feerate undershooting the target feerate.\n\nThis commit changes how we calculate the effective value of unconfirmed UTXOs.\nThe effective value of unconfirmed UTXOs is decreased by the fee\nnecessary to bump its ancestry to the target feerate. This also impacts\nthe calculation of the waste metric: since the estimate for the current\nfee is increased by the bump fees, unconfirmed UTXOs current fees appear less\nfavorable compared to their unchanged long term fees.\n\nThis has one caveat: if multiple UTXOs have overlapping ancestries, each\nof their individual estimates will account for bumping all ancestors.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-05-17T02:21:46Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-11-02T19:20:16Z"
      },
      "sha": "47f9d95b441b8747bf5cc759d1a1cf444830898d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc2ZDMxYWQzODFmOGI4ZGQ0ZTJkNjJlY2VlNmRjMDM1NmVmNGQ4ZjI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "tree": {
        "sha": "2d23f39362440f07e08469d698f32f1fc2585104",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d23f39362440f07e08469d698f32f1fc2585104"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2d23f39362440f07e08469d698f32f1fc2585104\nparent 47f9d95b441b8747bf5cc759d1a1cf444830898d\nauthor Murch <murch@murch.one> 1667841391 -0500\ncommitter Murch <murch@murch.one> 1684290114 -0400\n\nAmend bumpfee for inputs with overlapping ancestry\n\nAt the end of coin selection reduce the fees by the difference between\nthe individual bump fee estimates and the collective bump fee estimate.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmRkOkIACgkQe6A1yluQ\nFxOg3Q/+NUwX2wkpuNpdIChO75dpWe3wiJ2w0EzV5o4Tp5xyoLvkaxMRmcQsMyJp\nKOVk3JY+Gq8j8pRtvvKMOsNnssp0ZbvIt+j3bMLVEuTTFbLdWTEfgMZHqYWfTiC5\nLUQnxMzUOK3j9UA4HdmTRm8r3HDSme1IIKKIB74BHEtWkS4NAqOYWzyI5G6Xfkaq\nWWfThmnsOHyIvkE9hJLRcwNWQvpk74Feqx2r0x4Ou62VJJXSMZUsU3RYy3WKbf6O\nrvIg365JRpu7cV0Hy1n+PnYYIKsAugTtWoj4nUqvW0hAU+lyc7cpme+Vf6UvvqyX\nZ+Z1JLSloMfun3tpg2bxBQrXNWwooGWYypLzpJMgHPDWGW9T9sy1UCdgIKArnrX3\nS6flkTqxD3bWuGCd/Vos9faR8I5mTvtnKr6X0B0AG8GZPOdE4l7vb5NYBr+37nS9\nxwsaJE0wJqbesh/R2gQL8xVoB7SGa3bI8dS4ECHlHl9pmnsRN2L6+UjHAvjl95k6\n03FrOocH2VUz1meR0BYBvhZLmFslOThL3IitmHjKTQwPbZ1AY9DMTjmTHi76dMgQ\n5I8hJfQOzHNMPgDjb8AowOiqcsLy9T201K9fTf2CNOGIprmYPVPIYp3DqxQ9u//w\nXtuZXVCUGrZu+VCbMGc44l/Oq5UmxoWXFGusQbPwZVbl/g62lS0=\n=Kk3+\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47f9d95b441b8747bf5cc759d1a1cf444830898d",
          "sha": "47f9d95b441b8747bf5cc759d1a1cf444830898d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/47f9d95b441b8747bf5cc759d1a1cf444830898d"
        }
      ],
      "message": "Amend bumpfee for inputs with overlapping ancestry\n\nAt the end of coin selection reduce the fees by the difference between\nthe individual bump fee estimates and the collective bump fee estimate.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-05-17T02:21:54Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-11-07T17:16:31Z"
      },
      "sha": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9264022316,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAIoLcMs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9264022316",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T02:35:19Z"
    },
    {
      "event": "commented",
      "id": 1550602703,
      "node_id": "IC_kwDOABII585cbFHP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550602703",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T02:38:36Z",
      "updated_at": "2023-05-17T02:38:36Z",
      "author_association": "MEMBER",
      "body": "Rebased on #27021, need to rebase on master next, then will incorporate the follow-up nits from #27021",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1550602703",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977356049",
      "pull_request_review_id": 1116611222,
      "id": 977356049,
      "node_id": "PRRC_kwDOABII5846QUUR",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else if (mempool.isSpent(outpoint) || !mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist wihout its ancestor MockMempoolEntry, so these sets won't be invalidated.",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\r\n```",
      "created_at": "2022-09-22T08:30:02Z",
      "updated_at": "2022-09-22T08:33:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r977356049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977356049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977359612",
      "pull_request_review_id": 1116611222,
      "id": 977359612,
      "node_id": "PRRC_kwDOABII5846QVL8",
      "diff_hunk": "@@ -0,0 +1,297 @@\n+#!/usr/bin/env python3",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": 1,
      "original_position": 1,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```bash\r\nFile \"test/functional/wallet_spend_unconfirmed.py\" contains a shebang line, but has the file permission 644 instead of the expected executable permission 755. Do \"chmod 755 test/functional/wallet_spend_unconfirmed.py\" (or remove the shebang line).\r\nERROR: There were 1 failed tests in the lint-files.py lint test. Please resolve the above errors.\r\n```\r\n\r\nThis also needs to be added to the list of tests in `test_runner.py`. Which should deal with:\r\n```bash\r\n�[1mWARNING!�[0m The following scripts are not being run: ['wallet_spend_unconfirmed.py']. Check the test lists in test_runner.py.\r\n```",
      "created_at": "2022-09-22T08:32:06Z",
      "updated_at": "2022-09-22T08:33:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r977359612",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977359612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978344744",
      "pull_request_review_id": 1118029972,
      "id": 978344744,
      "node_id": "PRRC_kwDOABII5846UFso",
      "diff_hunk": "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i; ",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "26f96f0e13ab801993cd7b95282230d45ee8ce65",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry, lint error is my fault here\r\n\r\n```suggestion\r\n                        ++i;\r\n```",
      "created_at": "2022-09-23T07:37:55Z",
      "updated_at": "2022-09-23T07:37:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978344744",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978344744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978355993",
      "pull_request_review_id": 1118045668,
      "id": 978355993,
      "node_id": "PRRC_kwDOABII5846UIcZ",
      "diff_hunk": "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i; \n+                    } else {\n+                        cluster.push_back(parent_it);\n+                        // we still need to process this ",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "whitespace linter\r\n```suggestion\r\n                        // we still need to process this\r\n```\r\n\r\n------\r\n\r\nEdit (you can set up your editor to highlight these or run `test/lint/lint-whitespace.py` as part of your local scripted prechecks before pushing, with clang-format, etc.):\r\n\r\n```diff\r\n--- a/src/txmempool.cpp\r\n+++ b/src/txmempool.cpp\r\n@@ -1242,10 +1242,10 @@ std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<u\r\n                         // transactions and skip.\r\n                         std::swap(cluster[i+1], cluster.back());\r\n                         cluster[i+1] = parent_it;\r\n-                        ++i; \r\n+                        ++i;\r\n                     } else {\r\n                         cluster.push_back(parent_it);\r\n-                        // we still need to process this \r\n+                        // we still need to process this\r\n                         ++unprocessed_count;\r\n                     }\r\n                 }\r\n@@ -1259,10 +1259,10 @@ std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<u\r\n                         // transactions and skip.\r\n                         std::swap(cluster[i+1], cluster.back());\r\n                         cluster[i+1] = child_it;\r\n-                        ++i; \r\n+                        ++i;\r\n                     } else {\r\n                         cluster.push_back(child_it);\r\n-                        // we still need to process this \r\n+                        // we still need to process this\r\n                         ++unprocessed_count;\r\n                     }\r\n                 }\r\n```\r\n",
      "created_at": "2022-09-23T07:52:01Z",
      "updated_at": "2022-09-23T07:58:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978355993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978355993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1248,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978380196",
      "pull_request_review_id": 1118076665,
      "id": 978380196,
      "node_id": "PRRC_kwDOABII5846UOWk",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+struct MockMempoolEntry {\n+    CAmount fee_individual;\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    const CTransaction& tx;\n+\n+public:",
      "path": "src/node/mini_miner.h",
      "position": 25,
      "original_position": 24,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "All struct members are public by default, so can either drop `public` here (and removed the getters), or make the struct a class if any of the data members above are intended to be private (for instance, `tx` and `fee_individual` have public getters and could be private, or just be public and drop the getter).\r\n\r\nAt first look it seems some of the data members need to be public, in which case their getters should be used or removed. This builds:\r\n\r\n```diff\r\n-struct MockMempoolEntry {\r\n+class MockMempoolEntry\r\n+{\r\n     CAmount fee_individual;\r\n-    CAmount fee_with_ancestors;\r\n-    int64_t vsize_individual;\r\n-    int64_t vsize_with_ancestors;\r\n     const CTransaction& tx;\r\n \r\n public:\r\n+    CAmount fee_with_ancestors;\r\n+    int64_t vsize_individual;\r\n+    int64_t vsize_with_ancestors;\r\n     explicit MockMempoolEntry(CTxMemPool::txiter entry) :\r\n         fee_individual{entry->GetModifiedFee()},\r\n         fee_with_ancestors{entry->GetModFeesWithAncestors()},\r\n```\r\n",
      "created_at": "2022-09-23T08:16:33Z",
      "updated_at": "2022-09-23T08:16:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978380196",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978380196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978402242",
      "pull_request_review_id": 1118109036,
      "id": 978402242,
      "node_id": "PRRC_kwDOABII5846UTvC",
      "diff_hunk": "@@ -205,6 +205,33 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that otherwise unavailable from the mempool (e.g. UTXOs from confirmed",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 22,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n    //  Any outpoints that are otherwise unavailable from the mempool (e.g. UTXOs from confirmed\r\n```",
      "created_at": "2022-09-23T08:42:28Z",
      "updated_at": "2022-09-23T08:47:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978402242",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978402242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978403663",
      "pull_request_review_id": 1118109036,
      "id": 978403663,
      "node_id": "PRRC_kwDOABII5846UUFP",
      "diff_hunk": "@@ -205,6 +205,33 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that otherwise unavailable from the mempool (e.g. UTXOs from confirmed\n+    //  transactions or transactions not yet broadcast by the wallet) are given a bump fee of 0.\n+    //\n+    //  If multiple outpoints come from the same transaction (this should be very rare because\n+    //  the transaction essentially multiple change outputs or paid the same wallet using multiple",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 26,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n    //  it means the transaction has multiple change outputs or paid the same wallet using multiple\r\n```",
      "created_at": "2022-09-23T08:43:28Z",
      "updated_at": "2022-09-23T08:47:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978403663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978403663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978501186",
      "pull_request_review_id": 1118249028,
      "id": 978501186,
      "node_id": "PRRC_kwDOABII5846Ur5C",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+struct MockMempoolEntry {\n+    CAmount fee_individual;\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    const CTransaction& tx;\n+\n+public:",
      "path": "src/node/mini_miner.h",
      "position": 25,
      "original_position": 24,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "in_reply_to_id": 978380196,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd say just remove the getters, it's fine to keep these public. This struct is only used by `MiniMiner`.\r\nFor background, I originally was trying to align the interface with `CTxMemPoolEntry` like `CTxMemPoolModifiedEntry` to reuse the `CompareTxMemPoolEntryByAncestorFee` comparator in a multi index container, but then realized using simple `std::map`s was enough.",
      "created_at": "2022-09-23T10:41:12Z",
      "updated_at": "2022-09-23T10:41:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978501186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978501186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982428810",
      "pull_request_review_id": 1123725020,
      "id": 982428810,
      "node_id": "PRRC_kwDOABII5846jqyK",
      "diff_hunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors()),\n+        tx{entry->GetTx()}",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 31,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 9b33f5db095c232ac83304c91524f48bf799802f\r\n\r\nThese need to match the order of the members, CI -Wreorder-ctor says",
      "created_at": "2022-09-28T13:45:55Z",
      "updated_at": "2022-09-28T14:24:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982428810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982428810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430051",
      "pull_request_review_id": 1123725020,
      "id": 982430051,
      "node_id": "PRRC_kwDOABII5846jrFj",
      "diff_hunk": "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in f40b9fe6a83b6668a625e28520456350f2cd98f0\r\n\r\nAs discussed offline, this case can be deleted since it will never be hit (and is also incorrect).",
      "created_at": "2022-09-28T13:46:58Z",
      "updated_at": "2022-09-28T14:24:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982430051",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1239,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430211",
      "pull_request_review_id": 1123725020,
      "id": 982430211,
      "node_id": "PRRC_kwDOABII5846jrID",
      "diff_hunk": "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i;\n+                    } else {\n+                        cluster.push_back(parent_it);\n+                        // we still need to process this\n+                        ++unprocessed_count;\n+                    }\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    if (child_entry.GetCountWithAncestors() == 1 &&\n+                        child_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = child_it;\n+                        ++i;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this as well in f40b9fe6a83b6668a625e28520456350f2cd98f0",
      "created_at": "2022-09-28T13:47:06Z",
      "updated_at": "2022-09-28T14:24:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982430211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1256,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982470036",
      "pull_request_review_id": 1123725020,
      "id": 982470036,
      "node_id": "PRRC_kwDOABII5846j02U",
      "diff_hunk": "@@ -66,7 +71,10 @@ struct COutput {\n     /** The fee required to spend this output at the consolidation feerate. */\n     CAmount long_term_fee{0};\n \n-    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt)\n+    /** The fee necessary to bump this UTXO's ancestor transactions to the target feerate */\n+    CAmount ancestor_bump_fees{0};\n+\n+    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt, const std::optional<std::reference_wrapper<interfaces::Chain>> chain_interface = std::nullopt)",
      "path": "src/wallet/coinselection.h",
      "position": null,
      "original_position": 38,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have 2 concerns with this approach, please let me know what you think:\r\n\r\n(1) The `COutput` constructor really shouldn't need to have a reference the chain interface; it smells a bit weird that coinselection (which I interpret to be a relatively well-modularized component thus far since it doesn't even depend on wallet) has a new dependency on interfaces/chain.h. It's unclear to me why `CalculateBumpFees()` needs to be called *inside* the constructor instead of just having `CAmount ancestor_bump_fees` be a parameter?\r\n\r\n(2) This means `CalculateBumpFees()` will be called over and over again for each `COutput` constructed within the `AvailableCoins` loop. There's not a lot of duplicated work if all the outputs are from independent transactions, but it would definitely be faster to call it once with all the outpoints at once.\r\n\r\nApproach-wise, I think it makes more sense to call `CalculateBumpFees()` just once, with the full list of outpoints. It should be fairly straightforward with preset inputs since you have the list already. For `AvailableCoins`, since they're constructed as you iterate through `mapWallet`, you could populate each output's `ancestor_bump_fees` values at the end. If you want to construct them as-is and then not mutate afterwards, then maybe do 2 passes for filtering and constructing?",
      "created_at": "2022-09-28T14:19:24Z",
      "updated_at": "2022-09-28T14:24:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982470036",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982470036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982473716",
      "pull_request_review_id": 1123725020,
      "id": 982473716,
      "node_id": "PRRC_kwDOABII5846j1v0",
      "diff_hunk": "@@ -0,0 +1,321 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(resulting_fee_rate_funding, self.target_fee_rate)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        resulting_fee_rate_parent_one = self.calc_fee_rate(p_one_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_one)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        resulting_fee_rate_parent_two = self.calc_fee_rate(p_two_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_two)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        resulting_fee_rate_high_parent = self.calc_fee_rate(p_high_tx)\n+\n+        # This time the parent is greater than the child\n+        assert_greater_than(resulting_fee_rate_high_parent, self.target_fee_rate)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        resulting_fee_rate_parent_low = self.calc_fee_rate(p_low_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_low)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(resulting_fee_rate_grandparent, self.target_fee_rate)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def run_test(self):\n+        self.log.info(\"Starting UnconfirmedInputTest!\")\n+        self.target_fee_rate = 30\n+        self.def_wallet  = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.generate(self.nodes[0], 110)\n+\n+        # Test that assumptions about meeting feerate and being able to test it hold\n+        self.test_target_feerate_confirmed()\n+\n+        # Spend unconfirmed input with feerate higher than target feerate\n+        self.test_target_feerate_unconfirmed_high()\n+\n+        # Actual test: Spend unconfirmed input with feerate lower than target feerate. Expect that parent gets bumped to target feerate.\n+        self.test_target_feerate_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed input with unconfirmed parent both of which have a feerate lower than target feerate. Expect that both ancestors get bumped to target feerate.\n+        self.test_chain_of_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with low feerates\n+        self.test_two_low_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with mixed feerates\n+        self.test_mixed_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend chain with high grandparent low parent\n+        self.test_chain_of_high_low()\n+\n+        # Actual test: Spend chain with low grandparent lower parent\n+        self.test_chain_of_high_low_below_target_feerate()\n+\n+        # Actual test: Check that fee is calculated correctly when bumping while subtracting fee from output\n+        self.test_target_feerate_unconfirmed_low_sffo()",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": 462,
      "original_position": 318,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0\r\n\r\nMissing a test for `bumpfee` RPC?",
      "created_at": "2022-09-28T14:22:24Z",
      "updated_at": "2022-09-28T14:24:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982473716",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982473716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 462,
      "original_line": 462,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007251469",
      "pull_request_review_id": 1158885486,
      "id": 1007251469,
      "node_id": "PRRC_kwDOABII5848CXAN",
      "diff_hunk": "@@ -66,7 +71,10 @@ struct COutput {\n     /** The fee required to spend this output at the consolidation feerate. */\n     CAmount long_term_fee{0};\n \n-    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt)\n+    /** The fee necessary to bump this UTXO's ancestor transactions to the target feerate */\n+    CAmount ancestor_bump_fees{0};\n+\n+    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt, const std::optional<std::reference_wrapper<interfaces::Chain>> chain_interface = std::nullopt)",
      "path": "src/wallet/coinselection.h",
      "position": null,
      "original_position": 38,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": 982470036,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now applying the bumpfees to each output after constructing the output.",
      "created_at": "2022-10-27T18:55:00Z",
      "updated_at": "2022-10-27T18:55:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1007251469",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007251469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1015784610",
      "pull_request_review_id": 1170926116,
      "id": 1015784610,
      "node_id": "PRRC_kwDOABII5848i6Si",
      "diff_hunk": "@@ -0,0 +1,321 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(resulting_fee_rate_funding, self.target_fee_rate)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        resulting_fee_rate_parent_one = self.calc_fee_rate(p_one_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_one)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        resulting_fee_rate_parent_two = self.calc_fee_rate(p_two_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_two)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        resulting_fee_rate_high_parent = self.calc_fee_rate(p_high_tx)\n+\n+        # This time the parent is greater than the child\n+        assert_greater_than(resulting_fee_rate_high_parent, self.target_fee_rate)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        resulting_fee_rate_parent_low = self.calc_fee_rate(p_low_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_low)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(resulting_fee_rate_grandparent, self.target_fee_rate)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def run_test(self):\n+        self.log.info(\"Starting UnconfirmedInputTest!\")\n+        self.target_fee_rate = 30\n+        self.def_wallet  = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.generate(self.nodes[0], 110)\n+\n+        # Test that assumptions about meeting feerate and being able to test it hold\n+        self.test_target_feerate_confirmed()\n+\n+        # Spend unconfirmed input with feerate higher than target feerate\n+        self.test_target_feerate_unconfirmed_high()\n+\n+        # Actual test: Spend unconfirmed input with feerate lower than target feerate. Expect that parent gets bumped to target feerate.\n+        self.test_target_feerate_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed input with unconfirmed parent both of which have a feerate lower than target feerate. Expect that both ancestors get bumped to target feerate.\n+        self.test_chain_of_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with low feerates\n+        self.test_two_low_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with mixed feerates\n+        self.test_mixed_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend chain with high grandparent low parent\n+        self.test_chain_of_high_low()\n+\n+        # Actual test: Spend chain with low grandparent lower parent\n+        self.test_chain_of_high_low_below_target_feerate()\n+\n+        # Actual test: Check that fee is calculated correctly when bumping while subtracting fee from output\n+        self.test_target_feerate_unconfirmed_low_sffo()",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": 462,
      "original_position": 318,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": 982473716,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added!",
      "created_at": "2022-11-07T18:51:47Z",
      "updated_at": "2022-11-07T18:51:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1015784610",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1015784610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 462,
      "original_line": 462,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017405596",
      "pull_request_review_id": 1173244112,
      "id": 1017405596,
      "node_id": "PRRC_kwDOABII5848pGCc",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;\n+}\n+\n+CAmount MiniMiner::CalculateTotalBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // All remaining ancestors that are not part of in_block must be bumped, but no other relatives (e.g. siblings, niblings, …)\n+    std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+    std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+\n+    for (const auto& outpoint : requested_outpoints) {\n+        const auto& txid = outpoint.hash;\n+        // Skip any ancestors that have a higher minerscore already\n+        if (in_block.find(txid) != in_block.end()) continue;\n+        auto iter = entries_by_txid.find(outpoint.hash);\n+        assert(iter != entries_by_txid.end());",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 237,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 8a474b7675d552a9f2951d7cbc59ca36d3a10f11 \"Add CalculateTotalBumpFee for overlapping ancestry\"\r\nI think the following change might make sense because that way even a `MiniMiner` that was initialized with confirmed outpoints could run `CalculateTotalBumpFees`. I think it would be better if `CalculateTotalBumpFees` could handle unconfirmed outpoints for uniformity with `CalculateBumpFees`.\r\n```suggestion\r\n        if (iter == entries_by_txid.end()) continue;\r\n```",
      "created_at": "2022-11-09T04:04:50Z",
      "updated_at": "2022-11-09T05:11:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1017405596",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017405596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017410299",
      "pull_request_review_id": 1173244112,
      "id": 1017410299,
      "node_id": "PRRC_kwDOABII5848pHL7",
      "diff_hunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 63,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": null,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n    // Cache which outpoints are needed for each tx so we don't have to look up all the outputs.",
      "created_at": "2022-11-09T04:14:32Z",
      "updated_at": "2022-11-09T14:06:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1017410299",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017410299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1024976309",
      "pull_request_review_id": 1183993011,
      "id": 1024976309,
      "node_id": "PRRC_kwDOABII5849F-W1",
      "diff_hunk": "@@ -0,0 +1,436 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 107,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "ad8bffe548a2536f925e6911c7d50c1aaab1a59e",
      "in_reply_to_id": null,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Where does the 1.5 come from here (and in later tests e.g. `test_two_low_feerate_unconfirmed_parents()` 1.1)?",
      "created_at": "2022-11-17T09:56:12Z",
      "updated_at": "2022-11-17T09:56:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1024976309",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1024976309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1026970423",
      "pull_request_review_id": 1186932380,
      "id": 1026970423,
      "node_id": "PRRC_kwDOABII5849NlM3",
      "diff_hunk": "@@ -80,7 +80,18 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize);\n+    std::vector<COutPoint> reused_inputs;\n+    for (const CTxIn& txin : wtx.tx->vin) {\n+        reused_inputs.push_back(txin.prevout);\n+    }\n+\n+    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateBumpFees(reused_inputs, newFeerate);",
      "path": "src/wallet/feebumper.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it maybe make sense to use `CalculateTotalBumpFees()` instead of `CalculateBumpFees()` here, given that all these inputs are from the same transaction and thus most certainly overlap in ancestry?",
      "created_at": "2022-11-18T23:25:19Z",
      "updated_at": "2022-12-06T17:19:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1026970423",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1026970423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027113476",
      "pull_request_review_id": 1187092079,
      "id": 1027113476,
      "node_id": "PRRC_kwDOABII5849OIIE",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 16,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's unclear to me what the first sentence here is saying with `in RBFs`. Perhaps `This includes fee-bumping using RBF for any conflicting transactions.`?",
      "created_at": "2022-11-19T16:40:09Z",
      "updated_at": "2022-11-19T17:45:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1027113476",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027113476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027114058",
      "pull_request_review_id": 1187092079,
      "id": 1027114058,
      "node_id": "PRRC_kwDOABII5849OIRK",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;",
      "path": "src/txmempool.cpp",
      "position": 15,
      "original_position": 14,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this function start with `AssertLockHeld(cs)`?",
      "created_at": "2022-11-19T16:45:33Z",
      "updated_at": "2022-11-19T17:45:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1027114058",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027114058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 905,
      "original_line": 905,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027127955",
      "pull_request_review_id": 1187107175,
      "id": 1027127955,
      "node_id": "PRRC_kwDOABII5849OLqT",
      "diff_hunk": "@@ -0,0 +1,436 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 107,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "ad8bffe548a2536f925e6911c7d50c1aaab1a59e",
      "in_reply_to_id": 1024976309,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's just to check that the fees are at least what was expected, but do not overshoot too far, e.g. because we selected more inputs than expected.",
      "created_at": "2022-11-19T18:46:29Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1027127955",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027127955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028280212",
      "pull_request_review_id": 1188589097,
      "id": 1028280212,
      "node_id": "PRRC_kwDOABII5849Sk-U",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);\n+        if (it) {\n+            ret.push_back(*it);\n+        } else {\n+            // return empty vector to let the caller know this failed.\n+            std::vector<txiter> empty_vector;\n+            return empty_vector;\n+        }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could be a bit more concise:\r\n```suggestion\r\n        if (!it) return {}; // return empty vector to let the caller know this failed\r\n        ret.push_back(*it);\r\n        }\r\n```\r\n\r\nI would also add a docstring to `assert(it)` that even though we're currently asserting this, the interface is that upon failure an empty vector is returned, so this assertion may be removed in the future without breaking the interface?",
      "created_at": "2022-11-21T16:39:08Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028280212",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028280212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 963,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028283266",
      "pull_request_review_id": 1188589097,
      "id": 1028283266,
      "node_id": "PRRC_kwDOABII5849SluC",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n        const auto it{GetIter(txid)};\r\n```",
      "created_at": "2022-11-21T16:41:57Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028283266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028283266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028296326",
      "pull_request_review_id": 1188589097,
      "id": 1028296326,
      "node_id": "PRRC_kwDOABII5849So6G",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think `it->GetCountWithAncestors()` and `it->GetCountWithDescendants()` both include the current transaction, so in that case this should be decreased with 1?",
      "created_at": "2022-11-21T16:52:47Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028296326",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028296326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028322453",
      "pull_request_review_id": 1188589097,
      "id": 1028322453,
      "node_id": "PRRC_kwDOABII5849SvSV",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I'm not sure it'd be a wortwhile improvement, but reserving before assigning could be a slight performance improvement so you only need to size the vector once instead of twice?",
      "created_at": "2022-11-21T17:09:26Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028322453",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028322453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028330615",
      "pull_request_review_id": 1188589097,
      "id": 1028330615,
      "node_id": "PRRC_kwDOABII5849SxR3",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think `unprocessed_count` is incorrect, shouldn't this be e.g. `to_process_count`?\r\n```suggestion\r\n        for (size_t i{0}, to_process_count{txids.size()}; i < to_process_count; ++i) {\r\n```",
      "created_at": "2022-11-21T17:17:46Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028330615",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028330615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028377597",
      "pull_request_review_id": 1188589097,
      "id": 1028377597,
      "node_id": "PRRC_kwDOABII5849S8v9",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this is correct?",
      "created_at": "2022-11-21T18:07:29Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028377597",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028377597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028438751",
      "pull_request_review_id": 1188589097,
      "id": 1028438751,
      "node_id": "PRRC_kwDOABII5849TLrf",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This can be deduplicated. Also, I think `curr` is not really more helpful than `cluster[i]`, so I'd just remove that varariable.\r\n```suggestion\r\n            auto family{cluster[i]->GetMemPoolParents()};\r\n            family.merge(cluster[i]->GetMemPoolChildren());\r\n            for (const CTxMemPoolEntry& entry : family) {\r\n                const auto tx_iter = mapTx.iterator_to(entry);\r\n                if (!visited(tx_iter)) {\r\n                    cluster.push_back(tx_iter);\r\n                    // we still need to process this\r\n                    ++unprocessed_count;\r\n                }\r\n            }\r\n```",
      "created_at": "2022-11-21T19:23:31Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028438751",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028438751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1233,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028440069",
      "pull_request_review_id": 1188589097,
      "id": 1028440069,
      "node_id": "PRRC_kwDOABII5849TMAF",
      "diff_hunk": "@@ -694,6 +701,9 @@ class CTxMemPool\n                                    std::string& errString,\n                                    bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Get entire list of connected transactions for all transactions in txids. */",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 22,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it be helpful to add a `@pre` indicating that all txids need to be in mempool?",
      "created_at": "2022-11-21T19:25:13Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028440069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028440069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028446649",
      "pull_request_review_id": 1188589097,
      "id": 1028446649,
      "node_id": "PRRC_kwDOABII5849TNm5",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 24,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As per https://github.com/bitcoin/bitcoin/pull/23962, perhaps better to make these `int32_t`?",
      "created_at": "2022-11-21T19:33:49Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028446649",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028446649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028448913",
      "pull_request_review_id": 1188589097,
      "id": 1028448913,
      "node_id": "PRRC_kwDOABII5849TOKR",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 38,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    const CTransaction& GetTx() const LIFETIMEBOUND { return tx; }\r\n```",
      "created_at": "2022-11-21T19:36:56Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028448913",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028448913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028449731",
      "pull_request_review_id": 1188589097,
      "id": 1028449731,
      "node_id": "PRRC_kwDOABII5849TOXD",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 25,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should these be `private` instead?",
      "created_at": "2022-11-21T19:38:07Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028449731",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028449731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 23,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028451302",
      "pull_request_review_id": 1188589097,
      "id": 1028451302,
      "node_id": "PRRC_kwDOABII5849TOvm",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 19,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If `tx` is `const` I think this should be too? And same for `vsize_individual`?\r\n```suggestion\r\n    const CAmount fee_individual;\r\n```",
      "created_at": "2022-11-21T19:40:05Z",
      "updated_at": "2022-11-23T16:19:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028451302",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028451302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028460084",
      "pull_request_review_id": 1188589097,
      "id": 1028460084,
      "node_id": "PRRC_kwDOABII5849TQ40",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).\n+    std::map<uint256, std::vector<COutPoint>> outpoints_needed_by_txid;\n+\n+    // What we're trying to calculate.\n+    std::map<COutPoint, CAmount> bump_fees;\n+\n+    // The constructed block template\n+    std::set<uint256> in_block;\n+\n+    // Information on the current status of the block\n+    CAmount total_fees{0};\n+    int64_t total_vsize{0};\n+\n+    /** Main data structure holding the entries, can be indexed by txid */\n+    std::map<uint256, MockMempoolEntry> entries_by_txid;\n+    using MockEntryMap = decltype(entries_by_txid);",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 82,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since we're only using the `::iterator` attribute, could shorten it a bit more to\r\n```suggestion\r\n    using MockEntryMapIter = decltype(entries_by_txid)::iterator;\r\n```",
      "created_at": "2022-11-21T19:51:38Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028460084",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028460084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028461644",
      "pull_request_review_id": 1188589097,
      "id": 1028461644,
      "node_id": "PRRC_kwDOABII5849TRRM",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner",
      "path": "src/node/mini_miner.h",
      "position": 55,
      "original_position": 55,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Although `MiniMiner` sounds catchier, would `MiniBlockAssembler` be a more appropriate/accurate name?",
      "created_at": "2022-11-21T19:53:42Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028461644",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028461644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 55,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028482615",
      "pull_request_review_id": 1188589097,
      "id": 1028482615,
      "node_id": "PRRC_kwDOABII5849TWY3",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).\n+    std::map<uint256, std::vector<COutPoint>> outpoints_needed_by_txid;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 68,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "naming consistency\r\n```suggestion\r\n    std::map<uint256, std::vector<COutPoint>> requested_outpoints_by_txid;\r\n```",
      "created_at": "2022-11-21T20:21:18Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028482615",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028482615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028491577",
      "pull_request_review_id": 1188589097,
      "id": 1028491577,
      "node_id": "PRRC_kwDOABII5849TYk5",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 58,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps I'll answer my own question as I progress with my review, but do we need `requested_outpoints`? I think this overlaps entirely with the keys of `bump_fees`? Feel free to ignore/keep it very brief if it's a dumb remark, I don't fully understand the PR yet.",
      "created_at": "2022-11-21T20:33:23Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028491577",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028491577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029817194",
      "pull_request_review_id": 1190768828,
      "id": 1029817194,
      "node_id": "PRRC_kwDOABII5849YcNq",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);\n+        if (it) {\n+            ret.push_back(*it);\n+        } else {\n+            // return empty vector to let the caller know this failed.\n+            std::vector<txiter> empty_vector;\n+            return empty_vector;\n+        }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028280212,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd say we should either assert (and document that assumption) or return an empty vector, but not both. In the current form, this seems dangerous  - in the future someone might read the doc for the function, use the generic `GetIter` for some other usecase and introduce a crash bug in the worst case. ",
      "created_at": "2022-11-22T21:02:49Z",
      "updated_at": "2022-11-23T17:57:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029817194",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029817194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 963,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029857746",
      "pull_request_review_id": 1187107175,
      "id": 1029857746,
      "node_id": "PRRC_kwDOABII5849YmHS",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;\n+}\n+\n+CAmount MiniMiner::CalculateTotalBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // All remaining ancestors that are not part of in_block must be bumped, but no other relatives (e.g. siblings, niblings, …)\n+    std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+    std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+\n+    for (const auto& outpoint : requested_outpoints) {\n+        const auto& txid = outpoint.hash;\n+        // Skip any ancestors that have a higher minerscore already\n+        if (in_block.find(txid) != in_block.end()) continue;\n+        auto iter = entries_by_txid.find(outpoint.hash);\n+        assert(iter != entries_by_txid.end());",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 237,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1017405596,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, that makes sense, thank you",
      "created_at": "2022-11-22T21:56:11Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029857746",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029857746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029858086",
      "pull_request_review_id": 1187107175,
      "id": 1029858086,
      "node_id": "PRRC_kwDOABII5849YmMm",
      "diff_hunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 63,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1017410299,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks!",
      "created_at": "2022-11-22T21:56:43Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029858086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029858086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029977800",
      "pull_request_review_id": 1190768828,
      "id": 1029977800,
      "node_id": "PRRC_kwDOABII5849ZDbI",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is that comment meant to be here? I can't see the relation to this else branch, and mapModifiedTx doesn't exist in the MiniMiner.",
      "created_at": "2022-11-23T02:41:21Z",
      "updated_at": "2022-11-23T17:57:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029977800",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029977800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1030671435",
      "pull_request_review_id": 1190768828,
      "id": 1030671435,
      "node_id": "PRRC_kwDOABII5849bsxL",
      "diff_hunk": "@@ -694,6 +701,9 @@ class CTxMemPool\n                                    std::string& errString,\n                                    bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Get entire list of connected transactions for all transactions in txids. */",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 22,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028440069,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree, this should be part of its documentation. I think it means that the caller must ensure that nothing can get removed from the mempool in between preparing the list of txids and calling this function, which seems important.",
      "created_at": "2022-11-23T16:40:43Z",
      "updated_at": "2022-11-23T17:57:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1030671435",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1030671435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035216664",
      "pull_request_review_id": 1198255084,
      "id": 1035216664,
      "node_id": "PRRC_kwDOABII5849tCcY",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            bump_fees.emplace(outpoint, 0);\r\n```",
      "created_at": "2022-11-29T19:55:00Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035216664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035216664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035217598",
      "pull_request_review_id": 1198255084,
      "id": 1035217598,
      "node_id": "PRRC_kwDOABII5849tCq-",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 219,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    return bump_fees;\r\n```",
      "created_at": "2022-11-29T19:56:03Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035217598",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035217598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035218401",
      "pull_request_review_id": 1198255084,
      "id": 1035218401,
      "node_id": "PRRC_kwDOABII5849tC3h",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                outpoints_needed_by_txid.emplace(outpoint.hash, outpoints_of_tx);\r\n```\r\nCan make a similar change elsewhere in this file.",
      "created_at": "2022-11-29T19:56:59Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035218401",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035218401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035234823",
      "pull_request_review_id": 1198255084,
      "id": 1035234823,
      "node_id": "PRRC_kwDOABII5849tG4H",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\r\n        txids_needed.push_back(txid);\r\n    }\r\n```\r\n(nit, simpler)",
      "created_at": "2022-11-29T20:13:21Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035234823",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035234823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 53,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035269211",
      "pull_request_review_id": 1198255084,
      "id": 1035269211,
      "node_id": "PRRC_kwDOABII5849tPRb",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 7,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. (10-5) * mempooltx.vsize). If that\r\n```\r\nand / or maybe use 6 instead of 5. (It's slightly unclear as is because 10-5 == 5.)",
      "created_at": "2022-11-29T20:47:21Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035269211",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035269211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035318488",
      "pull_request_review_id": 1198255084,
      "id": 1035318488,
      "node_id": "PRRC_kwDOABII5849tbTY",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 67,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    // If multiple argument outpoints correspond to the same transaction, cache them together in\r\n    // a single entry indexed by txid. Then we can just work with txids since all outpoints from\r\n    // the same tx will have the same bumpfee. Excludes non-mempool transactions.\r\n```\r\nThis is how I read the code, but check my understanding!",
      "created_at": "2022-11-29T21:49:19Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035318488",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035318488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 64,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035330287",
      "pull_request_review_id": 1198255084,
      "id": 1035330287,
      "node_id": "PRRC_kwDOABII5849teLv",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that are otherwise unavailable from the mempool (e.g. UTXOs from confirmed\n+    //  transactions or transactions not yet broadcast by the wallet) are given a bump fee of 0.\n+    //\n+    //  If multiple outpoints come from the same transaction (which would be very rare because\n+    //  it means that one transaction has multiple change outputs or paid the same wallet using multiple\n+    //  outputs in the same transaction) or have shared ancestry, the bump fees are calculated\n+    //  independently, i.e. as if only one of them is spent. This may result in double-fee-bumping. This\n+    //  caveat can be rectified per use of the sister-function CalculateTotalBumpFees(…).\n+    virtual std::map<COutPoint, CAmount> CalculateBumpFees(const std::vector<COutPoint>& outpoints, const CFeeRate& target_feerate) = 0;\n+\n+    //! Calculate the shared bump fees for a given set of outpoints per the\n+    //  same strategy as in CalculateBumpFees(…).  Other than the above call,",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 33,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    //  same strategy as in CalculateBumpFees(…). Unlike the above call,\r\n```",
      "created_at": "2022-11-29T22:05:26Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035330287",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035330287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035335097",
      "pull_request_review_id": 1198255084,
      "id": 1035335097,
      "node_id": "PRRC_kwDOABII5849tfW5",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 14,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> they are not included\r\n\r\nIs this true? IIUC, I don't think it works this way, or it shouldn't. If there are two outpoints sharing the same ancestor transaction, we don't know which of those two outpoints coin selection will choose if it chooses only one. If coin selection chooses the one for which we didn't bump to account for the ancestor, then our fee will be too low. I thought we bump both, and then _after_ coin selection, we make the adjustment.",
      "created_at": "2022-11-29T22:12:05Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035335097",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035335097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035354396",
      "pull_request_review_id": 1198255084,
      "id": 1035354396,
      "node_id": "PRRC_kwDOABII5849tkEc",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                for (const auto& outpoint : outpoints_it->second) {\r\n                    bump_fees.emplace(outpoint, 0);\r\n                }\r\n                outpoints_needed_by_txid.erase(outpoints_it);\r\n```\r\nI'm not sure about this, but doing the `erase` here would be consistent with the `!mempool.exists()` case above (an entry for this transaction, none of whose outpoints we will use, is _not_ added to `outpoints_needed_by_txid`).",
      "created_at": "2022-11-29T22:40:11Z",
      "updated_at": "2022-11-29T22:59:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035354396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035354396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035363601",
      "pull_request_review_id": 1198255084,
      "id": 1035363601,
      "node_id": "PRRC_kwDOABII5849tmUR",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, std::move(cached_descendants)));\r\n```",
      "created_at": "2022-11-29T22:53:50Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035363601",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035363601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035575327",
      "pull_request_review_id": 1198749149,
      "id": 1035575327,
      "node_id": "PRRC_kwDOABII5849uaAf",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"",
      "path": "src/node/mini_miner.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggest adding:\r\n```\r\n// This class must be constructed while holding mempool.cs. After construction, the object's\r\n// methods can be called without holding that lock.\r\n```\r\nOr maybe a better place for this comment would be just before the constructor itself.",
      "created_at": "2022-11-30T06:32:54Z",
      "updated_at": "2022-12-02T00:08:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035575327",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035575327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035576612",
      "pull_request_review_id": 1198749149,
      "id": 1035576612,
      "node_id": "PRRC_kwDOABII5849uaUk",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 17,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could a better word than \"Mock\" be used to name this class? I initially thought this class had to do with testing. Since this is the MiniMiner, maybe `MiniMempoolEntry`?",
      "created_at": "2022-11-30T06:35:09Z",
      "updated_at": "2022-12-02T00:08:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035576612",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035576612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035580146",
      "pull_request_review_id": 1198749149,
      "id": 1035580146,
      "node_id": "PRRC_kwDOABII5849ubLy",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 19,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028451302,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This suggestion makes sense since these two individual fields shouldn't need to change (the ancestor fields do change). Making both `const` does compile.",
      "created_at": "2022-11-30T06:41:26Z",
      "updated_at": "2022-12-02T00:08:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035580146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035580146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1037673418",
      "pull_request_review_id": 1198749149,
      "id": 1037673418,
      "node_id": "PRRC_kwDOABII58492aPK",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 20,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not at all sure about this, but this is a reference variable so it's (sort of) a pointer, right? We continue to hold this reference after releasing `mempool.cs` -- is it possible for the transaction to go away (its memory deallocated) if, for example, it gets mined, thereby invalidating our reference? I wonder if this might be better:\r\n```suggestion\r\n    const CTransaction tx;\r\n```\r\nThe debugger shows `sizeof(node::MockMempoolEntry)` is only 40 bytes with `tx` being a reference, and 152 if it's not a reference, which makes sense because `sizeof(CTransaction)` is 120.\r\n\r\nOr, maybe it should be `const CTransactionRef tx;` because then it's a shared pointer, so if the tx gets removed from the mempool, our reference will remain valid until we're done with it. The advantage of this would be we wouldn't be making a full copy of the transaction.",
      "created_at": "2022-12-02T00:08:03Z",
      "updated_at": "2022-12-02T00:08:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1037673418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1037673418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038492630",
      "pull_request_review_id": 1203025818,
      "id": 1038492630,
      "node_id": "PRRC_kwDOABII58495iPW",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 20,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it be safer not to make this assumption? The cluster would be larger, but since the algorithms are efficient, the performance difference shouldn't be a problem. The `MiniMiner` constructor would be simpler too. Even if currently we're never given a outpoint that conflicts with a transaction _not_ being replaced, could that possibly change in the future?\r\n\r\nInitially, I thought that was I'm suggesting here wouldn't work, because suppose that the transaction that our outpoint refers to (let's call it the parent) has a low feerate, but the transaction we're replacing (the parent's existing child) has a very high feerate. If, contrary to what the code currently does, we ignore the fact that we're replacing the child (we keep the child in the cluster, as if we're spending a different output of the parent), then we might conclude that we don't need to bump the parent's fee -- _whereas we actually do_, because the child will no longer exist!\r\n\r\nBut I think this won't happen because rule 6 of our [replacement policy](https://github.com/bitcoin/bitcoin/blob/master/doc/policy/mempool-replacements.md) requires the replacement transaction to have a higher feerate than all that it's replacing.\r\n\r\n> 6. The replacement transaction's feerate is greater than the feerates of all directly conflicting transactions.\r\n\r\nSo it seems like even if we (mistakenly) think that the existing child will remain and that it will bump the parent somewhat, it won't bump it enough to meet our requested feerate, so we'll still bump it (as required by our desired feerate).",
      "created_at": "2022-12-02T20:07:42Z",
      "updated_at": "2022-12-02T20:12:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1038492630",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038492630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 229,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038495307",
      "pull_request_review_id": 1203025818,
      "id": 1038495307,
      "node_id": "PRRC_kwDOABII58495i5L",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 142,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Simplification, we just asserted that it's not `entries.end()`\r\n```suggestion\r\n        if (ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\r\n```",
      "created_at": "2022-12-02T20:10:10Z",
      "updated_at": "2022-12-02T20:12:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1038495307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038495307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040297609",
      "pull_request_review_id": 1205584712,
      "id": 1040297609,
      "node_id": "PRRC_kwDOABII584-Aa6J",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "898ad9d5904f1b689d18d94f20d92500cf443758 The result of this `find()` could be `entries_by_txid.end()` (not found), because in the previous loop (also over `cluster`), if the transaction is found in `to_be_replaced` (so we take the `else` path), then the transaction is not added to `entries_by_txid`. I think it turns out to be harmless, but I just wanted to point it out because it looks like it may be unintentional.",
      "created_at": "2022-12-06T01:21:07Z",
      "updated_at": "2022-12-06T01:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040297609",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040297609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040298956",
      "pull_request_review_id": 1205584712,
      "id": 1040298956,
      "node_id": "PRRC_kwDOABII584-AbPM",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 193,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    // ancestor package with at least the target feerate and don't need to be bumped.\r\n```\r\n(if the feerates are equal, no bump is required)",
      "created_at": "2022-12-06T01:24:23Z",
      "updated_at": "2022-12-06T01:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040298956",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040298956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040561129",
      "pull_request_review_id": 1205980356,
      "id": 1040561129,
      "node_id": "PRRC_kwDOABII584-BbPp",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 58,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should all these class variable names have the `m_` prefix?",
      "created_at": "2022-12-06T06:44:47Z",
      "updated_at": "2022-12-06T06:44:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040561129",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040561129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040968456",
      "pull_request_review_id": 1206585147,
      "id": 1040968456,
      "node_id": "PRRC_kwDOABII584-C-sI",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if `GetIter(txid)` cannot find the txid in `mapTx`, it will return a `std::nullopt`, which will then cause the node to crash. this seems really dangerous. \r\n\r\nwouldn't it be better to remove the assert and just let `GetIterVec` return early with an empty vector if it's passed a txid which isn't in the mempool? based on the comment, that seems to be the intention of this code, so im not sure what good the `assert` is doing here",
      "created_at": "2022-12-06T13:23:34Z",
      "updated_at": "2022-12-06T15:06:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040968456",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040968456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040973653",
      "pull_request_review_id": 1206585147,
      "id": 1040973653,
      "node_id": "PRRC_kwDOABII584-C_9V",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the way `GetIterVec` is written, it will return an empty vector if any of the `txids` are not found in the mempool, so wouldn't it be better to check for an empty vector here and return an error to the user letting them know one of the txids they sent wasn't found in the mempool? the way it's written now, if an empty vector is returned the node will crash",
      "created_at": "2022-12-06T13:28:30Z",
      "updated_at": "2022-12-06T15:06:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040973653",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040973653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040986669",
      "pull_request_review_id": 1206585147,
      "id": 1040986669,
      "node_id": "PRRC_kwDOABII584-DDIt",
      "diff_hunk": "@@ -646,9 +646,16 @@ class CTxMemPool\n     /** Returns an iterator to the given hash, if found */\n     std::optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups */\n+    /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups.\n+     * Does not require that all of the hashes correspond to actual transactions in the mempool,\n+     * only returns the ones that exist. */\n     setEntries GetIterSet(const std::set<uint256>& hashes) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Translate a list of hashes into a list of mempool iterators to avoid repeated lookups.\n+     * The nth element in txids becomes the nth element in the returned vector. If any of the txids\n+     * don't actually exist in the mempool, returns an empty vector. */\n+    std::vector<txiter> GetIterVec(const std::vector<uint256>& txids) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+",
      "path": "src/txmempool.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "with the assert statements in `GetIterVec` and `CalculateCluster`, this is not accurate, unless I am misunderstanding something. if a txid does not exist in the mempool, `GetIter` returns a nullopt, which then causes `GetIterVec` to crash. if we remove that assert, then the assert in `CalculateCluster` checking that `txids.size() == cluster.size()` will crash the node due to `cluster` being an empty vector",
      "created_at": "2022-12-06T13:40:15Z",
      "updated_at": "2022-12-06T15:06:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040986669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040986669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": 530,
      "original_start_line": 654,
      "start_side": "RIGHT",
      "line": 534,
      "original_line": 534,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041047298",
      "pull_request_review_id": 1206585147,
      "id": 1041047298,
      "node_id": "PRRC_kwDOABII584-DR8C",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It could be my own unfamiliarity with the mempool, but I'm not really sure what is happening here. To check my understanding:\r\n\r\n`outpoints` here refers to a set of unconfirmed UTXOs that our wallet would like to spend, meaning they are tx outputs. `GetConflictTx` checks if the outpoint exists in `mapNextTx`, which means it is the `prevout` (or input) into another tx in the mempool. If there is another transaction in the mempool spending one of these outputs, we put the tx which is spending the outpointt into `to_be_replaced`. This is because we plan to construct a transaction which would then replace the conflicting tx, so we want to ignore doing anything with the conflicting txs for now?\r\n\r\nIt might be helpful to be a little more explicit than just `outpoints` (or write a more detailed comment for the function) as this can refer to either `outputs` or `prevouts`, which in this context makes things confusing to follow.",
      "created_at": "2022-12-06T14:28:37Z",
      "updated_at": "2022-12-06T15:06:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041047298",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041047298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041231862",
      "pull_request_review_id": 1206979066,
      "id": 1041231862,
      "node_id": "PRRC_kwDOABII584-D-_2",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1041047298,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> To check my understanding:\r\n\r\n> outpoints here refers to a set of unconfirmed UTXOs that our wallet would like to spend, meaning they are tx outputs. \r\n\r\nThey are not necessarily unconfirmed UTXOs, just some specified outpoints/prevouts. They may refer to confirmed or unconfirmed UTXOs. They may refer to outputs that the node doesn't think exist.\r\n\r\n> GetConflictTx checks if the outpoint exists in mapNextTx, which means it is the prevout (or input) into another tx in the mempool. If there is another transaction in the mempool spending one of these outputs, we put the tx which is spending the outpointt into to_be_replaced.\r\n\r\ncorrect, `GetConflictTx` gives you another mempool transaction that spends the same tx.\r\n\r\n> This is because we plan to construct a transaction which would then replace the conflicting tx, so we want to ignore doing anything with the conflicting txs for now?\r\n\r\nWe want to ensure we provide a bump fee for this UTXO, but ensure we calculate the bump fees *exluding the to-be-replaced transaction(s)*. Once they're replaced, they won't be there to bump their ancestors. So if we're replacing the child of a CPFP (e.g. to increase the bump even more), we want the correct fee to bump that parent *without* the original child there.",
      "created_at": "2022-12-06T17:01:08Z",
      "updated_at": "2022-12-06T17:16:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041231862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041231862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041233721",
      "pull_request_review_id": 1206979066,
      "id": 1041233721,
      "node_id": "PRRC_kwDOABII584-D_c5",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": 1040968456,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah good catch, that `else` branch is dead since the assert would hit.",
      "created_at": "2022-12-06T17:02:49Z",
      "updated_at": "2022-12-06T17:16:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041233721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041233721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041235267",
      "pull_request_review_id": 1206979066,
      "id": 1041235267,
      "node_id": "PRRC_kwDOABII584-D_1D",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028296326,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's true, -1 makes sense. Though note this is an approximation rather than an exact reservation. It may overestimate because transactions may share ancestors/descendants, and may underestimate because the cluster may include more than just ancestors and descendants.",
      "created_at": "2022-12-06T17:04:26Z",
      "updated_at": "2022-12-06T17:16:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041235267",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041235267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041237868",
      "pull_request_review_id": 1206979066,
      "id": 1041237868,
      "node_id": "PRRC_kwDOABII584-EAds",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028438751,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this equivalent, given it's changing from `GetMemPoolChildrenConst` to `GetMemPoolChildren` and getting a mutable reference to `m_parents`?",
      "created_at": "2022-12-06T17:07:05Z",
      "updated_at": "2022-12-06T17:16:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041237868",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041237868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1233,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041977851",
      "pull_request_review_id": 1208090285,
      "id": 1041977851,
      "node_id": "PRRC_kwDOABII584-G1H7",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1041047298,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, this explanation really helps!\r\n\r\n> They are not necessarily unconfirmed UTXOs, just some specified outpoints/prevouts. They may refer to confirmed or unconfirmed UTXOs. They may refer to outputs that the node doesn't think exist.\r\n\r\nIs it correct to say these `outpoints` are intended to be spent in a new transaction, as in the wallet has a set of UTXOs that it wants to spend in `TxB` where `TxB` can be a replacement of an already existing `TxA` or it can be an entirely new tx? From there, these `outpoints` can be a mix of confirmed/unconfirmed, but it's assumed at least one outpoint is unconfirmed\r\n\r\n",
      "created_at": "2022-12-07T09:41:51Z",
      "updated_at": "2022-12-07T09:41:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041977851",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041977851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042064307",
      "pull_request_review_id": 1208211679,
      "id": 1042064307,
      "node_id": "PRRC_kwDOABII584-HKOz",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040297609,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also noticed this and was a bit confused. In the case where `remove` is true, `cache_descendants` never gets added to the `descendants_by_txid` map, which is fine. In the case where `remove` is false, then `txid` should be in `entries_by_txid`, so it will get added to `cache_descendants`, along with all of `descendants`.\r\n\r\nSo what gets added to `descendants_by_txid` is `txidA: [txidA, txidB, txidC...]`, basically the parent + all of its children, which seems incorrect?",
      "created_at": "2022-12-07T10:59:14Z",
      "updated_at": "2022-12-07T10:59:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042064307",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042064307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042205597",
      "pull_request_review_id": 1208421851,
      "id": 1042205597,
      "node_id": "PRRC_kwDOABII584-Hsud",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1041047298,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Another thought I had while looking at this: we check if an `outpoint` has any conflicting spends in the mempool before we check if the outpoint itself is in the mempool. It seems we are inferring that the `outpoint` is in the mempool, otherwise it would not be present in `mapNextTx`. Is this the safest way to do this? Seems fine because `mapNextTx` is updated every time a tx is removed from the mempool, but figured I'd ask anyway in case there is a race condition / code path I'm not seeing which could make this unreliable in an edge case",
      "created_at": "2022-12-07T13:29:45Z",
      "updated_at": "2022-12-07T13:29:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042205597",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042205597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042441489",
      "pull_request_review_id": 1208766532,
      "id": 1042441489,
      "node_id": "PRRC_kwDOABII584-ImUR",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1041047298,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Is it correct to say these outpoints are intended to be spent in a new transaction, as in the wallet has a set of UTXOs that it wants to spend in TxB where TxB can be a replacement of an already existing TxA or it can be an entirely new tx?\r\n\r\nYes, exactly. If we're constructing `MiniMiner` to `CalculateBumpFees()`, these outpoints are basically all the coins owned by the wallet, i.e. `AvailableCoins`. If we're constructing `MiniMiner` to `CalculateTotalBumpFees()`, these are the outpoints we've decided to use to fund txB.\r\n\r\n> From there, these outpoints can be a mix of confirmed/unconfirmed, but it's assumed at least one outpoint is unconfirmed\r\n\r\nNot exactly. They could all be confirmed / nonexistent - in that case this constructor will end up not constructing any `MockMempoolEntry`s. When you call `CalculateBumpFees()` afterwards, it should just return the already-existing map of all-0 bump fees. This is the first test case in miniminer_tests.cpp.",
      "created_at": "2022-12-07T16:41:17Z",
      "updated_at": "2022-12-07T16:41:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042441489",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042441489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042478969",
      "pull_request_review_id": 1208822643,
      "id": 1042478969,
      "node_id": "PRRC_kwDOABII584-Ivd5",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what is the significance here? why not just have `return a_feerate >= b_feerate` or something like that?",
      "created_at": "2022-12-07T17:16:13Z",
      "updated_at": "2022-12-07T17:16:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042478969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042478969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049908143",
      "pull_request_review_id": 1187107175,
      "id": 1049908143,
      "node_id": "PRRC_kwDOABII584-lFOv",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;",
      "path": "src/txmempool.cpp",
      "position": 15,
      "original_position": 14,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1027114058,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed",
      "created_at": "2022-12-15T16:55:14Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049908143",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049908143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 905,
      "original_line": 905,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049921123",
      "pull_request_review_id": 1187107175,
      "id": 1049921123,
      "node_id": "PRRC_kwDOABII584-lIZj",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 16,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1027113476,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I've updated the comment.",
      "created_at": "2022-12-15T17:04:23Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049921123",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049921123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049985921",
      "pull_request_review_id": 1187107175,
      "id": 1049985921,
      "node_id": "PRRC_kwDOABII584-lYOB",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);\n+        if (it) {\n+            ret.push_back(*it);\n+        } else {\n+            // return empty vector to let the caller know this failed.\n+            std::vector<txiter> empty_vector;\n+            return empty_vector;\n+        }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028280212,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, removed the assert and simplified as suggested by @stickies-v ",
      "created_at": "2022-12-15T18:06:52Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049985921",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049985921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 963,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049990387",
      "pull_request_review_id": 1187107175,
      "id": 1049990387,
      "node_id": "PRRC_kwDOABII584-lZTz",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028296326,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's true, but since this is just allocating enough space for the iterators we are adding to the vector later, I don't think having one slot more than we might need is going to cause any issues.",
      "created_at": "2022-12-15T18:12:08Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049990387",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049990387"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049993532",
      "pull_request_review_id": 1187107175,
      "id": 1049993532,
      "node_id": "PRRC_kwDOABII584-laE8",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028322453,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I do not understand this question. Could you elaborate?",
      "created_at": "2022-12-15T18:15:30Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049993532",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049993532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049997727",
      "pull_request_review_id": 1187107175,
      "id": 1049997727,
      "node_id": "PRRC_kwDOABII584-lbGf",
      "diff_hunk": "@@ -694,6 +701,9 @@ class CTxMemPool\n                                    std::string& errString,\n                                    bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Get entire list of connected transactions for all transactions in txids. */",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 22,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028440069,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added an `@pre` statement",
      "created_at": "2022-12-15T18:20:17Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049997727",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049997727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049999464",
      "pull_request_review_id": 1187107175,
      "id": 1049999464,
      "node_id": "PRRC_kwDOABII584-lbho",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028330615,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated the name to your suggestion",
      "created_at": "2022-12-15T18:22:17Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049999464",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049999464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050001999",
      "pull_request_review_id": 1187107175,
      "id": 1050001999,
      "node_id": "PRRC_kwDOABII584-lcJP",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028377597,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated the comment to correct",
      "created_at": "2022-12-15T18:25:10Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050001999",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050001999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050061256",
      "pull_request_review_id": 1187107175,
      "id": 1050061256,
      "node_id": "PRRC_kwDOABII584-lqnI",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028438751,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "TODO: Tried this, but it broke all sorts of things, gonna revisit later. ",
      "created_at": "2022-12-15T19:36:34Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050061256",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050061256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1233,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050073812",
      "pull_request_review_id": 1187107175,
      "id": 1050073812,
      "node_id": "PRRC_kwDOABII584-ltrU",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 24,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028446649,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, fixed here and in other instances",
      "created_at": "2022-12-15T19:49:20Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050073812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050073812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050088372",
      "pull_request_review_id": 1187107175,
      "id": 1050088372,
      "node_id": "PRRC_kwDOABII584-lxO0",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 38,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028448913,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since this is a reference on an object held in mempool, and we have a lock on mempool, I think this is not necessary.",
      "created_at": "2022-12-15T20:07:13Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050088372",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050088372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050089826",
      "pull_request_review_id": 1187107175,
      "id": 1050089826,
      "node_id": "PRRC_kwDOABII584-lxli",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 25,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028449731,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`fee_with_ancestors` and `vsize_with_ancestors` get set directly in some code of mini_miner.cpp, so I think they cannot be private without also adding setters. I did make `vsize_individual` private",
      "created_at": "2022-12-15T20:08:58Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050089826",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050089826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 23,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050105884",
      "pull_request_review_id": 1187107175,
      "id": 1050105884,
      "node_id": "PRRC_kwDOABII584-l1gc",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 19,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028451302,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, made the two individuals const",
      "created_at": "2022-12-15T20:27:48Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050105884",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050105884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050263740",
      "pull_request_review_id": 1220130696,
      "id": 1050263740,
      "node_id": "PRRC_kwDOABII584-mcC8",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The benchmark (part of [my branch](https://github.com/LarryRuane/bitcoin/commits/2022-11-pr26152-refactor)) experienced a near-infinite loop without this change. The reason is that the benchmark test mempool has such a high degree of fan-out and fan-in that a single transaction could be added to the `to_process` set over and over. Of course, std::set doesn't allow duplicates, but I added some debug logging that shows the same tx being added, removed, processed, then added again, many times. This change fixed the problem completely.\r\n```suggestion\r\n                    if (!ancestors.count(parent_it)) {\r\n                        to_process.insert(parent_it);\r\n                        ancestors.insert(parent_it);\r\n                    }\r\n```",
      "created_at": "2022-12-16T00:36:13Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050263740",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050263740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 158,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050281965",
      "pull_request_review_id": 1220130696,
      "id": 1050281965,
      "node_id": "PRRC_kwDOABII584-mgft",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;\n+}\n+\n+CAmount MiniMiner::CalculateTotalBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // All remaining ancestors that are not part of in_block must be bumped, but no other relatives (e.g. siblings, niblings, …)\n+    std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+    std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+\n+    for (const auto& outpoint : requested_outpoints) {\n+        const auto& txid = outpoint.hash;\n+        // Skip any ancestors that have a higher minerscore already\n+        if (in_block.find(txid) != in_block.end()) continue;\n+        auto iter = entries_by_txid.find(outpoint.hash);\n+        assert(iter != entries_by_txid.end());\n+        to_process.insert(iter);\n+        ancestors.insert(iter);\n+    }\n+\n+    while (!to_process.empty()) {\n+        auto iter = to_process.begin();\n+        assert(iter != to_process.end());\n+        const CTransaction& tx = (*iter)->second.GetTx();\n+        for (const auto& input : tx.vin) {\n+            if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                to_process.insert(parent_it);\n+                ancestors.insert(parent_it);",
      "path": "src/node/mini_miner.cpp",
      "position": 355,
      "original_position": 249,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same change as above -- this is _much_ more efficient with a large cluster, for example, running the benchmark.\r\n```suggestion\r\n                if (!ancestors.count(parent_it)) {\r\n                    to_process.insert(parent_it);\r\n                    ancestors.insert(parent_it);\r\n                }\r\n```",
      "created_at": "2022-12-16T01:14:58Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050281965",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050281965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": 354,
      "original_start_line": 248,
      "start_side": "RIGHT",
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050360878",
      "pull_request_review_id": 1220130696,
      "id": 1050360878,
      "node_id": "PRRC_kwDOABII584-mzwu",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 175,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            // each entry's descendant set includes itself\r\n            assert(it != descendant_set_by_txid.end());\r\n```\r\n(it took me a little while to figure out why this assertion is valid)",
      "created_at": "2022-12-16T04:28:49Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050360878",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050360878"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050402228",
      "pull_request_review_id": 1220130696,
      "id": 1050402228,
      "node_id": "PRRC_kwDOABII584-m920",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 178,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You may want to assert that these don't go negative, I would actually do it before the decrement, like this:\r\n```\r\nassert(descendant->second.vsize_with_ancestors >= anc->second.GetTxSize());\r\ndescendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\r\n```",
      "created_at": "2022-12-16T06:11:42Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050402228",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050402228"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 177,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050404621",
      "pull_request_review_id": 1220130696,
      "id": 1050404621,
      "node_id": "PRRC_kwDOABII584-m-cN",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Something more important: this `emplace_back()` shouldn't be here at all, because each mempool entry is a member of its own descendants' list. So this \"main\" transaction gets added to `cached_descendants` below. This was causing the `fee_with_ancestors` and `vsize_with_ancestors` to go negative near the end of `BuildMockTemplate()` below.",
      "created_at": "2022-12-16T06:17:22Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050404621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050404621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050405337",
      "pull_request_review_id": 1220130696,
      "id": 1050405337,
      "node_id": "PRRC_kwDOABII584-m-nZ",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 174,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "simpler:\r\n```suggestion\r\n            auto it = descendant_set_by_txid.find(anc->first);\r\n```",
      "created_at": "2022-12-16T06:19:04Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050405337",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050405337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050406026",
      "pull_request_review_id": 1220130696,
      "id": 1050406026,
      "node_id": "PRRC_kwDOABII584-m-yK",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 171,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            in_block.insert(anc->first);\r\n```\r\n(functionally the same, just simpler)",
      "created_at": "2022-12-16T06:20:37Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050406026",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050406026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050420893",
      "pull_request_review_id": 1220353810,
      "id": 1050420893,
      "node_id": "PRRC_kwDOABII584-nCad",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040297609,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@josibake \r\n> ... which seems incorrect?\r\n\r\nNo, I think it's a convention in the strange Land of Mempool that a transaction's ancestor and descendant lists both include the transaction itself. This relates directly to my [comment](https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050404621) elsewhere that the `emplace_back()` should be removed; as it's currently written, the list would be: `txidA: [txidA, txidA, txidB, txidC...]`. This later causes a major accounting problem!",
      "created_at": "2022-12-16T06:51:14Z",
      "updated_at": "2022-12-16T06:51:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050420893",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050420893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055855643",
      "pull_request_review_id": 1187107175,
      "id": 1055855643,
      "node_id": "PRRC_kwDOABII584-7xQb",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).\n+    std::map<uint256, std::vector<COutPoint>> outpoints_needed_by_txid;\n+\n+    // What we're trying to calculate.\n+    std::map<COutPoint, CAmount> bump_fees;\n+\n+    // The constructed block template\n+    std::set<uint256> in_block;\n+\n+    // Information on the current status of the block\n+    CAmount total_fees{0};\n+    int64_t total_vsize{0};\n+\n+    /** Main data structure holding the entries, can be indexed by txid */\n+    std::map<uint256, MockMempoolEntry> entries_by_txid;\n+    using MockEntryMap = decltype(entries_by_txid);",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 82,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028460084,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I could not get this to work, could you elaborate what you propose?",
      "created_at": "2022-12-22T21:15:24Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1055855643",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055855643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055856418",
      "pull_request_review_id": 1187107175,
      "id": 1055856418,
      "node_id": "PRRC_kwDOABII584-7xci",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner",
      "path": "src/node/mini_miner.h",
      "position": 55,
      "original_position": 55,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028461644,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mh, I'll consider it, but it's also an easy change to make later.",
      "created_at": "2022-12-22T21:16:38Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1055856418",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055856418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 55,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082932473",
      "pull_request_review_id": 1187107175,
      "id": 1082932473,
      "node_id": "PRRC_kwDOABII585AjDz5",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028283266,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks",
      "created_at": "2023-01-20T18:43:18Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082932473",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082932473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082941287",
      "pull_request_review_id": 1187107175,
      "id": 1082941287,
      "node_id": "PRRC_kwDOABII585AjF9n",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).\n+    std::map<uint256, std::vector<COutPoint>> outpoints_needed_by_txid;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 68,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028482615,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I followed your suggestion",
      "created_at": "2023-01-20T18:54:28Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082941287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082941287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082942809",
      "pull_request_review_id": 1187107175,
      "id": 1082942809,
      "node_id": "PRRC_kwDOABII585AjGVZ",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 58,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028491577,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I do not know from the top of my head, I will need to look more into this",
      "created_at": "2023-01-20T18:56:30Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082942809",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082942809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947081",
      "pull_request_review_id": 1187107175,
      "id": 1082947081,
      "node_id": "PRRC_kwDOABII585AjHYJ",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1029977800,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You are right, I could not place the comment either and removed it.",
      "created_at": "2023-01-20T19:02:15Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082947081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947861",
      "pull_request_review_id": 1187107175,
      "id": 1082947861,
      "node_id": "PRRC_kwDOABII585AjHkV",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035216664,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I used your suggestion.",
      "created_at": "2023-01-20T19:03:24Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082947861",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082948093",
      "pull_request_review_id": 1187107175,
      "id": 1082948093,
      "node_id": "PRRC_kwDOABII585AjHn9",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 219,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035217598,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-01-20T19:03:43Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082948093",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082948093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082950297",
      "pull_request_review_id": 1187107175,
      "id": 1082950297,
      "node_id": "PRRC_kwDOABII585AjIKZ",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035218401,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I removed the unnecessary `std::make_pair` throughout",
      "created_at": "2023-01-20T19:06:51Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082950297",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082950297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082976081",
      "pull_request_review_id": 1187107175,
      "id": 1082976081,
      "node_id": "PRRC_kwDOABII585AjOdR",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035234823,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, looks great",
      "created_at": "2023-01-20T19:39:49Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082976081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082976081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 53,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082977273",
      "pull_request_review_id": 1187107175,
      "id": 1082977273,
      "node_id": "PRRC_kwDOABII585AjOv5",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 7,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035269211,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea, clarified the example",
      "created_at": "2023-01-20T19:41:25Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082977273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082977273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082978994",
      "pull_request_review_id": 1187107175,
      "id": 1082978994,
      "node_id": "PRRC_kwDOABII585AjPKy",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 67,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035318488,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Adopted your phrasing of the comment",
      "created_at": "2023-01-20T19:43:48Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082978994",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082978994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 64,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082979907",
      "pull_request_review_id": 1187107175,
      "id": 1082979907,
      "node_id": "PRRC_kwDOABII585AjPZD",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that are otherwise unavailable from the mempool (e.g. UTXOs from confirmed\n+    //  transactions or transactions not yet broadcast by the wallet) are given a bump fee of 0.\n+    //\n+    //  If multiple outpoints come from the same transaction (which would be very rare because\n+    //  it means that one transaction has multiple change outputs or paid the same wallet using multiple\n+    //  outputs in the same transaction) or have shared ancestry, the bump fees are calculated\n+    //  independently, i.e. as if only one of them is spent. This may result in double-fee-bumping. This\n+    //  caveat can be rectified per use of the sister-function CalculateTotalBumpFees(…).\n+    virtual std::map<COutPoint, CAmount> CalculateBumpFees(const std::vector<COutPoint>& outpoints, const CFeeRate& target_feerate) = 0;\n+\n+    //! Calculate the shared bump fees for a given set of outpoints per the\n+    //  same strategy as in CalculateBumpFees(…).  Other than the above call,",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 33,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035330287,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sgtm, thanks",
      "created_at": "2023-01-20T19:45:06Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082979907",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082979907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082981470",
      "pull_request_review_id": 1187107175,
      "id": 1082981470,
      "node_id": "PRRC_kwDOABII585AjPxe",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 14,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035335097,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This refers to transactions already bumped by other transactions in our mempool, not bumped by our calculation of bump fees. I've amended the phrase to clarify.",
      "created_at": "2023-01-20T19:47:13Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082981470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082981470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039335",
      "pull_request_review_id": 1187107175,
      "id": 1083039335,
      "node_id": "PRRC_kwDOABII585Ajd5n",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035354396,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds right to me",
      "created_at": "2023-01-20T20:52:42Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083039335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039809",
      "pull_request_review_id": 1187107175,
      "id": 1083039809,
      "node_id": "PRRC_kwDOABII585AjeBB",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035363601,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea",
      "created_at": "2023-01-20T20:53:24Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083039809",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083050607",
      "pull_request_review_id": 1187107175,
      "id": 1083050607,
      "node_id": "PRRC_kwDOABII585Ajgpv",
      "diff_hunk": "@@ -80,7 +80,18 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize);\n+    std::vector<COutPoint> reused_inputs;\n+    for (const CTxIn& txin : wtx.tx->vin) {\n+        reused_inputs.push_back(txin.prevout);\n+    }\n+\n+    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateBumpFees(reused_inputs, newFeerate);",
      "path": "src/wallet/feebumper.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1026970423,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, in fact not accounting for overlapping ancestries here might have been a bug.",
      "created_at": "2023-01-20T21:06:56Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083050607",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083050607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083052189",
      "pull_request_review_id": 1187107175,
      "id": 1083052189,
      "node_id": "PRRC_kwDOABII585AjhCd",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"",
      "path": "src/node/mini_miner.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035575327,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added before the constructor",
      "created_at": "2023-01-20T21:08:35Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083052189",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083052189"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083055314",
      "pull_request_review_id": 1187107175,
      "id": 1083055314,
      "node_id": "PRRC_kwDOABII585AjhzS",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 17,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035576612,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed to `MiniMinerMempoolEntry`, although I don't feel strongly about the name.",
      "created_at": "2023-01-20T21:13:11Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083055314",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083055314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083073942",
      "pull_request_review_id": 1187107175,
      "id": 1083073942,
      "node_id": "PRRC_kwDOABII585AjmWW",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 20,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1037673418,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for diving in this deeply, that sounds correct to me.",
      "created_at": "2023-01-20T21:38:56Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083073942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083073942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083079136",
      "pull_request_review_id": 1187107175,
      "id": 1083079136,
      "node_id": "PRRC_kwDOABII585Ajnng",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 142,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1038495307,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch, fixed",
      "created_at": "2023-01-20T21:47:34Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083079136",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083079136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084555371",
      "pull_request_review_id": 1187107175,
      "id": 1084555371,
      "node_id": "PRRC_kwDOABII585ApQBr",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040297609,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note to self: TODO",
      "created_at": "2023-01-23T21:08:54Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1084555371",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084555371"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084559378",
      "pull_request_review_id": 1187107175,
      "id": 1084559378,
      "node_id": "PRRC_kwDOABII585ApRAS",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 193,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040298956,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, corrected",
      "created_at": "2023-01-23T21:12:40Z",
      "updated_at": "2023-01-31T21:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1084559378",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084559378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084646082",
      "pull_request_review_id": 1187107175,
      "id": 1084646082,
      "node_id": "PRRC_kwDOABII585ApmLC",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 58,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040561129,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, yes, they should.",
      "created_at": "2023-01-23T22:42:59Z",
      "updated_at": "2023-01-31T21:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1084646082",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084646082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092491521",
      "pull_request_review_id": 1187107175,
      "id": 1092491521,
      "node_id": "PRRC_kwDOABII585BHhkB",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 58,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040561129,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed all MiniMiner class variables to be prefixed with `m_`",
      "created_at": "2023-01-31T21:18:31Z",
      "updated_at": "2023-01-31T21:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092491521",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092491521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092493616",
      "pull_request_review_id": 1187107175,
      "id": 1092493616,
      "node_id": "PRRC_kwDOABII585BHiEw",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": 1040968456,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-01-31T21:21:07Z",
      "updated_at": "2023-01-31T21:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092493616",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092493616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092494674",
      "pull_request_review_id": 1187107175,
      "id": 1092494674,
      "node_id": "PRRC_kwDOABII585BHiVS",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": 1040973653,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-01-31T21:22:26Z",
      "updated_at": "2023-01-31T21:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092494674",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092494674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092496414",
      "pull_request_review_id": 1187107175,
      "id": 1092496414,
      "node_id": "PRRC_kwDOABII585BHiwe",
      "diff_hunk": "@@ -646,9 +646,16 @@ class CTxMemPool\n     /** Returns an iterator to the given hash, if found */\n     std::optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups */\n+    /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups.\n+     * Does not require that all of the hashes correspond to actual transactions in the mempool,\n+     * only returns the ones that exist. */\n     setEntries GetIterSet(const std::set<uint256>& hashes) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Translate a list of hashes into a list of mempool iterators to avoid repeated lookups.\n+     * The nth element in txids becomes the nth element in the returned vector. If any of the txids\n+     * don't actually exist in the mempool, returns an empty vector. */\n+    std::vector<txiter> GetIterVec(const std::vector<uint256>& txids) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+",
      "path": "src/txmempool.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": 1040986669,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-01-31T21:24:31Z",
      "updated_at": "2023-01-31T21:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092496414",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092496414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": 530,
      "original_start_line": 654,
      "start_side": "RIGHT",
      "line": 534,
      "original_line": 534,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093127455",
      "pull_request_review_id": 1278975243,
      "id": 1093127455,
      "node_id": "PRRC_kwDOABII585BJ80f",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028438751,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mutable reference = the `merge` is modifying the entry's `m_parents` to now include its children as well. You can make a separate set that copies in the iterators from `GetMemPoolParentsConst` and `GetMemPoolChildrenConst`, but I'm not sure that's worth the lines of code reduction.",
      "created_at": "2023-02-01T12:00:45Z",
      "updated_at": "2023-02-01T12:00:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093127455",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093127455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1233,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093531601",
      "pull_request_review_id": 1279568584,
      "id": 1093531601,
      "node_id": "PRRC_kwDOABII585BLffR",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1042478969,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I expect this to be used to make the sorting order stable without introducing a gameable tie-breaker\r\n",
      "created_at": "2023-02-01T17:30:49Z",
      "updated_at": "2023-02-01T18:01:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093531601",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093531601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093563190",
      "pull_request_review_id": 1279568584,
      "id": 1093563190,
      "node_id": "PRRC_kwDOABII585BLnM2",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1050263740,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great, thanks",
      "created_at": "2023-02-01T18:01:22Z",
      "updated_at": "2023-02-01T18:01:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093563190",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093563190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 158,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093853664",
      "pull_request_review_id": 1280046602,
      "id": 1093853664,
      "node_id": "PRRC_kwDOABII585BMuHg",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028438751,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Gonna skip this for now, unless there is more demand for it",
      "created_at": "2023-02-01T23:39:16Z",
      "updated_at": "2023-02-01T23:39:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093853664",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093853664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1233,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093864959",
      "pull_request_review_id": 1280061574,
      "id": 1093864959,
      "node_id": "PRRC_kwDOABII585BMw3_",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 58,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028491577,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removing `requested_outpoints` in favor of the keys of `bump_fees` breaks tests, so I assume they’re not overlapping exactly.",
      "created_at": "2023-02-02T00:01:27Z",
      "updated_at": "2023-02-02T00:01:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093864959",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093864959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093871261",
      "pull_request_review_id": 1280071076,
      "id": 1093871261,
      "node_id": "PRRC_kwDOABII585BMyad",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 20,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1038492630,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I’m not sure I follow your train of thought here. I think you have since reviewed this further, do you think this still needs to be addressed?",
      "created_at": "2023-02-02T00:14:08Z",
      "updated_at": "2023-02-02T00:14:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093871261",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093871261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 229,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094801361",
      "pull_request_review_id": 1281460983,
      "id": 1094801361,
      "node_id": "PRRC_kwDOABII585BQVfR",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028322453,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We don't know the cluster size before, so this doesn’t allow us to optimize here",
      "created_at": "2023-02-02T16:50:03Z",
      "updated_at": "2023-02-02T16:50:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1094801361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094801361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094806366",
      "pull_request_review_id": 1281467174,
      "id": 1094806366,
      "node_id": "PRRC_kwDOABII585BQWte",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 20,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1038492630,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thinking more about this, I think the assumption is valid and I don't expect it to change soon. It is also documented here, so if it changes, people should notice the conflict. We will add a test for this.",
      "created_at": "2023-02-02T16:53:35Z",
      "updated_at": "2023-02-02T16:54:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1094806366",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094806366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 229,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095002769",
      "pull_request_review_id": 1281780867,
      "id": 1095002769,
      "node_id": "PRRC_kwDOABII585BRGqR",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1042478969,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment",
      "created_at": "2023-02-02T19:34:08Z",
      "updated_at": "2023-02-02T19:34:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1095002769",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095002769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095009931",
      "pull_request_review_id": 1281789084,
      "id": 1095009931,
      "node_id": "PRRC_kwDOABII585BRIaL",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 178,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1050402228,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I’ve adopted your suggestion, although with an `Assume` instead.",
      "created_at": "2023-02-02T19:40:17Z",
      "updated_at": "2023-02-02T19:40:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1095009931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095009931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 177,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095018669",
      "pull_request_review_id": 1281798898,
      "id": 1095018669,
      "node_id": "PRRC_kwDOABII585BRKit",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040297609,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, it would be more correct to gate the `emplace_back()` on `!remove`.",
      "created_at": "2023-02-02T19:48:13Z",
      "updated_at": "2023-02-02T19:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1095018669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095018669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    }
  ]
}