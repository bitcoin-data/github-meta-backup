{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375",
    "id": 856181897,
    "node_id": "PR_kwDOABII584zCEyJ",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/24375",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/24375.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/24375.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24375",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24375/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
    "number": 24375,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Do not use `LocalTestingSetup` in getarg_tests test file.",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Avoid using a test fixture in getarg_tests for better readability. Change was implemented by _kiminuo_ and posted https://github.com/bitcoin/bitcoin/pull/24306#issuecomment-1036643216",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2022-02-18T00:47:55Z",
    "updated_at": "2023-03-02T10:15:20Z",
    "closed_at": "2022-03-02T11:11:42Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-03-02T11:11:42Z",
    "merge_commit_sha": "08bcfa27675da5c65e4c9eab7e7764eab0599298",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "ryanofsky:pr/fixt",
      "ref": "pr/fixt",
      "sha": "5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 69901633,
        "node_id": "MDEwOlJlcG9zaXRvcnk2OTkwMTYzMw==",
        "name": "bitcoin",
        "full_name": "ryanofsky/bitcoin",
        "owner": {
          "login": "ryanofsky",
          "id": 7133040,
          "node_id": "MDQ6VXNlcjcxMzMwNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ryanofsky",
          "html_url": "https://github.com/ryanofsky",
          "followers_url": "https://api.github.com/users/ryanofsky/followers",
          "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
          "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
          "repos_url": "https://api.github.com/users/ryanofsky/repos",
          "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ryanofsky/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ryanofsky/bitcoin",
        "archive_url": "https://api.github.com/repos/ryanofsky/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ryanofsky/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ryanofsky/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ryanofsky/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ryanofsky/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ryanofsky/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ryanofsky/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ryanofsky/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ryanofsky/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ryanofsky/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ryanofsky/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ryanofsky/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ryanofsky/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ryanofsky/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ryanofsky/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ryanofsky/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ryanofsky/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ryanofsky/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ryanofsky/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ryanofsky/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ryanofsky/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ryanofsky/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ryanofsky/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ryanofsky/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ryanofsky/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ryanofsky/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ryanofsky/bitcoin/hooks",
        "svn_url": "https://github.com/ryanofsky/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 6,
        "stargazers_count": 8,
        "watchers_count": 8,
        "size": 229522,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T09:40:24Z",
        "created_at": "2016-10-03T19:05:43Z",
        "updated_at": "2023-05-05T12:10:19Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "66636ca438cb65fb18bcaa4540856cef0cee2029",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 175,
    "deletions": 173,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 9,
    "comments": 2
  },
  "events": [
    {
      "event": "mentioned",
      "id": 6094637798,
      "node_id": "MEE_lADOABII585EE4B4zwAAAAFrRMrm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6094637798",
      "actor": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-18T00:47:55Z"
    },
    {
      "event": "subscribed",
      "id": 6094637803,
      "node_id": "SE_lADOABII585EE4B4zwAAAAFrRMrr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6094637803",
      "actor": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-18T00:47:55Z"
    },
    {
      "event": "unsubscribed",
      "id": 6094641384,
      "node_id": "UE_lADOABII585EE4B4zwAAAAFrRNjo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6094641384",
      "actor": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-18T00:49:01Z"
    },
    {
      "event": "labeled",
      "id": 6095104987,
      "node_id": "LE_lADOABII585EE4B4zwAAAAFrS-vb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6095104987",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-18T02:40:22Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 886878567,
      "node_id": "PRR_kwDOABII58403LFn",
      "url": null,
      "actor": null,
      "commit_id": "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24375#pullrequestreview-886878567",
      "submitted_at": "2022-02-18T06:37:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVkN2YyMjU5NWZmMmRlOWI5ODgzZTQ2OGUzY2U3MTgyZmMzZjE4M2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
      "tree": {
        "sha": "25538d71185836a538c27bab5e9b33a409ddcf49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25538d71185836a538c27bab5e9b33a409ddcf49"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a618c1e3b793b387a9d38ffe1498883cd4be35c",
          "sha": "3a618c1e3b793b387a9d38ffe1498883cd4be35c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3a618c1e3b793b387a9d38ffe1498883cd4be35c"
        }
      ],
      "message": "Do not use `LocalTestingSetup` in getarg_tests test file.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2022-02-18T12:12:57Z"
      },
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2022-02-12T16:32:47Z"
      },
      "sha": "5d7f22595ff2de9b9883e468e3ce7182fc3f183b"
    },
    {
      "event": "reviewed",
      "id": 887200007,
      "node_id": "PRR_kwDOABII58404ZkH",
      "url": null,
      "actor": null,
      "commit_id": "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updated 55059269fe7379912b315a80f3a1a17b33a3e23d -> 5d7f22595ff2de9b9883e468e3ce7182fc3f183b ([`pr/fixt.1`](https://github.com/ryanofsky/bitcoin/commits/pr/fixt.1) -> [`pr/fixt.2`](https://github.com/ryanofsky/bitcoin/commits/pr/fixt.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fixt.1..pr/fixt.2)) to try to fix https://cirrus-ci.com/task/6481959261044736 and https://cirrus-ci.com/task/6200484284334080.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24375#pullrequestreview-887200007",
      "submitted_at": "2022-02-18T12:17:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6098588535,
      "node_id": "HRFPE_lADOABII585EE4B4zwAAAAFrgRN3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6098588535",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-18T12:17:24Z"
    },
    {
      "event": "commented",
      "id": 1045496360,
      "node_id": "IC_kwDOABII584-UQIo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1045496360",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-19T01:20:52Z",
      "updated_at": "2022-02-19T01:20:52Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24306](https://github.com/bitcoin/bitcoin/pull/24306) (util: Make ArgsManager::GetPathArg more widely usable by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24375#issuecomment-1045496360",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24375"
    },
    {
      "event": "commented",
      "id": 1054559445,
      "node_id": "IC_kwDOABII584-20zV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1054559445",
      "actor": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-28T18:49:43Z",
      "updated_at": "2022-02-28T18:49:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24375#issuecomment-1054559445",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24375"
    },
    {
      "event": "merged",
      "id": 6170031305,
      "node_id": "ME_lADOABII585EE4B4zwAAAAFvwzTJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6170031305",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "08bcfa27675da5c65e4c9eab7e7764eab0599298",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08bcfa27675da5c65e4c9eab7e7764eab0599298",
      "created_at": "2022-03-02T11:11:42Z"
    },
    {
      "event": "closed",
      "id": 6170031329,
      "node_id": "CE_lADOABII585EE4B4zwAAAAFvwzTh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6170031329",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-02T11:11:42Z"
    },
    {
      "event": "referenced",
      "id": 6174491564,
      "node_id": "REFE_lADOABII585EE4B4zwAAAAFwB0Os",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6174491564",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6dabdd11c873f351a8ff711c8afa791d363b2ab5",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/6dabdd11c873f351a8ff711c8afa791d363b2ab5",
      "created_at": "2022-03-02T23:25:09Z"
    },
    {
      "event": "subscribed",
      "id": 7547040576,
      "node_id": "SE_lADOABII585EE4B4zwAAAAHB1rNA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7547040576",
      "actor": {
        "login": "Leylimahmud",
        "id": 99537361,
        "node_id": "U_kgDOBe7R0Q",
        "avatar_url": "https://avatars.githubusercontent.com/u/99537361?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Leylimahmud",
        "html_url": "https://github.com/Leylimahmud",
        "followers_url": "https://api.github.com/users/Leylimahmud/followers",
        "following_url": "https://api.github.com/users/Leylimahmud/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Leylimahmud/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Leylimahmud/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Leylimahmud/subscriptions",
        "organizations_url": "https://api.github.com/users/Leylimahmud/orgs",
        "repos_url": "https://api.github.com/users/Leylimahmud/repos",
        "events_url": "https://api.github.com/users/Leylimahmud/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Leylimahmud/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-07T23:27:09Z"
    },
    {
      "event": "locked",
      "id": 8647627030,
      "node_id": "LOE_lADOABII585EE4B4zwAAAAIDcFEW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8647627030",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-02T10:15:20Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809712076",
      "pull_request_review_id": 886878567,
      "id": 809712076,
      "node_id": "PRRC_kwDOABII584wQznM",
      "diff_hunk": "@@ -40,264 +31,277 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(m_local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n+void SetupArgs(ArgsManager& local_args, const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    m_local_args.ClearArgs();\n     for (const auto& arg : args) {\n-        m_local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo});\n-    ResetArgs(\"-foo\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    SetupArgs(local_args, {foo});\n+    ResetArgs(local_args, \"-foo\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fooo\", true));\n \n-    ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo -nofoo\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1 -nofoo=1\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0 -nofoo=0\"); // -nofoo=0 should win\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n-    ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"--foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(local_args, \"--nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n }\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n-\n-    ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n+\n+    ResetArgs(local_args, \"-foo=eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n }\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 0);\n \n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n \n     // Check under-/overflow behavior.\n-    ResetArgs(\"-foo=-9223372036854775809 -bar=9223372036854775808\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n+    ResetArgs(local_args, \"-foo=-9223372036854775809 -bar=9223372036854775808\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n \n-    ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n+    ResetArgs(local_args, \"-foo=11 -bar=12\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 12);\n \n-    ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo=NaN -bar=NotANumber\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(patharg)\n {\n+    ArgsManager local_args;\n+\n     const auto dir = std::make_pair(\"-dir\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({dir});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), fs::path{});\n+    SetupArgs(local_args, {dir});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), fs::path{});\n \n     const fs::path root_path{\"/\"};\n-    ResetArgs(\"-dir=/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n #ifdef WIN32\n     const fs::path win_root_path{\"C:\\\\\"};\n-    ResetArgs(\"-dir=C:\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n #endif\n \n     const fs::path absolute_path{\"/home/user/.bitcoin\"};\n-    ResetArgs(\"-dir=/home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/root/../home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/root/../home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/./user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/./user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n     const fs::path relative_path{\"user/.bitcoin\"};\n-    ResetArgs(\"-dir=user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=somewhere/../user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=somewhere/../user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/./.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/./.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetBoolArg(\"-foo\", false), true);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"--foo\");\n+    BOOST_CHECK_EQUAL(local_args.GetBoolArg(\"-foo\", false), true);\n \n-    ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n+    ResetArgs(local_args, \"--foo=verbose --bar=1\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=0\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo -foo\"); // foo always wins:\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n+    ArgsManager local_args;\n+\n     const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n-    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n-    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+    SetupArgs(local_args, {okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(local_args, \"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    LogInstance().StartLogging();",
      "path": "src/test/getarg_tests.cpp",
      "position": null,
      "original_position": 460,
      "commit_id": "5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
      "original_commit_id": "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "CI fails sequentially. Maybe due to this?",
      "created_at": "2022-02-18T06:37:50Z",
      "updated_at": "2022-02-18T06:37:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809712076",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809712076"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809805365",
      "pull_request_review_id": 887006984,
      "id": 809805365,
      "node_id": "PRRC_kwDOABII584wRKY1",
      "diff_hunk": "@@ -40,264 +31,277 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(m_local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n+void SetupArgs(ArgsManager& local_args, const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    m_local_args.ClearArgs();\n     for (const auto& arg : args) {\n-        m_local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo});\n-    ResetArgs(\"-foo\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    SetupArgs(local_args, {foo});\n+    ResetArgs(local_args, \"-foo\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fooo\", true));\n \n-    ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo -nofoo\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1 -nofoo=1\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0 -nofoo=0\"); // -nofoo=0 should win\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n-    ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"--foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(local_args, \"--nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n }\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n-\n-    ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n+\n+    ResetArgs(local_args, \"-foo=eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n }\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 0);\n \n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n \n     // Check under-/overflow behavior.\n-    ResetArgs(\"-foo=-9223372036854775809 -bar=9223372036854775808\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n+    ResetArgs(local_args, \"-foo=-9223372036854775809 -bar=9223372036854775808\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n \n-    ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n+    ResetArgs(local_args, \"-foo=11 -bar=12\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 12);\n \n-    ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo=NaN -bar=NotANumber\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(patharg)\n {\n+    ArgsManager local_args;\n+\n     const auto dir = std::make_pair(\"-dir\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({dir});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), fs::path{});\n+    SetupArgs(local_args, {dir});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), fs::path{});\n \n     const fs::path root_path{\"/\"};\n-    ResetArgs(\"-dir=/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n #ifdef WIN32\n     const fs::path win_root_path{\"C:\\\\\"};\n-    ResetArgs(\"-dir=C:\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n #endif\n \n     const fs::path absolute_path{\"/home/user/.bitcoin\"};\n-    ResetArgs(\"-dir=/home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/root/../home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/root/../home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/./user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/./user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n     const fs::path relative_path{\"user/.bitcoin\"};\n-    ResetArgs(\"-dir=user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=somewhere/../user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=somewhere/../user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/./.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/./.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetBoolArg(\"-foo\", false), true);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"--foo\");\n+    BOOST_CHECK_EQUAL(local_args.GetBoolArg(\"-foo\", false), true);\n \n-    ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n+    ResetArgs(local_args, \"--foo=verbose --bar=1\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=0\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo -foo\"); // foo always wins:\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n+    ArgsManager local_args;\n+\n     const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n-    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n-    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+    SetupArgs(local_args, {okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(local_args, \"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    LogInstance().StartLogging();",
      "path": "src/test/getarg_tests.cpp",
      "position": null,
      "original_position": 460,
      "commit_id": "5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
      "original_commit_id": "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "in_reply_to_id": 809712076,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line turns off the logger buffering feature: https://github.com/ryanofsky/bitcoin/blob/55059269fe7379912b315a80f3a1a17b33a3e23d/src/logging.cpp#L68\r\n\r\nso that https://github.com/ryanofsky/bitcoin/blob/55059269fe7379912b315a80f3a1a17b33a3e23d/src/logging.cpp#L267 is `false` and the logger callbacks are called\r\n\r\nhttps://github.com/ryanofsky/bitcoin/blob/55059269fe7379912b315a80f3a1a17b33a3e23d/src/logging.cpp#L278-L280\r\n\r\nI have tried to run locally `src/test/test_bitcoin --log_level=all --run_test=getarg_tests` and it passes. However, ` src/test/test_bitcoin` does not pass for me so you are right and it can be reasonably reproduced. Also as one may expect variable `s` is empty (https://github.com/ryanofsky/bitcoin/blob/55059269fe7379912b315a80f3a1a17b33a3e23d/src/test/getarg_tests.cpp#L307).",
      "created_at": "2022-02-18T09:11:43Z",
      "updated_at": "2022-02-18T09:11:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809805365",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809805365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809890814",
      "pull_request_review_id": 887122676,
      "id": 809890814,
      "node_id": "PRRC_kwDOABII584wRfP-",
      "diff_hunk": "@@ -40,264 +31,277 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(m_local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n+void SetupArgs(ArgsManager& local_args, const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    m_local_args.ClearArgs();\n     for (const auto& arg : args) {\n-        m_local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo});\n-    ResetArgs(\"-foo\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    SetupArgs(local_args, {foo});\n+    ResetArgs(local_args, \"-foo\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fooo\", true));\n \n-    ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo -nofoo\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1 -nofoo=1\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0 -nofoo=0\"); // -nofoo=0 should win\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n-    ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"--foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(local_args, \"--nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n }\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n-\n-    ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n+\n+    ResetArgs(local_args, \"-foo=eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n }\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 0);\n \n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n \n     // Check under-/overflow behavior.\n-    ResetArgs(\"-foo=-9223372036854775809 -bar=9223372036854775808\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n+    ResetArgs(local_args, \"-foo=-9223372036854775809 -bar=9223372036854775808\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n \n-    ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n+    ResetArgs(local_args, \"-foo=11 -bar=12\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 12);\n \n-    ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo=NaN -bar=NotANumber\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(patharg)\n {\n+    ArgsManager local_args;\n+\n     const auto dir = std::make_pair(\"-dir\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({dir});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), fs::path{});\n+    SetupArgs(local_args, {dir});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), fs::path{});\n \n     const fs::path root_path{\"/\"};\n-    ResetArgs(\"-dir=/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n #ifdef WIN32\n     const fs::path win_root_path{\"C:\\\\\"};\n-    ResetArgs(\"-dir=C:\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n #endif\n \n     const fs::path absolute_path{\"/home/user/.bitcoin\"};\n-    ResetArgs(\"-dir=/home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/root/../home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/root/../home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/./user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/./user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n     const fs::path relative_path{\"user/.bitcoin\"};\n-    ResetArgs(\"-dir=user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=somewhere/../user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=somewhere/../user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/./.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/./.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetBoolArg(\"-foo\", false), true);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"--foo\");\n+    BOOST_CHECK_EQUAL(local_args.GetBoolArg(\"-foo\", false), true);\n \n-    ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n+    ResetArgs(local_args, \"--foo=verbose --bar=1\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=0\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo -foo\"); // foo always wins:\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n+    ArgsManager local_args;\n+\n     const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n-    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n-    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+    SetupArgs(local_args, {okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(local_args, \"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    LogInstance().StartLogging();",
      "path": "src/test/getarg_tests.cpp",
      "position": null,
      "original_position": 460,
      "commit_id": "5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
      "original_commit_id": "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "in_reply_to_id": 809712076,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So the error is because of this line https://github.com/ryanofsky/bitcoin/blob/55059269fe7379912b315a80f3a1a17b33a3e23d/src/logging.cpp#L53 as `m_print_to_file` is `true` sometimes so the callback is not called.",
      "created_at": "2022-02-18T10:52:15Z",
      "updated_at": "2022-02-18T10:52:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809890814",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809890814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809942041",
      "pull_request_review_id": 887195453,
      "id": 809942041,
      "node_id": "PRRC_kwDOABII584wRrwZ",
      "diff_hunk": "@@ -40,264 +31,277 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(m_local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n+void SetupArgs(ArgsManager& local_args, const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    m_local_args.ClearArgs();\n     for (const auto& arg : args) {\n-        m_local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo});\n-    ResetArgs(\"-foo\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    SetupArgs(local_args, {foo});\n+    ResetArgs(local_args, \"-foo\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fooo\", true));\n \n-    ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo -nofoo\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1 -nofoo=1\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0 -nofoo=0\"); // -nofoo=0 should win\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n-    ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"--foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(local_args, \"--nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n }\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n-\n-    ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n+\n+    ResetArgs(local_args, \"-foo=eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n }\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 0);\n \n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n \n     // Check under-/overflow behavior.\n-    ResetArgs(\"-foo=-9223372036854775809 -bar=9223372036854775808\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n+    ResetArgs(local_args, \"-foo=-9223372036854775809 -bar=9223372036854775808\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n \n-    ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n+    ResetArgs(local_args, \"-foo=11 -bar=12\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 12);\n \n-    ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo=NaN -bar=NotANumber\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(patharg)\n {\n+    ArgsManager local_args;\n+\n     const auto dir = std::make_pair(\"-dir\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({dir});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), fs::path{});\n+    SetupArgs(local_args, {dir});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), fs::path{});\n \n     const fs::path root_path{\"/\"};\n-    ResetArgs(\"-dir=/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n #ifdef WIN32\n     const fs::path win_root_path{\"C:\\\\\"};\n-    ResetArgs(\"-dir=C:\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n #endif\n \n     const fs::path absolute_path{\"/home/user/.bitcoin\"};\n-    ResetArgs(\"-dir=/home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/root/../home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/root/../home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/./user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/./user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n     const fs::path relative_path{\"user/.bitcoin\"};\n-    ResetArgs(\"-dir=user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=somewhere/../user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=somewhere/../user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/./.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/./.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetBoolArg(\"-foo\", false), true);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"--foo\");\n+    BOOST_CHECK_EQUAL(local_args.GetBoolArg(\"-foo\", false), true);\n \n-    ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n+    ResetArgs(local_args, \"--foo=verbose --bar=1\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=0\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo -foo\"); // foo always wins:\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n+    ArgsManager local_args;\n+\n     const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n-    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n-    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+    SetupArgs(local_args, {okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(local_args, \"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    LogInstance().StartLogging();",
      "path": "src/test/getarg_tests.cpp",
      "position": null,
      "original_position": 460,
      "commit_id": "5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
      "original_commit_id": "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "in_reply_to_id": 809712076,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/kiminuo/bitcoin/commit/1ca557e57d0bdfb424ce4bf8bd7a1dd76b58be35 might actually fix the issue but I'm not sure what you would say about the change. Anyway, I don't really know about a different solution so either that or closing #24375. \r\n\r\nThis uncovers that working with static variables is hard :(",
      "created_at": "2022-02-18T12:09:07Z",
      "updated_at": "2022-02-18T12:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809942041",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809942041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809945220",
      "pull_request_review_id": 887200007,
      "id": 809945220,
      "node_id": "PRRC_kwDOABII584wRsiE",
      "diff_hunk": "@@ -40,264 +31,277 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(m_local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n+void SetupArgs(ArgsManager& local_args, const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    m_local_args.ClearArgs();\n     for (const auto& arg : args) {\n-        m_local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo});\n-    ResetArgs(\"-foo\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    SetupArgs(local_args, {foo});\n+    ResetArgs(local_args, \"-foo\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fooo\", true));\n \n-    ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo -nofoo\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1 -nofoo=1\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0 -nofoo=0\"); // -nofoo=0 should win\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n-    ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"--foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(local_args, \"--nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n }\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n-\n-    ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n+\n+    ResetArgs(local_args, \"-foo=eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n }\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 0);\n \n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n \n     // Check under-/overflow behavior.\n-    ResetArgs(\"-foo=-9223372036854775809 -bar=9223372036854775808\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n+    ResetArgs(local_args, \"-foo=-9223372036854775809 -bar=9223372036854775808\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n \n-    ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n+    ResetArgs(local_args, \"-foo=11 -bar=12\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 12);\n \n-    ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo=NaN -bar=NotANumber\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(patharg)\n {\n+    ArgsManager local_args;\n+\n     const auto dir = std::make_pair(\"-dir\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({dir});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), fs::path{});\n+    SetupArgs(local_args, {dir});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), fs::path{});\n \n     const fs::path root_path{\"/\"};\n-    ResetArgs(\"-dir=/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n #ifdef WIN32\n     const fs::path win_root_path{\"C:\\\\\"};\n-    ResetArgs(\"-dir=C:\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n #endif\n \n     const fs::path absolute_path{\"/home/user/.bitcoin\"};\n-    ResetArgs(\"-dir=/home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/root/../home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/root/../home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/./user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/./user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n     const fs::path relative_path{\"user/.bitcoin\"};\n-    ResetArgs(\"-dir=user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=somewhere/../user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=somewhere/../user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/./.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/./.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetBoolArg(\"-foo\", false), true);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"--foo\");\n+    BOOST_CHECK_EQUAL(local_args.GetBoolArg(\"-foo\", false), true);\n \n-    ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n+    ResetArgs(local_args, \"--foo=verbose --bar=1\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=0\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo -foo\"); // foo always wins:\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n+    ArgsManager local_args;\n+\n     const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n-    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n-    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+    SetupArgs(local_args, {okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(local_args, \"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    LogInstance().StartLogging();",
      "path": "src/test/getarg_tests.cpp",
      "position": null,
      "original_position": 460,
      "commit_id": "5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
      "original_commit_id": "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "in_reply_to_id": 809712076,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809712076\r\n\r\nI wasn't really sure how to reproduce this but now I tried switching to the BasicTestingSetup fixture to see if that fixes it",
      "created_at": "2022-02-18T12:14:01Z",
      "updated_at": "2022-02-18T12:17:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809945220",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809945220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809972719",
      "pull_request_review_id": 887239200,
      "id": 809972719,
      "node_id": "PRRC_kwDOABII584wRzPv",
      "diff_hunk": "@@ -40,264 +31,277 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(m_local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n+void SetupArgs(ArgsManager& local_args, const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    m_local_args.ClearArgs();\n     for (const auto& arg : args) {\n-        m_local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo});\n-    ResetArgs(\"-foo\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    SetupArgs(local_args, {foo});\n+    ResetArgs(local_args, \"-foo\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fooo\", true));\n \n-    ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo -nofoo\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1 -nofoo=1\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0 -nofoo=0\"); // -nofoo=0 should win\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n-    ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"--foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(local_args, \"--nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n }\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n-\n-    ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n+\n+    ResetArgs(local_args, \"-foo=eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n }\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 0);\n \n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n \n     // Check under-/overflow behavior.\n-    ResetArgs(\"-foo=-9223372036854775809 -bar=9223372036854775808\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n+    ResetArgs(local_args, \"-foo=-9223372036854775809 -bar=9223372036854775808\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n \n-    ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n+    ResetArgs(local_args, \"-foo=11 -bar=12\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 12);\n \n-    ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo=NaN -bar=NotANumber\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(patharg)\n {\n+    ArgsManager local_args;\n+\n     const auto dir = std::make_pair(\"-dir\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({dir});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), fs::path{});\n+    SetupArgs(local_args, {dir});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), fs::path{});\n \n     const fs::path root_path{\"/\"};\n-    ResetArgs(\"-dir=/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n #ifdef WIN32\n     const fs::path win_root_path{\"C:\\\\\"};\n-    ResetArgs(\"-dir=C:\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n #endif\n \n     const fs::path absolute_path{\"/home/user/.bitcoin\"};\n-    ResetArgs(\"-dir=/home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/root/../home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/root/../home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/./user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/./user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n     const fs::path relative_path{\"user/.bitcoin\"};\n-    ResetArgs(\"-dir=user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=somewhere/../user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=somewhere/../user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/./.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/./.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetBoolArg(\"-foo\", false), true);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"--foo\");\n+    BOOST_CHECK_EQUAL(local_args.GetBoolArg(\"-foo\", false), true);\n \n-    ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n+    ResetArgs(local_args, \"--foo=verbose --bar=1\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=0\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo -foo\"); // foo always wins:\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n+    ArgsManager local_args;\n+\n     const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n-    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n-    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+    SetupArgs(local_args, {okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(local_args, \"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    LogInstance().StartLogging();",
      "path": "src/test/getarg_tests.cpp",
      "position": null,
      "original_position": 460,
      "commit_id": "5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
      "original_commit_id": "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "in_reply_to_id": 809712076,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I used `src/test/test_bitcoin --run_test=getarg_tests,fs_tests` to reproduce the issue.",
      "created_at": "2022-02-18T12:53:50Z",
      "updated_at": "2022-02-18T12:53:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809972719",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809972719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809976738",
      "pull_request_review_id": 887244667,
      "id": 809976738,
      "node_id": "PRRC_kwDOABII584wR0Oi",
      "diff_hunk": "@@ -40,264 +31,277 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(m_local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n+void SetupArgs(ArgsManager& local_args, const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    m_local_args.ClearArgs();\n     for (const auto& arg : args) {\n-        m_local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo});\n-    ResetArgs(\"-foo\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    SetupArgs(local_args, {foo});\n+    ResetArgs(local_args, \"-foo\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fooo\", true));\n \n-    ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo -nofoo\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1 -nofoo=1\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0 -nofoo=0\"); // -nofoo=0 should win\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n-    ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"--foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(local_args, \"--nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n }\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n-\n-    ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n+\n+    ResetArgs(local_args, \"-foo=eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n }\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 0);\n \n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n \n     // Check under-/overflow behavior.\n-    ResetArgs(\"-foo=-9223372036854775809 -bar=9223372036854775808\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n+    ResetArgs(local_args, \"-foo=-9223372036854775809 -bar=9223372036854775808\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n \n-    ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n+    ResetArgs(local_args, \"-foo=11 -bar=12\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 12);\n \n-    ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo=NaN -bar=NotANumber\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(patharg)\n {\n+    ArgsManager local_args;\n+\n     const auto dir = std::make_pair(\"-dir\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({dir});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), fs::path{});\n+    SetupArgs(local_args, {dir});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), fs::path{});\n \n     const fs::path root_path{\"/\"};\n-    ResetArgs(\"-dir=/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n #ifdef WIN32\n     const fs::path win_root_path{\"C:\\\\\"};\n-    ResetArgs(\"-dir=C:\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n #endif\n \n     const fs::path absolute_path{\"/home/user/.bitcoin\"};\n-    ResetArgs(\"-dir=/home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/root/../home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/root/../home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/./user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/./user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n     const fs::path relative_path{\"user/.bitcoin\"};\n-    ResetArgs(\"-dir=user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=somewhere/../user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=somewhere/../user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/./.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/./.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetBoolArg(\"-foo\", false), true);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"--foo\");\n+    BOOST_CHECK_EQUAL(local_args.GetBoolArg(\"-foo\", false), true);\n \n-    ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n+    ResetArgs(local_args, \"--foo=verbose --bar=1\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=0\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo -foo\"); // foo always wins:\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n+    ArgsManager local_args;\n+\n     const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n-    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n-    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+    SetupArgs(local_args, {okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(local_args, \"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    LogInstance().StartLogging();",
      "path": "src/test/getarg_tests.cpp",
      "position": null,
      "original_position": 460,
      "commit_id": "5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
      "original_commit_id": "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "in_reply_to_id": 809712076,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My understanding is that Logger instance is shared between tests. So then `fs_tests` and `getarg_tests` interfere with each other because the `BasicTestingSetup` fixture sets a file name, then `getarg_tests/logargs` and its `LogInstance().StartLogging();` does not turn off buffering of log messages and then the callback in `logargs` is not actually called. ",
      "created_at": "2022-02-18T12:59:26Z",
      "updated_at": "2022-02-18T12:59:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r809976738",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809976738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815834125",
      "pull_request_review_id": 895007684,
      "id": 815834125,
      "node_id": "PRRC_kwDOABII584woKQN",
      "diff_hunk": "@@ -40,264 +31,277 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(m_local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n+void SetupArgs(ArgsManager& local_args, const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    m_local_args.ClearArgs();\n     for (const auto& arg : args) {\n-        m_local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo});\n-    ResetArgs(\"-foo\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    SetupArgs(local_args, {foo});\n+    ResetArgs(local_args, \"-foo\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fooo\", true));\n \n-    ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo -nofoo\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1 -nofoo=1\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0 -nofoo=0\"); // -nofoo=0 should win\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n-    ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"--foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(local_args, \"--nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n }\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n-\n-    ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n+\n+    ResetArgs(local_args, \"-foo=eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n }\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 0);\n \n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n \n     // Check under-/overflow behavior.\n-    ResetArgs(\"-foo=-9223372036854775809 -bar=9223372036854775808\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n+    ResetArgs(local_args, \"-foo=-9223372036854775809 -bar=9223372036854775808\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n \n-    ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n+    ResetArgs(local_args, \"-foo=11 -bar=12\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 12);\n \n-    ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo=NaN -bar=NotANumber\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(patharg)\n {\n+    ArgsManager local_args;\n+\n     const auto dir = std::make_pair(\"-dir\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({dir});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), fs::path{});\n+    SetupArgs(local_args, {dir});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), fs::path{});\n \n     const fs::path root_path{\"/\"};\n-    ResetArgs(\"-dir=/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n #ifdef WIN32\n     const fs::path win_root_path{\"C:\\\\\"};\n-    ResetArgs(\"-dir=C:\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n #endif\n \n     const fs::path absolute_path{\"/home/user/.bitcoin\"};\n-    ResetArgs(\"-dir=/home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/root/../home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/root/../home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/./user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/./user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n     const fs::path relative_path{\"user/.bitcoin\"};\n-    ResetArgs(\"-dir=user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=somewhere/../user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=somewhere/../user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/./.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/./.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetBoolArg(\"-foo\", false), true);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"--foo\");\n+    BOOST_CHECK_EQUAL(local_args.GetBoolArg(\"-foo\", false), true);\n \n-    ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n+    ResetArgs(local_args, \"--foo=verbose --bar=1\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=0\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo -foo\"); // foo always wins:\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n+    ArgsManager local_args;\n+\n     const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n-    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n-    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+    SetupArgs(local_args, {okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(local_args, \"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    LogInstance().StartLogging();",
      "path": "src/test/getarg_tests.cpp",
      "position": null,
      "original_position": 460,
      "commit_id": "5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
      "original_commit_id": "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "in_reply_to_id": 809712076,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@ryanofsky Do you feel like switching to `BasicTestingSetup` is a good enough result for now or do you feel like it would be actually fruitful to remove the dependency on `BasicTestingSetup`?\r\n\r\nI think it is reasonable to reserve the later for a future PR as it seems it requires more changes.",
      "created_at": "2022-02-28T12:11:57Z",
      "updated_at": "2022-02-28T12:11:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r815834125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/815834125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/816146390",
      "pull_request_review_id": 895449287,
      "id": 816146390,
      "node_id": "PRRC_kwDOABII584wpWfW",
      "diff_hunk": "@@ -40,264 +31,277 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(m_local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n+void SetupArgs(ArgsManager& local_args, const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    m_local_args.ClearArgs();\n     for (const auto& arg : args) {\n-        m_local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo});\n-    ResetArgs(\"-foo\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    SetupArgs(local_args, {foo});\n+    ResetArgs(local_args, \"-foo\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-fooo\", true));\n \n-    ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo -nofoo\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=1 -nofoo=1\"); // -nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"-foo=0 -nofoo=0\"); // -nofoo=0 should win\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n-    ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    ResetArgs(local_args, \"--foo=1\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(local_args, \"--nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n }\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n-\n-    ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n-\n-    ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n-\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+\n+    ResetArgs(local_args, \"-foo=11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n+\n+    ResetArgs(local_args, \"-foo=eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n }\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 0);\n \n-    ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo -bar\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n \n     // Check under-/overflow behavior.\n-    ResetArgs(\"-foo=-9223372036854775809 -bar=9223372036854775808\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n+    ResetArgs(local_args, \"-foo=-9223372036854775809 -bar=9223372036854775808\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), std::numeric_limits<int64_t>::min());\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), std::numeric_limits<int64_t>::max());\n \n-    ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n+    ResetArgs(local_args, \"-foo=11 -bar=12\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 12);\n \n-    ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n+    ResetArgs(local_args, \"-foo=NaN -bar=NotANumber\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(patharg)\n {\n+    ArgsManager local_args;\n+\n     const auto dir = std::make_pair(\"-dir\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({dir});\n-    ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), fs::path{});\n+    SetupArgs(local_args, {dir});\n+    ResetArgs(local_args, \"\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), fs::path{});\n \n     const fs::path root_path{\"/\"};\n-    ResetArgs(\"-dir=/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n-    ResetArgs(\"-dir=/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), root_path);\n+    ResetArgs(local_args, \"-dir=/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), root_path);\n \n #ifdef WIN32\n     const fs::path win_root_path{\"C:\\\\\"};\n-    ResetArgs(\"-dir=C:\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n \n-    ResetArgs(\"-dir=C:\\\\.\\\\\\\\\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), win_root_path);\n+    ResetArgs(local_args, \"-dir=C:\\\\.\\\\\\\\\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), win_root_path);\n #endif\n \n     const fs::path absolute_path{\"/home/user/.bitcoin\"};\n-    ResetArgs(\"-dir=/home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/root/../home/user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/root/../home/user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/./user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/./user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n-    ResetArgs(\"-dir=/home/user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), absolute_path);\n+    ResetArgs(local_args, \"-dir=/home/user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), absolute_path);\n \n     const fs::path relative_path{\"user/.bitcoin\"};\n-    ResetArgs(\"-dir=user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=somewhere/../user/.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=somewhere/../user/.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/./.bitcoin\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/./.bitcoin\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/./\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/./\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n \n-    ResetArgs(\"-dir=user/.bitcoin/.//\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetPathArg(\"-dir\"), relative_path);\n+    ResetArgs(local_args, \"-dir=user/.bitcoin/.//\");\n+    BOOST_CHECK_EQUAL(local_args.GetPathArg(\"-dir\"), relative_path);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetBoolArg(\"-foo\", false), true);\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"--foo\");\n+    BOOST_CHECK_EQUAL(local_args.GetBoolArg(\"-foo\", false), true);\n \n-    ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n+    ResetArgs(local_args, \"--foo=verbose --bar=1\");\n+    BOOST_CHECK_EQUAL(local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n+    ArgsManager local_args;\n+\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n-    SetupArgs({foo, bar});\n-    ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n-\n-    ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    SetupArgs(local_args, {foo, bar});\n+    ResetArgs(local_args, \"-nofoo\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=1\");\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo=0\");\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!local_args.GetBoolArg(\"-foo\", false));\n+\n+    ResetArgs(local_args, \"-nofoo -foo\"); // foo always wins:\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(local_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n+    ArgsManager local_args;\n+\n     const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n-    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n-    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+    SetupArgs(local_args, {okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(local_args, \"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    LogInstance().StartLogging();",
      "path": "src/test/getarg_tests.cpp",
      "position": null,
      "original_position": 460,
      "commit_id": "5d7f22595ff2de9b9883e468e3ce7182fc3f183b",
      "original_commit_id": "55059269fe7379912b315a80f3a1a17b33a3e23d",
      "in_reply_to_id": 809712076,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> @ryanofsky Do you feel like switching to `BasicTestingSetup` is a good enough result for now or do you feel like it would be actually fruitful to remove the dependency on `BasicTestingSetup`?\r\n\r\nI don't think there's a problem with depending on `BasicTestingSetup` here, but maybe I am coming at this from different perspective. I think global variables are almost always a problem, but test fixtures are only sometimes a problem (https://github.com/bitcoin/bitcoin/pull/22155#discussion_r673051693 was a place where I previously objected to using test fixtures unnecessarily).",
      "created_at": "2022-02-28T18:29:24Z",
      "updated_at": "2022-02-28T18:29:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24375#discussion_r816146390",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/816146390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    }
  ]
}