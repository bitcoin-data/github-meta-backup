{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4415",
    "id": 17623235,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTc2MjMyMzU=",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4415",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/4415.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/4415.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4415",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4415/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4415/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4415/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/e35b37b1b8252c3d3f66001ba1efccd263307add",
    "number": 4415,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "RPC client: Simplify command line string-to-JSON-value conversion code",
    "user": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "By default, all command line parameters are converted into JSON string\nvalues.  There is no need to manually specify the incoming type.\n\nA binary decision \"parse as string or JSON?\" is all that's necessary.\n\nConvert to a simple class, initialized at runtime startup, which offers\na quick lookup to answer \"parse as JSON?\" conversion question.\n\nFuture parameter conversions need only to indicate the method name\nand zero-based index of the parameter needing JSON parsing.\n",
    "labels": [],
    "active_lock_reason": "resolved",
    "created_at": "2014-06-25T23:38:26Z",
    "updated_at": "2021-09-08T10:48:51Z",
    "closed_at": "2014-06-30T13:56:13Z",
    "mergeable_state": "unknown",
    "merged_at": "2014-06-30T13:56:13Z",
    "merge_commit_sha": "a3868970082a7344af3a759de1d3f8083e07f57b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "jgarzik:rpc-type-map",
      "ref": "rpc-type-map",
      "sha": "e35b37b1b8252c3d3f66001ba1efccd263307add",
      "user": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 1183300,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgzMzAw",
        "name": "bitcoin",
        "full_name": "jgarzik/bitcoin",
        "owner": {
          "login": "jgarzik",
          "id": 494411,
          "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jgarzik",
          "html_url": "https://github.com/jgarzik",
          "followers_url": "https://api.github.com/users/jgarzik/followers",
          "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
          "organizations_url": "https://api.github.com/users/jgarzik/orgs",
          "repos_url": "https://api.github.com/users/jgarzik/repos",
          "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jgarzik/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jgarzik/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jgarzik/bitcoin",
        "archive_url": "https://api.github.com/repos/jgarzik/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jgarzik/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jgarzik/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jgarzik/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jgarzik/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jgarzik/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jgarzik/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jgarzik/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jgarzik/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jgarzik/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jgarzik/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jgarzik/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jgarzik/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jgarzik/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jgarzik/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jgarzik/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jgarzik/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jgarzik/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jgarzik/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jgarzik/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jgarzik/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jgarzik/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jgarzik/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jgarzik/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jgarzik/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jgarzik/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jgarzik/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jgarzik/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jgarzik/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jgarzik/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jgarzik/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jgarzik/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jgarzik/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jgarzik/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jgarzik/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jgarzik/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jgarzik/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jgarzik/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jgarzik/bitcoin/hooks",
        "svn_url": "https://github.com/jgarzik/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "C++",
        "forks_count": 6,
        "stargazers_count": 27,
        "watchers_count": 27,
        "size": 86087,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2017-10-12T00:43:41Z",
        "created_at": "2010-12-20T03:27:16Z",
        "updated_at": "2023-03-20T18:12:28Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "236ae8665efadf7b4456c0a9fbf204a5cb4ce9f4",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34323,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T19:05:23Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T18:57:56Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4415"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 104,
    "deletions": 79,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 6,
    "comments": 4
  },
  "events": [
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMTM5NTQ1NjU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMTM5NTQ1Njc6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 47243543,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjQzNTQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47243543",
      "actor": {
        "login": "gavinandresen",
        "id": 331997,
        "node_id": "MDQ6VXNlcjMzMTk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gavinandresen",
        "html_url": "https://github.com/gavinandresen",
        "followers_url": "https://api.github.com/users/gavinandresen/followers",
        "following_url": "https://api.github.com/users/gavinandresen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gavinandresen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gavinandresen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
        "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
        "repos_url": "https://api.github.com/users/gavinandresen/repos",
        "events_url": "https://api.github.com/users/gavinandresen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2014-06-26T15:51:45Z",
      "updated_at": "2014-06-26T15:51:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK because 'better is better.'\n\nNit: this could probably be even simpler using boost::assign::insert and assigning into a multimap<string method, int paramIdx>.  See http://www.boost.org/doc/libs/1_55_0b1/libs/assign/doc/index.html \n",
      "user": {
        "login": "gavinandresen",
        "id": 331997,
        "node_id": "MDQ6VXNlcjMzMTk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gavinandresen",
        "html_url": "https://github.com/gavinandresen",
        "followers_url": "https://api.github.com/users/gavinandresen/followers",
        "following_url": "https://api.github.com/users/gavinandresen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gavinandresen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gavinandresen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
        "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
        "repos_url": "https://api.github.com/users/gavinandresen/repos",
        "events_url": "https://api.github.com/users/gavinandresen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/4415#issuecomment-47243543",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4415"
    },
    {
      "event": "commented",
      "id": 47245147,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjQ1MTQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47245147",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2014-06-26T16:04:41Z",
      "updated_at": "2014-06-26T16:04:41Z",
      "author_association": "MEMBER",
      "body": "Yes, ACK after code formatting nit.\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/4415#issuecomment-47245147",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4415"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzViMzdiMWI4MjUyYzNkM2Y2NjAwMWJhMWVmY2NkMjYzMzA3YWRk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e35b37b1b8252c3d3f66001ba1efccd263307add",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e35b37b1b8252c3d3f66001ba1efccd263307add",
      "tree": {
        "sha": "13591f78c28fc6fd247680c65d7fbbf943724228",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13591f78c28fc6fd247680c65d7fbbf943724228"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/236ae8665efadf7b4456c0a9fbf204a5cb4ce9f4",
          "sha": "236ae8665efadf7b4456c0a9fbf204a5cb4ce9f4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/236ae8665efadf7b4456c0a9fbf204a5cb4ce9f4"
        }
      ],
      "message": "RPC client: Simplify command line string-to-JSON-value conversion code\n\nBy default, all command line parameters are converted into JSON string\nvalues.  There is no need to manually specify the incoming type.\n\nA binary decision \"parse as string or JSON?\" is all that's necessary.\n\nConvert to a simple class, initialized at runtime startup, which offers\na quick lookup to answer \"parse as JSON?\" conversion question.\n\nFuture parameter conversions need only to indicate the method name\nand zero-based index of the parameter needing JSON parsing.",
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-06-27T02:18:30Z"
      },
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-06-27T02:12:36Z"
      },
      "sha": "e35b37b1b8252c3d3f66001ba1efccd263307add"
    },
    {
      "event": "commented",
      "id": 47302727,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzAyNzI3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47302727",
      "actor": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2014-06-27T02:42:59Z",
      "updated_at": "2014-06-27T02:42:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased + Updated to add braces.\n",
      "user": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/4415#issuecomment-47302727",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4415"
    },
    {
      "event": "commented",
      "id": 47303218,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzAzMjE4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47303218",
      "actor": {
        "login": "BitcoinPullTester",
        "id": 2110907,
        "node_id": "MDQ6VXNlcjIxMTA5MDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2110907?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinPullTester",
        "html_url": "https://github.com/BitcoinPullTester",
        "followers_url": "https://api.github.com/users/BitcoinPullTester/followers",
        "following_url": "https://api.github.com/users/BitcoinPullTester/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinPullTester/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinPullTester/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinPullTester/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinPullTester/orgs",
        "repos_url": "https://api.github.com/users/BitcoinPullTester/repos",
        "events_url": "https://api.github.com/users/BitcoinPullTester/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinPullTester/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2014-06-27T02:53:54Z",
      "updated_at": "2014-06-27T02:53:54Z",
      "author_association": "NONE",
      "body": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4415_e35b37b1b8252c3d3f66001ba1efccd263307add/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.\n",
      "user": {
        "login": "BitcoinPullTester",
        "id": 2110907,
        "node_id": "MDQ6VXNlcjIxMTA5MDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2110907?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinPullTester",
        "html_url": "https://github.com/BitcoinPullTester",
        "followers_url": "https://api.github.com/users/BitcoinPullTester/followers",
        "following_url": "https://api.github.com/users/BitcoinPullTester/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinPullTester/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinPullTester/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinPullTester/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinPullTester/orgs",
        "repos_url": "https://api.github.com/users/BitcoinPullTester/repos",
        "events_url": "https://api.github.com/users/BitcoinPullTester/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinPullTester/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/4415#issuecomment-47303218",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4415"
    },
    {
      "event": "merged",
      "id": 136510952,
      "node_id": "MDExOk1lcmdlZEV2ZW50MTM2NTEwOTUy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/136510952",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e35b37b1b8252c3d3f66001ba1efccd263307add",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e35b37b1b8252c3d3f66001ba1efccd263307add",
      "created_at": "2014-06-30T13:56:13Z"
    },
    {
      "event": "closed",
      "id": 136510953,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTM2NTEwOTUz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/136510953",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2014-06-30T13:56:13Z"
    },
    {
      "event": "referenced",
      "id": 136510954,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDEzNjUxMDk1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/136510954",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5c184cb85070703feca98d9bce4ec0d92ed4b023",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c184cb85070703feca98d9bce4ec0d92ed4b023",
      "created_at": "2014-06-30T13:56:14Z"
    },
    {
      "event": "mentioned",
      "id": 136524254,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTM2NTI0MjU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/136524254",
      "actor": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2014-06-30T14:24:25Z"
    },
    {
      "event": "subscribed",
      "id": 136524255,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEzNjUyNDI1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/136524255",
      "actor": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2014-06-30T14:24:25Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMTM5NTQ1NzA6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "mentioned",
      "id": 141051487,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTQxMDUxNDg3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/141051487",
      "actor": {
        "login": "Diapolo",
        "id": 1419649,
        "node_id": "MDQ6VXNlcjE0MTk2NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1419649?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Diapolo",
        "html_url": "https://github.com/Diapolo",
        "followers_url": "https://api.github.com/users/Diapolo/followers",
        "following_url": "https://api.github.com/users/Diapolo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Diapolo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Diapolo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Diapolo/subscriptions",
        "organizations_url": "https://api.github.com/users/Diapolo/orgs",
        "repos_url": "https://api.github.com/users/Diapolo/repos",
        "events_url": "https://api.github.com/users/Diapolo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Diapolo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2014-07-13T23:41:10Z"
    },
    {
      "event": "subscribed",
      "id": 141051488,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE0MTA1MTQ4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/141051488",
      "actor": {
        "login": "Diapolo",
        "id": 1419649,
        "node_id": "MDQ6VXNlcjE0MTk2NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1419649?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Diapolo",
        "html_url": "https://github.com/Diapolo",
        "followers_url": "https://api.github.com/users/Diapolo/followers",
        "following_url": "https://api.github.com/users/Diapolo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Diapolo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Diapolo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Diapolo/subscriptions",
        "organizations_url": "https://api.github.com/users/Diapolo/orgs",
        "repos_url": "https://api.github.com/users/Diapolo/repos",
        "events_url": "https://api.github.com/users/Diapolo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Diapolo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2014-07-13T23:41:10Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 156464740,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQxNTY0NjQ3NDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/156464740",
      "actor": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2014-08-24T04:23:32Z"
    },
    {
      "event": "locked",
      "id": 5271480875,
      "node_id": "LOE_lADOABII584CLXIZzwAAAAE6NGor",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271480875",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T10:48:51Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14225922",
      "pull_request_review_id": null,
      "id": 14225922,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjI1OTIy",
      "diff_hunk": "@@ -15,92 +16,117 @@\n using namespace std;\n using namespace json_spirit;\n \n-template<typename T>\n-void ConvertTo(Value& value, bool fAllowNull=false)\n+class CRPCConvertParam\n {\n-    if (fAllowNull && value.type() == null_type)",
      "path": "src/rpcclient.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "e35b37b1b8252c3d3f66001ba1efccd263307add",
      "original_commit_id": "fbed7aa680fe56e124c9954a7bd3b328e7aad926",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This removes the fAllowNull check. Not that I think that's critical, the server will validate the arguments.\n",
      "created_at": "2014-06-26T05:34:31Z",
      "updated_at": "2014-06-27T02:38:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/4415#discussion_r14225922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14225922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 21,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14226057",
      "pull_request_review_id": null,
      "id": 14226057,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjI2MDU3",
      "diff_hunk": "@@ -15,92 +16,117 @@\n using namespace std;\n using namespace json_spirit;\n \n-template<typename T>\n-void ConvertTo(Value& value, bool fAllowNull=false)\n+class CRPCConvertParam\n {\n-    if (fAllowNull && value.type() == null_type)\n-        return;\n-    if (value.type() == str_type)\n-    {\n-        // reinterpret string as unquoted json value\n-        Value value2;\n-        string strJSON = value.get_str();\n-        if (!read_string(strJSON, value2))\n-            throw runtime_error(string(\"Error parsing JSON:\")+strJSON);\n-        ConvertTo<T>(value2, fAllowNull);\n-        value = value2;\n+public:\n+    std::string methodName;            // method whose params want conversion\n+    int paramIdx;                      // 0-based idx of param to convert\n+};\n+\n+static const CRPCConvertParam vRPCConvertParams[] =\n+{\n+    { \"stop\", 0 },\n+    { \"getaddednodeinfo\", 0 },\n+    { \"setgenerate\", 0 },\n+    { \"setgenerate\", 1 },\n+    { \"getnetworkhashps\", 0 },\n+    { \"getnetworkhashps\", 1 },\n+    { \"sendtoaddress\", 1 },\n+    { \"settxfee\", 0 },\n+    { \"getreceivedbyaddress\", 1 },\n+    { \"getreceivedbyaccount\", 1 },\n+    { \"listreceivedbyaddress\", 0 },\n+    { \"listreceivedbyaddress\", 1 },\n+    { \"listreceivedbyaccount\", 0 },\n+    { \"listreceivedbyaccount\", 1 },\n+    { \"getbalance\", 1 },\n+    { \"getblockhash\", 0 },\n+    { \"move\", 2 },\n+    { \"move\", 3 },\n+    { \"sendfrom\", 2 },\n+    { \"sendfrom\", 3 },\n+    { \"listtransactions\", 1 },\n+    { \"listtransactions\", 2 },\n+    { \"listaccounts\", 0 },\n+    { \"walletpassphrase\", 1 },\n+    { \"getblocktemplate\", 0 },\n+    { \"listsinceblock\", 1 },\n+    { \"sendmany\", 1 },\n+    { \"sendmany\", 2 },\n+    { \"addmultisigaddress\", 0 },\n+    { \"addmultisigaddress\", 1 },\n+    { \"createmultisig\", 0 },\n+    { \"createmultisig\", 1 },\n+    { \"listunspent\", 0 },\n+    { \"listunspent\", 1 },\n+    { \"listunspent\", 2 },\n+    { \"getblock\", 1 },\n+    { \"getrawtransaction\", 1 },\n+    { \"createrawtransaction\", 0 },\n+    { \"createrawtransaction\", 1 },\n+    { \"signrawtransaction\", 1 },\n+    { \"signrawtransaction\", 2 },\n+    { \"sendrawtransaction\", 1 },\n+    { \"gettxout\", 1 },\n+    { \"gettxout\", 2 },\n+    { \"lockunspent\", 0 },\n+    { \"lockunspent\", 1 },\n+    { \"importprivkey\", 2 },\n+    { \"verifychain\", 0 },\n+    { \"verifychain\", 1 },\n+    { \"keypoolrefill\", 0 },\n+    { \"getrawmempool\", 0 },\n+    { \"estimatefee\", 0 },\n+    { \"estimatepriority\", 0 },\n+};\n+\n+class CRPCConvertTable\n+{\n+private:\n+    std::set<std::pair<std::string, int> > members;\n+\n+public:\n+    CRPCConvertTable();\n+\n+    bool convert(const std::string& method, int idx) {\n+        return (members.count(std::make_pair(method, idx)) > 0);\n     }\n-    else\n-    {\n-        value = value.get_value<T>();\n+};\n+\n+CRPCConvertTable::CRPCConvertTable()\n+{\n+    const unsigned int n_elem =\n+        (sizeof(vRPCConvertParams) / sizeof(vRPCConvertParams[0]));\n+\n+    for (unsigned int i = 0; i < n_elem; i++) {\n+        members.insert(std::make_pair(vRPCConvertParams[i].methodName,\n+                                      vRPCConvertParams[i].paramIdx));\n     }\n }\n \n+static CRPCConvertTable rpcCvtTable;\n+\n // Convert strings to command-specific RPC representation\n Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     Array params;\n-    BOOST_FOREACH(const std::string &param, strParams)\n-        params.push_back(param);\n-\n-    int n = params.size();\n-\n-    //\n-    // Special case non-string parameter types\n-    //\n-    if (strMethod == \"stop\"                   && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"getaddednodeinfo\"       && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getnetworkhashps\"       && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"getnetworkhashps\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n-    if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n-    if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"listreceivedbyaddress\"  && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"listreceivedbyaccount\"  && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"getbalance\"             && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"move\"                   && n > 3) ConvertTo<int64_t>(params[3]);\n-    if (strMethod == \"sendfrom\"               && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<int64_t>(params[3]);\n-    if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<int64_t>(params[2]);\n-    if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getblocktemplate\"       && n > 0) ConvertTo<Object>(params[0]);\n-    if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"sendmany\"               && n > 1) ConvertTo<Object>(params[1]);\n-    if (strMethod == \"sendmany\"               && n > 2) ConvertTo<int64_t>(params[2]);\n-    if (strMethod == \"addmultisigaddress\"     && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"addmultisigaddress\"     && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"createmultisig\"         && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"createmultisig\"         && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"listunspent\"            && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"listunspent\"            && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"listunspent\"            && n > 2) ConvertTo<Array>(params[2]);\n-    if (strMethod == \"getblock\"               && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"getrawtransaction\"      && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"createrawtransaction\"   && n > 0) ConvertTo<Array>(params[0]);\n-    if (strMethod == \"createrawtransaction\"   && n > 1) ConvertTo<Object>(params[1]);\n-    if (strMethod == \"signrawtransaction\"     && n > 1) ConvertTo<Array>(params[1], true);\n-    if (strMethod == \"signrawtransaction\"     && n > 2) ConvertTo<Array>(params[2], true);\n-    if (strMethod == \"sendrawtransaction\"     && n > 1) ConvertTo<bool>(params[1], true);\n-    if (strMethod == \"gettxout\"               && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"gettxout\"               && n > 2) ConvertTo<bool>(params[2]);\n-    if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"importprivkey\"          && n > 2) ConvertTo<bool>(params[2]);\n-    if (strMethod == \"verifychain\"            && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"verifychain\"            && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"keypoolrefill\"          && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"getrawmempool\"          && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"estimatefee\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"estimatepriority\"       && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+\n+    for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n+        const std::string& strVal = strParams[idx];\n+\n+        // insert string value directly\n+        if (!rpcCvtTable.convert(strMethod, idx))\n+            params.push_back(strVal);\n+\n+        // parse string as JSON, insert bool/number/object/etc. value\n+        else {",
      "path": "src/rpcclient.cpp",
      "position": null,
      "original_position": 192,
      "commit_id": "e35b37b1b8252c3d3f66001ba1efccd263307add",
      "original_commit_id": "fbed7aa680fe56e124c9954a7bd3b328e7aad926",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Either don't add an empty line before the else, or surround the first part with braces as well, it looks like there is no else clause and the `if(...) ...;` is separate while reading this code quickly.\n",
      "created_at": "2014-06-26T05:43:11Z",
      "updated_at": "2014-06-27T02:38:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/4415#discussion_r14226057",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14226057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14236694",
      "pull_request_review_id": null,
      "id": 14236694,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjM2Njk0",
      "diff_hunk": "@@ -15,92 +16,117 @@\n using namespace std;\n using namespace json_spirit;\n \n-template<typename T>\n-void ConvertTo(Value& value, bool fAllowNull=false)\n+class CRPCConvertParam\n {\n-    if (fAllowNull && value.type() == null_type)\n-        return;\n-    if (value.type() == str_type)\n-    {\n-        // reinterpret string as unquoted json value\n-        Value value2;\n-        string strJSON = value.get_str();\n-        if (!read_string(strJSON, value2))\n-            throw runtime_error(string(\"Error parsing JSON:\")+strJSON);\n-        ConvertTo<T>(value2, fAllowNull);\n-        value = value2;\n+public:\n+    std::string methodName;            // method whose params want conversion\n+    int paramIdx;                      // 0-based idx of param to convert\n+};\n+\n+static const CRPCConvertParam vRPCConvertParams[] =\n+{\n+    { \"stop\", 0 },\n+    { \"getaddednodeinfo\", 0 },\n+    { \"setgenerate\", 0 },\n+    { \"setgenerate\", 1 },\n+    { \"getnetworkhashps\", 0 },\n+    { \"getnetworkhashps\", 1 },\n+    { \"sendtoaddress\", 1 },\n+    { \"settxfee\", 0 },\n+    { \"getreceivedbyaddress\", 1 },\n+    { \"getreceivedbyaccount\", 1 },\n+    { \"listreceivedbyaddress\", 0 },\n+    { \"listreceivedbyaddress\", 1 },\n+    { \"listreceivedbyaccount\", 0 },\n+    { \"listreceivedbyaccount\", 1 },\n+    { \"getbalance\", 1 },\n+    { \"getblockhash\", 0 },\n+    { \"move\", 2 },\n+    { \"move\", 3 },\n+    { \"sendfrom\", 2 },\n+    { \"sendfrom\", 3 },\n+    { \"listtransactions\", 1 },\n+    { \"listtransactions\", 2 },\n+    { \"listaccounts\", 0 },\n+    { \"walletpassphrase\", 1 },\n+    { \"getblocktemplate\", 0 },\n+    { \"listsinceblock\", 1 },\n+    { \"sendmany\", 1 },\n+    { \"sendmany\", 2 },\n+    { \"addmultisigaddress\", 0 },\n+    { \"addmultisigaddress\", 1 },\n+    { \"createmultisig\", 0 },\n+    { \"createmultisig\", 1 },\n+    { \"listunspent\", 0 },\n+    { \"listunspent\", 1 },\n+    { \"listunspent\", 2 },\n+    { \"getblock\", 1 },\n+    { \"getrawtransaction\", 1 },\n+    { \"createrawtransaction\", 0 },\n+    { \"createrawtransaction\", 1 },\n+    { \"signrawtransaction\", 1 },\n+    { \"signrawtransaction\", 2 },\n+    { \"sendrawtransaction\", 1 },\n+    { \"gettxout\", 1 },\n+    { \"gettxout\", 2 },\n+    { \"lockunspent\", 0 },\n+    { \"lockunspent\", 1 },\n+    { \"importprivkey\", 2 },\n+    { \"verifychain\", 0 },\n+    { \"verifychain\", 1 },\n+    { \"keypoolrefill\", 0 },\n+    { \"getrawmempool\", 0 },\n+    { \"estimatefee\", 0 },\n+    { \"estimatepriority\", 0 },\n+};\n+\n+class CRPCConvertTable\n+{\n+private:\n+    std::set<std::pair<std::string, int> > members;\n+\n+public:\n+    CRPCConvertTable();\n+\n+    bool convert(const std::string& method, int idx) {\n+        return (members.count(std::make_pair(method, idx)) > 0);\n     }\n-    else\n-    {\n-        value = value.get_value<T>();\n+};\n+\n+CRPCConvertTable::CRPCConvertTable()\n+{\n+    const unsigned int n_elem =\n+        (sizeof(vRPCConvertParams) / sizeof(vRPCConvertParams[0]));\n+\n+    for (unsigned int i = 0; i < n_elem; i++) {\n+        members.insert(std::make_pair(vRPCConvertParams[i].methodName,\n+                                      vRPCConvertParams[i].paramIdx));\n     }\n }\n \n+static CRPCConvertTable rpcCvtTable;\n+\n // Convert strings to command-specific RPC representation\n Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     Array params;\n-    BOOST_FOREACH(const std::string &param, strParams)\n-        params.push_back(param);\n-\n-    int n = params.size();\n-\n-    //\n-    // Special case non-string parameter types\n-    //\n-    if (strMethod == \"stop\"                   && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"getaddednodeinfo\"       && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getnetworkhashps\"       && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"getnetworkhashps\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n-    if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n-    if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"listreceivedbyaddress\"  && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"listreceivedbyaccount\"  && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"getbalance\"             && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"move\"                   && n > 3) ConvertTo<int64_t>(params[3]);\n-    if (strMethod == \"sendfrom\"               && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<int64_t>(params[3]);\n-    if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<int64_t>(params[2]);\n-    if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getblocktemplate\"       && n > 0) ConvertTo<Object>(params[0]);\n-    if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"sendmany\"               && n > 1) ConvertTo<Object>(params[1]);\n-    if (strMethod == \"sendmany\"               && n > 2) ConvertTo<int64_t>(params[2]);\n-    if (strMethod == \"addmultisigaddress\"     && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"addmultisigaddress\"     && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"createmultisig\"         && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"createmultisig\"         && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"listunspent\"            && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"listunspent\"            && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"listunspent\"            && n > 2) ConvertTo<Array>(params[2]);\n-    if (strMethod == \"getblock\"               && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"getrawtransaction\"      && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"createrawtransaction\"   && n > 0) ConvertTo<Array>(params[0]);\n-    if (strMethod == \"createrawtransaction\"   && n > 1) ConvertTo<Object>(params[1]);\n-    if (strMethod == \"signrawtransaction\"     && n > 1) ConvertTo<Array>(params[1], true);\n-    if (strMethod == \"signrawtransaction\"     && n > 2) ConvertTo<Array>(params[2], true);\n-    if (strMethod == \"sendrawtransaction\"     && n > 1) ConvertTo<bool>(params[1], true);\n-    if (strMethod == \"gettxout\"               && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"gettxout\"               && n > 2) ConvertTo<bool>(params[2]);\n-    if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"importprivkey\"          && n > 2) ConvertTo<bool>(params[2]);\n-    if (strMethod == \"verifychain\"            && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"verifychain\"            && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"keypoolrefill\"          && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"getrawmempool\"          && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"estimatefee\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"estimatepriority\"       && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+\n+    for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n+        const std::string& strVal = strParams[idx];\n+\n+        // insert string value directly\n+        if (!rpcCvtTable.convert(strMethod, idx))\n+            params.push_back(strVal);\n+\n+        // parse string as JSON, insert bool/number/object/etc. value\n+        else {",
      "path": "src/rpcclient.cpp",
      "position": null,
      "original_position": 192,
      "commit_id": "e35b37b1b8252c3d3f66001ba1efccd263307add",
      "original_commit_id": "fbed7aa680fe56e124c9954a7bd3b328e7aad926",
      "in_reply_to_id": null,
      "user": {
        "login": "Diapolo",
        "id": 1419649,
        "node_id": "MDQ6VXNlcjE0MTk2NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1419649?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Diapolo",
        "html_url": "https://github.com/Diapolo",
        "followers_url": "https://api.github.com/users/Diapolo/followers",
        "following_url": "https://api.github.com/users/Diapolo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Diapolo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Diapolo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Diapolo/subscriptions",
        "organizations_url": "https://api.github.com/users/Diapolo/orgs",
        "repos_url": "https://api.github.com/users/Diapolo/repos",
        "events_url": "https://api.github.com/users/Diapolo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Diapolo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agreed, this is pretty ugly that way...\n",
      "created_at": "2014-06-26T12:12:40Z",
      "updated_at": "2014-06-27T02:38:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/4415#discussion_r14236694",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14236694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14236879",
      "pull_request_review_id": null,
      "id": 14236879,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjM2ODc5",
      "diff_hunk": "@@ -15,92 +16,117 @@\n using namespace std;\n using namespace json_spirit;\n \n-template<typename T>\n-void ConvertTo(Value& value, bool fAllowNull=false)\n+class CRPCConvertParam\n {\n-    if (fAllowNull && value.type() == null_type)",
      "path": "src/rpcclient.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "e35b37b1b8252c3d3f66001ba1efccd263307add",
      "original_commit_id": "fbed7aa680fe56e124c9954a7bd3b328e7aad926",
      "in_reply_to_id": null,
      "user": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, that's intentional.  It's not needed and adds no value.\n",
      "created_at": "2014-06-26T12:19:05Z",
      "updated_at": "2014-06-27T02:38:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/4415#discussion_r14236879",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14236879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 21,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14352217",
      "pull_request_review_id": null,
      "id": 14352217,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzUyMjE3",
      "diff_hunk": "@@ -15,94 +16,118 @@\n using namespace std;\n using namespace json_spirit;\n \n-template<typename T>\n-void ConvertTo(Value& value, bool fAllowNull=false)\n+class CRPCConvertParam\n {\n-    if (fAllowNull && value.type() == null_type)\n-        return;\n-    if (value.type() == str_type)\n-    {\n-        // reinterpret string as unquoted json value\n-        Value value2;\n-        string strJSON = value.get_str();\n-        if (!read_string(strJSON, value2))\n-            throw runtime_error(string(\"Error parsing JSON:\")+strJSON);\n-        ConvertTo<T>(value2, fAllowNull);\n-        value = value2;\n+public:\n+    std::string methodName;            // method whose params want conversion\n+    int paramIdx;                      // 0-based idx of param to convert\n+};\n+\n+static const CRPCConvertParam vRPCConvertParams[] =\n+{\n+    { \"stop\", 0 },\n+    { \"getaddednodeinfo\", 0 },\n+    { \"setgenerate\", 0 },\n+    { \"setgenerate\", 1 },\n+    { \"getnetworkhashps\", 0 },\n+    { \"getnetworkhashps\", 1 },\n+    { \"sendtoaddress\", 1 },\n+    { \"settxfee\", 0 },\n+    { \"getreceivedbyaddress\", 1 },\n+    { \"getreceivedbyaccount\", 1 },\n+    { \"listreceivedbyaddress\", 0 },\n+    { \"listreceivedbyaddress\", 1 },\n+    { \"listreceivedbyaccount\", 0 },\n+    { \"listreceivedbyaccount\", 1 },\n+    { \"getbalance\", 1 },\n+    { \"getblockhash\", 0 },\n+    { \"move\", 2 },\n+    { \"move\", 3 },\n+    { \"sendfrom\", 2 },\n+    { \"sendfrom\", 3 },\n+    { \"listtransactions\", 1 },\n+    { \"listtransactions\", 2 },\n+    { \"listaccounts\", 0 },\n+    { \"walletpassphrase\", 1 },\n+    { \"getblocktemplate\", 0 },\n+    { \"listsinceblock\", 1 },\n+    { \"sendmany\", 1 },\n+    { \"sendmany\", 2 },\n+    { \"addmultisigaddress\", 0 },\n+    { \"addmultisigaddress\", 1 },\n+    { \"createmultisig\", 0 },\n+    { \"createmultisig\", 1 },\n+    { \"listunspent\", 0 },\n+    { \"listunspent\", 1 },\n+    { \"listunspent\", 2 },\n+    { \"getblock\", 1 },\n+    { \"getrawtransaction\", 1 },\n+    { \"createrawtransaction\", 0 },\n+    { \"createrawtransaction\", 1 },\n+    { \"signrawtransaction\", 1 },\n+    { \"signrawtransaction\", 2 },\n+    { \"sendrawtransaction\", 1 },\n+    { \"gettxout\", 1 },\n+    { \"gettxout\", 2 },\n+    { \"lockunspent\", 0 },\n+    { \"lockunspent\", 1 },\n+    { \"importprivkey\", 2 },\n+    { \"verifychain\", 0 },\n+    { \"verifychain\", 1 },\n+    { \"keypoolrefill\", 0 },\n+    { \"getrawmempool\", 0 },\n+    { \"estimatefee\", 0 },\n+    { \"estimatepriority\", 0 },\n+};\n+\n+class CRPCConvertTable\n+{\n+private:\n+    std::set<std::pair<std::string, int> > members;\n+\n+public:\n+    CRPCConvertTable();\n+\n+    bool convert(const std::string& method, int idx) {\n+        return (members.count(std::make_pair(method, idx)) > 0);\n     }\n-    else\n-    {\n-        value = value.get_value<T>();\n+};\n+\n+CRPCConvertTable::CRPCConvertTable()\n+{\n+    const unsigned int n_elem =\n+        (sizeof(vRPCConvertParams) / sizeof(vRPCConvertParams[0]));\n+\n+    for (unsigned int i = 0; i < n_elem; i++) {\n+        members.insert(std::make_pair(vRPCConvertParams[i].methodName,\n+                                      vRPCConvertParams[i].paramIdx));\n     }\n }\n \n+static CRPCConvertTable rpcCvtTable;\n+\n // Convert strings to command-specific RPC representation\n Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     Array params;\n-    BOOST_FOREACH(const std::string &param, strParams)\n-        params.push_back(param);\n-\n-    int n = params.size();\n-\n-    //\n-    // Special case non-string parameter types\n-    //\n-    if (strMethod == \"stop\"                   && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"getaddednodeinfo\"       && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getnetworkhashps\"       && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"getnetworkhashps\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n-    if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n-    if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"listreceivedbyaddress\"  && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"listreceivedbyaccount\"  && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"getbalance\"             && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"move\"                   && n > 3) ConvertTo<int64_t>(params[3]);\n-    if (strMethod == \"sendfrom\"               && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<int64_t>(params[3]);\n-    if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<int64_t>(params[2]);\n-    if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"prioritisetransaction\"  && n > 1) ConvertTo<double>(params[1]);\n-    if (strMethod == \"prioritisetransaction\"  && n > 2) ConvertTo<int64_t>(params[2]);\n-    if (strMethod == \"getblocktemplate\"       && n > 0) ConvertTo<Object>(params[0]);\n-    if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"sendmany\"               && n > 1) ConvertTo<Object>(params[1]);\n-    if (strMethod == \"sendmany\"               && n > 2) ConvertTo<int64_t>(params[2]);\n-    if (strMethod == \"addmultisigaddress\"     && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"addmultisigaddress\"     && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"createmultisig\"         && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"createmultisig\"         && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"listunspent\"            && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"listunspent\"            && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"listunspent\"            && n > 2) ConvertTo<Array>(params[2]);\n-    if (strMethod == \"getblock\"               && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"getrawtransaction\"      && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"createrawtransaction\"   && n > 0) ConvertTo<Array>(params[0]);\n-    if (strMethod == \"createrawtransaction\"   && n > 1) ConvertTo<Object>(params[1]);\n-    if (strMethod == \"signrawtransaction\"     && n > 1) ConvertTo<Array>(params[1], true);\n-    if (strMethod == \"signrawtransaction\"     && n > 2) ConvertTo<Array>(params[2], true);\n-    if (strMethod == \"sendrawtransaction\"     && n > 1) ConvertTo<bool>(params[1], true);\n-    if (strMethod == \"gettxout\"               && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"gettxout\"               && n > 2) ConvertTo<bool>(params[2]);\n-    if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"importprivkey\"          && n > 2) ConvertTo<bool>(params[2]);\n-    if (strMethod == \"verifychain\"            && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"verifychain\"            && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"keypoolrefill\"          && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"getrawmempool\"          && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"estimatefee\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"estimatepriority\"       && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+\n+    for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n+        const std::string& strVal = strParams[idx];\n+\n+        // insert string value directly\n+        if (!rpcCvtTable.convert(strMethod, idx)) {\n+            params.push_back(strVal);\n+        }\n+",
      "path": "src/rpcclient.cpp",
      "position": 193,
      "original_position": 193,
      "commit_id": "e35b37b1b8252c3d3f66001ba1efccd263307add",
      "original_commit_id": "e35b37b1b8252c3d3f66001ba1efccd263307add",
      "in_reply_to_id": null,
      "user": {
        "login": "Diapolo",
        "id": 1419649,
        "node_id": "MDQ6VXNlcjE0MTk2NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1419649?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Diapolo",
        "html_url": "https://github.com/Diapolo",
        "followers_url": "https://api.github.com/users/Diapolo/followers",
        "following_url": "https://api.github.com/users/Diapolo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Diapolo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Diapolo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Diapolo/subscriptions",
        "organizations_url": "https://api.github.com/users/Diapolo/orgs",
        "repos_url": "https://api.github.com/users/Diapolo/repos",
        "events_url": "https://api.github.com/users/Diapolo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Diapolo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@jgarzik Let me ask this time :), is there still an open pull, which changes this to something more readable in the near future?\n",
      "created_at": "2014-06-30T14:24:25Z",
      "updated_at": "2014-06-30T14:24:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/4415#discussion_r14352217",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14352217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14860949",
      "pull_request_review_id": null,
      "id": 14860949,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODYwOTQ5",
      "diff_hunk": "@@ -15,94 +16,118 @@\n using namespace std;\n using namespace json_spirit;\n \n-template<typename T>\n-void ConvertTo(Value& value, bool fAllowNull=false)\n+class CRPCConvertParam\n {\n-    if (fAllowNull && value.type() == null_type)\n-        return;\n-    if (value.type() == str_type)\n-    {\n-        // reinterpret string as unquoted json value\n-        Value value2;\n-        string strJSON = value.get_str();\n-        if (!read_string(strJSON, value2))\n-            throw runtime_error(string(\"Error parsing JSON:\")+strJSON);\n-        ConvertTo<T>(value2, fAllowNull);\n-        value = value2;\n+public:\n+    std::string methodName;            // method whose params want conversion\n+    int paramIdx;                      // 0-based idx of param to convert\n+};\n+\n+static const CRPCConvertParam vRPCConvertParams[] =\n+{\n+    { \"stop\", 0 },\n+    { \"getaddednodeinfo\", 0 },\n+    { \"setgenerate\", 0 },\n+    { \"setgenerate\", 1 },\n+    { \"getnetworkhashps\", 0 },\n+    { \"getnetworkhashps\", 1 },\n+    { \"sendtoaddress\", 1 },\n+    { \"settxfee\", 0 },\n+    { \"getreceivedbyaddress\", 1 },\n+    { \"getreceivedbyaccount\", 1 },\n+    { \"listreceivedbyaddress\", 0 },\n+    { \"listreceivedbyaddress\", 1 },\n+    { \"listreceivedbyaccount\", 0 },\n+    { \"listreceivedbyaccount\", 1 },\n+    { \"getbalance\", 1 },\n+    { \"getblockhash\", 0 },\n+    { \"move\", 2 },\n+    { \"move\", 3 },\n+    { \"sendfrom\", 2 },\n+    { \"sendfrom\", 3 },\n+    { \"listtransactions\", 1 },\n+    { \"listtransactions\", 2 },\n+    { \"listaccounts\", 0 },\n+    { \"walletpassphrase\", 1 },\n+    { \"getblocktemplate\", 0 },\n+    { \"listsinceblock\", 1 },\n+    { \"sendmany\", 1 },\n+    { \"sendmany\", 2 },\n+    { \"addmultisigaddress\", 0 },\n+    { \"addmultisigaddress\", 1 },\n+    { \"createmultisig\", 0 },\n+    { \"createmultisig\", 1 },\n+    { \"listunspent\", 0 },\n+    { \"listunspent\", 1 },\n+    { \"listunspent\", 2 },\n+    { \"getblock\", 1 },\n+    { \"getrawtransaction\", 1 },\n+    { \"createrawtransaction\", 0 },\n+    { \"createrawtransaction\", 1 },\n+    { \"signrawtransaction\", 1 },\n+    { \"signrawtransaction\", 2 },\n+    { \"sendrawtransaction\", 1 },\n+    { \"gettxout\", 1 },\n+    { \"gettxout\", 2 },\n+    { \"lockunspent\", 0 },\n+    { \"lockunspent\", 1 },\n+    { \"importprivkey\", 2 },\n+    { \"verifychain\", 0 },\n+    { \"verifychain\", 1 },\n+    { \"keypoolrefill\", 0 },\n+    { \"getrawmempool\", 0 },\n+    { \"estimatefee\", 0 },\n+    { \"estimatepriority\", 0 },\n+};\n+\n+class CRPCConvertTable\n+{\n+private:\n+    std::set<std::pair<std::string, int> > members;\n+\n+public:\n+    CRPCConvertTable();\n+\n+    bool convert(const std::string& method, int idx) {\n+        return (members.count(std::make_pair(method, idx)) > 0);\n     }\n-    else\n-    {\n-        value = value.get_value<T>();\n+};\n+\n+CRPCConvertTable::CRPCConvertTable()\n+{\n+    const unsigned int n_elem =\n+        (sizeof(vRPCConvertParams) / sizeof(vRPCConvertParams[0]));\n+\n+    for (unsigned int i = 0; i < n_elem; i++) {\n+        members.insert(std::make_pair(vRPCConvertParams[i].methodName,\n+                                      vRPCConvertParams[i].paramIdx));\n     }\n }\n \n+static CRPCConvertTable rpcCvtTable;\n+\n // Convert strings to command-specific RPC representation\n Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     Array params;\n-    BOOST_FOREACH(const std::string &param, strParams)\n-        params.push_back(param);\n-\n-    int n = params.size();\n-\n-    //\n-    // Special case non-string parameter types\n-    //\n-    if (strMethod == \"stop\"                   && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"getaddednodeinfo\"       && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getnetworkhashps\"       && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"getnetworkhashps\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n-    if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n-    if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"listreceivedbyaddress\"  && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"listreceivedbyaccount\"  && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"getbalance\"             && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"move\"                   && n > 3) ConvertTo<int64_t>(params[3]);\n-    if (strMethod == \"sendfrom\"               && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<int64_t>(params[3]);\n-    if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<int64_t>(params[2]);\n-    if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"prioritisetransaction\"  && n > 1) ConvertTo<double>(params[1]);\n-    if (strMethod == \"prioritisetransaction\"  && n > 2) ConvertTo<int64_t>(params[2]);\n-    if (strMethod == \"getblocktemplate\"       && n > 0) ConvertTo<Object>(params[0]);\n-    if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"sendmany\"               && n > 1) ConvertTo<Object>(params[1]);\n-    if (strMethod == \"sendmany\"               && n > 2) ConvertTo<int64_t>(params[2]);\n-    if (strMethod == \"addmultisigaddress\"     && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"addmultisigaddress\"     && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"createmultisig\"         && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"createmultisig\"         && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"listunspent\"            && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"listunspent\"            && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"listunspent\"            && n > 2) ConvertTo<Array>(params[2]);\n-    if (strMethod == \"getblock\"               && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"getrawtransaction\"      && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"createrawtransaction\"   && n > 0) ConvertTo<Array>(params[0]);\n-    if (strMethod == \"createrawtransaction\"   && n > 1) ConvertTo<Object>(params[1]);\n-    if (strMethod == \"signrawtransaction\"     && n > 1) ConvertTo<Array>(params[1], true);\n-    if (strMethod == \"signrawtransaction\"     && n > 2) ConvertTo<Array>(params[2], true);\n-    if (strMethod == \"sendrawtransaction\"     && n > 1) ConvertTo<bool>(params[1], true);\n-    if (strMethod == \"gettxout\"               && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"gettxout\"               && n > 2) ConvertTo<bool>(params[2]);\n-    if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"importprivkey\"          && n > 2) ConvertTo<bool>(params[2]);\n-    if (strMethod == \"verifychain\"            && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"verifychain\"            && n > 1) ConvertTo<int64_t>(params[1]);\n-    if (strMethod == \"keypoolrefill\"          && n > 0) ConvertTo<int64_t>(params[0]);\n-    if (strMethod == \"getrawmempool\"          && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"estimatefee\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"estimatepriority\"       && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+\n+    for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n+        const std::string& strVal = strParams[idx];\n+\n+        // insert string value directly\n+        if (!rpcCvtTable.convert(strMethod, idx)) {\n+            params.push_back(strVal);\n+        }\n+",
      "path": "src/rpcclient.cpp",
      "position": 193,
      "original_position": 193,
      "commit_id": "e35b37b1b8252c3d3f66001ba1efccd263307add",
      "original_commit_id": "e35b37b1b8252c3d3f66001ba1efccd263307add",
      "in_reply_to_id": null,
      "user": {
        "login": "jgarzik",
        "id": 494411,
        "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jgarzik",
        "html_url": "https://github.com/jgarzik",
        "followers_url": "https://api.github.com/users/jgarzik/followers",
        "following_url": "https://api.github.com/users/jgarzik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jgarzik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jgarzik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
        "organizations_url": "https://api.github.com/users/jgarzik/orgs",
        "repos_url": "https://api.github.com/users/jgarzik/repos",
        "events_url": "https://api.github.com/users/jgarzik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jgarzik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@Diapolo Feel free to submit a cleanup PR if you desire!  Thanks for asking.\n",
      "created_at": "2014-07-13T23:41:10Z",
      "updated_at": "2014-07-13T23:41:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/4415#discussion_r14860949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14860949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4415"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}