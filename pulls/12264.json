{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264",
    "id": 164934219,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTY0OTM0MjE5",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/12264.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/12264.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12264",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12264/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/1e2e09e2f6382ed239d974720126c642c3e3690c",
    "number": 12264,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Fix versionbits warning test",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixes #12259 (and tidies up the test)\r\n\r\nThe problem was that the node was still in IBD at the point the last block was generated. UpdateTip() will not generate a warning if the node is still in IBD:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/cc5870a4057f0322509dde5877fb08258bf4ec50/src/validation.cpp#L2151\r\n\r\nThe 'proper' fix would be to remove the overenthusiastic latching in DoWarning:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/cc5870a4057f0322509dde5877fb08258bf4ec50/src/validation.cpp#L2135\r\n\r\nso that more than one warning message can be output to `alertnotify`. Really we should suppress multiple messages of the same type, but allow messages to be output if they're for different warnings. That would mean the test wouldn't need to stop-start the node.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2018-01-24T18:59:55Z",
    "updated_at": "2021-09-08T11:32:10Z",
    "closed_at": "2018-01-25T13:08:15Z",
    "mergeable_state": "unknown",
    "merged_at": "2018-01-25T13:08:15Z",
    "merge_commit_sha": "1e2e09e2f6382ed239d974720126c642c3e3690c",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "jnewbery:fix_versionbits_warning_test",
      "ref": "fix_versionbits_warning_test",
      "sha": "1e2e09e2f6382ed239d974720126c642c3e3690c",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 68248485,
        "node_id": "MDEwOlJlcG9zaXRvcnk2ODI0ODQ4NQ==",
        "name": "bitcoin",
        "full_name": "jnewbery/bitcoin",
        "owner": {
          "login": "jnewbery",
          "id": 1063656,
          "node_id": "MDQ6VXNlcjEwNjM2NTY=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jnewbery",
          "html_url": "https://github.com/jnewbery",
          "followers_url": "https://api.github.com/users/jnewbery/followers",
          "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
          "organizations_url": "https://api.github.com/users/jnewbery/orgs",
          "repos_url": "https://api.github.com/users/jnewbery/repos",
          "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jnewbery/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jnewbery/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jnewbery/bitcoin",
        "archive_url": "https://api.github.com/repos/jnewbery/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jnewbery/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jnewbery/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jnewbery/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jnewbery/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jnewbery/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jnewbery/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jnewbery/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jnewbery/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jnewbery/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jnewbery/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jnewbery/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jnewbery/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jnewbery/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jnewbery/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jnewbery/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jnewbery/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jnewbery/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jnewbery/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jnewbery/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jnewbery/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jnewbery/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jnewbery/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jnewbery/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jnewbery/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jnewbery/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jnewbery/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jnewbery/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jnewbery/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jnewbery/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jnewbery/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jnewbery/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jnewbery/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jnewbery/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jnewbery/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jnewbery/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jnewbery/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jnewbery/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jnewbery/bitcoin/hooks",
        "svn_url": "https://github.com/jnewbery/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 219109,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-04-21T11:07:55Z",
        "created_at": "2016-09-14T22:29:05Z",
        "updated_at": "2021-07-06T16:23:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "6970b30c6f1d2be7947295fe18f2390649b17a4b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T00:30:39Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 61,
    "deletions": 70,
    "changed_files": 1,
    "commits": 3,
    "review_comments": 10,
    "comments": 4
  },
  "events": [
    {
      "event": "reviewed",
      "id": 91312035,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTEzMTIwMzU=",
      "url": null,
      "actor": null,
      "commit_id": "f96b1eca3bf4dd0b4b06e0cd7e3b43c28c6dc5f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#pullrequestreview-91312035",
      "submitted_at": "2018-01-24T20:02:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
    },
    {
      "event": "reviewed",
      "id": 91313867,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTEzMTM4Njc=",
      "url": null,
      "actor": null,
      "commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#pullrequestreview-91313867",
      "submitted_at": "2018-01-24T20:09:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
    },
    {
      "event": "reviewed",
      "id": 91315353,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTEzMTUzNTM=",
      "url": null,
      "actor": null,
      "commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#pullrequestreview-91315353",
      "submitted_at": "2018-01-24T20:14:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
    },
    {
      "event": "commented",
      "id": 360259589,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDI1OTU4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360259589",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-24T20:15:18Z",
      "updated_at": "2018-01-24T20:15:18Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#issuecomment-360259589",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12264"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1440417988,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQ0MDQxNzk4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1440417988",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-24T21:16:23Z"
    },
    {
      "event": "labeled",
      "id": 1440506834,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE0NDA1MDY4MzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1440506834",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-24T22:06:36Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "commented",
      "id": 360427994,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDQyNzk5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360427994",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-25T10:37:39Z",
      "updated_at": "2018-01-25T10:37:39Z",
      "author_association": "MEMBER",
      "body": "Seems to need rebase (already?).",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#issuecomment-360427994",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12264"
    },
    {
      "event": "commented",
      "id": 360445267,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDQ0NTI2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360445267",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-25T11:53:28Z",
      "updated_at": "2018-01-25T11:53:28Z",
      "author_association": "MEMBER",
      "body": "utACK f36607eb8c Needs rebase",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#issuecomment-360445267",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12264"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjJiZWIyYzEzMDBiMDcyNWNmMDZhYzkzMDljMzVhODA0NjkzNmYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef2beb2c1300b0725cf06ac9309c35a8046936f3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ef2beb2c1300b0725cf06ac9309c35a8046936f3",
      "tree": {
        "sha": "7f7249a90a3cb13b2950c63b9bc104138ffe6db5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f7249a90a3cb13b2950c63b9bc104138ffe6db5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6970b30c6f1d2be7947295fe18f2390649b17a4b",
          "sha": "6970b30c6f1d2be7947295fe18f2390649b17a4b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6970b30c6f1d2be7947295fe18f2390649b17a4b"
        }
      ],
      "message": "Fix flake8 warnings in p2p-versionbits-warning.py",
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-25T12:34:58Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-24T17:45:21Z"
      },
      "sha": "ef2beb2c1300b0725cf06ac9309c35a8046936f3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmJkODQzNzA4OWJmZDNjN2ZlMzM2YTFmNjg1ODk0YTMxNGVhOThl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bbd8437089bfd3c7fe336a1f685894a314ea98e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3bbd8437089bfd3c7fe336a1f685894a314ea98e",
      "tree": {
        "sha": "57bdf9c2e539521374aa3cc7fbfbda38c089156d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57bdf9c2e539521374aa3cc7fbfbda38c089156d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef2beb2c1300b0725cf06ac9309c35a8046936f3",
          "sha": "ef2beb2c1300b0725cf06ac9309c35a8046936f3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ef2beb2c1300b0725cf06ac9309c35a8046936f3"
        }
      ],
      "message": "Improve comments/logging in p2p-versionbits-warning.py",
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-25T12:34:58Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-24T17:57:34Z"
      },
      "sha": "3bbd8437089bfd3c7fe336a1f685894a314ea98e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTJlMDllMmY2MzgyZWQyMzlkOTc0NzIwMTI2YzY0MmMzZTM2OTBj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e2e09e2f6382ed239d974720126c642c3e3690c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1e2e09e2f6382ed239d974720126c642c3e3690c",
      "tree": {
        "sha": "737acedfd3ef3f5e3a9c2ba96276e7b8c2cb4f14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/737acedfd3ef3f5e3a9c2ba96276e7b8c2cb4f14"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bbd8437089bfd3c7fe336a1f685894a314ea98e",
          "sha": "3bbd8437089bfd3c7fe336a1f685894a314ea98e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3bbd8437089bfd3c7fe336a1f685894a314ea98e"
        }
      ],
      "message": "Fix intermittent failure in p2p-versionbits-warning.py\n\nMakes following changes to fix and tidy up p2p-versionbits-warning.py:\n- add node alias in the run() method\n- call versionbits_in_alert_file() in a wait_until loop.\n- don't clear out the alert.txt file\n- explicitly comment why the node needs to be stop-started\n- Verify that the node is out of IBD after stop-start (nodes in IBD do\nnot generate alert messages)\n- no need to subclass P2PInterface",
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-25T12:34:58Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-24T18:29:13Z"
      },
      "sha": "1e2e09e2f6382ed239d974720126c642c3e3690c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1441582403,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQ0MTU4MjQwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1441582403",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-25T13:01:36Z"
    },
    {
      "event": "commented",
      "id": 360460221,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDQ2MDIyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360460221",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-25T13:01:55Z",
      "updated_at": "2018-01-25T13:01:55Z",
      "author_association": "MEMBER",
      "body": "rebased (test file name change)",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#issuecomment-360460221",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12264"
    },
    {
      "event": "merged",
      "id": 1441592849,
      "node_id": "MDExOk1lcmdlZEV2ZW50MTQ0MTU5Mjg0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1441592849",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e2e09e2f6382ed239d974720126c642c3e3690c",
      "created_at": "2018-01-25T13:08:15Z"
    },
    {
      "event": "closed",
      "id": 1441592856,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTQ0MTU5Mjg1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1441592856",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-25T13:08:15Z"
    },
    {
      "event": "referenced",
      "id": 1441592884,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0NDE1OTI4ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1441592884",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "598a9c4e4dcd03c6d80fba005de729a6a3aeba7e",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/598a9c4e4dcd03c6d80fba005de729a6a3aeba7e",
      "created_at": "2018-01-25T13:08:16Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 1441598614,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQxNDQxNTk4NjE0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1441598614",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-25T13:11:51Z"
    },
    {
      "event": "referenced",
      "id": 2917342531,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5MTczNDI1MzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2917342531",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1b5159277d8272e60967bafbaf48cdf170f481f7",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/1b5159277d8272e60967bafbaf48cdf170f481f7",
      "created_at": "2020-01-02T10:07:00Z"
    },
    {
      "event": "referenced",
      "id": 2917349326,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5MTczNDkzMjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2917349326",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "387bb202aee2ced3095152d33c3b41af6084adba",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/387bb202aee2ced3095152d33c3b41af6084adba",
      "created_at": "2020-01-02T10:09:38Z"
    },
    {
      "event": "referenced",
      "id": 2918319068,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5MTgzMTkwNjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2918319068",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7ff96c2405e2d43db0bb61249187f39c4a10bed9",
      "commit_url": "https://api.github.com/repos/dashpay/dash/commits/7ff96c2405e2d43db0bb61249187f39c4a10bed9",
      "created_at": "2020-01-02T17:36:21Z"
    },
    {
      "event": "referenced",
      "id": 2938050821,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5MzgwNTA4MjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2938050821",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1df3c67a8c7a0675d547e16e2a7c82af02ede13a",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/1df3c67a8c7a0675d547e16e2a7c82af02ede13a",
      "created_at": "2020-01-10T10:31:36Z"
    },
    {
      "event": "referenced",
      "id": 2971478183,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5NzE0NzgxODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2971478183",
      "actor": {
        "login": "barrystyle",
        "id": 14147070,
        "node_id": "MDQ6VXNlcjE0MTQ3MDcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/14147070?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/barrystyle",
        "html_url": "https://github.com/barrystyle",
        "followers_url": "https://api.github.com/users/barrystyle/followers",
        "following_url": "https://api.github.com/users/barrystyle/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/barrystyle/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/barrystyle/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/barrystyle/subscriptions",
        "organizations_url": "https://api.github.com/users/barrystyle/orgs",
        "repos_url": "https://api.github.com/users/barrystyle/repos",
        "events_url": "https://api.github.com/users/barrystyle/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/barrystyle/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "84c991c66584f3c27d7b00a0f6f4b1236754787b",
      "commit_url": "https://api.github.com/repos/PACGlobalOfficial/PAC/commits/84c991c66584f3c27d7b00a0f6f4b1236754787b",
      "created_at": "2020-01-22T20:22:42Z"
    },
    {
      "event": "referenced",
      "id": 3153649480,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMxNTM2NDk0ODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3153649480",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f1d3d7c95fa5639ecde2b9f0d37d267d9ea914b4",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/f1d3d7c95fa5639ecde2b9f0d37d267d9ea914b4",
      "created_at": "2020-03-23T05:12:01Z"
    },
    {
      "event": "referenced",
      "id": 3174540723,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMxNzQ1NDA3MjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3174540723",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3131992d61a7329987a5c21d20865d26885708d1",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/3131992d61a7329987a5c21d20865d26885708d1",
      "created_at": "2020-03-28T01:54:09Z"
    },
    {
      "event": "referenced",
      "id": 3440420151,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NDA0MjAxNTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3440420151",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "809da14459832bc5c82751e745dd7d4a8182cb1a",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/809da14459832bc5c82751e745dd7d4a8182cb1a",
      "created_at": "2020-06-13T03:49:31Z"
    },
    {
      "event": "referenced",
      "id": 3441086825,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NDEwODY4MjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3441086825",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2078d55a4d6d5616cb9f7d6a45b89c0820246195",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/2078d55a4d6d5616cb9f7d6a45b89c0820246195",
      "created_at": "2020-06-13T19:44:18Z"
    },
    {
      "event": "referenced",
      "id": 3451533157,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NTE1MzMxNTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3451533157",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9f9f6bb40aba7add9759e70157fd423fef980e78",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/9f9f6bb40aba7add9759e70157fd423fef980e78",
      "created_at": "2020-06-17T02:17:36Z"
    },
    {
      "event": "referenced",
      "id": 3459080918,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NTkwODA5MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3459080918",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "50c5439ac33f67474713b82b8109e0bba82246be",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/50c5439ac33f67474713b82b8109e0bba82246be",
      "created_at": "2020-06-18T16:42:26Z"
    },
    {
      "event": "referenced",
      "id": 3516013101,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM1MTYwMTMxMDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3516013101",
      "actor": {
        "login": "FornaxA",
        "id": 25762277,
        "node_id": "MDQ6VXNlcjI1NzYyMjc3",
        "avatar_url": "https://avatars.githubusercontent.com/u/25762277?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/FornaxA",
        "html_url": "https://github.com/FornaxA",
        "followers_url": "https://api.github.com/users/FornaxA/followers",
        "following_url": "https://api.github.com/users/FornaxA/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/FornaxA/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/FornaxA/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/FornaxA/subscriptions",
        "organizations_url": "https://api.github.com/users/FornaxA/orgs",
        "repos_url": "https://api.github.com/users/FornaxA/repos",
        "events_url": "https://api.github.com/users/FornaxA/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/FornaxA/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "178a77d946ba21f5287bae9f1e6d84fb302458f9",
      "commit_url": "https://api.github.com/repos/ioncoincore/ion/commits/178a77d946ba21f5287bae9f1e6d84fb302458f9",
      "created_at": "2020-07-06T13:45:26Z"
    },
    {
      "event": "locked",
      "id": 5271698552,
      "node_id": "LOE_lADOABII584RXTjmzwAAAAE6N7x4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271698552",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T11:32:10Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163662410",
      "pull_request_review_id": 91312035,
      "id": 163662410,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY2MjQxMA==",
      "diff_hunk": "@@ -59,47 +60,42 @@ def send_blocks_with_version(self, peer, numblocks, version):\n         peer.sync_with_ping()\n \n     def test_versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\n+\n+        Note that this is only called after the node is shutdown, so doesn't need\n+        a wait_until wrapper.\"\"\"\n         with open(self.alert_filename, 'r', encoding='utf8') as f:\n             alert_text = f.read()\n         assert(VB_PATTERN.match(alert_text))\n \n     def run_test(self):\n-        # Setup the p2p connection and start up the network thread.\n         self.nodes[0].add_p2p_connection(TestNode())\n-\n         network_thread_start()\n-\n-        # Test logic begins here\n         self.nodes[0].p2p.wait_for_verack()\n \n-        # 1. Have the node mine one period worth of blocks\n+        # Mine one period worth of blocks\n         self.nodes[0].generate(VB_PERIOD)\n \n-        # 2. Now build one period of blocks on the tip, with < VB_THRESHOLD\n-        # blocks signaling some unknown bit.\n-        version = VB_TOP_BITS | (1 << VB_UNKNOWN_BIT)\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, version)\n-\n-        # Fill rest of period with regular version blocks\n+        self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n+        # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n-        # Check that we're not getting any versionbit-related errors in\n-        # get*info()\n+\n+        # Check that we're not getting any versionbit-related errors in get*info()\n         assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n         assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n \n-        # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n-        # some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, version)\n+        # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n-        # Might not get a versionbits-related alert yet, as we should\n-        # have gotten a different alert due to more than 51/100 blocks\n-        # being of unexpected version.\n-        # Check that get*info() shows some kind of error.\n+\n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")",
      "path": "test/functional/p2p-versionbits-warning.py",
      "position": null,
      "original_position": 71,
      "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
      "original_commit_id": "f96b1eca3bf4dd0b4b06e0cd7e3b43c28c6dc5f2",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should say more than 50, not less than",
      "created_at": "2018-01-24T20:02:55Z",
      "updated_at": "2018-01-25T13:01:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163662410",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163662410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163663927",
      "pull_request_review_id": 91313867,
      "id": 163663927,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY2MzkyNw==",
      "diff_hunk": "@@ -59,61 +56,57 @@ def send_blocks_with_version(self, peer, numblocks, version):\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        \"\"\"Test that the versionbits warning has been written to the alert file.\n-\n-        Note that this is only called after the node is shutdown, so doesn't need\n-        a wait_until wrapper.\"\"\"\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n-        self.nodes[0].p2p.wait_for_verack()\n+        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n+        node.generate(VB_PERIOD)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-\n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This will move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass\n-        self.start_nodes()\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n \n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n-\n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        # Generating one more block will be enough to generate an error.\n+        node.generate(1)\n+        # Check that get*info() shows the versionbits unknown rules warning\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        # Check that the alert file shows the versionbits unknown rules warning\n+        wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)",
      "path": "test/functional/p2p-versionbits-warning.py",
      "position": null,
      "original_position": 117,
      "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
      "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: 60 seconds seems overkill, what about 5 or 10?",
      "created_at": "2018-01-24T20:09:15Z",
      "updated_at": "2018-01-25T13:01:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163663927",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163663927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163665254",
      "pull_request_review_id": 91315353,
      "id": 163665254,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY2NTI1NA==",
      "diff_hunk": "@@ -35,87 +34,79 @@ def set_test_params(self):\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file\n-        with open(self.alert_filename, 'w', encoding='utf8') as _:\n+        with open(self.alert_filename, 'w', encoding='utf8'):\n             pass\n         self.extra_args = [[\"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]]\n         self.setup_nodes()\n \n-    # Send numblocks blocks via peer with nVersionToUse set.\n-    def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n+    def send_blocks_with_version(self, peer, numblocks, version):\n+        \"\"\"Send numblocks blocks to peer with version set\"\"\"\n         tip = self.nodes[0].getbestblockhash()\n         height = self.nodes[0].getblockcount()\n-        block_time = self.nodes[0].getblockheader(tip)[\"time\"]+1\n+        block_time = self.nodes[0].getblockheader(tip)[\"time\"] + 1\n         tip = int(tip, 16)\n \n         for _ in range(numblocks):\n-            block = create_block(tip, create_coinbase(height+1), block_time)\n-            block.nVersion = nVersionToUse\n+            block = create_block(tip, create_coinbase(height + 1), block_time)\n+            block.nVersion = version\n             block.solve()\n             peer.send_message(msg_block(block))\n             block_time += 1\n             height += 1\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        # Setup the p2p connection and start up the network thread.\n-        self.nodes[0].add_p2p_connection(TestNode())\n-\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n+        node.p2p.wait_for_verack()\n \n-        # Test logic begins here\n-        self.nodes[0].p2p.wait_for_verack()\n-\n-        # 1. Have the node mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n-\n-        # 2. Now build one period of blocks on the tip, with < VB_THRESHOLD\n-        # blocks signaling some unknown bit.\n-        nVersion = VB_TOP_BITS | (1<<VB_UNKNOWN_BIT)\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD-1, nVersion)\n-\n-        # Fill rest of period with regular version blocks\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n-        # Check that we're not getting any versionbit-related errors in\n-        # get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n-\n-        # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n-        # some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, nVersion)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n-        # Might not get a versionbits-related alert yet, as we should\n-        # have gotten a different alert due to more than 51/100 blocks\n-        # being of unexpected version.\n-        # Check that get*info() shows some kind of error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n+        # Mine one period worth of blocks\n+        node.generate(VB_PERIOD)\n \n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This should move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8') as _:\n-            pass\n-        self.start_nodes()\n+        self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n+        # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n+\n+        # Check that we're not getting any versionbit-related errors in get*info()\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n+        # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Check that get*info() shows the 51/100 unknown block version error.\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n+\n+        self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)",
      "path": "test/functional/p2p-versionbits-warning.py",
      "position": null,
      "original_position": 163,
      "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
      "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Generating that block will not help to get us out of ibd any sooner. Am I mistaken?",
      "created_at": "2018-01-24T20:14:35Z",
      "updated_at": "2018-01-25T13:01:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163665254",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163665254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680166",
      "pull_request_review_id": 91333271,
      "id": 163680166,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY4MDE2Ng==",
      "diff_hunk": "@@ -59,47 +60,42 @@ def send_blocks_with_version(self, peer, numblocks, version):\n         peer.sync_with_ping()\n \n     def test_versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\n+\n+        Note that this is only called after the node is shutdown, so doesn't need\n+        a wait_until wrapper.\"\"\"\n         with open(self.alert_filename, 'r', encoding='utf8') as f:\n             alert_text = f.read()\n         assert(VB_PATTERN.match(alert_text))\n \n     def run_test(self):\n-        # Setup the p2p connection and start up the network thread.\n         self.nodes[0].add_p2p_connection(TestNode())\n-\n         network_thread_start()\n-\n-        # Test logic begins here\n         self.nodes[0].p2p.wait_for_verack()\n \n-        # 1. Have the node mine one period worth of blocks\n+        # Mine one period worth of blocks\n         self.nodes[0].generate(VB_PERIOD)\n \n-        # 2. Now build one period of blocks on the tip, with < VB_THRESHOLD\n-        # blocks signaling some unknown bit.\n-        version = VB_TOP_BITS | (1 << VB_UNKNOWN_BIT)\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, version)\n-\n-        # Fill rest of period with regular version blocks\n+        self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n+        # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n-        # Check that we're not getting any versionbit-related errors in\n-        # get*info()\n+\n+        # Check that we're not getting any versionbit-related errors in get*info()\n         assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n         assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n \n-        # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n-        # some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, version)\n+        # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n-        # Might not get a versionbits-related alert yet, as we should\n-        # have gotten a different alert due to more than 51/100 blocks\n-        # being of unexpected version.\n-        # Check that get*info() shows some kind of error.\n+\n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")",
      "path": "test/functional/p2p-versionbits-warning.py",
      "position": null,
      "original_position": 71,
      "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
      "original_commit_id": "f96b1eca3bf4dd0b4b06e0cd7e3b43c28c6dc5f2",
      "in_reply_to_id": 163662410,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed",
      "created_at": "2018-01-24T21:16:28Z",
      "updated_at": "2018-01-25T13:01:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163680166",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680243",
      "pull_request_review_id": 91333357,
      "id": 163680243,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY4MDI0Mw==",
      "diff_hunk": "@@ -59,61 +56,57 @@ def send_blocks_with_version(self, peer, numblocks, version):\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        \"\"\"Test that the versionbits warning has been written to the alert file.\n-\n-        Note that this is only called after the node is shutdown, so doesn't need\n-        a wait_until wrapper.\"\"\"\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n-        self.nodes[0].p2p.wait_for_verack()\n+        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n+        node.generate(VB_PERIOD)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-\n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This will move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass\n-        self.start_nodes()\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n \n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n-\n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        # Generating one more block will be enough to generate an error.\n+        node.generate(1)\n+        # Check that get*info() shows the versionbits unknown rules warning\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        # Check that the alert file shows the versionbits unknown rules warning\n+        wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)",
      "path": "test/functional/p2p-versionbits-warning.py",
      "position": null,
      "original_position": 117,
      "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
      "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
      "in_reply_to_id": 163663927,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "no harm in having it longer",
      "created_at": "2018-01-24T21:16:45Z",
      "updated_at": "2018-01-25T13:01:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163680243",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680400",
      "pull_request_review_id": 91333520,
      "id": 163680400,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY4MDQwMA==",
      "diff_hunk": "@@ -35,87 +34,79 @@ def set_test_params(self):\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file\n-        with open(self.alert_filename, 'w', encoding='utf8') as _:\n+        with open(self.alert_filename, 'w', encoding='utf8'):\n             pass\n         self.extra_args = [[\"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]]\n         self.setup_nodes()\n \n-    # Send numblocks blocks via peer with nVersionToUse set.\n-    def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n+    def send_blocks_with_version(self, peer, numblocks, version):\n+        \"\"\"Send numblocks blocks to peer with version set\"\"\"\n         tip = self.nodes[0].getbestblockhash()\n         height = self.nodes[0].getblockcount()\n-        block_time = self.nodes[0].getblockheader(tip)[\"time\"]+1\n+        block_time = self.nodes[0].getblockheader(tip)[\"time\"] + 1\n         tip = int(tip, 16)\n \n         for _ in range(numblocks):\n-            block = create_block(tip, create_coinbase(height+1), block_time)\n-            block.nVersion = nVersionToUse\n+            block = create_block(tip, create_coinbase(height + 1), block_time)\n+            block.nVersion = version\n             block.solve()\n             peer.send_message(msg_block(block))\n             block_time += 1\n             height += 1\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        # Setup the p2p connection and start up the network thread.\n-        self.nodes[0].add_p2p_connection(TestNode())\n-\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n+        node.p2p.wait_for_verack()\n \n-        # Test logic begins here\n-        self.nodes[0].p2p.wait_for_verack()\n-\n-        # 1. Have the node mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n-\n-        # 2. Now build one period of blocks on the tip, with < VB_THRESHOLD\n-        # blocks signaling some unknown bit.\n-        nVersion = VB_TOP_BITS | (1<<VB_UNKNOWN_BIT)\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD-1, nVersion)\n-\n-        # Fill rest of period with regular version blocks\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n-        # Check that we're not getting any versionbit-related errors in\n-        # get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n-\n-        # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n-        # some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, nVersion)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n-        # Might not get a versionbits-related alert yet, as we should\n-        # have gotten a different alert due to more than 51/100 blocks\n-        # being of unexpected version.\n-        # Check that get*info() shows some kind of error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n+        # Mine one period worth of blocks\n+        node.generate(VB_PERIOD)\n \n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This should move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8') as _:\n-            pass\n-        self.start_nodes()\n+        self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n+        # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n+\n+        # Check that we're not getting any versionbit-related errors in get*info()\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n+        # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Check that get*info() shows the 51/100 unknown block version error.\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n+\n+        self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)",
      "path": "test/functional/p2p-versionbits-warning.py",
      "position": null,
      "original_position": 163,
      "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
      "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
      "in_reply_to_id": 163665254,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "generating a block *guarantees* that we'll get out of IBD. I've updated the comment.",
      "created_at": "2018-01-24T21:17:20Z",
      "updated_at": "2018-01-25T13:01:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163680400",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717827",
      "pull_request_review_id": 91376395,
      "id": 163717827,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcxNzgyNw==",
      "diff_hunk": "@@ -59,61 +56,57 @@ def send_blocks_with_version(self, peer, numblocks, version):\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        \"\"\"Test that the versionbits warning has been written to the alert file.\n-\n-        Note that this is only called after the node is shutdown, so doesn't need\n-        a wait_until wrapper.\"\"\"\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n-        self.nodes[0].p2p.wait_for_verack()\n+        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n+        node.generate(VB_PERIOD)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-\n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This will move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass\n-        self.start_nodes()\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n \n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n-\n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        # Generating one more block will be enough to generate an error.\n+        node.generate(1)\n+        # Check that get*info() shows the versionbits unknown rules warning\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        # Check that the alert file shows the versionbits unknown rules warning\n+        wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)",
      "path": "test/functional/p2p-versionbits-warning.py",
      "position": null,
      "original_position": 117,
      "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
      "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
      "in_reply_to_id": 163663927,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I sometimes make tests fail on purpose, so having to wait a minute (or going into the test each time and having to modify it) is somewhat inconvenient.",
      "created_at": "2018-01-25T00:10:52Z",
      "updated_at": "2018-01-25T13:01:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163717827",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163718077",
      "pull_request_review_id": 91376714,
      "id": 163718077,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcxODA3Nw==",
      "diff_hunk": "@@ -59,61 +56,57 @@ def send_blocks_with_version(self, peer, numblocks, version):\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        \"\"\"Test that the versionbits warning has been written to the alert file.\n-\n-        Note that this is only called after the node is shutdown, so doesn't need\n-        a wait_until wrapper.\"\"\"\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n-        self.nodes[0].p2p.wait_for_verack()\n+        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n+        node.generate(VB_PERIOD)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-\n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This will move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass\n-        self.start_nodes()\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n \n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n-\n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        # Generating one more block will be enough to generate an error.\n+        node.generate(1)\n+        # Check that get*info() shows the versionbits unknown rules warning\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        # Check that the alert file shows the versionbits unknown rules warning\n+        wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)",
      "path": "test/functional/p2p-versionbits-warning.py",
      "position": null,
      "original_position": 117,
      "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
      "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
      "in_reply_to_id": 163663927,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, should the test fail for some reason, the earlier you know the better. As a rule of thumb, I estimate the time it would take to fulfill the predicate, double that for travis, then double again just to be safe.",
      "created_at": "2018-01-25T00:12:46Z",
      "updated_at": "2018-01-25T13:01:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163718077",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163718077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163718203",
      "pull_request_review_id": 91376856,
      "id": 163718203,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcxODIwMw==",
      "diff_hunk": "@@ -59,61 +56,57 @@ def send_blocks_with_version(self, peer, numblocks, version):\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        \"\"\"Test that the versionbits warning has been written to the alert file.\n-\n-        Note that this is only called after the node is shutdown, so doesn't need\n-        a wait_until wrapper.\"\"\"\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n-        self.nodes[0].p2p.wait_for_verack()\n+        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n+        node.generate(VB_PERIOD)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-\n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This will move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass\n-        self.start_nodes()\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n \n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n-\n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        # Generating one more block will be enough to generate an error.\n+        node.generate(1)\n+        # Check that get*info() shows the versionbits unknown rules warning\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        # Check that the alert file shows the versionbits unknown rules warning\n+        wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)",
      "path": "test/functional/p2p-versionbits-warning.py",
      "position": null,
      "original_position": 117,
      "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
      "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
      "in_reply_to_id": 163663927,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can change the timeout on your failure-triggering case 🙂 \r\n\r\nIn my opinion it's better to have this too long than too short, to avoid spurious Travis failures.",
      "created_at": "2018-01-25T00:13:33Z",
      "updated_at": "2018-01-25T13:01:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163718203",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163718203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163805033",
      "pull_request_review_id": 91476017,
      "id": 163805033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzgwNTAzMw==",
      "diff_hunk": "@@ -59,61 +56,57 @@ def send_blocks_with_version(self, peer, numblocks, version):\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        \"\"\"Test that the versionbits warning has been written to the alert file.\n-\n-        Note that this is only called after the node is shutdown, so doesn't need\n-        a wait_until wrapper.\"\"\"\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n-        self.nodes[0].p2p.wait_for_verack()\n+        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n+        node.generate(VB_PERIOD)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-\n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This will move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass\n-        self.start_nodes()\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n \n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n-\n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        # Generating one more block will be enough to generate an error.\n+        node.generate(1)\n+        # Check that get*info() shows the versionbits unknown rules warning\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        # Check that the alert file shows the versionbits unknown rules warning\n+        wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)",
      "path": "test/functional/p2p-versionbits-warning.py",
      "position": null,
      "original_position": 117,
      "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
      "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
      "in_reply_to_id": 163663927,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I also prefer waiting on the long side, if it doesn't slow down the test in the passing case. Travis can be really slow when the servers are contended.",
      "created_at": "2018-01-25T10:37:29Z",
      "updated_at": "2018-01-25T13:01:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163805033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163805033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    }
  ]
}