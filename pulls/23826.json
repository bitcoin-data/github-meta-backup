{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
    "id": 806688902,
    "node_id": "PR_kwDOABII584wFRiG",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23826",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/23826.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/23826.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23826",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23826/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
    "number": 23826,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "test: Make AddrMan unit tests use public interface, extend coverage",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR (joint work with Amiti Uttarwar) changes the addrman unit tests such that they only use the public `AddrMan` interface:\r\nThis has the advantage that the tests are less implementation-dependent, i.e. it would be possible to rewrite the internal addrman implementation (as drafted [here](https://github.com/sipa/bitcoin/tree/202106_multiindex_addrman) for using a multiindex) without having to adjust the tests.\r\n\r\nThis includes the following steps:\r\n* Adding a test-only function `FindAddressEntry()` to the public addrman interface which returns info about an address in addrman (e.g. bucket, position, whethe the address is in new or tried).  Obviously we want to do this sparingly, but I think a single test-only function is ok (which could also be useful elsewhere, e.g. in fuzz tests).\r\n* Removal of the `AddrManTest` subclass which would reach into AddrMan's internals, using `AddrMan` instead\r\n* Removal of tests for internal helper functions that are not publicly exposed (these are still tested indirectly via the public functions calling them).\r\n* Additional tests for previously untested features such as multiplicity in the new tables, that can be tested with the help of `FindAddressEntry()`.\r\n \r\nAll in all, this PR increases the unit test coverage of AddrMan by a bit.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2021-12-20T14:19:35Z",
    "updated_at": "2023-01-16T18:47:11Z",
    "closed_at": "2022-01-04T15:08:21Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-01-04T15:08:21Z",
    "merge_commit_sha": "4ee78450fff09781d6d0e3e02a486f30428d72d2",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "mzumsande:202112_addrman_unit_tests_1",
      "ref": "202112_addrman_unit_tests_1",
      "sha": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 187673073,
        "node_id": "MDEwOlJlcG9zaXRvcnkxODc2NzMwNzM=",
        "name": "bitcoin",
        "full_name": "mzumsande/bitcoin",
        "owner": {
          "login": "mzumsande",
          "id": 48763452,
          "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
          "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mzumsande",
          "html_url": "https://github.com/mzumsande",
          "followers_url": "https://api.github.com/users/mzumsande/followers",
          "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
          "organizations_url": "https://api.github.com/users/mzumsande/orgs",
          "repos_url": "https://api.github.com/users/mzumsande/repos",
          "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/mzumsande/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/mzumsande/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/mzumsande/bitcoin",
        "archive_url": "https://api.github.com/repos/mzumsande/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/mzumsande/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/mzumsande/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/mzumsande/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/mzumsande/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/mzumsande/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/mzumsande/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/mzumsande/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/mzumsande/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/mzumsande/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/mzumsande/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/mzumsande/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/mzumsande/bitcoin/events",
        "forks_url": "https://api.github.com/repos/mzumsande/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/mzumsande/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/mzumsande/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/mzumsande/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/mzumsande/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/mzumsande/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/mzumsande/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/mzumsande/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/mzumsande/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/mzumsande/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/mzumsande/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/mzumsande/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/mzumsande/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/mzumsande/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/mzumsande/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/mzumsande/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:mzumsande/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/mzumsande/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/mzumsande/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/mzumsande/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/mzumsande/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/mzumsande/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/mzumsande/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/mzumsande/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/mzumsande/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/mzumsande/bitcoin/hooks",
        "svn_url": "https://github.com/mzumsande/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 216760,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-05T17:01:53Z",
        "created_at": "2019-05-20T16:03:10Z",
        "updated_at": "2023-05-05T12:10:24Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "75a227e39e37d475d6088209f24f32c070071219",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 285,
    "deletions": 268,
    "changed_files": 4,
    "commits": 11,
    "review_comments": 34,
    "comments": 11
  },
  "events": [
    {
      "event": "labeled",
      "id": 5793138648,
      "node_id": "LE_lADOABII585AqXEUzwAAAAFZTEfY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5793138648",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T14:20:43Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "commented",
      "id": 997980484,
      "node_id": "IC_kwDOABII5847e_lE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997980484",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T14:36:28Z",
      "updated_at": "2021-12-20T14:36:28Z",
      "author_association": "MEMBER",
      "body": "Concept ACK based on the description",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-997980484",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23826"
    },
    {
      "event": "commented",
      "id": 997995730,
      "node_id": "IC_kwDOABII5847fDTS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997995730",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T14:55:32Z",
      "updated_at": "2021-12-20T14:55:32Z",
      "author_association": "MEMBER",
      "body": "Strong concept ACK!",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-997995730",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23826"
    },
    {
      "event": "subscribed",
      "id": 5793363269,
      "node_id": "SE_lADOABII585AqXEUzwAAAAFZT7VF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5793363269",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T14:57:21Z"
    },
    {
      "event": "commented",
      "id": 997997825,
      "node_id": "IC_kwDOABII5847fD0B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997997825",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T14:58:02Z",
      "updated_at": "2021-12-20T14:58:02Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-997997825",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23826"
    },
    {
      "event": "commented",
      "id": 998434676,
      "node_id": "IC_kwDOABII5847gud0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998434676",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T03:12:39Z",
      "updated_at": "2021-12-28T06:16:11Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23807](https://github.com/bitcoin/bitcoin/pull/23807) (p2p: Remove GetAdjustedTime() from AddrMan by w0xlt)\n* [#23373](https://github.com/bitcoin/bitcoin/pull/23373) (test: Parse command line arguments from unit and fuzz tests, make addrman consistency check ratio easier to change by vasild)\n* [#22910](https://github.com/bitcoin/bitcoin/pull/22910) ([RFC] Encapsulate asmap in NetGroupManager by jnewbery)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-998434676",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23826"
    },
    {
      "event": "reviewed",
      "id": 837631287,
      "node_id": "PRR_kwDOABII584x7T03",
      "url": null,
      "actor": null,
      "commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks great. Just minor comments inline.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#pullrequestreview-837631287",
      "submitted_at": "2021-12-21T18:36:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
    },
    {
      "event": "reviewed",
      "id": 839325958,
      "node_id": "PRR_kwDOABII584yBxkG",
      "url": null,
      "actor": null,
      "commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "tACK 250479a",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#pullrequestreview-839325958",
      "submitted_at": "2021-12-23T13:04:31Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5810681639,
      "node_id": "HRFPE_lADOABII585AqXEUzwAAAAFaV_cn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5810681639",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-23T16:13:07Z"
    },
    {
      "event": "commented",
      "id": 1000424438,
      "node_id": "IC_kwDOABII5847oUP2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1000424438",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-23T16:57:43Z",
      "updated_at": "2021-12-23T16:57:43Z",
      "author_association": "MEMBER",
      "body": "Thanks for the reviews! \r\n@jnewbery I believe I have addressed all your points in my push.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1000424438",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23826"
    },
    {
      "event": "mentioned",
      "id": 5810851749,
      "node_id": "MEE_lADOABII585AqXEUzwAAAAFaWo-l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5810851749",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-23T16:57:44Z"
    },
    {
      "event": "subscribed",
      "id": 5810851759,
      "node_id": "SE_lADOABII585AqXEUzwAAAAFaWo-v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5810851759",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-23T16:57:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5810861246,
      "node_id": "HRFPE_lADOABII585AqXEUzwAAAAFaWrS-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5810861246",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-23T17:00:26Z"
    },
    {
      "event": "reviewed",
      "id": 840439160,
      "node_id": "PRR_kwDOABII584yGBV4",
      "url": null,
      "actor": null,
      "commit_id": "02f5a618dc418da2d6e4af141774dc24a1c6a65d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "tACK https://github.com/bitcoin/bitcoin/pull/23826/commits/5ecdaaf4d024d09fbcaa24add0de7baaa4c425de\r\n\r\nThis is great stuff! Rebased on master and ran the unit tests for each commit, everything looks good. I had one suggestion regarding `Good()`. I recompiled with my changes and everything still passes - feel free to ping me for a re-ack if you decide to take the suggestion",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#pullrequestreview-840439160",
      "submitted_at": "2021-12-27T15:50:15Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
    },
    {
      "event": "commented",
      "id": 1002070614,
      "node_id": "IC_kwDOABII5847umJW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1002070614",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-28T12:22:35Z",
      "updated_at": "2021-12-28T12:22:35Z",
      "author_association": "MEMBER",
      "body": "utACK 5ecdaaf4d024d09fbcaa24add0de7baaa4c425de\r\n\r\nI'd be happy to rereview if you wanted to address the three remaining review comments:\r\n\r\n- doxygen comment for `FindAddressEntry()` incorrectly refers to `nullptr` instead of `nullopt` (https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775880634)\r\n- magic value `400` can be commented (https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775881573)\r\n- return value of `Good()` can be checked (https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775550847)",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1002070614",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23826"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRhZDVmNzYwMjExZGYzMTRkNjUwOTk5ZTBhNzZlZGIwMTUxYjRmZTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dad5f760211df314d650999e0a76edb0151b4fe1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dad5f760211df314d650999e0a76edb0151b4fe1",
      "tree": {
        "sha": "8e2ea058429dcf71f4729f572d83e5dbf375ad98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e2ea058429dcf71f4729f572d83e5dbf375ad98"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7551ae81e1a9d5bf14b434bce7528ac000d8afe1",
          "sha": "7551ae81e1a9d5bf14b434bce7528ac000d8afe1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7551ae81e1a9d5bf14b434bce7528ac000d8afe1"
        }
      ],
      "message": "addrman: Introduce a test-only function to lookup addresses\n\nCo-Authored-By: Martin Zumsande <mzumsande@gmail.com>",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-28T16:26:24Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-12-09T18:25:22Z"
      },
      "sha": "dad5f760211df314d650999e0a76edb0151b4fe1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJiYTFlNzRlNTlhMzI1Y2E2Y2IxNDA3NTcwNjdkZDVlMGM3YzI0OWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ba1e74e59a325ca6cb140757067dd5e0c7c249b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2ba1e74e59a325ca6cb140757067dd5e0c7c249b",
      "tree": {
        "sha": "0a27dad7386bd5d7cdf1400ea6095089daf57552",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a27dad7386bd5d7cdf1400ea6095089daf57552"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dad5f760211df314d650999e0a76edb0151b4fe1",
          "sha": "dad5f760211df314d650999e0a76edb0151b4fe1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dad5f760211df314d650999e0a76edb0151b4fe1"
        }
      ],
      "message": "test: Update addrman_serialization unit test to use AddrMan's interface\n\nBy updating the test to use FindEntry, it no longer needs to reach into\nAddrMan's internals (via GetBucketAndEntry) to assert expected\nbehaviors.",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-28T16:26:24Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-09-16T22:30:24Z"
      },
      "sha": "2ba1e74e59a325ca6cb140757067dd5e0c7c249b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDViN2FhYzM0ZjIzNjM4MjJjM2ExY2ZhZmRhOGZmYzk1Mjg5MDUwNTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b7aac34f2363822c3a1cfafda8ffc9528905058",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5b7aac34f2363822c3a1cfafda8ffc9528905058",
      "tree": {
        "sha": "7b8dd25db47d7b13a973e2e35afd24d31d592bbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b8dd25db47d7b13a973e2e35afd24d31d592bbf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ba1e74e59a325ca6cb140757067dd5e0c7c249b",
          "sha": "2ba1e74e59a325ca6cb140757067dd5e0c7c249b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2ba1e74e59a325ca6cb140757067dd5e0c7c249b"
        }
      ],
      "message": "test: delete unused GetBucketAndEntry function",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-28T16:26:24Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-09-22T00:43:11Z"
      },
      "sha": "5b7aac34f2363822c3a1cfafda8ffc9528905058"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFjNjVkNDI3YmJmNjFiYjU1OGNmN2UxOGY3YWZmOTliMTlmNjg1MDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c65d427bbf61bb558cf7e18f7aff99b19f68508",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1c65d427bbf61bb558cf7e18f7aff99b19f68508",
      "tree": {
        "sha": "28de7b0a31712dcd3895bd12876bac5222ad9262",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28de7b0a31712dcd3895bd12876bac5222ad9262"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b7aac34f2363822c3a1cfafda8ffc9528905058",
          "sha": "5b7aac34f2363822c3a1cfafda8ffc9528905058",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5b7aac34f2363822c3a1cfafda8ffc9528905058"
        }
      ],
      "message": "test: Inline SimConnFail function\n\nNo need for a function, since it is only used once.\n\nCo-Authored-By: Amiti Uttarwar <amiti@uttarwar.org>",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-28T18:36:22Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-12T21:37:34Z"
      },
      "sha": "1c65d427bbf61bb558cf7e18f7aff99b19f68508"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA1Mzg1MjAwOTFiZjI5ODJhMDI5YTAyOTg4MzU0MDBmNWFmYmRjMTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0538520091bf2982a029a0298835400f5afbdc15",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0538520091bf2982a029a0298835400f5afbdc15",
      "tree": {
        "sha": "1e35e3344eb81239d966a9080f410af6aa2ec7f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e35e3344eb81239d966a9080f410af6aa2ec7f7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c65d427bbf61bb558cf7e18f7aff99b19f68508",
          "sha": "1c65d427bbf61bb558cf7e18f7aff99b19f68508",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1c65d427bbf61bb558cf7e18f7aff99b19f68508"
        }
      ],
      "message": "test: use AddrMan instead of AddrManTest where possible\n\nSwitches to AddrMan for tests that use no features of AddrManTest.\nAlso removes unusued AddrManTest variables\n\nCo-Authored-By: Amiti Uttarwar <amiti@uttarwar.org>",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-28T20:54:49Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-12T21:15:49Z"
      },
      "sha": "0538520091bf2982a029a0298835400f5afbdc15"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI2OTZkNzg3MGIyOTIzMjA1NzYwMGRmNWRkZDgzNTE4ODgyNTNiOTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b696d7870b29232057600df5ddd8351888253b95",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b696d7870b29232057600df5ddd8351888253b95",
      "tree": {
        "sha": "478f3f2bc7f466884068da24d8b6144001969c84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/478f3f2bc7f466884068da24d8b6144001969c84"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0538520091bf2982a029a0298835400f5afbdc15",
          "sha": "0538520091bf2982a029a0298835400f5afbdc15",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0538520091bf2982a029a0298835400f5afbdc15"
        }
      ],
      "message": "test: Remove tests for internal helper functions\n\nThe logic of these functions is already covered by existing unit tests\nusing publicly exposed functions of the interface.\nTherefore, removing them does not decrease test coverage.",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-28T20:54:51Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-12T23:10:52Z"
      },
      "sha": "b696d7870b29232057600df5ddd8351888253b95"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYwZTVlZmI4MjQ5M2Y3YTE0NTgwMzM1Y2U3MTlkNWJlODFjODcxM2U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0e5efb82493f7a14580335ce719d5be81c8713e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f0e5efb82493f7a14580335ce719d5be81c8713e",
      "tree": {
        "sha": "51f419ff0ee3a363b6cb0c4d347bb38103b066f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51f419ff0ee3a363b6cb0c4d347bb38103b066f5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b696d7870b29232057600df5ddd8351888253b95",
          "sha": "b696d7870b29232057600df5ddd8351888253b95",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b696d7870b29232057600df5ddd8351888253b95"
        }
      ],
      "message": "test: Remove unused AddrManTest class",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-28T20:54:51Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-12T23:18:56Z"
      },
      "sha": "f0e5efb82493f7a14580335ce719d5be81c8713e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYwMmVlZThjODc4NGRmYzhkYjgwYTIxYWI2NTA4ZjdjOTkyOTgyNTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f02eee8c8784dfc8db80a21ab6508f7c99298255",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f02eee8c8784dfc8db80a21ab6508f7c99298255",
      "tree": {
        "sha": "eb3c143363d49f14a5666545d5a9989ad812b809",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb3c143363d49f14a5666545d5a9989ad812b809"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0e5efb82493f7a14580335ce719d5be81c8713e",
          "sha": "f0e5efb82493f7a14580335ce719d5be81c8713e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f0e5efb82493f7a14580335ce719d5be81c8713e"
        }
      ],
      "message": "test: introduce utility function to retrieve an addrman",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-28T20:54:51Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-23T14:46:11Z"
      },
      "sha": "f02eee8c8784dfc8db80a21ab6508f7c99298255"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU4ODBiYjc4MzZkYWIyMDE4MDQ5MzkwODg0MjIwMTc3YzZkYjliOTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e880bb7836dab2018049390884220177c6db9b92",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e880bb7836dab2018049390884220177c6db9b92",
      "tree": {
        "sha": "c103e64be78cbf72bf6df8260f1c6bcc3901ccea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c103e64be78cbf72bf6df8260f1c6bcc3901ccea"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f02eee8c8784dfc8db80a21ab6508f7c99298255",
          "sha": "f02eee8c8784dfc8db80a21ab6508f7c99298255",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f02eee8c8784dfc8db80a21ab6508f7c99298255"
        }
      ],
      "message": "test: Add test for updating addrman entries\n\nThis covers Connected() which updates nTime, and SetServices()\nwhich updates nServices",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-28T20:54:51Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-09-13T21:45:13Z"
      },
      "sha": "e880bb7836dab2018049390884220177c6db9b92"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5822633036,
      "node_id": "HRFPE_lADOABII585AqXEUzwAAAAFbDlRM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5822633036",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-28T20:57:31Z"
    },
    {
      "event": "commented",
      "id": 1002279886,
      "node_id": "IC_kwDOABII5847vZPO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1002279886",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-28T21:00:24Z",
      "updated_at": "2021-12-28T21:00:24Z",
      "author_association": "MEMBER",
      "body": "I pushed an update that addresses the outstanding comments.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1002279886",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23826"
    },
    {
      "event": "commented",
      "id": 1002574899,
      "node_id": "IC_kwDOABII5847whQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1002574899",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-29T12:38:52Z",
      "updated_at": "2021-12-29T12:38:52Z",
      "author_association": "MEMBER",
      "body": "reACK https://github.com/bitcoin/bitcoin/pull/23826/commits/26046a12473ad0e342ec200b82184bc1336cf6f3\r\n\r\nverified updates with `git range-diff  5ecdaaf...26046a1`",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1002574899",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23826"
    },
    {
      "event": "reviewed",
      "id": 841383105,
      "node_id": "PRR_kwDOABII584yJnzB",
      "url": null,
      "actor": null,
      "commit_id": "26046a12473ad0e342ec200b82184bc1336cf6f3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 26046a12473ad0e342ec200b82184bc1336cf6f3\r\n\r\nVerified range-diff. Only changes are the suggestions in https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1002070614.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#pullrequestreview-841383105",
      "submitted_at": "2021-12-29T12:46:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRmMWJiNDY3YjU1NmVjOTNjOWI4Zjc1ODc4M2ZkYTRkMDUwZGE0OTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f1bb467b556ec93c9b8f758783fda4d050da491",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4f1bb467b556ec93c9b8f758783fda4d050da491",
      "tree": {
        "sha": "7bf9bbebd45d17228c144e8f023d25ce1499d162",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bf9bbebd45d17228c144e8f023d25ce1499d162"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e880bb7836dab2018049390884220177c6db9b92",
          "sha": "e880bb7836dab2018049390884220177c6db9b92",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e880bb7836dab2018049390884220177c6db9b92"
        }
      ],
      "message": "test: Add test for multiplicity in addrman new tables",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2022-01-03T21:25:40Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-09-22T23:00:36Z"
      },
      "sha": "4f1bb467b556ec93c9b8f758783fda4d050da491"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVhNGM5ZmQ0YWI5YWFhMmU4ZjJjMmUzOGE3NWM5ZjA1ZDBiZmM4NjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "tree": {
        "sha": "5763e3974acf70c755cd983ef8f70d925c6eae11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5763e3974acf70c755cd983ef8f70d925c6eae11"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f1bb467b556ec93c9b8f758783fda4d050da491",
          "sha": "4f1bb467b556ec93c9b8f758783fda4d050da491",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4f1bb467b556ec93c9b8f758783fda4d050da491"
        }
      ],
      "message": "test: Cover eviction by timeout in addrman_evictionworks",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2022-01-03T21:25:45Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-12-14T12:28:47Z"
      },
      "sha": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5837238660,
      "node_id": "HRFPE_lADOABII585AqXEUzwAAAAFb7TGE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5837238660",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-03T21:27:16Z"
    },
    {
      "event": "commented",
      "id": 1004375859,
      "node_id": "IC_kwDOABII58473Y8z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004375859",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-03T21:36:39Z",
      "updated_at": "2022-01-03T21:36:39Z",
      "author_association": "MEMBER",
      "body": "Made another push, fixing a typo. Btw, this conflicts with #23373, which has been open a while longer but seems close - happy to rebase if that gets merged first.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1004375859",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23826"
    },
    {
      "event": "commented",
      "id": 1004693788,
      "node_id": "IC_kwDOABII58474mkc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004693788",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-04T10:30:54Z",
      "updated_at": "2022-01-04T10:30:54Z",
      "author_association": "MEMBER",
      "body": "ACK ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1004693788",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23826"
    },
    {
      "event": "commented",
      "id": 1004702574,
      "node_id": "IC_kwDOABII58474otu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004702574",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-04T10:44:34Z",
      "updated_at": "2022-01-04T10:44:34Z",
      "author_association": "MEMBER",
      "body": "reACK https://github.com/bitcoin/bitcoin/pull/23826/commits/ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866\r\n\r\nverified with git range-diff",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1004702574",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23826"
    },
    {
      "event": "merged",
      "id": 5841000261,
      "node_id": "ME_lADOABII585AqXEUzwAAAAFcJpdF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5841000261",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4ee78450fff09781d6d0e3e02a486f30428d72d2",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ee78450fff09781d6d0e3e02a486f30428d72d2",
      "created_at": "2022-01-04T15:08:21Z"
    },
    {
      "event": "closed",
      "id": 5841000276,
      "node_id": "CE_lADOABII585AqXEUzwAAAAFcJpdU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5841000276",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-04T15:08:21Z"
    },
    {
      "event": "referenced",
      "id": 5842245716,
      "node_id": "REFE_lADOABII585AqXEUzwAAAAFcOZhU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5842245716",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ae95672eea9b300178e33939e41cdf101c658881",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/ae95672eea9b300178e33939e41cdf101c658881",
      "created_at": "2022-01-04T18:44:54Z"
    },
    {
      "event": "locked",
      "id": 8149652711,
      "node_id": "LOE_lADOABII585AqXEUzwAAAAHlwdTn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8149652711",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-04T10:06:24Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 8239413661,
      "node_id": "HRDE_lADOABII585AqXEUzwAAAAHrG3md",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8239413661",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-16T18:47:11Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773278363",
      "pull_request_review_id": 837631287,
      "id": 773278363,
      "node_id": "PRRC_kwDOABII584uF0qb",
      "diff_hunk": "@@ -930,6 +930,31 @@ std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision_()\n     return {info_old, info_old.nLastTry};\n }\n \n+std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& addr)\n+{\n+    AssertLockHeld(cs);\n+\n+    int nId;\n+    AddrInfo* addr_info_temp = Find(addr, &nId);",
      "path": "src/addrman.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`nId` is unused. Try:\r\n\r\n```suggestion\r\n    AddrInfo* addr_info_temp = Find(addr);\r\n```",
      "created_at": "2021-12-21T16:27:24Z",
      "updated_at": "2021-12-21T18:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773278363",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773278363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": 937,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 938,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773278921",
      "pull_request_review_id": 837631287,
      "id": 773278921,
      "node_id": "PRRC_kwDOABII584uF0zJ",
      "diff_hunk": "@@ -142,6 +165,15 @@ class AddrMan\n     void SetServices(const CService& addr, ServiceFlags nServices);\n \n     const std::vector<bool>& GetAsmap() const;\n+\n+    /** Test-only function\n+     * Find the address record in AddrMan and return information about its\n+     * position.\n+     * @param[in] addr       The address record to look up.\n+     * @return               Information about the address record in AddrMan\n+     *                       nullptr if address is not found",
      "path": "src/addrman.h",
      "position": null,
      "original_position": 40,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n     * @return               Information about the address record in AddrMan or\r\n     *                       nullopt if address is not found.\r\n```",
      "created_at": "2021-12-21T16:28:10Z",
      "updated_at": "2021-12-21T18:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773278921",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773278921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": 173,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773279660",
      "pull_request_review_id": 837631287,
      "id": 773279660,
      "node_id": "PRRC_kwDOABII584uF0-s",
      "diff_hunk": "@@ -930,6 +930,31 @@ std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision_()\n     return {info_old, info_old.nLastTry};\n }\n \n+std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& addr)\n+{\n+    AssertLockHeld(cs);\n+\n+    int nId;\n+    AddrInfo* addr_info_temp = Find(addr, &nId);\n+\n+    if (!addr_info_temp) { return std::nullopt; }",
      "path": "src/addrman.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need for braces if the if block is just one statement:\r\n\r\n```suggestion\r\n    if (!addr_info_temp) return std::nullopt;\r\n```\r\n\r\nor:\r\n\r\n```suggestion\r\n    if (!addr_info_temp) {\r\n        return std::nullopt;\r\n    }\r\n```",
      "created_at": "2021-12-21T16:29:07Z",
      "updated_at": "2021-12-21T18:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773279660",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773279660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 940,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773298505",
      "pull_request_review_id": 837631287,
      "id": 773298505,
      "node_id": "PRRC_kwDOABII584uF5lJ",
      "diff_hunk": "@@ -22,6 +22,29 @@ class AddrManImpl;\n /** Default for -checkaddrman */\n static constexpr int32_t DEFAULT_ADDRMAN_CONSISTENCY_CHECKS{0};\n \n+/** Test-only struct, capturing info about an address in AddrMan */\n+struct AddressPosition {\n+    // Whether the address is in the new or tried table\n+    bool tried{false};",
      "path": "src/addrman.h",
      "position": null,
      "original_position": 7,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since this struct is only used to pass data out of the module, what do you think about making all the members const, eg:\r\n\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\nindex bb3c22ebdb..dba0b3a4a6 100644\r\n--- a/src/addrman.cpp\r\n+++ b/src/addrman.cpp\r\n@@ -940,19 +940,19 @@ std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& ad\r\n     if (!addr_info_temp) { return std::nullopt; }\r\n     const AddrInfo& addr_info = *addr_info_temp;\r\n \r\n-    AddressPosition entry;\r\n     if(addr_info.fInTried) {\r\n-        entry.tried = true;\r\n-        entry.multiplicity = 1;\r\n-        entry.bucket = addr_info.GetTriedBucket(nKey, m_asmap);\r\n-        entry.position = addr_info.GetBucketPosition(nKey, false, entry.bucket);\r\n-        return entry;\r\n+        int bucket{addr_info.GetTriedBucket(nKey, m_asmap)};\r\n+        return AddressPosition(/*tried=*/true,\r\n+                               /*multiplicity=*/1,\r\n+                               /*bucket=*/bucket,\r\n+                               /*position=*/addr_info.GetBucketPosition(nKey, false, bucket));\r\n+    } else {\r\n+        int bucket{addr_info.GetNewBucket(nKey, m_asmap)};\r\n+        return AddressPosition(/*tried=*/false,\r\n+                               /*multiplicity=*/addr_info.nRefCount,\r\n+                               /*bucket=*/bucket,\r\n+                               /*position=*/addr_info.GetBucketPosition(nKey, true, bucket));\r\n     }\r\n-\r\n-    entry.multiplicity = addr_info.nRefCount;\r\n-    entry.bucket = addr_info.GetNewBucket(nKey, m_asmap);\r\n-    entry.position = addr_info.GetBucketPosition(nKey, true, entry.bucket);\r\n-    return entry;\r\n }\r\n \r\n void AddrManImpl::Check() const\r\ndiff --git a/src/addrman.h b/src/addrman.h\r\nindex 7cda33c185..68399fbd0d 100644\r\n--- a/src/addrman.h\r\n+++ b/src/addrman.h\r\n@@ -25,24 +25,28 @@ static constexpr int32_t DEFAULT_ADDRMAN_CONSISTENCY_CHECKS{0};\r\n /** Test-only struct, capturing info about an address in AddrMan */\r\n struct AddressPosition {\r\n     // Whether the address is in the new or tried table\r\n-    bool tried{false};\r\n+    const bool tried;\r\n \r\n     // Addresses in the tried table should always have a multiplicity of 1.\r\n     // Addresses in the new table can have multiplicity between 1 and\r\n     // ADDRMAN_NEW_BUCKETS_PER_ADDRESS\r\n-    int multiplicity{0};\r\n+    const int multiplicity;\r\n \r\n     // If the address is in the new table, the bucket and position are\r\n     // populated based on the first source who sent the address.\r\n     // In certain edge cases, this may not be where the address is currently\r\n     // located.\r\n-    int bucket{0};\r\n-    int position{0};\r\n+    const int bucket;\r\n+    const int position;\r\n \r\n     bool operator==(AddressPosition other) {\r\n         return std::tie(tried, multiplicity, bucket, position) ==\r\n                std::tie(other.tried, other.multiplicity, other.bucket, other.position);\r\n     }\r\n+\r\n+    explicit AddressPosition(bool tried_in, int multiplicity_in, int bucket_in, int position_in)\r\n+        : tried{tried_in}, multiplicity{multiplicity_in}, bucket{bucket_in}, position{position_in} {}\r\n+\r\n };\r\n \r\n /** Stochastic address manager\r\ndiff --git a/src/test/addrman_tests.cpp b/src/test/addrman_tests.cpp\r\nindex a4d57e3435..bf09d631d4 100644\r\n--- a/src/test/addrman_tests.cpp\r\n+++ b/src/test/addrman_tests.cpp\r\n@@ -237,8 +237,8 @@ BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\r\n         addr.nTime = start_time + i;\r\n         addrman->Add({addr}, source);\r\n     }\r\n-    addr_pos = addrman->FindAddressEntry(addr).value();\r\n-    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 8U);\r\n+    auto addr_pos2 = addrman->FindAddressEntry(addr).value();\r\n+    BOOST_CHECK_EQUAL(addr_pos2.multiplicity, 8U);\r\n     // multiplicity doesn't affect size\r\n     BOOST_CHECK_EQUAL(addrman->size(), 1U);\r\n }\r\n```\r\n</details>\r\n\r\n(When we move to c++20 we can remove the ctor definition and use designated initializers)\r\n\r\nThe advantage to this is that all the fields _must_ be filled explicitly by `FindAddressEntry()` so there's no risk that we accidentally pass out a structure where one of the fields has been incorrectly set to the default value.",
      "created_at": "2021-12-21T16:55:04Z",
      "updated_at": "2021-12-21T18:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773298505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773298505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773300313",
      "pull_request_review_id": 837631287,
      "id": 773300313,
      "node_id": "PRRC_kwDOABII584uF6BZ",
      "diff_hunk": "@@ -930,6 +930,31 @@ std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision_()\n     return {info_old, info_old.nLastTry};\n }\n \n+std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& addr)\n+{\n+    AssertLockHeld(cs);\n+\n+    int nId;\n+    AddrInfo* addr_info_temp = Find(addr, &nId);\n+\n+    if (!addr_info_temp) { return std::nullopt; }\n+    const AddrInfo& addr_info = *addr_info_temp;",
      "path": "src/addrman.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think there's any value in this creating this reference. You've already got a non-null pointer, so just use the `->` dereference operator to get what you need from it.",
      "created_at": "2021-12-21T16:57:34Z",
      "updated_at": "2021-12-21T18:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773300313",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773300313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 941,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773348729",
      "pull_request_review_id": 837631287,
      "id": 773348729,
      "node_id": "PRRC_kwDOABII584uGF15",
      "diff_hunk": "@@ -107,7 +54,7 @@ BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(addrman_simple)\n {\n-    auto addrman = std::make_unique<AddrManTest>();\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line appears 17 times in the test. It's also very noisy and distracting from the purpose of the test. Perhaps add a utility function to create an addrman:\r\n\r\n```diff\r\nindex a4d57e3435..28a754e079 100644\r\n--- a/src/test/addrman_tests.cpp\r\n+++ b/src/test/addrman_tests.cpp\r\n@@ -49,12 +49,16 @@ static std::vector<bool> FromBytes(const unsigned char* source, int vector_size)\r\n     return result;\r\n }\r\n \r\n+static std::unique_ptr<AddrMan> TestAddrman(std::vector<bool> asmap = std::vector<bool>())\r\n+{\r\n+    return std::make_unique<AddrMan>(asmap, /*deterministic=*/true, /*consistency_check_ratio=*/100);\r\n+}\r\n \r\n BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\r\n \r\n BOOST_AUTO_TEST_CASE(addrman_simple)\r\n {\r\n-    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\r\n+    auto addrman = TestAddrman();\r\n \r\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\r\n \r\n@@ -597,7 +601,7 @@ BOOST_AUTO_TEST_CASE(addrman_serialization)\r\n {\r\n     std::vector<bool> asmap1 = FromBytes(asmap_raw, sizeof(asmap_raw) * 8);\r\n \r\n-    auto addrman_asmap1 = std::make_unique<AddrMan>(asmap1, /*deterministic=*/true, /*consistency_check_ratio=*/100);\r\n+    auto addrman_asmap1 = TestAddrman(asmap1);\r\n     auto addrman_asmap1_dup = std::make_unique<AddrMan>(asmap1, /*deterministic=*/true, /*consistency_check_ratio=*/100);\r\n     auto addrman_noasmap = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\r\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\r\n```\r\n\r\n(I only changed a couple of instances, but you get the idea)",
      "created_at": "2021-12-21T18:13:56Z",
      "updated_at": "2021-12-21T18:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773348729",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773348729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773349992",
      "pull_request_review_id": 837631287,
      "id": 773349992,
      "node_id": "PRRC_kwDOABII584uGGJo",
      "diff_hunk": "@@ -700,72 +597,69 @@ BOOST_AUTO_TEST_CASE(addrman_serialization)\n {\n     std::vector<bool> asmap1 = FromBytes(asmap_raw, sizeof(asmap_raw) * 8);\n \n-    auto addrman_asmap1 = std::make_unique<AddrManTest>(asmap1);\n-    auto addrman_asmap1_dup = std::make_unique<AddrManTest>(asmap1);\n-    auto addrman_noasmap = std::make_unique<AddrManTest>();\n+    auto addrman_asmap1 = std::make_unique<AddrMan>(asmap1, /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    auto addrman_asmap1_dup = std::make_unique<AddrMan>(asmap1, /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    auto addrman_noasmap = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n \n     CAddress addr = CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE);\n     CNetAddr default_source;\n \n-\n     addrman_asmap1->Add({addr}, default_source);\n \n     stream << *addrman_asmap1;\n     // serizalizing/deserializing addrman with the same asmap\n     stream >> *addrman_asmap1_dup;\n \n-    std::pair<int, int> bucketAndEntry_asmap1 = addrman_asmap1->GetBucketAndEntry(addr);\n-    std::pair<int, int> bucketAndEntry_asmap1_dup = addrman_asmap1_dup->GetBucketAndEntry(addr);\n-    BOOST_CHECK(bucketAndEntry_asmap1.second != -1);\n-    BOOST_CHECK(bucketAndEntry_asmap1_dup.second != -1);\n+    AddressPosition addr_pos1 = addrman_asmap1->FindAddressEntry(addr).value();\n+    AddressPosition addr_pos2 = addrman_asmap1_dup->FindAddressEntry(addr).value();\n+    BOOST_CHECK(addr_pos1.multiplicity != 0);\n+    BOOST_CHECK(addr_pos2.multiplicity != 0);\n \n-    BOOST_CHECK(bucketAndEntry_asmap1.first == bucketAndEntry_asmap1_dup.first);\n-    BOOST_CHECK(bucketAndEntry_asmap1.second == bucketAndEntry_asmap1_dup.second);\n+    BOOST_CHECK(addr_pos1 == addr_pos2);\n \n     // deserializing asmaped peers.dat to non-asmaped addrman\n     stream << *addrman_asmap1;\n     stream >> *addrman_noasmap;\n-    std::pair<int, int> bucketAndEntry_noasmap = addrman_noasmap->GetBucketAndEntry(addr);\n-    BOOST_CHECK(bucketAndEntry_noasmap.second != -1);\n-    BOOST_CHECK(bucketAndEntry_asmap1.first != bucketAndEntry_noasmap.first);\n-    BOOST_CHECK(bucketAndEntry_asmap1.second != bucketAndEntry_noasmap.second);\n+    AddressPosition addr_pos3 = addrman_noasmap->FindAddressEntry(addr).value();\n+    BOOST_CHECK(addr_pos3.multiplicity != 0);\n+    BOOST_CHECK(addr_pos1.bucket != addr_pos3.bucket);\n+    BOOST_CHECK(addr_pos1.position != addr_pos3.position);\n \n     // deserializing non-asmaped peers.dat to asmaped addrman\n-    addrman_asmap1 = std::make_unique<AddrManTest>(asmap1);\n-    addrman_noasmap = std::make_unique<AddrManTest>();\n+    addrman_asmap1 = std::make_unique<AddrMan>(asmap1, /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    addrman_noasmap = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n     addrman_noasmap->Add({addr}, default_source);\n     stream << *addrman_noasmap;\n     stream >> *addrman_asmap1;\n-    std::pair<int, int> bucketAndEntry_asmap1_deser = addrman_asmap1->GetBucketAndEntry(addr);\n-    BOOST_CHECK(bucketAndEntry_asmap1_deser.second != -1);\n-    BOOST_CHECK(bucketAndEntry_asmap1_deser.first != bucketAndEntry_noasmap.first);\n-    BOOST_CHECK(bucketAndEntry_asmap1_deser.first == bucketAndEntry_asmap1_dup.first);\n-    BOOST_CHECK(bucketAndEntry_asmap1_deser.second == bucketAndEntry_asmap1_dup.second);\n+\n+    AddressPosition addr_pos4 = addrman_asmap1->FindAddressEntry(addr).value();\n+    BOOST_CHECK(addr_pos4.multiplicity != 0);\n+    BOOST_CHECK(addr_pos4.bucket != addr_pos3.bucket);\n+    BOOST_CHECK(addr_pos4 == addr_pos2);\n \n     // used to map to different buckets, now maps to the same bucket.\n-    addrman_asmap1 = std::make_unique<AddrManTest>(asmap1);\n-    addrman_noasmap = std::make_unique<AddrManTest>();\n+    addrman_asmap1 = std::make_unique<AddrMan>(asmap1, /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    addrman_noasmap = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n     CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE);\n     CAddress addr2 = CAddress(ResolveService(\"250.2.1.1\"), NODE_NONE);\n     addrman_noasmap->Add({addr, addr2}, default_source);\n-    std::pair<int, int> bucketAndEntry_noasmap_addr1 = addrman_noasmap->GetBucketAndEntry(addr1);\n-    std::pair<int, int> bucketAndEntry_noasmap_addr2 = addrman_noasmap->GetBucketAndEntry(addr2);\n-    BOOST_CHECK(bucketAndEntry_noasmap_addr1.first != bucketAndEntry_noasmap_addr2.first);\n-    BOOST_CHECK(bucketAndEntry_noasmap_addr1.second != bucketAndEntry_noasmap_addr2.second);",
      "path": "src/test/addrman_tests.cpp",
      "position": 536,
      "original_position": 518,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see you've removed the check about the position not matching. That looks like a good change to me since it doesn't make much sense to compare the positions of items in different buckets :+1: ",
      "created_at": "2021-12-21T18:16:10Z",
      "updated_at": "2021-12-21T18:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773349992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773349992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 755,
      "original_line": 755,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773351849",
      "pull_request_review_id": 837631287,
      "id": 773351849,
      "node_id": "PRRC_kwDOABII584uGGmp",
      "diff_hunk": "@@ -828,114 +722,126 @@ BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n \n         // Unable to add duplicate address to tried table.\n-        BOOST_CHECK(!addrman.Good(addr));\n+        BOOST_CHECK(!addrman->Good(addr));\n \n         // Verify duplicate address not marked as a collision.\n-        BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+        BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n     }\n }\n \n BOOST_AUTO_TEST_CASE(addrman_noevict)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     // Add 35 addresses.\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 36; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // No collision yet.\n-        BOOST_CHECK(addrman.Good(addr));\n+        BOOST_CHECK(addrman->Good(addr));\n     }\n \n     // Collision in tried table between 36 and 19.\n     CService addr36 = ResolveService(\"250.1.1.36\");\n-    BOOST_CHECK(addrman.Add({CAddress(addr36, NODE_NONE)}, source));\n-    BOOST_CHECK(!addrman.Good(addr36));\n-    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().first.ToString(), \"250.1.1.19:0\");\n+    BOOST_CHECK(addrman->Add({CAddress(addr36, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Good(addr36));\n+    BOOST_CHECK_EQUAL(addrman->SelectTriedCollision().first.ToString(), \"250.1.1.19:0\");\n \n     // 36 should be discarded and 19 not evicted.\n     // This means we keep 19 in the tried table and\n     // 36 stays in the new table.\n-    addrman.ResolveCollisions();\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+    addrman->ResolveCollisions();\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n \n     // Lets create two collisions.\n     for (unsigned int i = 37; i < 59; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n-        BOOST_CHECK(addrman.Good(addr));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Good(addr));\n     }\n \n     // Cause a collision in the tried table.\n     CService addr59 = ResolveService(\"250.1.1.59\");\n-    BOOST_CHECK(addrman.Add({CAddress(addr59, NODE_NONE)}, source));\n-    BOOST_CHECK(!addrman.Good(addr59));\n+    BOOST_CHECK(addrman->Add({CAddress(addr59, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Good(addr59));\n \n-    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().first.ToString(), \"250.1.1.10:0\");\n+    BOOST_CHECK_EQUAL(addrman->SelectTriedCollision().first.ToString(), \"250.1.1.10:0\");\n \n     // Cause a second collision in the new table.\n-    BOOST_CHECK(!addrman.Add({CAddress(addr36, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Add({CAddress(addr36, NODE_NONE)}, source));\n \n     // 36 still cannot be moved from new to tried due to colliding with 19\n-    BOOST_CHECK(!addrman.Good(addr36));\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() != \"[::]:0\");\n+    BOOST_CHECK(!addrman->Good(addr36));\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() != \"[::]:0\");\n \n     // Resolve all collisions.\n-    addrman.ResolveCollisions();\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+    addrman->ResolveCollisions();\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n }\n \n BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n-    BOOST_CHECK(addrman.size() == 0);\n+    BOOST_CHECK(addrman->size() == 0);\n \n     // Empty addrman should return blank addrman info.\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n \n     // Add 35 addresses\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 36; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // No collision yet.\n-        BOOST_CHECK(addrman.Good(addr));\n+        BOOST_CHECK(addrman->Good(addr));\n     }\n \n     // Collision between 36 and 19.\n     CService addr = ResolveService(\"250.1.1.36\");\n-    BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n-    BOOST_CHECK(!addrman.Good(addr));\n+    BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Good(addr));\n \n-    auto info = addrman.SelectTriedCollision().first;\n+    auto info = addrman->SelectTriedCollision().first;\n     BOOST_CHECK_EQUAL(info.ToString(), \"250.1.1.19:0\");\n \n     // Ensure test of address fails, so that it is evicted.\n-    addrman.SimConnFail(info);\n+    int64_t nLastSuccess = 1;\n+    // Set last good connection in the deep past.\n+    addrman->Good(info, nLastSuccess);",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 702,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need for this local variable:\r\n\r\n```suggestion\r\n    // Set last good connection in the deep past.\r\n    addrman->Good(info, /*nTime=*/1);\r\n```",
      "created_at": "2021-12-21T18:19:18Z",
      "updated_at": "2021-12-21T18:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773351849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773351849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": 812,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 814,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773355331",
      "pull_request_review_id": 837631287,
      "id": 773355331,
      "node_id": "PRRC_kwDOABII584uGHdD",
      "diff_hunk": "@@ -1044,5 +950,35 @@ BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n     BOOST_CHECK_THROW(ReadFromStream(addrman2, ssPeers2), std::ios_base::failure);\n }\n \n+BOOST_AUTO_TEST_CASE(addrman_update_address)\n+{\n+    // Tests updating nTime via Connected() and nServices via SetServices()\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CNetAddr source{ResolveIP(\"252.2.2.2\")};\n+    CAddress addr{CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE)};\n+\n+    int64_t startTime{GetAdjustedTime() - 10000};",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 756,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Be aware that using `GetAdjustedTime()` will be a silent conflict with https://github.com/bitcoin/bitcoin/pull/23807",
      "created_at": "2021-12-21T18:25:13Z",
      "updated_at": "2021-12-21T18:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773355331",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773355331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 960,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773355663",
      "pull_request_review_id": 837631287,
      "id": 773355663,
      "node_id": "PRRC_kwDOABII584uGHiP",
      "diff_hunk": "@@ -1044,5 +950,35 @@ BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n     BOOST_CHECK_THROW(ReadFromStream(addrman2, ssPeers2), std::ios_base::failure);\n }\n \n+BOOST_AUTO_TEST_CASE(addrman_update_address)\n+{\n+    // Tests updating nTime via Connected() and nServices via SetServices()\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CNetAddr source{ResolveIP(\"252.2.2.2\")};\n+    CAddress addr{CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE)};\n+\n+    int64_t startTime{GetAdjustedTime() - 10000};",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 756,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Prefer snake_case for naming local variables in new code:\r\n\r\n```suggestion\r\n    int64_t start_time{GetAdjustedTime() - 10000};\r\n```",
      "created_at": "2021-12-21T18:25:45Z",
      "updated_at": "2021-12-21T18:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773355663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773355663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 960,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773357109",
      "pull_request_review_id": 837631287,
      "id": 773357109,
      "node_id": "PRRC_kwDOABII584uGH41",
      "diff_hunk": "@@ -1044,5 +950,35 @@ BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n     BOOST_CHECK_THROW(ReadFromStream(addrman2, ssPeers2), std::ios_base::failure);\n }\n \n+BOOST_AUTO_TEST_CASE(addrman_update_address)\n+{\n+    // Tests updating nTime via Connected() and nServices via SetServices()\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CNetAddr source{ResolveIP(\"252.2.2.2\")};\n+    CAddress addr{CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE)};\n+\n+    int64_t startTime{GetAdjustedTime() - 10000};\n+    addr.nTime = startTime;\n+    BOOST_CHECK(addrman->Add({addr}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // Updating an addrman entry with a different port doesn't change it\n+    CAddress addr_diff_port{CAddress(ResolveService(\"250.1.1.1\", 8334), NODE_NONE)};\n+    addr_diff_port.nTime = startTime;\n+    addrman->Connected(addr_diff_port);\n+    addrman->SetServices(addr_diff_port, NODE_NETWORK_LIMITED);\n+    std::vector<CAddress> vAddr1{addrman->GetAddr(/*max_addresses=*/ 0, /*max_pct=*/ 0, /*network=*/ std::nullopt)};",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 766,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For consistency:\r\n\r\n```suggestion\r\n    std::vector<CAddress> vAddr1{addrman->GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt)};\r\n```\r\n\r\nSame below.",
      "created_at": "2021-12-21T18:28:13Z",
      "updated_at": "2021-12-21T18:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773357109",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773357109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 970,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773358672",
      "pull_request_review_id": 837631287,
      "id": 773358672,
      "node_id": "PRRC_kwDOABII584uGIRQ",
      "diff_hunk": "@@ -151,119 +98,149 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};",
      "path": "src/test/addrman_tests.cpp",
      "position": 249,
      "original_position": 239,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Again, be aware that this is a silent conflict with #23826.",
      "created_at": "2021-12-21T18:31:09Z",
      "updated_at": "2021-12-21T18:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773358672",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773358672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 225,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773359789",
      "pull_request_review_id": 837631287,
      "id": 773359789,
      "node_id": "PRRC_kwDOABII584uGIit",
      "diff_hunk": "@@ -151,119 +98,149 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};\n+    addr.nTime = start_time;\n+\n+    // test that multiplicity stays at 1 if nTime doesn't increase\n+    for (unsigned int i = 1; i < 20; ++i) {\n+        std::string addr_ip{ToString(i % 256) + \".\" + ToString(i >> 8 % 256) + \".1.1\"};\n+        CNetAddr source{ResolveIP(addr_ip)};\n+        addrman->Add({addr}, source);\n+    }\n+    AddressPosition addr_pos = addrman->FindAddressEntry(addr).value();\n+    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // if nTime increases, an addr can occur in up to 8 buckets\n+    for (unsigned int i = 1; i < 400; ++i) {",
      "path": "src/test/addrman_tests.cpp",
      "position": 265,
      "original_position": 253,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason for 400 in particular? I guess it needs to be larger than 8 in case the bucket/positions collide.",
      "created_at": "2021-12-21T18:33:03Z",
      "updated_at": "2021-12-21T18:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773359789",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773359789"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 241,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774557150",
      "pull_request_review_id": 839325958,
      "id": 774557150,
      "node_id": "PRRC_kwDOABII584uKs3e",
      "diff_hunk": "@@ -142,6 +165,15 @@ class AddrMan\n     void SetServices(const CService& addr, ServiceFlags nServices);\n \n     const std::vector<bool>& GetAsmap() const;\n+\n+    /** Test-only function\n+     * Find the address record in AddrMan and return information about its\n+     * position.\n+     * @param[in] addr       The address record to look up.\n+     * @return               Information about the address record in AddrMan\n+     *                       nullptr if address is not found\n+     */\n+    std::optional<AddressPosition> FindAddressEntry(const CAddress& addr);",
      "path": "src/addrman.h",
      "position": 44,
      "original_position": 42,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: if this is a test-only function, would not it be better to implement it in a derived class in the test file (such as the deleted class `AddrManTest`)?",
      "created_at": "2021-12-23T13:03:40Z",
      "updated_at": "2021-12-23T13:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774557150",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774557150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 178,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774665581",
      "pull_request_review_id": 839474920,
      "id": 774665581,
      "node_id": "PRRC_kwDOABII584uLHVt",
      "diff_hunk": "@@ -930,6 +930,31 @@ std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision_()\n     return {info_old, info_old.nLastTry};\n }\n \n+std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& addr)\n+{\n+    AssertLockHeld(cs);\n+\n+    int nId;\n+    AddrInfo* addr_info_temp = Find(addr, &nId);",
      "path": "src/addrman.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 773278363,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done as suggested.",
      "created_at": "2021-12-23T16:13:24Z",
      "updated_at": "2021-12-23T16:13:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774665581",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774665581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": 937,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 938,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774666783",
      "pull_request_review_id": 839476542,
      "id": 774666783,
      "node_id": "PRRC_kwDOABII584uLHof",
      "diff_hunk": "@@ -930,6 +930,31 @@ std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision_()\n     return {info_old, info_old.nLastTry};\n }\n \n+std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& addr)\n+{\n+    AssertLockHeld(cs);\n+\n+    int nId;\n+    AddrInfo* addr_info_temp = Find(addr, &nId);\n+\n+    if (!addr_info_temp) { return std::nullopt; }",
      "path": "src/addrman.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 773279660,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "took the first suggestoin",
      "created_at": "2021-12-23T16:15:37Z",
      "updated_at": "2021-12-23T16:15:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774666783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774666783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 940,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774667058",
      "pull_request_review_id": 839476932,
      "id": 774667058,
      "node_id": "PRRC_kwDOABII584uLHsy",
      "diff_hunk": "@@ -22,6 +22,29 @@ class AddrManImpl;\n /** Default for -checkaddrman */\n static constexpr int32_t DEFAULT_ADDRMAN_CONSISTENCY_CHECKS{0};\n \n+/** Test-only struct, capturing info about an address in AddrMan */\n+struct AddressPosition {\n+    // Whether the address is in the new or tried table\n+    bool tried{false};",
      "path": "src/addrman.h",
      "position": null,
      "original_position": 7,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 773298505,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, that makes sense! Done as suggested.",
      "created_at": "2021-12-23T16:16:11Z",
      "updated_at": "2021-12-23T16:16:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774667058",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774667058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774667202",
      "pull_request_review_id": 839477152,
      "id": 774667202,
      "node_id": "PRRC_kwDOABII584uLHvC",
      "diff_hunk": "@@ -828,114 +722,126 @@ BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n \n         // Unable to add duplicate address to tried table.\n-        BOOST_CHECK(!addrman.Good(addr));\n+        BOOST_CHECK(!addrman->Good(addr));\n \n         // Verify duplicate address not marked as a collision.\n-        BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+        BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n     }\n }\n \n BOOST_AUTO_TEST_CASE(addrman_noevict)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     // Add 35 addresses.\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 36; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // No collision yet.\n-        BOOST_CHECK(addrman.Good(addr));\n+        BOOST_CHECK(addrman->Good(addr));\n     }\n \n     // Collision in tried table between 36 and 19.\n     CService addr36 = ResolveService(\"250.1.1.36\");\n-    BOOST_CHECK(addrman.Add({CAddress(addr36, NODE_NONE)}, source));\n-    BOOST_CHECK(!addrman.Good(addr36));\n-    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().first.ToString(), \"250.1.1.19:0\");\n+    BOOST_CHECK(addrman->Add({CAddress(addr36, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Good(addr36));\n+    BOOST_CHECK_EQUAL(addrman->SelectTriedCollision().first.ToString(), \"250.1.1.19:0\");\n \n     // 36 should be discarded and 19 not evicted.\n     // This means we keep 19 in the tried table and\n     // 36 stays in the new table.\n-    addrman.ResolveCollisions();\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+    addrman->ResolveCollisions();\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n \n     // Lets create two collisions.\n     for (unsigned int i = 37; i < 59; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n-        BOOST_CHECK(addrman.Good(addr));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Good(addr));\n     }\n \n     // Cause a collision in the tried table.\n     CService addr59 = ResolveService(\"250.1.1.59\");\n-    BOOST_CHECK(addrman.Add({CAddress(addr59, NODE_NONE)}, source));\n-    BOOST_CHECK(!addrman.Good(addr59));\n+    BOOST_CHECK(addrman->Add({CAddress(addr59, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Good(addr59));\n \n-    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().first.ToString(), \"250.1.1.10:0\");\n+    BOOST_CHECK_EQUAL(addrman->SelectTriedCollision().first.ToString(), \"250.1.1.10:0\");\n \n     // Cause a second collision in the new table.\n-    BOOST_CHECK(!addrman.Add({CAddress(addr36, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Add({CAddress(addr36, NODE_NONE)}, source));\n \n     // 36 still cannot be moved from new to tried due to colliding with 19\n-    BOOST_CHECK(!addrman.Good(addr36));\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() != \"[::]:0\");\n+    BOOST_CHECK(!addrman->Good(addr36));\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() != \"[::]:0\");\n \n     // Resolve all collisions.\n-    addrman.ResolveCollisions();\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+    addrman->ResolveCollisions();\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n }\n \n BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n-    BOOST_CHECK(addrman.size() == 0);\n+    BOOST_CHECK(addrman->size() == 0);\n \n     // Empty addrman should return blank addrman info.\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n \n     // Add 35 addresses\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 36; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // No collision yet.\n-        BOOST_CHECK(addrman.Good(addr));\n+        BOOST_CHECK(addrman->Good(addr));\n     }\n \n     // Collision between 36 and 19.\n     CService addr = ResolveService(\"250.1.1.36\");\n-    BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n-    BOOST_CHECK(!addrman.Good(addr));\n+    BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Good(addr));\n \n-    auto info = addrman.SelectTriedCollision().first;\n+    auto info = addrman->SelectTriedCollision().first;\n     BOOST_CHECK_EQUAL(info.ToString(), \"250.1.1.19:0\");\n \n     // Ensure test of address fails, so that it is evicted.\n-    addrman.SimConnFail(info);\n+    int64_t nLastSuccess = 1;\n+    // Set last good connection in the deep past.\n+    addrman->Good(info, nLastSuccess);",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 702,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 773351849,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed",
      "created_at": "2021-12-23T16:16:28Z",
      "updated_at": "2021-12-23T16:16:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774667202",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774667202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": 812,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 814,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774670533",
      "pull_request_review_id": 839481716,
      "id": 774670533,
      "node_id": "PRRC_kwDOABII584uLIjF",
      "diff_hunk": "@@ -151,119 +98,149 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};\n+    addr.nTime = start_time;\n+\n+    // test that multiplicity stays at 1 if nTime doesn't increase\n+    for (unsigned int i = 1; i < 20; ++i) {\n+        std::string addr_ip{ToString(i % 256) + \".\" + ToString(i >> 8 % 256) + \".1.1\"};\n+        CNetAddr source{ResolveIP(addr_ip)};\n+        addrman->Add({addr}, source);\n+    }\n+    AddressPosition addr_pos = addrman->FindAddressEntry(addr).value();\n+    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // if nTime increases, an addr can occur in up to 8 buckets\n+    for (unsigned int i = 1; i < 400; ++i) {",
      "path": "src/test/addrman_tests.cpp",
      "position": 265,
      "original_position": 253,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 773359789,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It needs to be significantly larger than 8 because adding another entry is stochastic and decreases exponentially with existing RefCount (see [code here](https://github.com/bitcoin/bitcoin/blob/7551ae81e1a9d5bf14b434bce7528ac000d8afe1/src/addrman.cpp#L579-L585)). I chose the value such that a multiplicity of 8 is reached with the deterministic addrman and not too many additional tries are wasted.",
      "created_at": "2021-12-23T16:23:06Z",
      "updated_at": "2021-12-23T16:23:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774670533",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774670533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 241,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774671330",
      "pull_request_review_id": 839482860,
      "id": 774671330,
      "node_id": "PRRC_kwDOABII584uLIvi",
      "diff_hunk": "@@ -930,6 +930,31 @@ std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision_()\n     return {info_old, info_old.nLastTry};\n }\n \n+std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& addr)\n+{\n+    AssertLockHeld(cs);\n+\n+    int nId;\n+    AddrInfo* addr_info_temp = Find(addr, &nId);\n+\n+    if (!addr_info_temp) { return std::nullopt; }\n+    const AddrInfo& addr_info = *addr_info_temp;",
      "path": "src/addrman.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 773300313,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed the reference",
      "created_at": "2021-12-23T16:24:42Z",
      "updated_at": "2021-12-23T16:24:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774671330",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774671330"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 941,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774673099",
      "pull_request_review_id": 839485229,
      "id": 774673099,
      "node_id": "PRRC_kwDOABII584uLJLL",
      "diff_hunk": "@@ -107,7 +54,7 @@ BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(addrman_simple)\n {\n-    auto addrman = std::make_unique<AddrManTest>();\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 773348729,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested. These calls are also changed in #23373 but I think that these changes are compatible, i.e. `TestAddrman()` should call the `GetCheckRatio()` function introduced there.",
      "created_at": "2021-12-23T16:27:56Z",
      "updated_at": "2021-12-23T16:27:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774673099",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774673099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774676351",
      "pull_request_review_id": 839489724,
      "id": 774676351,
      "node_id": "PRRC_kwDOABII584uLJ9_",
      "diff_hunk": "@@ -1044,5 +950,35 @@ BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n     BOOST_CHECK_THROW(ReadFromStream(addrman2, ssPeers2), std::ios_base::failure);\n }\n \n+BOOST_AUTO_TEST_CASE(addrman_update_address)\n+{\n+    // Tests updating nTime via Connected() and nServices via SetServices()\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CNetAddr source{ResolveIP(\"252.2.2.2\")};\n+    CAddress addr{CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE)};\n+\n+    int64_t startTime{GetAdjustedTime() - 10000};",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 756,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 773355331,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks, I am following that PR and will update in case it gets merged.",
      "created_at": "2021-12-23T16:34:15Z",
      "updated_at": "2021-12-23T16:34:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774676351",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774676351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 960,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774686746",
      "pull_request_review_id": 839503537,
      "id": 774686746,
      "node_id": "PRRC_kwDOABII584uLMga",
      "diff_hunk": "@@ -142,6 +165,15 @@ class AddrMan\n     void SetServices(const CService& addr, ServiceFlags nServices);\n \n     const std::vector<bool>& GetAsmap() const;\n+\n+    /** Test-only function\n+     * Find the address record in AddrMan and return information about its\n+     * position.\n+     * @param[in] addr       The address record to look up.\n+     * @return               Information about the address record in AddrMan\n+     *                       nullptr if address is not found\n+     */\n+    std::optional<AddressPosition> FindAddressEntry(const CAddress& addr);",
      "path": "src/addrman.h",
      "position": 44,
      "original_position": 42,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 774557150,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wanted to avoid reaching into the AddrMan internals in the unit tests as it is done currently. Also, I think that this function can be of use in the fuzz tests as well, which also still directly access internals in some spots.\r\nOne alternative possibility I thought about was adding `FindAddressEntry()` only to `addrman_impl.h` instead of `addrman.h` and keep on working with derived classes in the test accessing it that way. If people would prefer, I could switch to that.\r\nNote that a very limited set of test-only functions in the public interface also exist in comparable places such as `txrequest.h`",
      "created_at": "2021-12-23T16:56:11Z",
      "updated_at": "2021-12-23T16:56:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774686746",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774686746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 178,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775550847",
      "pull_request_review_id": 840439160,
      "id": 775550847,
      "node_id": "PRRC_kwDOABII584uOfd_",
      "diff_hunk": "@@ -897,7 +885,9 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     BOOST_CHECK_EQUAL(info.ToString(), \"250.1.1.19:0\");\n \n     // Ensure test of address fails, so that it is evicted.\n-    addrman.SimConnFail(info);\n+    // Set last good connection in the deep past.\n+    addrman.Good(info, /*nTime=*/1);",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "02f5a618dc418da2d6e4af141774dc24a1c6a65d",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/23826/commits/02f5a618dc418da2d6e4af141774dc24a1c6a65d: nit (doesn't change the test behavior): I'd recommend checking the output from `addrman->Good()` whenever it is called.\r\n\r\n1) it is consistent with how `Good()` is called in the rest of the tests\r\n2) it improves the readability (are you expecting a true or false from `Good()`)\r\n\r\n```suggestion\r\n    BOOST_CHECK(!addrman.Good(info, /*nTime=*/1));\r\n```\r\n\r\nfor example, while first reviewing this change I expected an output of `true` from `Good()`, but after adding `BOOST_CHECK` realized `Good()` was actually returning `false` because `info` is already in the tried set",
      "created_at": "2021-12-27T15:40:52Z",
      "updated_at": "2021-12-27T15:50:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775550847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775550847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 889,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775552049",
      "pull_request_review_id": 840439160,
      "id": 775552049,
      "node_id": "PRRC_kwDOABII584uOfwx",
      "diff_hunk": "@@ -366,18 +366,18 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     CNetAddr source2 = ResolveIP(\"250.2.3.3\");\n \n     // Test: Ensure GetAddr works with new addresses.\n-    BOOST_CHECK(addrman.Add({addr1, addr3, addr5}, source1));\n-    BOOST_CHECK(addrman.Add({addr2, addr4}, source2));\n+    BOOST_CHECK(addrman->Add({addr1, addr3, addr5}, source1));\n+    BOOST_CHECK(addrman->Add({addr2, addr4}, source2));\n \n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n+    BOOST_CHECK_EQUAL(addrman->GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n     // Net processing asks for 23% of addresses. 23% of 5 is 1 rounded down.\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n \n     // Test: Ensure GetAddr works with new and tried addresses.\n-    addrman.Good(CAddress(addr1, NODE_NONE));\n-    addrman.Good(CAddress(addr2, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n+    addrman->Good(CAddress(addr1, NODE_NONE));\n+    addrman->Good(CAddress(addr2, NODE_NONE));",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 213,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "f5ea63b01bb43b375333ec49790d35b40894f467",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/23826/commits/f5ea63b01bb43b375333ec49790d35b40894f467: same nit regarding `Good()`\r\n\r\n```suggestion\r\n    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\r\n    BOOST_CHECK(addrman->Good(CAddress(addr2, NODE_NONE)));\r\n```",
      "created_at": "2021-12-27T15:44:31Z",
      "updated_at": "2021-12-27T15:50:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775552049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775552049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": 377,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775880634",
      "pull_request_review_id": 840849967,
      "id": 775880634,
      "node_id": "PRRC_kwDOABII584uPv-6",
      "diff_hunk": "@@ -142,6 +165,15 @@ class AddrMan\n     void SetServices(const CService& addr, ServiceFlags nServices);\n \n     const std::vector<bool>& GetAsmap() const;\n+\n+    /** Test-only function\n+     * Find the address record in AddrMan and return information about its\n+     * position.\n+     * @param[in] addr       The address record to look up.\n+     * @return               Information about the address record in AddrMan\n+     *                       nullptr if address is not found",
      "path": "src/addrman.h",
      "position": null,
      "original_position": 40,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 773278921,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This was marked as resolved, but still says `nullptr`.",
      "created_at": "2021-12-28T12:18:23Z",
      "updated_at": "2021-12-28T12:18:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775880634",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775880634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": 173,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775880807",
      "pull_request_review_id": 840850211,
      "id": 775880807,
      "node_id": "PRRC_kwDOABII584uPwBn",
      "diff_hunk": "@@ -107,7 +54,7 @@ BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(addrman_simple)\n {\n-    auto addrman = std::make_unique<AddrManTest>();\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 773348729,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks good. Thanks!",
      "created_at": "2021-12-28T12:18:51Z",
      "updated_at": "2021-12-28T12:18:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775880807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775880807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775881573",
      "pull_request_review_id": 840851106,
      "id": 775881573,
      "node_id": "PRRC_kwDOABII584uPwNl",
      "diff_hunk": "@@ -151,119 +98,149 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};\n+    addr.nTime = start_time;\n+\n+    // test that multiplicity stays at 1 if nTime doesn't increase\n+    for (unsigned int i = 1; i < 20; ++i) {\n+        std::string addr_ip{ToString(i % 256) + \".\" + ToString(i >> 8 % 256) + \".1.1\"};\n+        CNetAddr source{ResolveIP(addr_ip)};\n+        addrman->Add({addr}, source);\n+    }\n+    AddressPosition addr_pos = addrman->FindAddressEntry(addr).value();\n+    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // if nTime increases, an addr can occur in up to 8 buckets\n+    for (unsigned int i = 1; i < 400; ++i) {",
      "path": "src/test/addrman_tests.cpp",
      "position": 265,
      "original_position": 253,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 773359789,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. If you retouch this branch, then you could add that as a code comment (magic values without any explanation always make me wonder if I'm missing some rationale).",
      "created_at": "2021-12-28T12:20:36Z",
      "updated_at": "2021-12-28T12:20:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775881573",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775881573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 241,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070706",
      "pull_request_review_id": 841094554,
      "id": 776070706,
      "node_id": "PRRC_kwDOABII584uQeYy",
      "diff_hunk": "@@ -142,6 +165,15 @@ class AddrMan\n     void SetServices(const CService& addr, ServiceFlags nServices);\n \n     const std::vector<bool>& GetAsmap() const;\n+\n+    /** Test-only function\n+     * Find the address record in AddrMan and return information about its\n+     * position.\n+     * @param[in] addr       The address record to look up.\n+     * @return               Information about the address record in AddrMan\n+     *                       nullptr if address is not found",
      "path": "src/addrman.h",
      "position": null,
      "original_position": 40,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 773278921,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sorry - that was an oversight. Changed now.",
      "created_at": "2021-12-28T20:58:32Z",
      "updated_at": "2021-12-28T20:58:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776070706",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": 173,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070757",
      "pull_request_review_id": 841094616,
      "id": 776070757,
      "node_id": "PRRC_kwDOABII584uQeZl",
      "diff_hunk": "@@ -151,119 +98,149 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};\n+    addr.nTime = start_time;\n+\n+    // test that multiplicity stays at 1 if nTime doesn't increase\n+    for (unsigned int i = 1; i < 20; ++i) {\n+        std::string addr_ip{ToString(i % 256) + \".\" + ToString(i >> 8 % 256) + \".1.1\"};\n+        CNetAddr source{ResolveIP(addr_ip)};\n+        addrman->Add({addr}, source);\n+    }\n+    AddressPosition addr_pos = addrman->FindAddressEntry(addr).value();\n+    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // if nTime increases, an addr can occur in up to 8 buckets\n+    for (unsigned int i = 1; i < 400; ++i) {",
      "path": "src/test/addrman_tests.cpp",
      "position": 265,
      "original_position": 253,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "250479a28716fda6db661b83375c23f97d2bc6b4",
      "in_reply_to_id": 773359789,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2021-12-28T20:58:43Z",
      "updated_at": "2021-12-28T20:58:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776070757",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 241,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070936",
      "pull_request_review_id": 841094818,
      "id": 776070936,
      "node_id": "PRRC_kwDOABII584uQecY",
      "diff_hunk": "@@ -897,7 +885,9 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     BOOST_CHECK_EQUAL(info.ToString(), \"250.1.1.19:0\");\n \n     // Ensure test of address fails, so that it is evicted.\n-    addrman.SimConnFail(info);\n+    // Set last good connection in the deep past.\n+    addrman.Good(info, /*nTime=*/1);",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "02f5a618dc418da2d6e4af141774dc24a1c6a65d",
      "in_reply_to_id": 775550847,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done, and I also changed the comment a bit to reflect that.",
      "created_at": "2021-12-28T20:59:18Z",
      "updated_at": "2021-12-28T20:59:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776070936",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 889,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070968",
      "pull_request_review_id": 841094872,
      "id": 776070968,
      "node_id": "PRRC_kwDOABII584uQec4",
      "diff_hunk": "@@ -366,18 +366,18 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     CNetAddr source2 = ResolveIP(\"250.2.3.3\");\n \n     // Test: Ensure GetAddr works with new addresses.\n-    BOOST_CHECK(addrman.Add({addr1, addr3, addr5}, source1));\n-    BOOST_CHECK(addrman.Add({addr2, addr4}, source2));\n+    BOOST_CHECK(addrman->Add({addr1, addr3, addr5}, source1));\n+    BOOST_CHECK(addrman->Add({addr2, addr4}, source2));\n \n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n+    BOOST_CHECK_EQUAL(addrman->GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n     // Net processing asks for 23% of addresses. 23% of 5 is 1 rounded down.\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n \n     // Test: Ensure GetAddr works with new and tried addresses.\n-    addrman.Good(CAddress(addr1, NODE_NONE));\n-    addrman.Good(CAddress(addr2, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n+    addrman->Good(CAddress(addr1, NODE_NONE));\n+    addrman->Good(CAddress(addr2, NODE_NONE));",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 213,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "f5ea63b01bb43b375333ec49790d35b40894f467",
      "in_reply_to_id": 775552049,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2021-12-28T20:59:27Z",
      "updated_at": "2021-12-28T20:59:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776070968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": 377,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776308946",
      "pull_request_review_id": 841383105,
      "id": 776308946,
      "node_id": "PRRC_kwDOABII584uRYjS",
      "diff_hunk": "@@ -151,124 +103,156 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = TestAddrMan();\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = TestAddrMan();\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = TestAddrMan();\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = TestAddrMan();\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};\n+    addr.nTime = start_time;\n+\n+    // test that multiplicity stays at 1 if nTime doesn't increase\n+    for (unsigned int i = 1; i < 20; ++i) {\n+        std::string addr_ip{ToString(i % 256) + \".\" + ToString(i >> 8 % 256) + \".1.1\"};\n+        CNetAddr source{ResolveIP(addr_ip)};\n+        addrman->Add({addr}, source);\n+    }\n+    AddressPosition addr_pos = addrman->FindAddressEntry(addr).value();\n+    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // if nTime increases, an addr can occur in up to 8 buckets\n+    // The acceptance probability decreases exponentially with existing multiplicit -",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 263,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "26046a12473ad0e342ec200b82184bc1336cf6f3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    // The acceptance probability decreases exponentially with existing multiplicity -\r\n```",
      "created_at": "2021-12-29T12:46:52Z",
      "updated_at": "2021-12-29T12:46:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776308946",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776308946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777712573",
      "pull_request_review_id": 843053128,
      "id": 777712573,
      "node_id": "PRRC_kwDOABII584uWvO9",
      "diff_hunk": "@@ -151,124 +103,156 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = TestAddrMan();\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = TestAddrMan();\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = TestAddrMan();\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = TestAddrMan();\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};\n+    addr.nTime = start_time;\n+\n+    // test that multiplicity stays at 1 if nTime doesn't increase\n+    for (unsigned int i = 1; i < 20; ++i) {\n+        std::string addr_ip{ToString(i % 256) + \".\" + ToString(i >> 8 % 256) + \".1.1\"};\n+        CNetAddr source{ResolveIP(addr_ip)};\n+        addrman->Add({addr}, source);\n+    }\n+    AddressPosition addr_pos = addrman->FindAddressEntry(addr).value();\n+    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // if nTime increases, an addr can occur in up to 8 buckets\n+    // The acceptance probability decreases exponentially with existing multiplicit -",
      "path": "src/test/addrman_tests.cpp",
      "position": null,
      "original_position": 263,
      "commit_id": "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "original_commit_id": "26046a12473ad0e342ec200b82184bc1336cf6f3",
      "in_reply_to_id": 776308946,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2022-01-03T21:27:25Z",
      "updated_at": "2022-01-03T21:27:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r777712573",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777712573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    }
  ]
}