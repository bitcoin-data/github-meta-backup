{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27505",
    "id": 1322131411,
    "node_id": "PR_kwDOABII585Ozh_T",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/27505",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/27505.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/27505.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27505",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27505/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27505/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27505/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c94962d70043df04f6d4723900b694af5a6385fb",
    "number": 27505,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "net: use interruptible async getaddrinfo wrapper from libevent for DNS",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Closes https://github.com/bitcoin/bitcoin/issues/16778\r\n\r\nBitcoin uses `getaddrinfo` to make DNS requests for DNS seed servers and for adding peers with `-addnode`, `-seednode` and `-connect`. Depending on the platform this can be clunky and a system issue could prevent name resolution from completing at all, blocking the thread and in some cases preventing a clean shutdown.\r\n\r\nAn attempt was made to switch to the asynchronous `getaddrinfo_a` in https://github.com/bitcoin/bitcoin/pull/4421 but that was reverted in https://github.com/bitcoin/bitcoin/pull/9229 after discovering that function has a segfault!\r\n\r\nTaking BlueMatt's suggestion in https://github.com/bitcoin/bitcoin/pull/10215#issue-221886328, this PR modifies our `g_dns_lookup` function to use `evdns_getaddrinfo()` from [libevent](https://libevent.org/libevent-book/Ref9_dns.html). This is an asynchronous function but I've implemented it in a polling loop so it still blocks -- but now will timeout after 2 seconds.\r\n\r\nTODO:\r\n- [ ] We could make the polling loop interruptible but I'm not sure the best approach to that, since these functions don't live in a class with a flag like `interruptNet` \r\n- [ ] Is it possible to add functional tests that mess with DNS? Probably not.\r\n- [ ] The unit test I added makes a live DNS request for `nic.com` that test will fail the platform has no DNS\r\n\r\nFuture work:\r\n- libevent has more low-level DNS functions as well, we could ultimately use those to (for example) request `TXT` records with onion addresses from our DNS seeders\r\n\r\n",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2023-04-20T21:07:11Z",
    "updated_at": "2023-05-02T18:29:37Z",
    "closed_at": "2023-05-02T18:29:36Z",
    "mergeable_state": "unknown",
    "merge_commit_sha": "01d648f165a713d95274fe7affc6c31b65b6496c",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "pinheadmz:dns-libevent",
      "ref": "dns-libevent",
      "sha": "c94962d70043df04f6d4723900b694af5a6385fb",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 61248407,
        "node_id": "MDEwOlJlcG9zaXRvcnk2MTI0ODQwNw==",
        "name": "bitcoin",
        "full_name": "pinheadmz/bitcoin",
        "owner": {
          "login": "pinheadmz",
          "id": 2084648,
          "node_id": "MDQ6VXNlcjIwODQ2NDg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pinheadmz",
          "html_url": "https://github.com/pinheadmz",
          "followers_url": "https://api.github.com/users/pinheadmz/followers",
          "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
          "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
          "repos_url": "https://api.github.com/users/pinheadmz/repos",
          "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/pinheadmz/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/pinheadmz/bitcoin",
        "archive_url": "https://api.github.com/repos/pinheadmz/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/pinheadmz/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/pinheadmz/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/pinheadmz/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/pinheadmz/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/pinheadmz/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/pinheadmz/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/pinheadmz/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/pinheadmz/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/pinheadmz/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/pinheadmz/bitcoin/events",
        "forks_url": "https://api.github.com/repos/pinheadmz/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/pinheadmz/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/pinheadmz/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/pinheadmz/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/pinheadmz/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/pinheadmz/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/pinheadmz/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/pinheadmz/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/pinheadmz/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/pinheadmz/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:pinheadmz/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/pinheadmz/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/pinheadmz/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/pinheadmz/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/pinheadmz/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/pinheadmz/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/pinheadmz/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/pinheadmz/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/pinheadmz/bitcoin/hooks",
        "svn_url": "https://github.com/pinheadmz/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 214423,
        "default_branch": "master2",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-05T18:37:08Z",
        "created_at": "2016-06-15T23:48:20Z",
        "updated_at": "2019-11-18T20:27:35Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "91ccb62faab21b2b52b089cc04f3a5c1bf6989cc",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34325,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 626,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T07:29:24Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T07:34:31Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27505"
      }
    },
    "author_association": "MEMBER",
    "draft": true,
    "additions": 96,
    "deletions": 30,
    "changed_files": 5,
    "commits": 2,
    "review_comments": 5,
    "comments": 10
  },
  "events": [
    {
      "event": "commented",
      "id": 1516950023,
      "node_id": "IC_kwDOABII585aatIH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1516950023",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-20T21:07:15Z",
      "updated_at": "2023-04-26T20:44:42Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27530](https://github.com/bitcoin/bitcoin/pull/27530) (Remove now-unnecessary poll, fcntl includes from net(base).cpp by Empact)\n* [#27405](https://github.com/bitcoin/bitcoin/pull/27405) (util: Use steady clock instead of system clock to measure durations by MarcoFalke)\n* [#27375](https://github.com/bitcoin/bitcoin/pull/27375) (net: support unix domain sockets for -proxy and -onion by pinheadmz)\n* [#27071](https://github.com/bitcoin/bitcoin/pull/27071) (Handle CJDNS from LookupSubNet() by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#issuecomment-1516950023",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27505"
    },
    {
      "event": "labeled",
      "id": 9061583498,
      "node_id": "LE_lADOABII585j-5W8zwAAAAIcHMqK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9061583498",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-20T21:07:16Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 9062040441,
      "node_id": "LE_lADOABII585j-5W8zwAAAAIcI8N5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9062040441",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-20T22:29:12Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1517517368,
      "node_id": "IC_kwDOABII585ac3o4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1517517368",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-21T09:06:02Z",
      "updated_at": "2023-04-21T09:06:02Z",
      "author_association": "MEMBER",
      "body": "Afaik we currently do not expose libevent on any public facing interface (e.g. p2p) and only use it for things that aren't supposed to be exposed (e.g. rpc or rest). By using it for DNS queries we would be changing that (e.g. a malicious DNS seeder) and I'm not sure if that is the best idea given that libevent is pretty archaic (I think the MSan, ASan, TSan and LSan failures in the CI are kind of proving my point).",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#issuecomment-1517517368",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27505"
    },
    {
      "event": "commented",
      "id": 1517682872,
      "node_id": "IC_kwDOABII585adgC4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1517682872",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-21T11:27:39Z",
      "updated_at": "2023-04-21T11:37:34Z",
      "author_association": "MEMBER",
      "body": "@dergoegge I think at least some of the CI failures are memory leaks from my code, I'm going to fix that. But I hear your point about the arcane library. Any suggestions?\r\n",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#issuecomment-1517682872",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27505"
    },
    {
      "event": "mentioned",
      "id": 9066790137,
      "node_id": "MEE_lADOABII585j-5W8zwAAAAIcbDz5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9066790137",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-21T11:27:39Z"
    },
    {
      "event": "subscribed",
      "id": 9066790147,
      "node_id": "SE_lADOABII585j-5W8zwAAAAIcbD0D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9066790147",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-21T11:27:39Z"
    },
    {
      "event": "commented",
      "id": 1517787932,
      "node_id": "IC_kwDOABII585ad5sc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1517787932",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-21T12:49:30Z",
      "updated_at": "2023-04-21T12:49:30Z",
      "author_association": "MEMBER",
      "body": "> Any suggestions?\r\n\r\nThe issue seems somewhat stale so maybe no need to fix? Judging by your last comment, you were also not able to reproduce? (https://github.com/bitcoin/bitcoin/issues/16778#issuecomment-1458423187)\r\n\r\n",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#issuecomment-1517787932",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27505"
    },
    {
      "event": "commented",
      "id": 1517793681,
      "node_id": "IC_kwDOABII585ad7GR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1517793681",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-21T12:53:57Z",
      "updated_at": "2023-04-21T12:53:57Z",
      "author_association": "MEMBER",
      "body": "I was able to somewhat reproduce -- by sending all DNS requests on my machine to a blackhole resolver, I observed a 30 second pause during shutdown. But I think that 30 seconds may be platform-specific, or whatever the local `getaddrinfo()` implementation is.",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#issuecomment-1517793681",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27505"
    },
    {
      "event": "reviewed",
      "id": 1395781965,
      "node_id": "PRR_kwDOABII585TMfFN",
      "url": null,
      "actor": null,
      "commit_id": "fd6679b8f387e25cb197204fd6c8126834949e3f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#pullrequestreview-1395781965",
      "submitted_at": "2023-04-21T13:34:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27505"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9103083744,
      "node_id": "HRFPE_lADOABII585j-5W8zwAAAAIelgjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9103083744",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-26T12:37:50Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMzZWNiZjZhOGEyMDFkYzk1MDY4YWEwZDQ2ZTMzNGVlZGI2YTFjYzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3ecbf6a8a201dc95068aa0d46e334eedb6a1cc1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c3ecbf6a8a201dc95068aa0d46e334eedb6a1cc1",
      "tree": {
        "sha": "871b3866968e9fbcbca813841f3781bdbb27faee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/871b3866968e9fbcbca813841f3781bdbb27faee"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 871b3866968e9fbcbca813841f3781bdbb27faee\nparent 54e07a05b28d2bca8fc08cca0bf6e7ddf6762488\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1682022675 -0400\ncommitter Matthew Zipkin <pinheadmz@gmail.com> 1682518878 +0100\n\nnet: use interruptible async getaddrinfo wrapper from libevent for DNS\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmRJM2IACgkQ5+KYS2KJ\nyTpoSQ//Zk/3dAtl5L3qV01ev+Vunw+Cu4NWfPiYpGpjjdiWfhy/u1HGyHdwL7sO\nwZyohnKxUYJ1Tt3Wr2sqf66x8MZDuwy4EBhtAHODI+8SGE4DNiVtL/TskTRKq275\n8mo4/f8QbATeNxjCglAvIu95PzYxWyoPO9Jj5z2b/2R5JXaMh8yCjxHFUTy6sAex\nLA1iuU4QqdwN5E50mukqkRmi3f0eyHVtd8louhxsuTEF/tJNV2mdbTbPAHXTkdZU\nl3qmb/W9Igld4yqDe09ze8s0L8ywaprdUZyL7canyGwAGmSJ2RvwcA/Jc9Edr2L9\nSVVc/bNytGLhUOBMvFjPPUaQydL4VFR7PntBO83Ym8ELSFYctcEpQeHrCsL82rrf\nGSwjhwvnhS1zshHQ3GZml3ntXcMSxNt7ztYXFs59fYnju2fitxPzGFZJHtLRfcbg\nF2FKyaETXUkzDJamCZn5k83aYkAARRf+U1yWsf0cIrkCJYKAmGcHrEtETAK7cZvv\nL021kExEtJ3slDQdzk4AEMo1s3OLC7sepotPa4L9VjIR4wV1rLqaO50P943CfOAE\nmW4zM0cFXyfJZXjo28kIoBMFktP4reZKop+S14M+uJMvMu4aXZXIGar7DWYcZWUS\nP0PK8WYWLPP/rMPbqFpGqrcdocFBoGfWKzRc8ujS9eSIZ5R+y60=\n=Qytr\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54e07a05b28d2bca8fc08cca0bf6e7ddf6762488",
          "sha": "54e07a05b28d2bca8fc08cca0bf6e7ddf6762488",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/54e07a05b28d2bca8fc08cca0bf6e7ddf6762488"
        }
      ],
      "message": "net: use interruptible async getaddrinfo wrapper from libevent for DNS",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2023-04-26T14:21:18Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2023-04-20T20:31:15Z"
      },
      "sha": "c3ecbf6a8a201dc95068aa0d46e334eedb6a1cc1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM5NDk2MmQ3MDA0M2RmMDRmNmQ0NzIzOTAwYjY5NGFmNWE2Mzg1ZmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c94962d70043df04f6d4723900b694af5a6385fb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c94962d70043df04f6d4723900b694af5a6385fb",
      "tree": {
        "sha": "5c604f16ca31919fdae4cfdb40433773cd5d001f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c604f16ca31919fdae4cfdb40433773cd5d001f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5c604f16ca31919fdae4cfdb40433773cd5d001f\nparent c3ecbf6a8a201dc95068aa0d46e334eedb6a1cc1\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1682022728 -0400\ncommitter Matthew Zipkin <pinheadmz@gmail.com> 1682518882 +0100\n\ntest: cover DNS lookups with new libevent method\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmRJM2IACgkQ5+KYS2KJ\nyTraXhAAxmImXZJvSixcv+SOIcnkN85zEkfGNFNB5vOMLWylhrNR04gLS5GsHiJb\n3Zoay42P4BiP2E4nFkMVsLYIB3HuDD/KX1w7V2CI28EhgVUhcrmKsUVdzltgJeQ9\nD/f8SIhVdSzeljSveHARInY/HBCPbk3HK+R9tIo7tMC2cxRb66jPCj5mrY+6DQGm\n+3mGSH/N9xhOzikFhNh82eh/NvLPN47S6sfd2oWjXJ6Cwd0AW5uMMVeWXQwygWPz\n93ptIYOKnPwKbKhUkyETtexM99iGsGBvh1kJYmf6jmCAYJrbUBiZDWSVHKL3M209\n4TOg2w2QDWFQUkna7BxqpyV/juRA5d8wydy+Bal+ea7u/lD9/YFzTxFZc4+nw8fB\nCwuTdy9ST/btztc+ewVF3ZuO8vtNAB1+/VdT2AkqRq8vIsguk6X15RPN2+ZOSLcQ\nmGGuDqRaqO+cQ8G34yLCnSbw5OZP/VHHMYcoPBuAhgO10YRyPBoGXvqajuDVmVT5\nFLjyWyMoPPj/0PKPz0ktSX8j4mUu4wRsHwXR09KN2AVQU9a5LR11KSTIU0Ewxb+E\nTM7arvcSNgp/9vzZ7x8x+DjtK7VMGn/0UY5V4K0NCM1gagyOmwqwOuTH2O7cDB21\nzEHVyLEqQAgk7qYeX0lfxtsCWufna+QAfOdwWBN0LUHcUbGye3g=\n=OG8o\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3ecbf6a8a201dc95068aa0d46e334eedb6a1cc1",
          "sha": "c3ecbf6a8a201dc95068aa0d46e334eedb6a1cc1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c3ecbf6a8a201dc95068aa0d46e334eedb6a1cc1"
        }
      ],
      "message": "test: cover DNS lookups with new libevent method",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2023-04-26T14:21:22Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2023-04-20T20:32:08Z"
      },
      "sha": "c94962d70043df04f6d4723900b694af5a6385fb"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9104247245,
      "node_id": "HRFPE_lADOABII585j-5W8zwAAAAIep8nN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9104247245",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-26T14:21:32Z"
    },
    {
      "event": "commented",
      "id": 1531483899,
      "node_id": "IC_kwDOABII585bSJb7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1531483899",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T13:30:36Z",
      "updated_at": "2023-05-02T13:30:36Z",
      "author_association": "MEMBER",
      "body": "In general, I'm ~0 on leaning into further libevent usage, especially for something like this. The upstream code is currently not necessarily very well maintained or tested. There is also at least one open issue which reports `evdns_getaddrinfo` just \"crashing occasionally\": https://github.com/libevent/libevent/issues/1130. Although it's not entirely clear if this is user error.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#issuecomment-1531483899",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27505"
    },
    {
      "event": "commented",
      "id": 1531564374,
      "node_id": "IC_kwDOABII585bSdFW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1531564374",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T14:17:43Z",
      "updated_at": "2023-05-02T14:17:43Z",
      "author_association": "MEMBER",
      "body": "As an alternative to this PR, could we give the DNS thread time to join cleanly (e.g. 5s) and if it doesn't we just detach it and let the OS handle the clean up? That risks memory leaks but that shouldn't really matter when the program is about to exit anyway.\r\n\r\nI would also be fine with not addressing this at all, because it seems like this only happens when a system generally fails to make DNS requests? In the absence of nice solutions, it seems like that isn't our problem and the user should fix their system instead.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#issuecomment-1531564374",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27505"
    },
    {
      "event": "commented",
      "id": 1531618658,
      "node_id": "IC_kwDOABII585bSqVi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1531618658",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T14:50:44Z",
      "updated_at": "2023-05-02T14:50:44Z",
      "author_association": "MEMBER",
      "body": "@fanquake @dergoegge good feedback, thanks. I'll look into a different approach moving the lib call `getaddrinfo` to a detachable thread before abandoning, and then we may just have to close https://github.com/bitcoin/bitcoin/issues/16778 as \"won't fix\"\r\n\r\nThere is another thought I had about name resolution moving forward: If bitcoin can make more interesting DNS queries (either using a library or just implementing some bare necessities) we could ask the DNS seeders for I2P and onion addresses as TXT records\r\n\r\n",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#issuecomment-1531618658",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27505"
    },
    {
      "event": "mentioned",
      "id": 9146668707,
      "node_id": "MEE_lADOABII585j-5W8zwAAAAIhLxaj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9146668707",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T14:50:44Z"
    },
    {
      "event": "subscribed",
      "id": 9146668732,
      "node_id": "SE_lADOABII585j-5W8zwAAAAIhLxa8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9146668732",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T14:50:45Z"
    },
    {
      "event": "mentioned",
      "id": 9146668768,
      "node_id": "MEE_lADOABII585j-5W8zwAAAAIhLxbg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9146668768",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T14:50:45Z"
    },
    {
      "event": "subscribed",
      "id": 9146668794,
      "node_id": "SE_lADOABII585j-5W8zwAAAAIhLxb6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9146668794",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T14:50:45Z"
    },
    {
      "event": "commented",
      "id": 1531621948,
      "node_id": "IC_kwDOABII585bSrI8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1531621948",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T14:52:47Z",
      "updated_at": "2023-05-02T14:52:47Z",
      "author_association": "MEMBER",
      "body": "> either using a library \r\n\r\nIt's very unlikely we are going to add a new external dependency to make \"interesting\" DNS queries.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#issuecomment-1531621948",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27505"
    },
    {
      "event": "commented",
      "id": 1531951962,
      "node_id": "IC_kwDOABII585bT7ta",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1531951962",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T18:29:36Z",
      "updated_at": "2023-05-02T18:29:36Z",
      "author_association": "MEMBER",
      "body": "Closing this now for alternative in https://github.com/bitcoin/bitcoin/pull/27557 which just calls `getaddrinfo()` from a detachable thread. No libevent at all and, yeeeeeesh it is way simpler.",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#issuecomment-1531951962",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27505"
    },
    {
      "event": "closed",
      "id": 9148652839,
      "node_id": "CE_lADOABII585j-5W8zwAAAAIhTV0n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9148652839",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T18:29:37Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1173774847",
      "pull_request_review_id": 1395781965,
      "id": 1173774847,
      "node_id": "PRRC_kwDOABII585F9mH_",
      "diff_hunk": "@@ -40,49 +42,71 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n-std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+void GAICallback(int errcode, struct evutil_addrinfo *addr, void *user_data)\n {\n-    addrinfo ai_hint{};\n+    struct DNSResolveResponse* res = (struct DNSResolveResponse*)user_data;\n+\n+    while (addr != nullptr) {\n+        if (addr->ai_family == AF_INET) {\n+            assert(addr->ai_addrlen >= sizeof(sockaddr_in));\n+            res->vAddr->emplace_back(reinterpret_cast<sockaddr_in*>(addr->ai_addr)->sin_addr);\n+        }\n+        if (addr->ai_family == AF_INET6) {\n+            assert(addr->ai_addrlen >= sizeof(sockaddr_in6));\n+            const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(addr->ai_addr)};\n+            res->vAddr->emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n+        }\n+        addr = addr->ai_next;\n+    }\n+    res->complete = true;\n+}\n+\n+std::vector<CNetAddr> DNSResolveAsync(const std::string& name, bool allow_lookup)\n+{\n+    raii_event_base base = obtain_event_base();\n+    raii_evdns_base dnsbase = obtain_evdns_base(base.get());\n+\n+    struct evutil_addrinfo hints{};\n     // We want a TCP port, which is a streaming socket type\n-    ai_hint.ai_socktype = SOCK_STREAM;\n-    ai_hint.ai_protocol = IPPROTO_TCP;\n+    hints.ai_socktype = SOCK_STREAM;\n+    hints.ai_protocol = IPPROTO_TCP;\n     // We don't care which address family (IPv4 or IPv6) is returned\n-    ai_hint.ai_family = AF_UNSPEC;\n-    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    hints.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the EVUTIL_AI_ADDRCONFIG flag to only\n     // return addresses whose family we have an address configured for.\n     //\n-    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // If we don't allow lookups, then use the EVUTIL_AI_NUMERICHOST flag for\n     // getaddrinfo to only decode numerical network addresses and suppress\n     // hostname lookups.\n-    ai_hint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+    hints.ai_flags = allow_lookup ? EVUTIL_AI_ADDRCONFIG : EVUTIL_AI_NUMERICHOST;\n \n-    addrinfo* ai_res{nullptr};\n-    const int n_err{getaddrinfo(name.c_str(), nullptr, &ai_hint, &ai_res)};\n-    if (n_err != 0) {\n-        return {};\n+    std::vector<CNetAddr> resolved_addresses;\n+    struct DNSResolveResponse res = {.complete = false, .vAddr = &resolved_addresses};\n+\n+    auto req = evdns_getaddrinfo(dnsbase.get(), name.c_str(), nullptr, &hints, GAICallback, &res);\n+\n+    if (!req) {\n+        // evdns_getaddrinfo() returned immediately.\n+        // There might have been an error, or no name lookup was necessary\n+        return resolved_addresses;\n     }\n \n-    // Traverse the linked list starting with ai_trav.\n-    addrinfo* ai_trav{ai_res};\n-    std::vector<CNetAddr> resolved_addresses;\n-    while (ai_trav != nullptr) {\n-        if (ai_trav->ai_family == AF_INET) {\n-            assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in));\n-            resolved_addresses.emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n-        }\n-        if (ai_trav->ai_family == AF_INET6) {\n-            assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in6));\n-            const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(ai_trav->ai_addr)};\n-            resolved_addresses.emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n-        }\n-        ai_trav = ai_trav->ai_next;\n+    // We need to wait for the name resolution callback on a new temporary event loop\n+    std::thread thread(event_base_loop, base.get(), 1);\n+\n+    int checks = 0;\n+    while (!res.complete)\n+    {\n+        // Check every 100ms for 2 seconds\n+        if (++checks > 20) break;\n+        std::this_thread::sleep_for(std::chrono::milliseconds(100));\n     }\n-    freeaddrinfo(ai_res);\n \n+    thread.join();",
      "path": "src/netbase.cpp",
      "position": 113,
      "original_position": 100,
      "commit_id": "c94962d70043df04f6d4723900b694af5a6385fb",
      "original_commit_id": "fd6679b8f387e25cb197204fd6c8126834949e3f",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wouldn't this also wait indefinitely for `getaddrinfo` to finish before the thread can join?",
      "created_at": "2023-04-21T13:34:10Z",
      "updated_at": "2023-04-21T13:34:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#discussion_r1173774847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1173774847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27505"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1173797262",
      "pull_request_review_id": 1395814798,
      "id": 1173797262,
      "node_id": "PRRC_kwDOABII585F9rmO",
      "diff_hunk": "@@ -40,49 +42,71 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n-std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+void GAICallback(int errcode, struct evutil_addrinfo *addr, void *user_data)\n {\n-    addrinfo ai_hint{};\n+    struct DNSResolveResponse* res = (struct DNSResolveResponse*)user_data;\n+\n+    while (addr != nullptr) {\n+        if (addr->ai_family == AF_INET) {\n+            assert(addr->ai_addrlen >= sizeof(sockaddr_in));\n+            res->vAddr->emplace_back(reinterpret_cast<sockaddr_in*>(addr->ai_addr)->sin_addr);\n+        }\n+        if (addr->ai_family == AF_INET6) {\n+            assert(addr->ai_addrlen >= sizeof(sockaddr_in6));\n+            const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(addr->ai_addr)};\n+            res->vAddr->emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n+        }\n+        addr = addr->ai_next;\n+    }\n+    res->complete = true;\n+}\n+\n+std::vector<CNetAddr> DNSResolveAsync(const std::string& name, bool allow_lookup)\n+{\n+    raii_event_base base = obtain_event_base();\n+    raii_evdns_base dnsbase = obtain_evdns_base(base.get());\n+\n+    struct evutil_addrinfo hints{};\n     // We want a TCP port, which is a streaming socket type\n-    ai_hint.ai_socktype = SOCK_STREAM;\n-    ai_hint.ai_protocol = IPPROTO_TCP;\n+    hints.ai_socktype = SOCK_STREAM;\n+    hints.ai_protocol = IPPROTO_TCP;\n     // We don't care which address family (IPv4 or IPv6) is returned\n-    ai_hint.ai_family = AF_UNSPEC;\n-    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    hints.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the EVUTIL_AI_ADDRCONFIG flag to only\n     // return addresses whose family we have an address configured for.\n     //\n-    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // If we don't allow lookups, then use the EVUTIL_AI_NUMERICHOST flag for\n     // getaddrinfo to only decode numerical network addresses and suppress\n     // hostname lookups.\n-    ai_hint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+    hints.ai_flags = allow_lookup ? EVUTIL_AI_ADDRCONFIG : EVUTIL_AI_NUMERICHOST;\n \n-    addrinfo* ai_res{nullptr};\n-    const int n_err{getaddrinfo(name.c_str(), nullptr, &ai_hint, &ai_res)};\n-    if (n_err != 0) {\n-        return {};\n+    std::vector<CNetAddr> resolved_addresses;\n+    struct DNSResolveResponse res = {.complete = false, .vAddr = &resolved_addresses};\n+\n+    auto req = evdns_getaddrinfo(dnsbase.get(), name.c_str(), nullptr, &hints, GAICallback, &res);\n+\n+    if (!req) {\n+        // evdns_getaddrinfo() returned immediately.\n+        // There might have been an error, or no name lookup was necessary\n+        return resolved_addresses;\n     }\n \n-    // Traverse the linked list starting with ai_trav.\n-    addrinfo* ai_trav{ai_res};\n-    std::vector<CNetAddr> resolved_addresses;\n-    while (ai_trav != nullptr) {\n-        if (ai_trav->ai_family == AF_INET) {\n-            assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in));\n-            resolved_addresses.emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n-        }\n-        if (ai_trav->ai_family == AF_INET6) {\n-            assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in6));\n-            const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(ai_trav->ai_addr)};\n-            resolved_addresses.emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n-        }\n-        ai_trav = ai_trav->ai_next;\n+    // We need to wait for the name resolution callback on a new temporary event loop\n+    std::thread thread(event_base_loop, base.get(), 1);\n+\n+    int checks = 0;\n+    while (!res.complete)\n+    {\n+        // Check every 100ms for 2 seconds\n+        if (++checks > 20) break;\n+        std::this_thread::sleep_for(std::chrono::milliseconds(100));\n     }\n-    freeaddrinfo(ai_res);\n \n+    thread.join();",
      "path": "src/netbase.cpp",
      "position": 113,
      "original_position": 100,
      "commit_id": "c94962d70043df04f6d4723900b694af5a6385fb",
      "original_commit_id": "fd6679b8f387e25cb197204fd6c8126834949e3f",
      "in_reply_to_id": 1173774847,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2 sec timeout waiting for the callback and then the loop will close. With my black hole dns resolver, the patch saves 30 seconds against master on the unit test in the second commit. \r\n\r\nIt took me some work to figure out that using ..._once() to start the event loop would allow me to quit the loop manually which allows join() to succeed ",
      "created_at": "2023-04-21T13:53:07Z",
      "updated_at": "2023-04-21T13:53:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#discussion_r1173797262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1173797262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27505"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1173800861",
      "pull_request_review_id": 1395820488,
      "id": 1173800861,
      "node_id": "PRRC_kwDOABII585F9sed",
      "diff_hunk": "@@ -40,49 +42,71 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n-std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+void GAICallback(int errcode, struct evutil_addrinfo *addr, void *user_data)\n {\n-    addrinfo ai_hint{};\n+    struct DNSResolveResponse* res = (struct DNSResolveResponse*)user_data;\n+\n+    while (addr != nullptr) {\n+        if (addr->ai_family == AF_INET) {\n+            assert(addr->ai_addrlen >= sizeof(sockaddr_in));\n+            res->vAddr->emplace_back(reinterpret_cast<sockaddr_in*>(addr->ai_addr)->sin_addr);\n+        }\n+        if (addr->ai_family == AF_INET6) {\n+            assert(addr->ai_addrlen >= sizeof(sockaddr_in6));\n+            const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(addr->ai_addr)};\n+            res->vAddr->emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n+        }\n+        addr = addr->ai_next;\n+    }\n+    res->complete = true;\n+}\n+\n+std::vector<CNetAddr> DNSResolveAsync(const std::string& name, bool allow_lookup)\n+{\n+    raii_event_base base = obtain_event_base();\n+    raii_evdns_base dnsbase = obtain_evdns_base(base.get());\n+\n+    struct evutil_addrinfo hints{};\n     // We want a TCP port, which is a streaming socket type\n-    ai_hint.ai_socktype = SOCK_STREAM;\n-    ai_hint.ai_protocol = IPPROTO_TCP;\n+    hints.ai_socktype = SOCK_STREAM;\n+    hints.ai_protocol = IPPROTO_TCP;\n     // We don't care which address family (IPv4 or IPv6) is returned\n-    ai_hint.ai_family = AF_UNSPEC;\n-    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    hints.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the EVUTIL_AI_ADDRCONFIG flag to only\n     // return addresses whose family we have an address configured for.\n     //\n-    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // If we don't allow lookups, then use the EVUTIL_AI_NUMERICHOST flag for\n     // getaddrinfo to only decode numerical network addresses and suppress\n     // hostname lookups.\n-    ai_hint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+    hints.ai_flags = allow_lookup ? EVUTIL_AI_ADDRCONFIG : EVUTIL_AI_NUMERICHOST;\n \n-    addrinfo* ai_res{nullptr};\n-    const int n_err{getaddrinfo(name.c_str(), nullptr, &ai_hint, &ai_res)};\n-    if (n_err != 0) {\n-        return {};\n+    std::vector<CNetAddr> resolved_addresses;\n+    struct DNSResolveResponse res = {.complete = false, .vAddr = &resolved_addresses};\n+\n+    auto req = evdns_getaddrinfo(dnsbase.get(), name.c_str(), nullptr, &hints, GAICallback, &res);\n+\n+    if (!req) {\n+        // evdns_getaddrinfo() returned immediately.\n+        // There might have been an error, or no name lookup was necessary\n+        return resolved_addresses;\n     }\n \n-    // Traverse the linked list starting with ai_trav.\n-    addrinfo* ai_trav{ai_res};\n-    std::vector<CNetAddr> resolved_addresses;\n-    while (ai_trav != nullptr) {\n-        if (ai_trav->ai_family == AF_INET) {\n-            assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in));\n-            resolved_addresses.emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n-        }\n-        if (ai_trav->ai_family == AF_INET6) {\n-            assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in6));\n-            const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(ai_trav->ai_addr)};\n-            resolved_addresses.emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n-        }\n-        ai_trav = ai_trav->ai_next;\n+    // We need to wait for the name resolution callback on a new temporary event loop\n+    std::thread thread(event_base_loop, base.get(), 1);\n+\n+    int checks = 0;\n+    while (!res.complete)\n+    {\n+        // Check every 100ms for 2 seconds\n+        if (++checks > 20) break;\n+        std::this_thread::sleep_for(std::chrono::milliseconds(100));\n     }\n-    freeaddrinfo(ai_res);\n \n+    thread.join();",
      "path": "src/netbase.cpp",
      "position": 113,
      "original_position": 100,
      "commit_id": "c94962d70043df04f6d4723900b694af5a6385fb",
      "original_commit_id": "fd6679b8f387e25cb197204fd6c8126834949e3f",
      "in_reply_to_id": 1173774847,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(libevent does not call the platform getaddrinfo for dns requests, it has its own async methods)",
      "created_at": "2023-04-21T13:56:29Z",
      "updated_at": "2023-04-21T13:56:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#discussion_r1173800861",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1173800861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27505"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1173837388",
      "pull_request_review_id": 1395885670,
      "id": 1173837388,
      "node_id": "PRRC_kwDOABII585F91ZM",
      "diff_hunk": "@@ -40,49 +42,71 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n-std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+void GAICallback(int errcode, struct evutil_addrinfo *addr, void *user_data)\n {\n-    addrinfo ai_hint{};\n+    struct DNSResolveResponse* res = (struct DNSResolveResponse*)user_data;\n+\n+    while (addr != nullptr) {\n+        if (addr->ai_family == AF_INET) {\n+            assert(addr->ai_addrlen >= sizeof(sockaddr_in));\n+            res->vAddr->emplace_back(reinterpret_cast<sockaddr_in*>(addr->ai_addr)->sin_addr);\n+        }\n+        if (addr->ai_family == AF_INET6) {\n+            assert(addr->ai_addrlen >= sizeof(sockaddr_in6));\n+            const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(addr->ai_addr)};\n+            res->vAddr->emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n+        }\n+        addr = addr->ai_next;\n+    }\n+    res->complete = true;\n+}\n+\n+std::vector<CNetAddr> DNSResolveAsync(const std::string& name, bool allow_lookup)\n+{\n+    raii_event_base base = obtain_event_base();\n+    raii_evdns_base dnsbase = obtain_evdns_base(base.get());\n+\n+    struct evutil_addrinfo hints{};\n     // We want a TCP port, which is a streaming socket type\n-    ai_hint.ai_socktype = SOCK_STREAM;\n-    ai_hint.ai_protocol = IPPROTO_TCP;\n+    hints.ai_socktype = SOCK_STREAM;\n+    hints.ai_protocol = IPPROTO_TCP;\n     // We don't care which address family (IPv4 or IPv6) is returned\n-    ai_hint.ai_family = AF_UNSPEC;\n-    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    hints.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the EVUTIL_AI_ADDRCONFIG flag to only\n     // return addresses whose family we have an address configured for.\n     //\n-    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // If we don't allow lookups, then use the EVUTIL_AI_NUMERICHOST flag for\n     // getaddrinfo to only decode numerical network addresses and suppress\n     // hostname lookups.\n-    ai_hint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+    hints.ai_flags = allow_lookup ? EVUTIL_AI_ADDRCONFIG : EVUTIL_AI_NUMERICHOST;\n \n-    addrinfo* ai_res{nullptr};\n-    const int n_err{getaddrinfo(name.c_str(), nullptr, &ai_hint, &ai_res)};\n-    if (n_err != 0) {\n-        return {};\n+    std::vector<CNetAddr> resolved_addresses;\n+    struct DNSResolveResponse res = {.complete = false, .vAddr = &resolved_addresses};\n+\n+    auto req = evdns_getaddrinfo(dnsbase.get(), name.c_str(), nullptr, &hints, GAICallback, &res);\n+\n+    if (!req) {\n+        // evdns_getaddrinfo() returned immediately.\n+        // There might have been an error, or no name lookup was necessary\n+        return resolved_addresses;\n     }\n \n-    // Traverse the linked list starting with ai_trav.\n-    addrinfo* ai_trav{ai_res};\n-    std::vector<CNetAddr> resolved_addresses;\n-    while (ai_trav != nullptr) {\n-        if (ai_trav->ai_family == AF_INET) {\n-            assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in));\n-            resolved_addresses.emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n-        }\n-        if (ai_trav->ai_family == AF_INET6) {\n-            assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in6));\n-            const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(ai_trav->ai_addr)};\n-            resolved_addresses.emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n-        }\n-        ai_trav = ai_trav->ai_next;\n+    // We need to wait for the name resolution callback on a new temporary event loop\n+    std::thread thread(event_base_loop, base.get(), 1);\n+\n+    int checks = 0;\n+    while (!res.complete)\n+    {\n+        // Check every 100ms for 2 seconds\n+        if (++checks > 20) break;\n+        std::this_thread::sleep_for(std::chrono::milliseconds(100));\n     }\n-    freeaddrinfo(ai_res);\n \n+    thread.join();",
      "path": "src/netbase.cpp",
      "position": 113,
      "original_position": 100,
      "commit_id": "c94962d70043df04f6d4723900b694af5a6385fb",
      "original_commit_id": "fd6679b8f387e25cb197204fd6c8126834949e3f",
      "in_reply_to_id": 1173774847,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> libevent does not call the platform getaddrinfo for dns requests, it has its own async methods\r\n\r\nThat explains why it doesn't hang, thanks!\r\n\r\nBut it does seem like it uses `getaddrinfo` in some cases: https://github.com/libevent/libevent/blob/75208132d5b7a8fff59ca3bf47253179ec314951/evutil.c#L1686",
      "created_at": "2023-04-21T14:26:51Z",
      "updated_at": "2023-04-21T14:26:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#discussion_r1173837388",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1173837388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27505"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1173902633",
      "pull_request_review_id": 1395974031,
      "id": 1173902633,
      "node_id": "PRRC_kwDOABII585F-FUp",
      "diff_hunk": "@@ -40,49 +42,71 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n-std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+void GAICallback(int errcode, struct evutil_addrinfo *addr, void *user_data)\n {\n-    addrinfo ai_hint{};\n+    struct DNSResolveResponse* res = (struct DNSResolveResponse*)user_data;\n+\n+    while (addr != nullptr) {\n+        if (addr->ai_family == AF_INET) {\n+            assert(addr->ai_addrlen >= sizeof(sockaddr_in));\n+            res->vAddr->emplace_back(reinterpret_cast<sockaddr_in*>(addr->ai_addr)->sin_addr);\n+        }\n+        if (addr->ai_family == AF_INET6) {\n+            assert(addr->ai_addrlen >= sizeof(sockaddr_in6));\n+            const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(addr->ai_addr)};\n+            res->vAddr->emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n+        }\n+        addr = addr->ai_next;\n+    }\n+    res->complete = true;\n+}\n+\n+std::vector<CNetAddr> DNSResolveAsync(const std::string& name, bool allow_lookup)\n+{\n+    raii_event_base base = obtain_event_base();\n+    raii_evdns_base dnsbase = obtain_evdns_base(base.get());\n+\n+    struct evutil_addrinfo hints{};\n     // We want a TCP port, which is a streaming socket type\n-    ai_hint.ai_socktype = SOCK_STREAM;\n-    ai_hint.ai_protocol = IPPROTO_TCP;\n+    hints.ai_socktype = SOCK_STREAM;\n+    hints.ai_protocol = IPPROTO_TCP;\n     // We don't care which address family (IPv4 or IPv6) is returned\n-    ai_hint.ai_family = AF_UNSPEC;\n-    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    hints.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the EVUTIL_AI_ADDRCONFIG flag to only\n     // return addresses whose family we have an address configured for.\n     //\n-    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // If we don't allow lookups, then use the EVUTIL_AI_NUMERICHOST flag for\n     // getaddrinfo to only decode numerical network addresses and suppress\n     // hostname lookups.\n-    ai_hint.ai_flags = allow_lookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n+    hints.ai_flags = allow_lookup ? EVUTIL_AI_ADDRCONFIG : EVUTIL_AI_NUMERICHOST;\n \n-    addrinfo* ai_res{nullptr};\n-    const int n_err{getaddrinfo(name.c_str(), nullptr, &ai_hint, &ai_res)};\n-    if (n_err != 0) {\n-        return {};\n+    std::vector<CNetAddr> resolved_addresses;\n+    struct DNSResolveResponse res = {.complete = false, .vAddr = &resolved_addresses};\n+\n+    auto req = evdns_getaddrinfo(dnsbase.get(), name.c_str(), nullptr, &hints, GAICallback, &res);\n+\n+    if (!req) {\n+        // evdns_getaddrinfo() returned immediately.\n+        // There might have been an error, or no name lookup was necessary\n+        return resolved_addresses;\n     }\n \n-    // Traverse the linked list starting with ai_trav.\n-    addrinfo* ai_trav{ai_res};\n-    std::vector<CNetAddr> resolved_addresses;\n-    while (ai_trav != nullptr) {\n-        if (ai_trav->ai_family == AF_INET) {\n-            assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in));\n-            resolved_addresses.emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n-        }\n-        if (ai_trav->ai_family == AF_INET6) {\n-            assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in6));\n-            const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(ai_trav->ai_addr)};\n-            resolved_addresses.emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n-        }\n-        ai_trav = ai_trav->ai_next;\n+    // We need to wait for the name resolution callback on a new temporary event loop\n+    std::thread thread(event_base_loop, base.get(), 1);\n+\n+    int checks = 0;\n+    while (!res.complete)\n+    {\n+        // Check every 100ms for 2 seconds\n+        if (++checks > 20) break;\n+        std::this_thread::sleep_for(std::chrono::milliseconds(100));\n     }\n-    freeaddrinfo(ai_res);\n \n+    thread.join();",
      "path": "src/netbase.cpp",
      "position": 113,
      "original_position": 100,
      "commit_id": "c94962d70043df04f6d4723900b694af5a6385fb",
      "original_commit_id": "fd6679b8f387e25cb197204fd6c8126834949e3f",
      "in_reply_to_id": 1173774847,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah I think thats just to decode numeric addresses like \"100.200.30.40\" etc. It looked to me like if an actual DNS request is necessary it has its own methods to make reqests directly to the nameservers provided by the platform? When things get \"serious\":\r\n\r\nhttps://github.com/libevent/libevent/blob/master/evdns.c#L5623",
      "created_at": "2023-04-21T15:22:08Z",
      "updated_at": "2023-04-21T15:22:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27505#discussion_r1173902633",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1173902633"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27505"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    }
  ]
}