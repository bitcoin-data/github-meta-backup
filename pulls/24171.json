{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171",
    "id": 832813973,
    "node_id": "PR_kwDOABII584xo7uV",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/24171",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/24171.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/24171.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24171",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24171/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/48262a00f58489d705314ee3c31136133040bb0e",
    "number": 24171,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "p2p: Sync chain more readily from inbound peers during IBD",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "When in IBD, if the honest chain is only known by inbound peers, then we must\r\neventually sync from them in order to learn it. This change allows us to\r\nperform initial headers sync and fetch blocks from inbound peers, if we have no\r\nblocks in flight.\r\n\r\nThe restriction on having no blocks in flight means that we will naturally\r\nthrottle our block downloads to any such inbound peers that we may be\r\ndownloading from, until we leave IBD. This is a tradeoff between preferring\r\noutbound peers for most of our block download, versus making sure we always\r\neventually will get blocks we need that are only known by inbound peers even\r\nduring IBD, as otherwise we may be stuck in IBD indefinitely (which could have\r\ncascading failure on the network, if a large fraction of the network managed to\r\nget stuck in IBD).\r\n\r\nNote that the test in the second commit fails on master, without the first commit.\r\n",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "created_at": "2022-01-26T21:09:21Z",
    "updated_at": "2022-06-21T20:35:51Z",
    "closed_at": "2022-06-02T20:35:30Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-06-02T20:35:29Z",
    "merge_commit_sha": "00ce8543f16f4357926eb6dc701ac6229142be80",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "sdaftuar:2022-01-download-from-inbound",
      "ref": "2022-01-download-from-inbound",
      "sha": "48262a00f58489d705314ee3c31136133040bb0e",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 28761781,
        "node_id": "MDEwOlJlcG9zaXRvcnkyODc2MTc4MQ==",
        "name": "bitcoin",
        "full_name": "sdaftuar/bitcoin",
        "owner": {
          "login": "sdaftuar",
          "id": 7463573,
          "node_id": "MDQ6VXNlcjc0NjM1NzM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sdaftuar",
          "html_url": "https://github.com/sdaftuar",
          "followers_url": "https://api.github.com/users/sdaftuar/followers",
          "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
          "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
          "repos_url": "https://api.github.com/users/sdaftuar/repos",
          "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sdaftuar/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sdaftuar/bitcoin",
        "archive_url": "https://api.github.com/repos/sdaftuar/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sdaftuar/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sdaftuar/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sdaftuar/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sdaftuar/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sdaftuar/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sdaftuar/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sdaftuar/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sdaftuar/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sdaftuar/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sdaftuar/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sdaftuar/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sdaftuar/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sdaftuar/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sdaftuar/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sdaftuar/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sdaftuar/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sdaftuar/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sdaftuar/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sdaftuar/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sdaftuar/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sdaftuar/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sdaftuar/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sdaftuar/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sdaftuar/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sdaftuar/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sdaftuar/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sdaftuar/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sdaftuar/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sdaftuar/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sdaftuar/bitcoin/hooks",
        "svn_url": "https://github.com/sdaftuar/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 245665,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:41:53Z",
        "created_at": "2015-01-04T02:52:13Z",
        "updated_at": "2023-02-11T10:16:01Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "1ab389b1bac1378e17b13a4c4a81c24b92745cfb",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 62,
    "deletions": 3,
    "changed_files": 3,
    "commits": 2,
    "review_comments": 13,
    "comments": 10
  },
  "events": [
    {
      "event": "commented",
      "id": 1022620930,
      "node_id": "IC_kwDOABII58488_UC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1022620930",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-26T21:30:29Z",
      "updated_at": "2022-01-26T21:30:29Z",
      "author_association": "MEMBER",
      "body": "See discussion in #21106, eg https://github.com/bitcoin/bitcoin/pull/21106#issuecomment-790834342",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#issuecomment-1022620930",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24171"
    },
    {
      "event": "labeled",
      "id": 5959729306,
      "node_id": "LE_lADOABII585CfTxUzwAAAAFjOkCa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5959729306",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-26T21:54:11Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "commented",
      "id": 1022682328,
      "node_id": "IC_kwDOABII58489OTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1022682328",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-26T23:03:51Z",
      "updated_at": "2022-06-02T23:24:25Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24970](https://github.com/bitcoin/bitcoin/pull/24970) (net processing: Move cleanSubVer, fPreferredDownload and nLocalHostNonce to Peer by jnewbery)\n* [#24008](https://github.com/bitcoin/bitcoin/pull/24008) (assumeutxo: net_processing changes by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#issuecomment-1022682328",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24171"
    },
    {
      "event": "reviewed",
      "id": 864503932,
      "node_id": "PRR_kwDOABII584zh0h8",
      "url": null,
      "actor": null,
      "commit_id": "4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. Makes sense to sync from inbounds if the outbounds don't provide any blocks. Seems like this is already the behaviour when there are no outbounds at all.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#pullrequestreview-864503932",
      "submitted_at": "2022-01-27T08:12:23Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
    },
    {
      "event": "reviewed",
      "id": 864539444,
      "node_id": "PRR_kwDOABII584zh9M0",
      "url": null,
      "actor": null,
      "commit_id": "4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#pullrequestreview-864539444",
      "submitted_at": "2022-01-27T08:46:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
    },
    {
      "event": "reviewed",
      "id": 864788591,
      "node_id": "PRR_kwDOABII584zi6Bv",
      "url": null,
      "actor": null,
      "commit_id": "4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK \r\n\r\nThis PR, along with the previous condition, incorporates a new condition for selecting the peer for downloading block headers. This condition states that if there are no preferred Peers to download and no BlockinFlight, download the blocks from available peer even if that is an inbound peer.\r\nI agree with the logic of this change described in the PR's description. I especially like the commenting of the code, which made it easier to reason with the code's logic. \r\n\r\nI shall ACK [this](https://github.com/bitcoin/bitcoin/pull/24171#discussion_r793348531) PR, as soon as this comment is addressed.\r\n",
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#pullrequestreview-864788591",
      "submitted_at": "2022-01-27T12:17:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
    },
    {
      "event": "reviewed",
      "id": 864932054,
      "node_id": "PRR_kwDOABII584zjdDW",
      "url": null,
      "actor": null,
      "commit_id": "4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept and review ACK 4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936, modulo https://github.com/bitcoin/bitcoin/pull/24171#discussion_r793348531. The test fails as expected on master with `AssertionError: Block sync timed out`.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#pullrequestreview-864932054",
      "submitted_at": "2022-01-27T14:18:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5964093476,
      "node_id": "HRFPE_lADOABII585CfTxUzwAAAAFjfNgk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5964093476",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-27T14:21:18Z"
    },
    {
      "event": "commented",
      "id": 1023262346,
      "node_id": "IC_kwDOABII5848_b6K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1023262346",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-27T14:23:28Z",
      "updated_at": "2022-01-27T14:23:28Z",
      "author_association": "MEMBER",
      "body": "Perhaps have a look at `test/functional/feature_minchainwork.py` to see if some of it needs updating with this change or if the test could be added there.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#issuecomment-1023262346",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24171"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5964133966,
      "node_id": "HRFPE_lADOABII585CfTxUzwAAAAFjfXZO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5964133966",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-27T14:26:45Z"
    },
    {
      "event": "commented",
      "id": 1023271127,
      "node_id": "IC_kwDOABII5848_eDX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1023271127",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-27T14:32:07Z",
      "updated_at": "2022-01-27T14:48:54Z",
      "author_association": "MEMBER",
      "body": "@jonatack See also #24178, where I do change the behavior of `nMinimumChainWork` and update the test for it.  \r\n\r\nI like the idea of having this very simple test from this PR in our repo, because I have stumbled upon this exact sequence of steps breaking in the past while writing tests, and I'd like that to never happen again! I do agree with you that there is likely room for further improving the `feature_minchainwork.py` test to incorporate this kind of logic too, but it seems like a bigger rewrite to me.\r\n\r\n---\r\n\r\nJust wanted to add an additional meta-review note; I think we could bikeshed the test here or the code style indefinitely, but more important to me is that we are happy with the changed criteria in this PR.  While I think my proposal here works overall, I do think there is plenty of room to criticize or defend the behavior I'm proposing, so I'd welcome feedback either way about the specifics of the change and the expected impact on the network.\r\n\r\nFor instance, one line of thinking is that perhaps we should not prefer outbound peers over inbound peers during IBD at all, now that `-maxuploadtarget` is a setting that users may use to prevent their node from serving historical blocks if they don't want to be doing that.  I opted for a smaller behavior change in this patch, but I could see the argument for making a bigger one (and honestly that would simplify our reasoning about initial sync much more!).",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#issuecomment-1023271127",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24171"
    },
    {
      "event": "mentioned",
      "id": 5964173680,
      "node_id": "MEE_lADOABII585CfTxUzwAAAAFjfhFw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5964173680",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-27T14:32:07Z"
    },
    {
      "event": "subscribed",
      "id": 5964173696,
      "node_id": "SE_lADOABII585CfTxUzwAAAAFjfhGA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5964173696",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-27T14:32:07Z"
    },
    {
      "event": "commented",
      "id": 1023285890,
      "node_id": "IC_kwDOABII5848_hqC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1023285890",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-27T14:47:04Z",
      "updated_at": "2022-01-27T14:47:04Z",
      "author_association": "MEMBER",
      "body": "ACK 15c1687642631ca5bd8ddd6aa316776aee7e3ccd",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#issuecomment-1023285890",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24171"
    },
    {
      "event": "commented",
      "id": 1023345714,
      "node_id": "IC_kwDOABII5848_wQy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1023345714",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-27T15:38:54Z",
      "updated_at": "2022-01-27T15:38:54Z",
      "author_association": "MEMBER",
      "body": "I've read the code on Github and I agree with the nature of the changes. The burden should always be on data providers to limit externally-requested bandwidth usage per their own thresholds (rather than relying on peers to be \"considerate\" a priori). On the other hand, unnecessary stalls (and certainly the prospect of network-wide stalls) in IBD are something worth avoiding. So this PR's strategy of allowing requests to inbound peers for blocks when no blocks are otherwise in flight seems reasonable and even preferable given the possibility of stalling otherwise.\r\n\r\nI'll review and test locally in a bit.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#issuecomment-1023345714",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24171"
    },
    {
      "event": "commented",
      "id": 1035063067,
      "node_id": "IC_kwDOABII5849sc8b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035063067",
      "actor": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-10T15:35:24Z",
      "updated_at": "2022-02-10T15:35:24Z",
      "author_association": "NONE",
      "body": "Concept ACK",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#issuecomment-1035063067",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24171"
    },
    {
      "event": "commented",
      "id": 1065029234,
      "node_id": "IC_kwDOABII584_ew5y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1065029234",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-11T11:31:18Z",
      "updated_at": "2022-03-11T11:31:18Z",
      "author_association": "MEMBER",
      "body": "ACK 15c1687642631ca5bd8ddd6aa316776aee7e3ccd\r\n\r\nI think it's a good change even if we opt for something bigger in the future.\r\nnit: We could have a one printed statement here saying `this chain is less trusted because it comes from inbound peers only`.\r\n",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#issuecomment-1065029234",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24171"
    },
    {
      "event": "reviewed",
      "id": 909399227,
      "node_id": "PRR_kwDOABII5842NFS7",
      "url": null,
      "actor": null,
      "commit_id": "15c1687642631ca5bd8ddd6aa316776aee7e3ccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nDownloading blocks from inbound peers when the outbound peers don't deliver sounds good to me.\r\n\r\nHowever `mapBlocksInFlight.empty()` might not be the best condition to determine if **headers** should be downloaded from an inbound peer. Just because there are no blocks in flight does not mean that the outbound peers won't deliver headers.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#pullrequestreview-909399227",
      "submitted_at": "2022-03-14T21:22:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
    },
    {
      "event": "reviewed",
      "id": 910088362,
      "node_id": "PRR_kwDOABII5842Ptiq",
      "url": null,
      "actor": null,
      "commit_id": "15c1687642631ca5bd8ddd6aa316776aee7e3ccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "@dergoegge Thanks for the review and flagging the question about headers sync. I believe the logic I'm proposing here works ok because the test of whether we actually try for headers sync with an inbound peer isn't only based on whether `mapBlocksInFlight` is empty, but also if `nSyncStarted == 0` (our guard to try to sync headers from only one peer at a time).  So in order for us to pick an inbound peer for headers sync, it would have to be the case that we somehow have not yet picked an existing outbound peer for headers sync.\r\n\r\nThis could happen if (1) an outbound peer stalls headers sync and we disconnect them, or if (2) we happen to connect to an inbound peer before any outbound peers are established.  I think case (1) is unlikely because if any peer sends us a block INV during the period that we're waiting on headers, we'll initiate headers sync with that peer (we send a `getheaders` in response to INV messages), and the window for headers sync to complete should be something like 20 minutes.\r\n\r\nCase (2) is a somewhat unavoidable issue, because when we start up we don't know if we'll have any outbound peers and so if we don't try to sync from an inbound peer eventually, we may never sync the chain.  (And this is how the logic works today already.)",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#pullrequestreview-910088362",
      "submitted_at": "2022-03-15T12:14:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
    },
    {
      "event": "labeled",
      "id": 6462343204,
      "node_id": "LE_lADOABII585CfTxUzwAAAAGBL4gk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6462343204",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-20T11:24:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 951449800,
      "node_id": "PRR_kwDOABII5844tfjI",
      "url": null,
      "actor": null,
      "commit_id": "15c1687642631ca5bd8ddd6aa316776aee7e3ccd",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "Sammiesorrow27",
        "id": 92549512,
        "node_id": "U_kgDOBYQxiA",
        "avatar_url": "https://avatars.githubusercontent.com/u/92549512?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sammiesorrow27",
        "html_url": "https://github.com/Sammiesorrow27",
        "followers_url": "https://api.github.com/users/Sammiesorrow27/followers",
        "following_url": "https://api.github.com/users/Sammiesorrow27/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sammiesorrow27/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sammiesorrow27/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sammiesorrow27/subscriptions",
        "organizations_url": "https://api.github.com/users/Sammiesorrow27/orgs",
        "repos_url": "https://api.github.com/users/Sammiesorrow27/repos",
        "events_url": "https://api.github.com/users/Sammiesorrow27/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sammiesorrow27/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#pullrequestreview-951449800",
      "submitted_at": "2022-04-25T07:31:35Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA1NjliNWM0YmJmOGY3MjVlMzk2OWQ3NmY3Y2IwODFjZGYxZTQxOTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0569b5c4bbf8f725e3969d76f7cb081cdf1e4195",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0569b5c4bbf8f725e3969d76f7cb081cdf1e4195",
      "tree": {
        "sha": "2add01246cfe387d8f48e8923d7768438dc0f0db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2add01246cfe387d8f48e8923d7768438dc0f0db"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/225e5b57b2ee2bc1acd7f09c89ccccc15ef8c85f",
          "sha": "225e5b57b2ee2bc1acd7f09c89ccccc15ef8c85f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/225e5b57b2ee2bc1acd7f09c89ccccc15ef8c85f"
        }
      ],
      "message": "Sync chain more readily from inbound peers during IBD\n\nWhen in IBD, if the honest chain is only known by inbound peers, then we must\neventually sync from them in order to learn it. This change allows us to\nperform initial headers sync and fetch blocks from inbound peers, if we have no\nblocks in flight.\n\nThe restriction on having no blocks in flight means that we will naturally\nthrottle our block downloads to any such inbound peers that we may be\ndownloading from, until we leave IBD. This is a tradeoff between preferring\noutbound peers for most of our block download, versus making sure we always\neventually will get blocks we need that are only known by inbound peers even\nduring IBD, as otherwise we may be stuck in IBD indefinitely (which could have\ncascading failure on the network, if a large fraction of the network managed to\nget stuck in IBD).",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-05-17T13:36:47Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-01-26T20:40:09Z"
      },
      "sha": "0569b5c4bbf8f725e3969d76f7cb081cdf1e4195"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ4MjYyYTAwZjU4NDg5ZDcwNTMxNGVlM2MzMTEzNjEzMzA0MGJiMGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48262a00f58489d705314ee3c31136133040bb0e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/48262a00f58489d705314ee3c31136133040bb0e",
      "tree": {
        "sha": "3e0a3eda6baf63cf0cf728ddc3802f6a355d1f99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e0a3eda6baf63cf0cf728ddc3802f6a355d1f99"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0569b5c4bbf8f725e3969d76f7cb081cdf1e4195",
          "sha": "0569b5c4bbf8f725e3969d76f7cb081cdf1e4195",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0569b5c4bbf8f725e3969d76f7cb081cdf1e4195"
        }
      ],
      "message": "Add functional test for block sync from inbound peers",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-05-17T13:36:49Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-01-26T20:59:09Z"
      },
      "sha": "48262a00f58489d705314ee3c31136133040bb0e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6624614565,
      "node_id": "HRFPE_lADOABII585CfTxUzwAAAAGK25il",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6624614565",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-17T13:40:49Z"
    },
    {
      "event": "unlabeled",
      "id": 6624886801,
      "node_id": "UNLE_lADOABII585CfTxUzwAAAAGK38AR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6624886801",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-17T14:12:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1144252717,
      "node_id": "IC_kwDOABII585EM-kt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1144252717",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-01T23:44:19Z",
      "updated_at": "2022-06-01T23:44:19Z",
      "author_association": "MEMBER",
      "body": "ACK 48262a00f58489d705314ee3c31136133040bb0e\r\n\r\nSeems like a straightforward improvement, as demonstrated by the test case. Seems to me like there could be better conditions, but better to deploy a simple improvement now than debate forever about the best possible logic and deploy nothing.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#issuecomment-1144252717",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24171"
    },
    {
      "event": "commented",
      "id": 1145204661,
      "node_id": "IC_kwDOABII585EQm-1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1145204661",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-02T18:54:49Z",
      "updated_at": "2022-06-02T18:54:49Z",
      "author_association": "MEMBER",
      "body": "ACK 48262a00f58489d705314ee3c31136133040bb0e",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#issuecomment-1145204661",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24171"
    },
    {
      "event": "merged",
      "id": 6731455267,
      "node_id": "ME_lADOABII585CfTxUzwAAAAGROdsj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6731455267",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "00ce8543f16f4357926eb6dc701ac6229142be80",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00ce8543f16f4357926eb6dc701ac6229142be80",
      "created_at": "2022-06-02T20:35:29Z"
    },
    {
      "event": "closed",
      "id": 6731455284,
      "node_id": "CE_lADOABII585CfTxUzwAAAAGROds0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6731455284",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-02T20:35:30Z"
    },
    {
      "event": "referenced",
      "id": 6738554719,
      "node_id": "REFE_lADOABII585CfTxUzwAAAAGRpi9f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6738554719",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8c3c29b815f807886b1ae76dee719dfceafcd4d2",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/8c3c29b815f807886b1ae76dee719dfceafcd4d2",
      "created_at": "2022-06-03T17:30:07Z"
    },
    {
      "event": "reviewed",
      "id": 996642866,
      "node_id": "PRR_kwDOABII5847Z5Ay",
      "url": null,
      "actor": null,
      "commit_id": "48262a00f58489d705314ee3c31136133040bb0e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Post-merge re-ACK 48262a00f58489d705314ee3c31136133040bb0e\r\n\r\nExpanded the test to verify explicitly for myself that both of the sites using the `sync_blocks_and_headers_from_peer` logic are hit in `p2p_block_sync.py`, by checking that `node1` sends both an `initial getheaders` and a `getdata (blocks)` message.\r\n\r\n```diff\r\ndiff --git a/test/functional/p2p_block_sync.py b/test/functional/p2p_block_sync.py\r\nindex d821edc1b1..b76a02b295 100755\r\n--- a/test/functional/p2p_block_sync.py\r\n+++ b/test/functional/p2p_block_sync.py\r\n@@ -28,8 +28,14 @@ class BlockSyncTest(BitcoinTestFramework):\r\n \r\n     def run_test(self):\r\n         self.log.info(\"Setup network: node0->node1->node2\")\r\n-        self.log.info(\"Mining one block on node0 and verify all nodes sync\")\r\n-        self.generate(self.nodes[0], 1)\r\n+        self.log.info(\"Mine one block on node0, verify all nodes sync, and that node1 sends an initial getheaders and a getdata (blocks)\")\r\n+        with self.nodes[1].assert_debug_log(\r\n+            expected_msgs=[\r\n+                \"[SendMessages] [net] initial getheaders (0) to peer=1 (startheight:0)\",\r\n+                \"[SendMessages] [net] Requesting block \", \" (1) peer=0\",\r\n+            ]\r\n+        ):\r\n+            self.generate(self.nodes[0], 1)\r\n         self.log.info(\"Success!\")\r\n```\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#pullrequestreview-996642866",
      "submitted_at": "2022-06-06T13:49:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793348531",
      "pull_request_review_id": 864503932,
      "id": 793348531,
      "node_id": "PRRC_kwDOABII584vSYmz",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test block download\n+\n+Ensure that even in IBD, we'll eventually sync chain from inbound peers\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class BlockSyncTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+\n+    def run_test(self):\n+        self.log.info(\"Setup network: node0->node1->node2\")\n+        self.log.info(\"Mining one block on node0\")\n+        self.generate(self.nodes[0], 1)\n+        self.log.info(\"Check that all nodes synced\")\n+        self.sync_all()",
      "path": "test/functional/p2p_block_sync.py",
      "position": null,
      "original_position": 28,
      "commit_id": "48262a00f58489d705314ee3c31136133040bb0e",
      "original_commit_id": "4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think this can be removed, since `self.generate` already calls this internally (and fails if the sync fails).\r\n\r\nIt might also be good to explain why three nodes are needed and why node0->node1 isn't sufficient to test this.\r\n\r\nMy understanding is that this is setting up `node1` as the subject under test. Having an outbound and an inbound connection, of which the outbound is selected for block download, but fails to provide any data. The test would pass with just `node0->node1` setup which means that we already sync from inbound peers if there are no outbounds at all?",
      "created_at": "2022-01-27T08:10:15Z",
      "updated_at": "2022-01-27T08:12:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#discussion_r793348531",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793348531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793374177",
      "pull_request_review_id": 864539444,
      "id": 793374177,
      "node_id": "PRRC_kwDOABII584vSe3h",
      "diff_hunk": "@@ -4599,10 +4599,31 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         // Start block sync\n         if (pindexBestHeader == nullptr)\n             pindexBestHeader = m_chainman.ActiveChain().Tip();\n-        bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->IsAddrFetchConn()); // Download if this is a nice peer, or we have no nice peers and this one might do.\n+\n+        // Determine whether we might try initial headers sync or parallel\n+        // block download from this peer -- this mostly affects behavior while\n+        // in IBD (once out of IBD, we sync from all peers).\n+        bool sync_blocks_and_headers_from_peer = false;\n+        if (state.fPreferredDownload) {\n+            sync_blocks_and_headers_from_peer = true;\n+        } else if (!pto->fClient && !pto->IsAddrFetchConn()) {\n+            // Typically this is an inbound peer. If we don't have any outbound\n+            // peers, or if we aren't downloading any blocks from such peers,\n+            // then allow block downloads from this peer, too.\n+            // We prefer downloading blocks from outbound peers to avoid\n+            // putting undue load on (say) some home user who is just making\n+            // outbound connections to the network, but if our only source of\n+            // the latest blocks is from an inbound peer, we have to be sure to\n+            // eventually download it (and not just wait indefinitely for an\n+            // outbound peer to have it).\n+            if (nPreferredDownload == 0 || mapBlocksInFlight.empty()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "48262a00f58489d705314ee3c31136133040bb0e",
      "original_commit_id": "4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936",
      "in_reply_to_id": null,
      "user": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I would prefer combining this smth like \r\n```suggestion\r\n        } else if (!pto->fClient && !pto->IsAddrFetchConn()) &&\r\n                  (nPreferredDownload == 0 || mapBlocksInFlight.empty())) {\r\n            // Typically this is an inbound peer. If we don't have any outbound\r\n            // peers, or if we aren't downloading any blocks from such peers,\r\n            // then allow block downloads from this peer, too.\r\n            // We prefer downloading blocks from outbound peers to avoid\r\n            // putting undue load on (say) some home user who is just making\r\n            // outbound connections to the network, but if our only source of\r\n            // the latest blocks is from an inbound peer, we have to be sure to\r\n            // eventually download it (and not just wait indefinitely for an\r\n            // outbound peer to have it).\r\n```",
      "created_at": "2022-01-27T08:44:39Z",
      "updated_at": "2022-01-27T08:46:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#discussion_r793374177",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793374177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
        }
      },
      "start_line": null,
      "original_start_line": 4609,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 4619,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793508926",
      "pull_request_review_id": 864732367,
      "id": 793508926,
      "node_id": "PRRC_kwDOABII584vS_w-",
      "diff_hunk": "@@ -4599,10 +4599,31 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         // Start block sync\n         if (pindexBestHeader == nullptr)\n             pindexBestHeader = m_chainman.ActiveChain().Tip();\n-        bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->IsAddrFetchConn()); // Download if this is a nice peer, or we have no nice peers and this one might do.\n+\n+        // Determine whether we might try initial headers sync or parallel\n+        // block download from this peer -- this mostly affects behavior while\n+        // in IBD (once out of IBD, we sync from all peers).\n+        bool sync_blocks_and_headers_from_peer = false;\n+        if (state.fPreferredDownload) {\n+            sync_blocks_and_headers_from_peer = true;\n+        } else if (!pto->fClient && !pto->IsAddrFetchConn()) {\n+            // Typically this is an inbound peer. If we don't have any outbound\n+            // peers, or if we aren't downloading any blocks from such peers,\n+            // then allow block downloads from this peer, too.\n+            // We prefer downloading blocks from outbound peers to avoid\n+            // putting undue load on (say) some home user who is just making\n+            // outbound connections to the network, but if our only source of\n+            // the latest blocks is from an inbound peer, we have to be sure to\n+            // eventually download it (and not just wait indefinitely for an\n+            // outbound peer to have it).\n+            if (nPreferredDownload == 0 || mapBlocksInFlight.empty()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "48262a00f58489d705314ee3c31136133040bb0e",
      "original_commit_id": "4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936",
      "in_reply_to_id": 793374177,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I prefer the current arrangement of the conditions, because:\r\n1. The following comment says: `Typically this is an inbound peer.` This here is referring to the conditions `!pto->fClient && !pto->IsAddrFetchConn()` describing the node from which we want to fetch the block header. The other two conditions are specific to our node, which are checking if there is any preferred block to download on our side or if we have **Blocks in Flight**. Merging these two sets of conditions would make the following comment confusing.\r\n2. Keeping these two sets of conditions separate makes it easier to understand the code’s logic and easier to follow with the comments.\r\n",
      "created_at": "2022-01-27T11:21:51Z",
      "updated_at": "2022-01-27T11:21:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#discussion_r793508926",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793508926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
        }
      },
      "start_line": null,
      "original_start_line": 4609,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 4619,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793544072",
      "pull_request_review_id": 864781569,
      "id": 793544072,
      "node_id": "PRRC_kwDOABII584vTIWI",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test block download\n+\n+Ensure that even in IBD, we'll eventually sync chain from inbound peers\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class BlockSyncTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+\n+    def run_test(self):\n+        self.log.info(\"Setup network: node0->node1->node2\")\n+        self.log.info(\"Mining one block on node0\")\n+        self.generate(self.nodes[0], 1)\n+        self.log.info(\"Check that all nodes synced\")\n+        self.sync_all()",
      "path": "test/functional/p2p_block_sync.py",
      "position": null,
      "original_position": 28,
      "commit_id": "48262a00f58489d705314ee3c31136133040bb0e",
      "original_commit_id": "4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936",
      "in_reply_to_id": 793348531,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I checked for the suggestions of @MarcoFalke, and made sure they were correct. In the definition of the `generate` function, `sync_all` is being called by default.\r\nhttps://github.com/bitcoin/bitcoin/blob/master/test/functional/test_framework/test_framework.py#L633-L636\r\nAlso, I checked that the test works perfectly with just two nodes, 0 and 1.\r\nI made the following changes to the test to incorporate the suggestions.\r\n\r\n**Diff:**\r\n\r\n```diff\r\n     def set_test_params(self):\r\n         self.setup_clean_chain = True\r\n-        self.num_nodes = 3\r\n+        self.num_nodes = 2\r\n \r\n     def setup_network(self):\r\n         self.setup_nodes()\r\n         self.connect_nodes(0, 1)\r\n-        self.connect_nodes(1, 2)\r\n \r\n     def run_test(self):\r\n-        self.log.info(\"Setup network: node0->node1->node2\")\r\n-        self.log.info(\"Mining one block on node0\")\r\n+        self.log.info(\"Setup network: node0->node1\")\r\n+        self.log.info(\"Mining one block on node0 and check that all nodes synced\")\r\n         self.generate(self.nodes[0], 1)\r\n-        self.log.info(\"Check that all nodes synced\")\r\n-        self.sync_all()\r\n         self.log.info(\"Success!\")\r\n\r\n\r\n```\r\n",
      "created_at": "2022-01-27T12:10:58Z",
      "updated_at": "2022-01-27T12:10:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#discussion_r793544072",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793544072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793548467",
      "pull_request_review_id": 864787823,
      "id": 793548467,
      "node_id": "PRRC_kwDOABII584vTJaz",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test block download\n+\n+Ensure that even in IBD, we'll eventually sync chain from inbound peers\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class BlockSyncTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+\n+    def run_test(self):\n+        self.log.info(\"Setup network: node0->node1->node2\")\n+        self.log.info(\"Mining one block on node0\")\n+        self.generate(self.nodes[0], 1)\n+        self.log.info(\"Check that all nodes synced\")\n+        self.sync_all()",
      "path": "test/functional/p2p_block_sync.py",
      "position": null,
      "original_position": 28,
      "commit_id": "48262a00f58489d705314ee3c31136133040bb0e",
      "original_commit_id": "4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936",
      "in_reply_to_id": 793348531,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">  Also, I checked that the test works perfectly with just two nodes, 0 and 1.\r\n\r\nJup, the test with two nodes is passing on master and this pull. I think the goal of the test was to have a test that *fails* on master, but passes with this pull. For this you need three nodes.",
      "created_at": "2022-01-27T12:17:05Z",
      "updated_at": "2022-01-27T12:17:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#discussion_r793548467",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793548467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793561848",
      "pull_request_review_id": 864806675,
      "id": 793561848,
      "node_id": "PRRC_kwDOABII584vTMr4",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test block download\n+\n+Ensure that even in IBD, we'll eventually sync chain from inbound peers\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class BlockSyncTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+\n+    def run_test(self):\n+        self.log.info(\"Setup network: node0->node1->node2\")\n+        self.log.info(\"Mining one block on node0\")\n+        self.generate(self.nodes[0], 1)\n+        self.log.info(\"Check that all nodes synced\")\n+        self.sync_all()",
      "path": "test/functional/p2p_block_sync.py",
      "position": null,
      "original_position": 28,
      "commit_id": "48262a00f58489d705314ee3c31136133040bb0e",
      "original_commit_id": "4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936",
      "in_reply_to_id": 793348531,
      "user": {
        "login": "shaavan",
        "id": 85434418,
        "node_id": "MDQ6VXNlcjg1NDM0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/85434418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shaavan",
        "html_url": "https://github.com/shaavan",
        "followers_url": "https://api.github.com/users/shaavan/followers",
        "following_url": "https://api.github.com/users/shaavan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shaavan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shaavan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shaavan/subscriptions",
        "organizations_url": "https://api.github.com/users/shaavan/orgs",
        "repos_url": "https://api.github.com/users/shaavan/repos",
        "events_url": "https://api.github.com/users/shaavan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shaavan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Jup, the test with two nodes is passing on master and this pull. I think the goal of the test was to have a test that fails on master but passes with this pull.\r\n\r\nI just confirmed that it's true. I think the number of nodes should be kept at 3.\r\n\r\nWe can still incorporate the following change to the test to remove redundancy from it:\r\n\r\nDiff: \r\n\r\n```diff\r\ndef run_test(self):\r\n         self.log.info(\"Setup network: node0->node1->node2\")\r\n-        self.log.info(\"Mining one block on node0\")\r\n+        self.log.info(\"Mining one block on node0 and check that all nodes synced\")\r\n         self.generate(self.nodes[0], 1)\r\n-        self.log.info(\"Check that all nodes synced\")\r\n-        self.sync_all()\r\n         self.log.info(\"Success!\")\r\n\r\n```",
      "created_at": "2022-01-27T12:35:11Z",
      "updated_at": "2022-01-27T12:47:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#discussion_r793561848",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793561848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793658207",
      "pull_request_review_id": 864945857,
      "id": 793658207,
      "node_id": "PRRC_kwDOABII584vTkNf",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test block download\n+\n+Ensure that even in IBD, we'll eventually sync chain from inbound peers\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class BlockSyncTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+\n+    def run_test(self):\n+        self.log.info(\"Setup network: node0->node1->node2\")\n+        self.log.info(\"Mining one block on node0\")\n+        self.generate(self.nodes[0], 1)\n+        self.log.info(\"Check that all nodes synced\")\n+        self.sync_all()",
      "path": "test/functional/p2p_block_sync.py",
      "position": null,
      "original_position": 28,
      "commit_id": "48262a00f58489d705314ee3c31136133040bb0e",
      "original_commit_id": "4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936",
      "in_reply_to_id": 793348531,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> My understanding is that this is setting up node1 as the subject under test. Having an outbound and an inbound connection, of which the outbound is selected for block download, but fails to provide any data. The test would pass with just node0->node1 setup which means that we already sync from inbound peers if there are no outbounds at all?\r\n\r\n@MarcoFalke Yes that is correct. We already had logic in place to download blocks from inbound peers in the case that we had no outbound peers, but prior to this patch we have had no way to download blocks that are only known by inbound peers if we're in IBD.",
      "created_at": "2022-01-27T14:27:09Z",
      "updated_at": "2022-01-27T14:27:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#discussion_r793658207",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793658207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793658837",
      "pull_request_review_id": 864946560,
      "id": 793658837,
      "node_id": "PRRC_kwDOABII584vTkXV",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test block download\n+\n+Ensure that even in IBD, we'll eventually sync chain from inbound peers\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class BlockSyncTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+\n+    def run_test(self):\n+        self.log.info(\"Setup network: node0->node1->node2\")\n+        self.log.info(\"Mining one block on node0\")\n+        self.generate(self.nodes[0], 1)\n+        self.log.info(\"Check that all nodes synced\")\n+        self.sync_all()",
      "path": "test/functional/p2p_block_sync.py",
      "position": null,
      "original_position": 28,
      "commit_id": "48262a00f58489d705314ee3c31136133040bb0e",
      "original_commit_id": "4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936",
      "in_reply_to_id": 793348531,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've updated the test comments and removed the `self.sync_all()` call.",
      "created_at": "2022-01-27T14:27:39Z",
      "updated_at": "2022-01-27T14:27:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#discussion_r793658837",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793658837"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793661257",
      "pull_request_review_id": 864949388,
      "id": 793661257,
      "node_id": "PRRC_kwDOABII584vTk9J",
      "diff_hunk": "@@ -4599,10 +4599,31 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         // Start block sync\n         if (pindexBestHeader == nullptr)\n             pindexBestHeader = m_chainman.ActiveChain().Tip();\n-        bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->IsAddrFetchConn()); // Download if this is a nice peer, or we have no nice peers and this one might do.\n+\n+        // Determine whether we might try initial headers sync or parallel\n+        // block download from this peer -- this mostly affects behavior while\n+        // in IBD (once out of IBD, we sync from all peers).\n+        bool sync_blocks_and_headers_from_peer = false;\n+        if (state.fPreferredDownload) {\n+            sync_blocks_and_headers_from_peer = true;\n+        } else if (!pto->fClient && !pto->IsAddrFetchConn()) {\n+            // Typically this is an inbound peer. If we don't have any outbound\n+            // peers, or if we aren't downloading any blocks from such peers,\n+            // then allow block downloads from this peer, too.\n+            // We prefer downloading blocks from outbound peers to avoid\n+            // putting undue load on (say) some home user who is just making\n+            // outbound connections to the network, but if our only source of\n+            // the latest blocks is from an inbound peer, we have to be sure to\n+            // eventually download it (and not just wait indefinitely for an\n+            // outbound peer to have it).\n+            if (nPreferredDownload == 0 || mapBlocksInFlight.empty()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "48262a00f58489d705314ee3c31136133040bb0e",
      "original_commit_id": "4fdd7fe3ea347efc6e6b16c9dd9e2ea9950e6936",
      "in_reply_to_id": 793374177,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I don't think many code reviewers will find the new arrangement of these conditions meaningfully harder to read than the old code here, and I do expect that many reviewers would indeed find the old code much harder to read, so I'm inclined to leave this as I've rewritten it.",
      "created_at": "2022-01-27T14:29:31Z",
      "updated_at": "2022-01-27T14:29:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#discussion_r793661257",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/793661257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
        }
      },
      "start_line": null,
      "original_start_line": 4609,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 4619,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826381201",
      "pull_request_review_id": 909399227,
      "id": 826381201,
      "node_id": "PRRC_kwDOABII584xQZOR",
      "diff_hunk": "@@ -4599,10 +4599,31 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         // Start block sync\n         if (pindexBestHeader == nullptr)\n             pindexBestHeader = m_chainman.ActiveChain().Tip();\n-        bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->IsAddrFetchConn()); // Download if this is a nice peer, or we have no nice peers and this one might do.\n+\n+        // Determine whether we might try initial headers sync or parallel\n+        // block download from this peer -- this mostly affects behavior while\n+        // in IBD (once out of IBD, we sync from all peers).\n+        bool sync_blocks_and_headers_from_peer = false;\n+        if (state.fPreferredDownload) {\n+            sync_blocks_and_headers_from_peer = true;\n+        } else if (!pto->fClient && !pto->IsAddrFetchConn()) {\n+            // Typically this is an inbound peer. If we don't have any outbound\n+            // peers, or if we aren't downloading any blocks from such peers,\n+            // then allow block downloads from this peer, too.\n+            // We prefer downloading blocks from outbound peers to avoid\n+            // putting undue load on (say) some home user who is just making\n+            // outbound connections to the network, but if our only source of\n+            // the latest blocks is from an inbound peer, we have to be sure to\n+            // eventually download it (and not just wait indefinitely for an\n+            // outbound peer to have it).\n+            if (nPreferredDownload == 0 || mapBlocksInFlight.empty()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "48262a00f58489d705314ee3c31136133040bb0e",
      "original_commit_id": "15c1687642631ca5bd8ddd6aa316776aee7e3ccd",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "iiuc the logic here is supposed to allow block/header downloads from inbound peers when the outbound peers don't deliver but this seems to ignore the preference for outbound peers during the initial header sync. Should `pto` be an inbound peer on the first call to `SendMessages` then we would request initial header sync from `pto` since there are no blocks in flight at that time. However none of the outbound peers have done anything wrong (e.g. stall header download) that should make us prefer the inbound peer.",
      "created_at": "2022-03-14T21:09:30Z",
      "updated_at": "2022-03-14T21:22:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#discussion_r826381201",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826381201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4619,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826891235",
      "pull_request_review_id": 910088362,
      "id": 826891235,
      "node_id": "PRRC_kwDOABII584xSVvj",
      "diff_hunk": "@@ -4599,10 +4599,31 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         // Start block sync\n         if (pindexBestHeader == nullptr)\n             pindexBestHeader = m_chainman.ActiveChain().Tip();\n-        bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->IsAddrFetchConn()); // Download if this is a nice peer, or we have no nice peers and this one might do.\n+\n+        // Determine whether we might try initial headers sync or parallel\n+        // block download from this peer -- this mostly affects behavior while\n+        // in IBD (once out of IBD, we sync from all peers).\n+        bool sync_blocks_and_headers_from_peer = false;\n+        if (state.fPreferredDownload) {\n+            sync_blocks_and_headers_from_peer = true;\n+        } else if (!pto->fClient && !pto->IsAddrFetchConn()) {\n+            // Typically this is an inbound peer. If we don't have any outbound\n+            // peers, or if we aren't downloading any blocks from such peers,\n+            // then allow block downloads from this peer, too.\n+            // We prefer downloading blocks from outbound peers to avoid\n+            // putting undue load on (say) some home user who is just making\n+            // outbound connections to the network, but if our only source of\n+            // the latest blocks is from an inbound peer, we have to be sure to\n+            // eventually download it (and not just wait indefinitely for an\n+            // outbound peer to have it).\n+            if (nPreferredDownload == 0 || mapBlocksInFlight.empty()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "48262a00f58489d705314ee3c31136133040bb0e",
      "original_commit_id": "15c1687642631ca5bd8ddd6aa316776aee7e3ccd",
      "in_reply_to_id": 826381201,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If our first connection is an inbound peer, then our existing logic is likely to perform initial headers sync from that peer anyway (because we'll sync from an inbound peer if we have no outbounds).  So inherently there's some risk if inbound and outbound connections are racing each other at startup that we might pick an inbound peer for initial sync. \r\n\r\nOn the other hand, if we have multiple peers (inbound and outbound), then once we've begun initial headers sync with one peer (and `nSyncStarted` gets incremented above 0), then we won't initiate headers sync based on this test anymore -- instead the new test becomes whether our headers chain is close to caught up (see line 4626 below).",
      "created_at": "2022-03-15T11:58:04Z",
      "updated_at": "2022-03-15T12:14:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#discussion_r826891235",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/826891235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4619,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/829363937",
      "pull_request_review_id": 913511065,
      "id": 829363937,
      "node_id": "PRRC_kwDOABII584xbxbh",
      "diff_hunk": "@@ -4599,10 +4599,31 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         // Start block sync\n         if (pindexBestHeader == nullptr)\n             pindexBestHeader = m_chainman.ActiveChain().Tip();\n-        bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->IsAddrFetchConn()); // Download if this is a nice peer, or we have no nice peers and this one might do.\n+\n+        // Determine whether we might try initial headers sync or parallel\n+        // block download from this peer -- this mostly affects behavior while\n+        // in IBD (once out of IBD, we sync from all peers).\n+        bool sync_blocks_and_headers_from_peer = false;\n+        if (state.fPreferredDownload) {\n+            sync_blocks_and_headers_from_peer = true;\n+        } else if (!pto->fClient && !pto->IsAddrFetchConn()) {\n+            // Typically this is an inbound peer. If we don't have any outbound\n+            // peers, or if we aren't downloading any blocks from such peers,\n+            // then allow block downloads from this peer, too.\n+            // We prefer downloading blocks from outbound peers to avoid\n+            // putting undue load on (say) some home user who is just making\n+            // outbound connections to the network, but if our only source of\n+            // the latest blocks is from an inbound peer, we have to be sure to\n+            // eventually download it (and not just wait indefinitely for an\n+            // outbound peer to have it).\n+            if (nPreferredDownload == 0 || mapBlocksInFlight.empty()) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "48262a00f58489d705314ee3c31136133040bb0e",
      "original_commit_id": "15c1687642631ca5bd8ddd6aa316776aee7e3ccd",
      "in_reply_to_id": 826381201,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think I overestimated our preference for initial header sync from outbound peers and my concerns were to conservative considering the current syncing logic. My assumption was that we very strongly prefer outbound peers to avoid being fed an alternative chain but it seems that we already accept headers during IBD from any peer (inbound/outbound) whether we requested initial sync from them or not.\r\n\r\nThank you for your detailed response!",
      "created_at": "2022-03-17T18:20:11Z",
      "updated_at": "2022-03-17T18:20:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24171#discussion_r829363937",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/829363937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24171"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4619,
      "side": "RIGHT"
    }
  ]
}