{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794",
    "id": 902134124,
    "node_id": "PR_kwDOABII5841xXls",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/24794",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/24794.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/24794.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24794",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24794/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/47b66ac4acd148da9fd0d894574f8bb3b3b33368",
    "number": 24794,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "lint: Convert Python linter to Python",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The outputs provided by the Python version should be exactly the same as the ones from the shell version.\r\n\r\nThere is small improvement here: Previously only the dependency of `flake9` was checked, now all dependencies are checked before running.\r\n\r\nI also tried to mostly follow the [recommendations here](https://github.com/bitcoin/bitcoin/pull/24766#pullrequestreview-932953476) but happy to make more changes if there is still room for improvement.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2022-04-06T23:56:22Z",
    "updated_at": "2023-04-18T14:44:24Z",
    "closed_at": "2022-04-18T16:51:36Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-04-18T16:51:36Z",
    "merge_commit_sha": "57a73d71a36ce212977607d3e94de6ef55521bfc",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "fjahr:202204-lint-py-py",
      "ref": "202204-lint-py-py",
      "sha": "47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 196253948,
        "node_id": "MDEwOlJlcG9zaXRvcnkxOTYyNTM5NDg=",
        "name": "bitcoin",
        "full_name": "fjahr/bitcoin",
        "owner": {
          "login": "fjahr",
          "id": 1322187,
          "node_id": "MDQ6VXNlcjEzMjIxODc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/fjahr",
          "html_url": "https://github.com/fjahr",
          "followers_url": "https://api.github.com/users/fjahr/followers",
          "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
          "organizations_url": "https://api.github.com/users/fjahr/orgs",
          "repos_url": "https://api.github.com/users/fjahr/repos",
          "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/fjahr/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/fjahr/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/fjahr/bitcoin",
        "archive_url": "https://api.github.com/repos/fjahr/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/fjahr/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/fjahr/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/fjahr/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/fjahr/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/fjahr/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/fjahr/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/fjahr/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/fjahr/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/fjahr/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/fjahr/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/fjahr/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/fjahr/bitcoin/events",
        "forks_url": "https://api.github.com/repos/fjahr/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/fjahr/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/fjahr/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/fjahr/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/fjahr/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/fjahr/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/fjahr/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/fjahr/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/fjahr/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/fjahr/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/fjahr/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/fjahr/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/fjahr/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/fjahr/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/fjahr/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/fjahr/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:fjahr/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/fjahr/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/fjahr/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/fjahr/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/fjahr/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/fjahr/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/fjahr/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/fjahr/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/fjahr/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/fjahr/bitcoin/hooks",
        "svn_url": "https://github.com/fjahr/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 218657,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-24T19:49:55Z",
        "created_at": "2019-07-10T18:11:06Z",
        "updated_at": "2022-02-24T18:41:19Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "2074d7df20ebc100db6a7b2c3b784ef0bdb8753f",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 134,
    "deletions": 114,
    "changed_files": 3,
    "commits": 1,
    "review_comments": 11,
    "comments": 7
  },
  "events": [
    {
      "event": "labeled",
      "id": 6384398405,
      "node_id": "LE_lADOABII585HPxvczwAAAAF8ijBF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6384398405",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-07T00:41:44Z",
      "label": {
        "name": "Docs",
        "color": "02d7e1"
      }
    },
    {
      "event": "labeled",
      "id": 6384398407,
      "node_id": "LE_lADOABII585HPxvczwAAAAF8ijBH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6384398407",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-07T00:41:44Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "unlabeled",
      "id": 6385416992,
      "node_id": "UNLE_lADOABII585HPxvczwAAAAF8mbsg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6385416992",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-07T06:08:53Z",
      "label": {
        "name": "Docs",
        "color": "02d7e1"
      }
    },
    {
      "event": "commented",
      "id": 1091167069,
      "node_id": "IC_kwDOABII585BCeNd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1091167069",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-07T07:20:20Z",
      "updated_at": "2022-04-07T07:20:20Z",
      "author_association": "MEMBER",
      "body": "Concept/approach ACK",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1091167069",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24794"
    },
    {
      "event": "reviewed",
      "id": 934650614,
      "node_id": "PRR_kwDOABII5843taL2",
      "url": null,
      "actor": null,
      "commit_id": "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#pullrequestreview-934650614",
      "submitted_at": "2022-04-07T08:10:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
    },
    {
      "event": "commented",
      "id": 1091268713,
      "node_id": "IC_kwDOABII585BC3Bp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1091268713",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-07T08:13:16Z",
      "updated_at": "2022-04-07T08:13:16Z",
      "author_association": "MEMBER",
      "body": "I think it's slightly weird that `pyzmq` is required for linting. I understand why this is though, avoiding that would require a stub library and isn't in scope here.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1091268713",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24794"
    },
    {
      "event": "reviewed",
      "id": 934655954,
      "node_id": "PRR_kwDOABII5843tbfS",
      "url": null,
      "actor": null,
      "commit_id": "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "LGTM",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#pullrequestreview-934655954",
      "submitted_at": "2022-04-07T08:18:21Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
    },
    {
      "event": "commented",
      "id": 1091646967,
      "node_id": "IC_kwDOABII585BETX3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1091646967",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-07T11:58:34Z",
      "updated_at": "2022-04-07T11:58:34Z",
      "author_association": "MEMBER",
      "body": "I was half hoping we could just call the [flake8 api directly](https://flake8.pycqa.org/en/latest/user/python-api.html), and check our files, rather than just moving to wrapping subprocess invocations of flake8 in python instead of bash. Maybe something for the future.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1091646967",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24794"
    },
    {
      "event": "commented",
      "id": 1092776603,
      "node_id": "IC_kwDOABII585BInKb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1092776603",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-08T11:45:44Z",
      "updated_at": "2022-04-08T11:45:59Z",
      "author_association": "MEMBER",
      "body": "> I was half hoping we could just call the [flake8 api directly](https://flake8.pycqa.org/en/latest/user/python-api.html), and check our files, rather than just moving to wrapping subprocess invocations of flake8 in python instead of bash. Maybe something for the future.\r\n\r\nThis sounds neat for a follow-up, but personally at least I think as a first step calling out to tools like `flake8` is fine. The biggest issue with subprocess is shell ambiguity (so avoid `shell=True`), and basic system commands that may differ. ",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1092776603",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24794"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6444458542,
      "node_id": "HRFPE_lADOABII585HPxvczwAAAAGAHqIu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6444458542",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-17T11:51:03Z"
    },
    {
      "event": "commented",
      "id": 1100861029,
      "node_id": "IC_kwDOABII585Bnc5l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100861029",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-17T11:55:08Z",
      "updated_at": "2022-04-17T11:55:08Z",
      "author_association": "MEMBER",
      "body": "> I think it's slightly weird that `pyzmq` is required for linting. I understand why this is though, avoiding that would require a stub library and isn't in scope here.\r\n\r\nI am slightly unsure if you would like me to make a change or not, but I think not. Otherwise, let me know :)\r\n\r\nI was thinking about this quite a bit when initially putting it on the list but after seeing the errors produced when `pyzmq` is missing I thought it would be better to make this explicit because otherwise it might lead to people wasting time debugging in the wrong direction.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1100861029",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24794"
    },
    {
      "event": "commented",
      "id": 1100861126,
      "node_id": "IC_kwDOABII585Bnc7G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100861126",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-17T11:55:50Z",
      "updated_at": "2022-04-17T11:55:50Z",
      "author_association": "MEMBER",
      "body": "Addressed review comments.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1100861126",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24794"
    },
    {
      "event": "reviewed",
      "id": 943945397,
      "node_id": "PRR_kwDOABII5844Q3a1",
      "url": null,
      "actor": null,
      "commit_id": "28e7af46b177d1d81a12e306994aac91e765b963",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#pullrequestreview-943945397",
      "submitted_at": "2022-04-17T12:48:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ3YjY2YWM0YWNkMTQ4ZGE5ZmQwZDg5NDU3NGY4YmIzYjNiMzMzNjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "tree": {
        "sha": "2b2f9ae0b4d82dd256bf8e1ff9f6dc252032db6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b2f9ae0b4d82dd256bf8e1ff9f6dc252032db6c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2b2f9ae0b4d82dd256bf8e1ff9f6dc252032db6c\nparent 41720a1f540ef3c16a283a6cce6f0a63552a4937\nauthor Fabian Jahr <fjahr@protonmail.com> 1649289024 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1650236106 +0200\n\nlint: Convert Python linter to Python\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmJcmsoVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNh5MP/3vYqB4d+dkbU3MFHdt0X8LSCCoa\nGXpe+vKWdhcs/aR1LE2+ekAnOF/WFfZhs8URzmUTGFnTzmclVZRBpEJfX4LNb2O2\n8tPEnToMUa6EFyq0fUa+wnRZYLraPeCpIBqgVHj+MGdPiIW4LRSdGHo2KTZFsoOS\nCoimh/rDFGE45xo+eW8u6ng5utsrGPEmBaf5DKyhjeX31JNPHDtOHZBBIOGDzu+z\nL+4YYyPZYq9UEx1t/KTlaS4ilp43mZouAruQ8YYpz/TXBFcj1JwxEFRVRLHuzAMZ\nSntglTGArK22s0ASmXXndjPCi32C+smoKf7Bp7IzDLSkPeAocP6p/JP+04oxaF54\nncyqpHAGgfA3itkJCTXBnLbqHhBPF1mYKH88BYpA9k/y4wh16ZIW0PXujj0o21pu\nm0+mplg9wg/HcrWU3xCXvwc21Wnw1RcZoC8/UHu0D9VKGdcaIkbFr1U1QGHXuDLu\nTHhMrCy8yijQwXcPy6zhTR2/pJXex4fBJUo+h2U1PUYPRAB5A0m2sxFXwFCFPp4H\neCoDDYQMwFY2WZ+feBpxUtuZTgbPP4zUbQXvkkfZzssaJdXhXqk9XJfBsBFQpaC1\n+UO2CNmD0FfjQ1rwG9S8eH8nUBKReCVFiHJt3AGTwYsBHpbDUxmM8f/LyrQq/syO\ne3YazkFwQoxC+1J9\n=3ty4\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41720a1f540ef3c16a283a6cce6f0a63552a4937",
          "sha": "41720a1f540ef3c16a283a6cce6f0a63552a4937",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/41720a1f540ef3c16a283a6cce6f0a63552a4937"
        }
      ],
      "message": "lint: Convert Python linter to Python",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2022-04-17T22:55:06Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2022-04-06T23:50:24Z"
      },
      "sha": "47b66ac4acd148da9fd0d894574f8bb3b3b33368"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6445117167,
      "node_id": "HRFPE_lADOABII585HPxvczwAAAAGAKK7v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6445117167",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-17T22:55:47Z"
    },
    {
      "event": "commented",
      "id": 1101560061,
      "node_id": "IC_kwDOABII585BqHj9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1101560061",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-18T16:50:52Z",
      "updated_at": "2022-04-18T16:50:52Z",
      "author_association": "MEMBER",
      "body": "Tested ACK 47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1101560061",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24794"
    },
    {
      "event": "merged",
      "id": 6449095911,
      "node_id": "ME_lADOABII585HPxvczwAAAAGAZWTn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6449095911",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "57a73d71a36ce212977607d3e94de6ef55521bfc",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57a73d71a36ce212977607d3e94de6ef55521bfc",
      "created_at": "2022-04-18T16:51:36Z"
    },
    {
      "event": "closed",
      "id": 6449095925,
      "node_id": "CE_lADOABII585HPxvczwAAAAGAZWT1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6449095925",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-18T16:51:36Z"
    },
    {
      "event": "referenced",
      "id": 6454132594,
      "node_id": "REFE_lADOABII585HPxvczwAAAAGAsj9y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6454132594",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "013daed9acca1b723f599d63ab36b9c2a5c60e5f",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/013daed9acca1b723f599d63ab36b9c2a5c60e5f",
      "created_at": "2022-04-19T10:32:22Z"
    },
    {
      "event": "referenced",
      "id": 6458129872,
      "node_id": "REFE_lADOABII585HPxvczwAAAAGA7z3Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6458129872",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "04f1c86a88959305a890381682f90c255ad5df2f",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/04f1c86a88959305a890381682f90c255ad5df2f",
      "created_at": "2022-04-19T20:25:26Z"
    },
    {
      "event": "locked",
      "id": 9036831424,
      "node_id": "LOE_lADOABII585HPxvczwAAAAIaoxrA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9036831424",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-18T14:44:24Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844844754",
      "pull_request_review_id": 934650614,
      "id": 844844754,
      "node_id": "PRRC_kwDOABII584yW07S",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name … referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606'   # 'async' and 'await' are reserved keywords starting with Python 3.7\n+)\n+\n+\n+def check_dependencies():\n+    list_out = subprocess.check_output(['pip3', 'list'], stderr=subprocess.DEVNULL).decode('utf-8')",
      "path": "test/lint/lint-python.py",
      "position": null,
      "original_position": 94,
      "commit_id": "47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "original_commit_id": "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need to call out to pip here, Python provides introspection for this, but I think even this would work:\r\n```python3\r\nfor dep in DEPS:\r\n    try:\r\n        __import__(dep)\r\n    except ImportError:\r\n        print(f\"Skipping Python linting since {dep} is not installed.\")\r\n        exit(0)\r\n```",
      "created_at": "2022-04-07T08:10:23Z",
      "updated_at": "2022-04-07T11:16:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r844844754",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844844754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844848504",
      "pull_request_review_id": 934655954,
      "id": 844848504,
      "node_id": "PRRC_kwDOABII584yW114",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"",
      "path": "test/lint/lint-python.py",
      "position": 17,
      "original_position": 16,
      "commit_id": "47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "original_commit_id": "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unrelated: If run outside the CI runner, this will likely result in `/test/.mypy_cache`, which may not be wanted?",
      "created_at": "2022-04-07T08:14:34Z",
      "updated_at": "2022-04-07T08:18:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r844848504",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844848504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844848694",
      "pull_request_review_id": 934655954,
      "id": 844848694,
      "node_id": "PRRC_kwDOABII584yW142",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name … referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606'   # 'async' and 'await' are reserved keywords starting with Python 3.7",
      "path": "test/lint/lint-python.py",
      "position": null,
      "original_position": 89,
      "commit_id": "47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "original_commit_id": "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    'W606',   # 'async' and 'await' are reserved keywords starting with Python 3.7\r\n```\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/24766#discussion_r843558638",
      "created_at": "2022-04-07T08:14:46Z",
      "updated_at": "2022-04-07T08:18:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r844848694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844848694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844851739",
      "pull_request_review_id": 934655954,
      "id": 844851739,
      "node_id": "PRRC_kwDOABII584yW2ob",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name … referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606'   # 'async' and 'await' are reserved keywords starting with Python 3.7\n+)\n+\n+\n+def check_dependencies():\n+    list_out = subprocess.check_output(['pip3', 'list'], stderr=subprocess.DEVNULL).decode('utf-8')\n+\n+    for dep in DEPS:\n+        if dep not in list_out:\n+            print(f\"Skipping Python linting since {dep} is not installed.\")\n+            exit(0)\n+\n+\n+def main():\n+    check_dependencies()\n+\n+    if len(sys.argv) > 1:\n+        flake8_files = sys.argv[1:]\n+    else:\n+        files_args = ['git', 'ls-files', '*.py']\n+        flake8_files = subprocess.check_output(files_args).decode(\"utf-8\").splitlines()\n+\n+    flake8_args = ['flake8', '--ignore=B,C,E,F,I,N,W', f'--select={ENABLED}'] + flake8_files\n+    flake8_env = os.environ.copy()\n+    flake8_env[\"PYTHONWARNINGS\"] = \"ignore\"\n+\n+    try:\n+        flake8_out = subprocess.run(flake8_args, stdout=subprocess.PIPE, env=flake8_env)\n+    except subprocess.CalledProcessError as e:\n+        print(e.output.decode(\"utf-8\"), end=\"\")\n+        exit(1)\n+\n+    print(flake8_out.stdout.decode(\"utf-8\"), end=\"\")\n+\n+    mypy_files = subprocess.check_output(FILES_ARGS).decode(\"utf-8\").splitlines()\n+    mypy_args = ['mypy', '--show-error-codes'] + mypy_files\n+\n+    try:\n+        mypy_out = subprocess.check_output(mypy_args, stderr=subprocess.STDOUT)\n+    except subprocess.CalledProcessError as e:\n+        print(e.output.decode(\"utf-8\"), end=\"\")\n+        exit(1)",
      "path": "test/lint/lint-python.py",
      "position": null,
      "original_position": 130,
      "commit_id": "47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "original_commit_id": "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        subprocess.check_call(mypy_args)\r\n    except subprocess.CalledProcessError:\r\n        exit(1)\r\n```\r\n\r\nHow is this different from the shorter alternative?\r\n\r\nSee:\r\n* https://docs.python.org/3/library/subprocess.html#subprocess.check_call\r\n* https://github.com/bitcoin/bitcoin/pull/24766#discussion_r843559966",
      "created_at": "2022-04-07T08:17:56Z",
      "updated_at": "2022-04-07T08:18:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r844851739",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844851739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744892",
      "pull_request_review_id": 943940023,
      "id": 851744892,
      "node_id": "PRRC_kwDOABII584yxJh8",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name … referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606'   # 'async' and 'await' are reserved keywords starting with Python 3.7\n+)\n+\n+\n+def check_dependencies():\n+    list_out = subprocess.check_output(['pip3', 'list'], stderr=subprocess.DEVNULL).decode('utf-8')",
      "path": "test/lint/lint-python.py",
      "position": null,
      "original_position": 94,
      "commit_id": "47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "original_commit_id": "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "in_reply_to_id": 844844754,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yepp, I found that the canonical way seems to be using `pkg_resources`. I implemented it using that.",
      "created_at": "2022-04-17T11:51:29Z",
      "updated_at": "2022-04-17T11:51:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851744892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744897",
      "pull_request_review_id": 943940031,
      "id": 851744897,
      "node_id": "PRRC_kwDOABII584yxJiB",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"",
      "path": "test/lint/lint-python.py",
      "position": 17,
      "original_position": 16,
      "commit_id": "47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "original_commit_id": "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "in_reply_to_id": 844848504,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I noticed this as well but it is the existing behavior. I used `getenv` with the empty fallback because I wanted to potentially change it to a better one but forgot to think about it. What would you suggest as a better fallback?",
      "created_at": "2022-04-17T11:51:37Z",
      "updated_at": "2022-04-17T11:51:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851744897",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744897"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744907",
      "pull_request_review_id": 943940040,
      "id": 851744907,
      "node_id": "PRRC_kwDOABII584yxJiL",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name … referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606'   # 'async' and 'await' are reserved keywords starting with Python 3.7",
      "path": "test/lint/lint-python.py",
      "position": null,
      "original_position": 89,
      "commit_id": "47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "original_commit_id": "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "in_reply_to_id": 844848694,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-04-17T11:51:41Z",
      "updated_at": "2022-04-17T11:51:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851744907",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744916",
      "pull_request_review_id": 943940051,
      "id": 851744916,
      "node_id": "PRRC_kwDOABII584yxJiU",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name … referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606'   # 'async' and 'await' are reserved keywords starting with Python 3.7\n+)\n+\n+\n+def check_dependencies():\n+    list_out = subprocess.check_output(['pip3', 'list'], stderr=subprocess.DEVNULL).decode('utf-8')\n+\n+    for dep in DEPS:\n+        if dep not in list_out:\n+            print(f\"Skipping Python linting since {dep} is not installed.\")\n+            exit(0)\n+\n+\n+def main():\n+    check_dependencies()\n+\n+    if len(sys.argv) > 1:\n+        flake8_files = sys.argv[1:]\n+    else:\n+        files_args = ['git', 'ls-files', '*.py']\n+        flake8_files = subprocess.check_output(files_args).decode(\"utf-8\").splitlines()\n+\n+    flake8_args = ['flake8', '--ignore=B,C,E,F,I,N,W', f'--select={ENABLED}'] + flake8_files\n+    flake8_env = os.environ.copy()\n+    flake8_env[\"PYTHONWARNINGS\"] = \"ignore\"\n+\n+    try:\n+        flake8_out = subprocess.run(flake8_args, stdout=subprocess.PIPE, env=flake8_env)\n+    except subprocess.CalledProcessError as e:\n+        print(e.output.decode(\"utf-8\"), end=\"\")\n+        exit(1)\n+\n+    print(flake8_out.stdout.decode(\"utf-8\"), end=\"\")\n+\n+    mypy_files = subprocess.check_output(FILES_ARGS).decode(\"utf-8\").splitlines()\n+    mypy_args = ['mypy', '--show-error-codes'] + mypy_files\n+\n+    try:\n+        mypy_out = subprocess.check_output(mypy_args, stderr=subprocess.STDOUT)\n+    except subprocess.CalledProcessError as e:\n+        print(e.output.decode(\"utf-8\"), end=\"\")\n+        exit(1)",
      "path": "test/lint/lint-python.py",
      "position": null,
      "original_position": 130,
      "commit_id": "47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "original_commit_id": "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "in_reply_to_id": 844851739,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, I tried this initially with `check_call` but in my testing I didn't seem to get the errors to my console. But I guess I did something wrong because with your code it seems to work now. Changed.",
      "created_at": "2022-04-17T11:51:46Z",
      "updated_at": "2022-04-17T11:51:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851744916",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851751520",
      "pull_request_review_id": 943945397,
      "id": 851751520,
      "node_id": "PRRC_kwDOABII584yxLJg",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import pkg_resources\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name … referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606,'  # 'async' and 'await' are reserved keywords starting with Python 3.7\n+)\n+\n+\n+def check_dependencies():\n+    working_set = {pkg.key for pkg in pkg_resources.working_set}\n+\n+    for dep in DEPS:\n+        if dep not in working_set:\n+            print(f\"Skipping Python linting since {dep} is not installed.\")\n+            exit(0)\n+\n+\n+def main():\n+    check_dependencies()\n+\n+    if len(sys.argv) > 1:\n+        flake8_files = sys.argv[1:]\n+    else:\n+        files_args = ['git', 'ls-files', '*.py']\n+        flake8_files = subprocess.check_output(files_args).decode(\"utf-8\").splitlines()\n+\n+    flake8_args = ['flake8', '--ignore=B,C,E,F,I,N,W', f'--select={ENABLED}'] + flake8_files\n+    flake8_env = os.environ.copy()\n+    flake8_env[\"PYTHONWARNINGS\"] = \"ignore\"\n+\n+    try:\n+        flake8_out = subprocess.run(flake8_args, stdout=subprocess.PIPE, env=flake8_env)\n+    except subprocess.CalledProcessError as e:\n+        print(e.output.decode(\"utf-8\"), end=\"\")\n+        exit(1)\n+\n+    print(flake8_out.stdout.decode(\"utf-8\"), end=\"\")",
      "path": "test/lint/lint-python.py",
      "position": null,
      "original_position": 122,
      "commit_id": "47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "original_commit_id": "28e7af46b177d1d81a12e306994aac91e765b963",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "how is this different from\r\n\r\n```suggestion\r\n    try:\r\n        subprocess.check_call(flake8_args, env=flake8_env)\r\n    except subprocess.CalledProcessError:\r\n        exit(1)\r\n```\r\n\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/24794#discussion_r844851739",
      "created_at": "2022-04-17T12:48:58Z",
      "updated_at": "2022-04-17T12:48:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851751520",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851751520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
        }
      },
      "start_line": null,
      "original_start_line": 116,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851813125",
      "pull_request_review_id": 943992088,
      "id": 851813125,
      "node_id": "PRRC_kwDOABII584yxaMF",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import pkg_resources\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name … referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606,'  # 'async' and 'await' are reserved keywords starting with Python 3.7\n+)\n+\n+\n+def check_dependencies():\n+    working_set = {pkg.key for pkg in pkg_resources.working_set}\n+\n+    for dep in DEPS:\n+        if dep not in working_set:\n+            print(f\"Skipping Python linting since {dep} is not installed.\")\n+            exit(0)\n+\n+\n+def main():\n+    check_dependencies()\n+\n+    if len(sys.argv) > 1:\n+        flake8_files = sys.argv[1:]\n+    else:\n+        files_args = ['git', 'ls-files', '*.py']\n+        flake8_files = subprocess.check_output(files_args).decode(\"utf-8\").splitlines()\n+\n+    flake8_args = ['flake8', '--ignore=B,C,E,F,I,N,W', f'--select={ENABLED}'] + flake8_files\n+    flake8_env = os.environ.copy()\n+    flake8_env[\"PYTHONWARNINGS\"] = \"ignore\"\n+\n+    try:\n+        flake8_out = subprocess.run(flake8_args, stdout=subprocess.PIPE, env=flake8_env)\n+    except subprocess.CalledProcessError as e:\n+        print(e.output.decode(\"utf-8\"), end=\"\")\n+        exit(1)\n+\n+    print(flake8_out.stdout.decode(\"utf-8\"), end=\"\")",
      "path": "test/lint/lint-python.py",
      "position": null,
      "original_position": 122,
      "commit_id": "47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "original_commit_id": "28e7af46b177d1d81a12e306994aac91e765b963",
      "in_reply_to_id": 851751520,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looking at the docs I got the impression that only `run` allowed to pass in a `env` argument but it seems it works and is just not explicitly named for `check_call`. So I changed this.",
      "created_at": "2022-04-17T22:56:10Z",
      "updated_at": "2022-04-17T22:56:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851813125",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851813125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
        }
      },
      "start_line": null,
      "original_start_line": 116,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    }
  ]
}