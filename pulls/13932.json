{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
    "id": 207455184,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjA3NDU1MTg0",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13932",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/13932.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/13932.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
    "number": 13932,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Additional utility RPCs for PSBT",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR adds 3 new utility RPCs for interacting with PSBTs.\r\n\r\n`utxoupdatepsbt` updates a PSBT with UTXO information from the node. It only works with witness UTXOs because full transactions (as would be needed for non-witness UTXOs) are not available unless txindex is enabled.\r\n\r\n`joinpsbts` joins the inputs from multiple distinct PSBTs into one PSBT. e.g. if PSBT 1 has inputs 1 and 2, and PSBT 2 has inputs 3 and 4, `joinpsbts` would create a new PSBT with inputs 1, 2, 3, and 4.\r\n\r\n`analyzepsbt` analyzes a PSBT and determines the current state of it and all of its inputs, and the next step that needs to be done.",
    "labels": [
      {
        "id": 64583,
        "node_id": "MDU6TGFiZWw2NDU4Mw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
        "name": "Feature",
        "color": "7cf575",
        "default": false
      },
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/35",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/35",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/35/labels",
      "id": 3318051,
      "node_id": "MDk6TWlsZXN0b25lMzMxODA1MQ==",
      "number": 35,
      "state": "closed",
      "title": "0.18.0",
      "description": "",
      "creator": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 186,
      "created_at": "2018-05-03T15:34:54Z",
      "updated_at": "2020-03-17T18:30:07Z",
      "closed_at": "2019-05-03T02:51:38Z"
    },
    "active_lock_reason": "resolved",
    "created_at": "2018-08-09T21:55:36Z",
    "updated_at": "2021-12-16T14:50:57Z",
    "closed_at": "2019-02-16T19:46:14Z",
    "mergeable_state": "unknown",
    "merged_at": "2019-02-16T19:46:14Z",
    "merge_commit_sha": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "achow101:psbt-util-rpcs",
      "ref": "psbt-util-rpcs",
      "sha": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 10,
        "stargazers_count": 34,
        "watchers_count": 34,
        "size": 238743,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-02T17:43:24Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2023-05-16T00:18:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 487,
    "deletions": 9,
    "changed_files": 7,
    "commits": 5,
    "review_comments": 49,
    "comments": 13
  },
  "events": [
    {
      "event": "commented",
      "id": 411919967,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTkxOTk2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/411919967",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-09T22:37:01Z",
      "updated_at": "2019-02-14T20:04:22Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15404](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15404.html) ([test] Remove -txindex to start nodes by amitiuttarwar)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-411919967",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932"
    },
    {
      "event": "labeled",
      "id": 1781544372,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE3ODE1NDQzNzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1781544372",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-10T01:58:05Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 1781544459,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE3ODE1NDQ0NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1781544459",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-10T01:58:08Z",
      "label": {
        "name": "Feature",
        "color": "7cf575"
      }
    },
    {
      "event": "milestoned",
      "id": 1781544580,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDE3ODE1NDQ1ODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1781544580",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-10T01:58:12Z",
      "milestone": {
        "title": "0.18.0"
      }
    },
    {
      "event": "commented",
      "id": 411982919,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTk4MjkxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/411982919",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-10T05:53:56Z",
      "updated_at": "2018-08-10T05:53:56Z",
      "author_association": "CONTRIBUTOR",
      "body": ">  It only works with witness UTXOs because full transactions (as would be needed for non-witness UTXOs) are not available unless txindex is enabled.\r\n\r\nIt doesn't look in the wallet?",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-411982919",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932"
    },
    {
      "event": "mentioned",
      "id": 1781755271,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTc4MTc1NTI3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1781755271",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-10T06:07:07Z"
    },
    {
      "event": "subscribed",
      "id": 1781755272,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE3ODE3NTUyNzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1781755272",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-10T06:07:07Z"
    },
    {
      "event": "commented",
      "id": 411984826,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTk4NDgyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/411984826",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-10T06:07:08Z",
      "updated_at": "2018-08-10T06:07:08Z",
      "author_association": "MEMBER",
      "body": "@gmaxwell `walletprocesspsbt` already exists for that. This is a node RPC that works without a wallet.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-411984826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932"
    },
    {
      "event": "labeled",
      "id": 1788443301,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE3ODg0NDMzMDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1788443301",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-14T18:01:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1788792428,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTc4ODc5MjQyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1788792428",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-14T20:48:44Z"
    },
    {
      "event": "commented",
      "id": 413010930,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzAxMDkzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/413010930",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-14T20:48:49Z",
      "updated_at": "2018-08-14T20:48:49Z",
      "author_association": "MEMBER",
      "body": "Rebased",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-413010930",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932"
    },
    {
      "event": "unlabeled",
      "id": 1788929526,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MTc4ODkyOTUyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1788929526",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-14T22:05:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 1813533645,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE4MTM1MzM2NDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1813533645",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-28T16:19:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 416753468,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjc1MzQ2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/416753468",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-28T21:53:42Z",
      "updated_at": "2018-08-28T21:53:42Z",
      "author_association": "MEMBER",
      "body": "Rebased",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-416753468",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1814244343,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgxNDI0NDM0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1814244343",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-28T21:53:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1814289962,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgxNDI4OTk2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1814289962",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-28T22:22:15Z"
    },
    {
      "event": "unlabeled",
      "id": 1814300583,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MTgxNDMwMDU4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1814300583",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-28T22:30:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 150353114,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUwMzUzMTE0",
      "url": null,
      "actor": null,
      "commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-150353114",
      "submitted_at": "2018-08-28T23:52:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "reviewed",
      "id": 152360007,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUyMzYwMDA3",
      "url": null,
      "actor": null,
      "commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-152360007",
      "submitted_at": "2018-09-05T07:11:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "labeled",
      "id": 1836719764,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE4MzY3MTk3NjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1836719764",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T18:22:32Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1844919878,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTg0NDkxOTg3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1844919878",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-13T23:51:44Z"
    },
    {
      "event": "commented",
      "id": 421187586,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTE4NzU4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421187586",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-13T23:51:54Z",
      "updated_at": "2018-09-13T23:51:54Z",
      "author_association": "MEMBER",
      "body": "Rebased",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-421187586",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932"
    },
    {
      "event": "unlabeled",
      "id": 1844922988,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MTg0NDkyMjk4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1844922988",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-13T23:54:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 160568659,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTYwNTY4NjU5",
      "url": null,
      "actor": null,
      "commit_id": "9004ce4969eb2e9ca255a5508fd0dcab180b0d31",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-160568659",
      "submitted_at": "2018-10-02T05:14:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "labeled",
      "id": 1940892850,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE5NDA4OTI4NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1940892850",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-01T16:05:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1941338965,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTk0MTMzODk2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1941338965",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-01T19:11:16Z"
    },
    {
      "event": "added_to_project",
      "id": 1941341547,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQxOTQxMzQxNTQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1941341547",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-01T19:12:29Z",
      "project_card": {
        "id": 14440090,
        "url": "https://api.github.com/projects/columns/cards/14440090",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "For backport"
      }
    },
    {
      "event": "moved_columns_in_project",
      "id": 1941346384,
      "node_id": "MDI2Ok1vdmVkQ29sdW1uc0luUHJvamVjdEV2ZW50MTk0MTM0NjM4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1941346384",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-01T19:14:45Z",
      "project_card": {
        "id": 14440090,
        "url": "https://api.github.com/projects/columns/cards/14440090",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers",
        "previous_column_name": "For backport"
      }
    },
    {
      "event": "moved_columns_in_project",
      "id": 1941346389,
      "node_id": "MDI2Ok1vdmVkQ29sdW1uc0luUHJvamVjdEV2ZW50MTk0MTM0NjM4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1941346389",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-01T19:14:46Z",
      "project_card": {
        "id": 14440090,
        "url": "https://api.github.com/projects/columns/cards/14440090",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers",
        "previous_column_name": "For backport"
      }
    },
    {
      "event": "unlabeled",
      "id": 1941349107,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MTk0MTM0OTEwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1941349107",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-01T19:16:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1941361459,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTk0MTM2MTQ1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1941361459",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-01T19:21:59Z"
    },
    {
      "event": "reviewed",
      "id": 171736107,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcxNzM2MTA3",
      "url": null,
      "actor": null,
      "commit_id": "ba5f9058f6c874cd1a76b5fa468b2e9c58e4604a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-171736107",
      "submitted_at": "2018-11-05T20:06:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "reviewed",
      "id": 171736165,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcxNzM2MTY1",
      "url": null,
      "actor": null,
      "commit_id": "ba5f9058f6c874cd1a76b5fa468b2e9c58e4604a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-171736165",
      "submitted_at": "2018-11-05T20:06:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "reviewed",
      "id": 173533990,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTczNTMzOTkw",
      "url": null,
      "actor": null,
      "commit_id": "ba5f9058f6c874cd1a76b5fa468b2e9c58e4604a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-173533990",
      "submitted_at": "2018-11-09T18:27:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "labeled",
      "id": 1958252613,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE5NTgyNTI2MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1958252613",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-10T04:42:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1972561454,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTk3MjU2MTQ1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1972561454",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-17T01:36:21Z"
    },
    {
      "event": "commented",
      "id": 439576833,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTU3NjgzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439576833",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-17T01:38:43Z",
      "updated_at": "2018-11-17T01:38:43Z",
      "author_association": "MEMBER",
      "body": "Rebased",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-439576833",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932"
    },
    {
      "event": "unlabeled",
      "id": 1972569743,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MTk3MjU2OTc0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1972569743",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-17T01:51:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "mentioned",
      "id": 1976067239,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTk3NjA2NzIzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1976067239",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-20T00:09:49Z"
    },
    {
      "event": "subscribed",
      "id": 1976067240,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE5NzYwNjcyNDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1976067240",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-20T00:09:49Z"
    },
    {
      "event": "mentioned",
      "id": 1976067242,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTk3NjA2NzI0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1976067242",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-20T00:09:49Z"
    },
    {
      "event": "subscribed",
      "id": 1976067243,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE5NzYwNjcyNDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1976067243",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-20T00:09:49Z"
    },
    {
      "event": "reviewed",
      "id": 176555323,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTc2NTU1MzIz",
      "url": null,
      "actor": null,
      "commit_id": "f2a2f06fed01829e1f1ae574f50cce841fdcbbff",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Could have release note.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-176555323",
      "submitted_at": "2018-11-20T00:22:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "labeled",
      "id": 1983697912,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE5ODM2OTc5MTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1983697912",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-23T09:23:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "removed_from_project",
      "id": 2010699469,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50MjAxMDY5OTQ2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2010699469",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-06T19:08:49Z",
      "project_card": {
        "id": 14440090,
        "url": "https://api.github.com/projects/columns/cards/14440090",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "reviewed",
      "id": 192943548,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyOTQzNTQ4",
      "url": null,
      "actor": null,
      "commit_id": "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-192943548",
      "submitted_at": "2019-01-16T01:43:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "commented",
      "id": 454619751,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDYxOTc1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/454619751",
      "actor": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-16T01:46:04Z",
      "updated_at": "2019-01-16T01:49:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "It looks like I'm going to depend on this for my offline-signing GUI work, so we can display nice messages in the GUI about the status of PSBTs that users hand us. Can I therefore encourage its revival? :-) @achow101 \r\n\r\nNote that, assuming #14978 goes in relatively soon, a little refactoring will be needed -- mostly just changing #includes I expect. The other PSBT RPCs have had their guts moved to another file, but I'm happy to do that for these RPCs as a followup PR to this one, if you like, so you don't have to modify this one too much. ",
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-454619751",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932"
    },
    {
      "event": "mentioned",
      "id": 2076236068,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA3NjIzNjA2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2076236068",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-16T01:46:05Z"
    },
    {
      "event": "subscribed",
      "id": 2076236069,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwNzYyMzYwNjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2076236069",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-16T01:46:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2096206870,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA5NjIwNjg3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2096206870",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-25T03:18:40Z"
    },
    {
      "event": "commented",
      "id": 457441565,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzQ0MTU2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457441565",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-25T03:18:50Z",
      "updated_at": "2019-01-25T03:18:50Z",
      "author_association": "MEMBER",
      "body": "Rebased and addressed comments.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-457441565",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932"
    },
    {
      "event": "unlabeled",
      "id": 2096232793,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjA5NjIzMjc5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2096232793",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-25T03:45:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 197339639,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk3MzM5NjM5",
      "url": null,
      "actor": null,
      "commit_id": "e65b4a373b06dca26f1b2c291a3c98613800516d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-197339639",
      "submitted_at": "2019-01-29T01:23:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "reviewed",
      "id": 197342859,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk3MzQyODU5",
      "url": null,
      "actor": null,
      "commit_id": "e65b4a373b06dca26f1b2c291a3c98613800516d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-197342859",
      "submitted_at": "2019-01-29T01:35:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "reviewed",
      "id": 197343622,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk3MzQzNjIy",
      "url": null,
      "actor": null,
      "commit_id": "e65b4a373b06dca26f1b2c291a3c98613800516d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-197343622",
      "submitted_at": "2019-01-29T01:39:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "commented",
      "id": 458374378,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM3NDM3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/458374378",
      "actor": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-29T01:45:43Z",
      "updated_at": "2019-01-29T01:45:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "utACK modulo comments above. I have a general sense that analyzepsbt is a little hard to follow the logic of, but I don't immediately have suggestions for improving that.",
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-458374378",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932"
    },
    {
      "event": "reviewed",
      "id": 201846275,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAxODQ2Mjc1",
      "url": null,
      "actor": null,
      "commit_id": "b2c85b14f111b5011d3cf8a397679c159825766b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-201846275",
      "submitted_at": "2019-02-09T02:22:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2128937990,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjEyODkzNzk5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2128937990",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-09T22:03:52Z"
    },
    {
      "event": "reviewed",
      "id": 202521987,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAyNTIxOTg3",
      "url": null,
      "actor": null,
      "commit_id": "1193ced586f5d55b4946f06cc2731c5a72389634",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-202521987",
      "submitted_at": "2019-02-12T07:53:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "reviewed",
      "id": 202544762,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAyNTQ0NzYy",
      "url": null,
      "actor": null,
      "commit_id": "1193ced586f5d55b4946f06cc2731c5a72389634",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-202544762",
      "submitted_at": "2019-02-12T08:56:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2134356714,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjEzNDM1NjcxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2134356714",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-12T17:07:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2138580289,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjEzODU4MDI4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2138580289",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-14T03:44:37Z"
    },
    {
      "event": "labeled",
      "id": 2139064176,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIxMzkwNjQxNzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2139064176",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-14T09:10:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2140174233,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE0MDE3NDIzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2140174233",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-14T16:21:46Z"
    },
    {
      "event": "unlabeled",
      "id": 2140213138,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjE0MDIxMzEzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2140213138",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-14T16:34:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 464109008,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDEwOTAwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/464109008",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T16:20:03Z",
      "updated_at": "2019-02-15T16:20:03Z",
      "author_association": "MEMBER",
      "body": "very strange!-one of the travis runs seems to be failing with\r\n```\r\n/bin/bash: test/test_bitcoin: No such file or directory\r\nMakefile:12966: recipe for target 'test/addrman_tests.cpp.test' failed\r\nmake[3]: *** [test/addrman_tests.cpp.test] Error 1\r\nmake[3]: *** Waiting for unfinished jobs....\r\n/bin/bash: test/test_bitcoin: No such file or directory\r\nMakefile:12966: recipe for target 'test/arith_uint256_tests.cpp.test' failed\r\nmake[3]: *** [test/arith_uint256_tests.cpp.test] Error 1\r\nPASS: qt/test/test_bitcoin-qt\r\n```",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-464109008",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932"
    },
    {
      "event": "closed",
      "id": 2143154971,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjE0MzE1NDk3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2143154971",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T17:58:42Z"
    },
    {
      "event": "reopened",
      "id": 2143155159,
      "node_id": "MDEzOlJlb3BlbmVkRXZlbnQyMTQzMTU1MTU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2143155159",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T17:58:47Z"
    },
    {
      "event": "commented",
      "id": 464189036,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDE4OTAzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/464189036",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-15T20:31:13Z",
      "updated_at": "2019-02-15T20:31:13Z",
      "author_association": "MEMBER",
      "body": "utACK 0c35f0e802274c27736b16a4542ad44bc3c7f794",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-464189036",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932"
    },
    {
      "event": "reviewed",
      "id": 204471308,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA0NDcxMzA4",
      "url": null,
      "actor": null,
      "commit_id": "0c35f0e802274c27736b16a4542ad44bc3c7f794",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#pullrequestreview-204471308",
      "submitted_at": "2019-02-15T23:14:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzQ0YTdiOTk4NGI5OTg4MmUxMzZlZmM4YWQ0OGZiMzE3NDBkZjkz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7344a7b9984b99882e136efc8ad48fb31740df93",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7344a7b9984b99882e136efc8ad48fb31740df93",
      "tree": {
        "sha": "a3f3914903f06d765ca78ed072a875bd9081da9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3f3914903f06d765ca78ed072a875bd9081da9d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
          "sha": "e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205"
        }
      ],
      "message": "Implement utxoupdatepsbt RPC and tests",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T05:04:27Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-21T00:08:25Z"
      },
      "sha": "7344a7b9984b99882e136efc8ad48fb31740df93"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGY3NDljOTE0N2E1ZjNmZGJiZDg4MGUwOTc0Yjk3MDg0NDI5MDAy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08f749c9147a5f3fdbbd880e0974b97084429002",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/08f749c9147a5f3fdbbd880e0974b97084429002",
      "tree": {
        "sha": "b54ee7d58a907acbe39af79fd2e8d226a2b520fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b54ee7d58a907acbe39af79fd2e8d226a2b520fe"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7344a7b9984b99882e136efc8ad48fb31740df93",
          "sha": "7344a7b9984b99882e136efc8ad48fb31740df93",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7344a7b9984b99882e136efc8ad48fb31740df93"
        }
      ],
      "message": "Implement joinpsbts RPC and tests\n\nAdds a joinpsbts RPC which combines multiple distinct PSBTs into\none PSBT.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T05:04:27Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-21T01:24:16Z"
      },
      "sha": "08f749c9147a5f3fdbbd880e0974b97084429002"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjQwYjNhYmQ0NTE0MzYxYTAyNGExZTdhMWEyODFkYTkyNjEyNjFi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb40b3abd4514361a024a1e7a1a281da9261261b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cb40b3abd4514361a024a1e7a1a281da9261261b",
      "tree": {
        "sha": "0bfab83a9b752625a3ee28022318a96a7df5c0a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bfab83a9b752625a3ee28022318a96a7df5c0a9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08f749c9147a5f3fdbbd880e0974b97084429002",
          "sha": "08f749c9147a5f3fdbbd880e0974b97084429002",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/08f749c9147a5f3fdbbd880e0974b97084429002"
        }
      ],
      "message": "Figure out what is missing during signing\n\nWhen signing an input, figure out what was requested for but was unable\nto be found and store it in a SignatureData.\n\nReturn this information in SignPSBTInput.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T05:04:27Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-01T00:57:15Z"
      },
      "sha": "cb40b3abd4514361a024a1e7a1a281da9261261b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzU0MmNmMmE1ZjhhYmI5N2RkNDZmNzgyYzFiMDE5OWNjMDYyMDMz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77542cf2a5f8abb97dd46f782c1b0199cc062033",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/77542cf2a5f8abb97dd46f782c1b0199cc062033",
      "tree": {
        "sha": "9afe02a12ae92cb9594d46f3d3e682f26c26551c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9afe02a12ae92cb9594d46f3d3e682f26c26551c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb40b3abd4514361a024a1e7a1a281da9261261b",
          "sha": "cb40b3abd4514361a024a1e7a1a281da9261261b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cb40b3abd4514361a024a1e7a1a281da9261261b"
        }
      ],
      "message": "Move PSBT UTXO fetching to a separate method",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T05:04:27Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-01T00:56:47Z"
      },
      "sha": "77542cf2a5f8abb97dd46f782c1b0199cc062033"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2144016590,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE0NDAxNjU5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2144016590",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-16T05:15:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2144017113,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE0NDAxNzExMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2144017113",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-16T05:16:45Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDA3MjllZjRiZjFiNmM2ZGExZWM3OTVlNDQxZDJjZTU2YTlhNThi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "tree": {
        "sha": "f7984f7df6df66f36b45a8d9a0fc52b5edd10963",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7984f7df6df66f36b45a8d9a0fc52b5edd10963"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77542cf2a5f8abb97dd46f782c1b0199cc062033",
          "sha": "77542cf2a5f8abb97dd46f782c1b0199cc062033",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/77542cf2a5f8abb97dd46f782c1b0199cc062033"
        }
      ],
      "message": "Implement analyzepsbt RPC and tests",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T16:51:02Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-01T00:58:01Z"
      },
      "sha": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2144263935,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE0NDI2MzkzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2144263935",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-16T16:51:13Z"
    },
    {
      "event": "commented",
      "id": 464377172,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDM3NzE3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/464377172",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-16T19:44:26Z",
      "updated_at": "2019-02-16T19:44:40Z",
      "author_association": "MEMBER",
      "body": "re-utACK 540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-464377172",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13932"
    },
    {
      "event": "merged",
      "id": 2144335899,
      "node_id": "MDExOk1lcmdlZEV2ZW50MjE0NDMzNTg5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2144335899",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "created_at": "2019-02-16T19:46:14Z"
    },
    {
      "event": "closed",
      "id": 2144335900,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjE0NDMzNTkwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2144335900",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-16T19:46:14Z"
    },
    {
      "event": "referenced",
      "id": 2144336133,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIxNDQzMzYxMzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2144336133",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
      "created_at": "2019-02-16T19:46:39Z"
    },
    {
      "event": "referenced",
      "id": 3332243474,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMzIyNDM0NzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3332243474",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b991a6b45c171af88e3402ec0e4a0f23dd18c520",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/b991a6b45c171af88e3402ec0e4a0f23dd18c520",
      "created_at": "2020-05-13T14:05:09Z"
    },
    {
      "event": "referenced",
      "id": 3332313773,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMzIzMTM3NzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3332313773",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f283c36d3a0f28c52401d63ba7b6a307a0407ac8",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/f283c36d3a0f28c52401d63ba7b6a307a0407ac8",
      "created_at": "2020-05-13T14:20:08Z"
    },
    {
      "event": "referenced",
      "id": 3332313782,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMzIzMTM3ODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3332313782",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1915fdf30f087c91134a9585f43a473e42cceb27",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/1915fdf30f087c91134a9585f43a473e42cceb27",
      "created_at": "2020-05-13T14:20:08Z"
    },
    {
      "event": "referenced",
      "id": 3333116191,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMzMxMTYxOTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3333116191",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "63fa706bb630007860802f40a42edb950466ed0d",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/63fa706bb630007860802f40a42edb950466ed0d",
      "created_at": "2020-05-13T17:20:09Z"
    },
    {
      "event": "referenced",
      "id": 3343508348,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNDM1MDgzNDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3343508348",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "397f2c93160e16bc08009d779e3b06566740ec04",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/397f2c93160e16bc08009d779e3b06566740ec04",
      "created_at": "2020-05-16T11:35:08Z"
    },
    {
      "event": "referenced",
      "id": 5116571763,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMTY1NzE3NjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5116571763",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "106455d7913bc7f75e43b642a6e4490aa8973cfe",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/106455d7913bc7f75e43b642a6e4490aa8973cfe",
      "created_at": "2021-08-05T10:18:46Z"
    },
    {
      "event": "referenced",
      "id": 5116653764,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMTY2NTM3NjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5116653764",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fd724a17d5a777e61bad28fc27faefdea88112e8",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/fd724a17d5a777e61bad28fc27faefdea88112e8",
      "created_at": "2021-08-05T10:35:55Z"
    },
    {
      "event": "referenced",
      "id": 5116697794,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMTY2OTc3OTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5116697794",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bd4fa2355f36d80b7e5d60f7989e69bc83111e5d",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/bd4fa2355f36d80b7e5d60f7989e69bc83111e5d",
      "created_at": "2021-08-05T10:46:07Z"
    },
    {
      "event": "referenced",
      "id": 5116706076,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMTY3MDYwNzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5116706076",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8a1291648f062fcb28a982f4b1cfc5e6df22291a",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/8a1291648f062fcb28a982f4b1cfc5e6df22291a",
      "created_at": "2021-08-05T10:47:55Z"
    },
    {
      "event": "referenced",
      "id": 5118335191,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMTgzMzUxOTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5118335191",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a9a2d0d850096c90fcc9da073cf759584ad4bee7",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/a9a2d0d850096c90fcc9da073cf759584ad4bee7",
      "created_at": "2021-08-05T15:47:29Z"
    },
    {
      "event": "referenced",
      "id": 5128000272,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMjgwMDAyNzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5128000272",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "419bcd395f828fa1998c0f4187fc05e7759292b3",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/419bcd395f828fa1998c0f4187fc05e7759292b3",
      "created_at": "2021-08-09T07:08:28Z"
    },
    {
      "event": "referenced",
      "id": 5137375290,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMzczNzUyOTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5137375290",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7aebf156e9896cdafc0522f8bbaf1d49f72f79be",
      "commit_url": "https://api.github.com/repos/dashpay/dash/commits/7aebf156e9896cdafc0522f8bbaf1d49f72f79be",
      "created_at": "2021-08-10T19:34:28Z"
    },
    {
      "event": "referenced",
      "id": 5149897252,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxNDk4OTcyNTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5149897252",
      "actor": {
        "login": "5tefan",
        "id": 5855806,
        "node_id": "MDQ6VXNlcjU4NTU4MDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5855806?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/5tefan",
        "html_url": "https://github.com/5tefan",
        "followers_url": "https://api.github.com/users/5tefan/followers",
        "following_url": "https://api.github.com/users/5tefan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/5tefan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/5tefan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/5tefan/subscriptions",
        "organizations_url": "https://api.github.com/users/5tefan/orgs",
        "repos_url": "https://api.github.com/users/5tefan/repos",
        "events_url": "https://api.github.com/users/5tefan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/5tefan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e71f0e5e314d1f900a96c286ab1336045ab6edf5",
      "commit_url": "https://api.github.com/repos/5tefan/dash/commits/e71f0e5e314d1f900a96c286ab1336045ab6edf5",
      "created_at": "2021-08-12T14:39:43Z"
    },
    {
      "event": "referenced",
      "id": 5715726849,
      "node_id": "REFE_lADOABII584U0fkazwAAAAFUrxIB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5715726849",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "72504d171f02a7a147540786a2fe833b8871ffdd",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/72504d171f02a7a147540786a2fe833b8871ffdd",
      "created_at": "2021-12-04T14:52:12Z"
    },
    {
      "event": "referenced",
      "id": 5731615795,
      "node_id": "REFE_lADOABII584U0fkazwAAAAFVoYQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5731615795",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "46a56592bc12062d34fef26472827a0f687dbffd",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/46a56592bc12062d34fef26472827a0f687dbffd",
      "created_at": "2021-12-08T05:46:44Z"
    },
    {
      "event": "referenced",
      "id": 5752535196,
      "node_id": "REFE_lADOABII584U0fkazwAAAAFW4Lic",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5752535196",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "55386acde8a865615f49ac9064f4123d2fa0ed45",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/55386acde8a865615f49ac9064f4123d2fa0ed45",
      "created_at": "2021-12-12T08:42:14Z"
    },
    {
      "event": "referenced",
      "id": 5753866981,
      "node_id": "REFE_lADOABII584U0fkazwAAAAFW9Qrl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5753866981",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1b6570894d6d2ca68dc5966a1298edb5dfd80d92",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/1b6570894d6d2ca68dc5966a1298edb5dfd80d92",
      "created_at": "2021-12-13T02:44:01Z"
    },
    {
      "event": "referenced",
      "id": 5754338561,
      "node_id": "REFE_lADOABII584U0fkazwAAAAFW_D0B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5754338561",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "eb63905395c558f623bc4c9f4b913cef5601bd38",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/eb63905395c558f623bc4c9f4b913cef5601bd38",
      "created_at": "2021-12-13T05:40:36Z"
    },
    {
      "event": "locked",
      "id": 5778893504,
      "node_id": "LOE_lADOABII584U0fkazwAAAAFYcurA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778893504",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T14:50:57Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213502647",
      "pull_request_review_id": 150353114,
      "id": 213502647,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUwMjY0Nw==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could reduce indentation?",
      "created_at": "2018-08-28T23:19:40Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213502647",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213502647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1799,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213504242",
      "pull_request_review_id": 150353114,
      "id": 213504242,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUwNDI0Mg==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 118,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could be more informative?",
      "created_at": "2018-08-28T23:29:53Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213504242",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213504242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1888,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213504324",
      "pull_request_review_id": 150353114,
      "id": 213504324,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUwNDMyNA==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 122,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should allow duplicate outputs? Or should sum values into one output?",
      "created_at": "2018-08-28T23:30:27Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213504324",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213504324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1892,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213505237",
      "pull_request_review_id": 150353114,
      "id": 213505237,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUwNTIzNw==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So this is necessary because the first is a copy and the remaining psbt inputs are cleared because of `AddInput`. Maybe remove this \"optimization\" and merge all psbts to an empty psbt?",
      "created_at": "2018-08-28T23:36:08Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213505237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213505237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1881,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213507178",
      "pull_request_review_id": 150353114,
      "id": 213507178,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUwNzE3OA==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 118,
      "original_position": 98,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should force `txs.size() > 1`?",
      "created_at": "2018-08-28T23:48:17Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213507178",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213507178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1794,
      "original_line": 1794,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215157287",
      "pull_request_review_id": 152360007,
      "id": 215157287,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE1NzI4Nw==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"analyzepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+                            \"    {\\n\"\n+                            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+                            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+                            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+                            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+                            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+                            \"        ]\\n\"\n+                            \"        \\\"signatures\\\" : [          (array)\\n\"\n+                            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+                            \"        ]\\n\"\n+                            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+                            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+                            \"        \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+                            \"      }\\n\"\n+                            \"    }\\n\"\n+                            \"    ,...\\n\"\n+                            \"  ]\\n\"\n+                            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+                            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            std::vector<CKeyID> missing_pubkeys;\n+            std::vector<CKeyID> missing_sigs;\n+            uint160 missing_redeem_script;\n+            uint256 missing_witness_script;\n+            SignatureData sigdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, *psbtx.tx, input, i, 1, &missing_pubkeys, &missing_sigs, &missing_redeem_script, &missing_witness_script);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(missing_redeem_script));\n+                }\n+                if (!missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(missing_witness_script));\n+                }\n+                if (!missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (missing_pubkeys.empty() && missing_redeem_script.IsNull() && missing_witness_script.IsNull() && !missing_sigs.empty()) {\n+                    only_missing_sigs = true;\n+                    input_univ.pushKV(\"next\", \"signer\");\n+                } else {\n+                    input_univ.pushKV(\"next\", \"updater\");\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_univ.pushKV(\"next\", \"finalizer\");\n+            }\n+        } else {\n+            input_univ.pushKV(\"is_final\", true);\n+        }\n+        inputs_result.push_back(input_univ);\n+    }\n+    result.pushKV(\"inputs\", inputs_result);\n+\n+    if (all_final) {\n+        result.pushKV(\"next\", \"extractor\");\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = 0;\n+        for (const CTxOut& out : psbtx.tx->vout) {\n+            out_amt += out.nValue;\n+        }\n+\n+        // Get the fee\n+        CAmount fee = in_amt - out_amt;\n+\n+        // Estimate the size\n+        size_t size;",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 276,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The scope of `size` could be reduced?",
      "created_at": "2018-09-05T07:11:16Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r215157287",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215157287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2059,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217562904",
      "pull_request_review_id": 155307683,
      "id": 217562904,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU2MjkwNA==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 118,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": 213504242,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What else could be said?",
      "created_at": "2018-09-13T23:21:44Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217562904",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217562904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1888,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217563202",
      "pull_request_review_id": 155307998,
      "id": 217563202,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU2MzIwMg==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 122,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": 213504324,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Duplicate outputs should be allowed. The idea is that there are two distinct transactions with separate inputs and outputs. They are just being combined into one transaction. Thus you can have duplicate outputs as outputs are still unique. However the inputs must be enforced to be unique.",
      "created_at": "2018-09-13T23:23:15Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217563202",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217563202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1892,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217563440",
      "pull_request_review_id": 155308261,
      "id": 217563440,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU2MzQ0MA==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": 213505237,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see how that is better.",
      "created_at": "2018-09-13T23:24:42Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217563440",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217563440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1881,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217567515",
      "pull_request_review_id": 155312917,
      "id": 217567515,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU2NzUxNQ==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": 213502647,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2018-09-13T23:51:39Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217567515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217567515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1799,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217567536",
      "pull_request_review_id": 155312935,
      "id": 217567536,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU2NzUzNg==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 118,
      "original_position": 98,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": 213507178,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2018-09-13T23:51:46Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217567536",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217567536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1794,
      "original_line": 1794,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217567543",
      "pull_request_review_id": 155312949,
      "id": 217567543,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU2NzU0Mw==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"analyzepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+                            \"    {\\n\"\n+                            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+                            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+                            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+                            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+                            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+                            \"        ]\\n\"\n+                            \"        \\\"signatures\\\" : [          (array)\\n\"\n+                            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+                            \"        ]\\n\"\n+                            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+                            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+                            \"        \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+                            \"      }\\n\"\n+                            \"    }\\n\"\n+                            \"    ,...\\n\"\n+                            \"  ]\\n\"\n+                            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+                            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            std::vector<CKeyID> missing_pubkeys;\n+            std::vector<CKeyID> missing_sigs;\n+            uint160 missing_redeem_script;\n+            uint256 missing_witness_script;\n+            SignatureData sigdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, *psbtx.tx, input, i, 1, &missing_pubkeys, &missing_sigs, &missing_redeem_script, &missing_witness_script);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(missing_redeem_script));\n+                }\n+                if (!missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(missing_witness_script));\n+                }\n+                if (!missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (missing_pubkeys.empty() && missing_redeem_script.IsNull() && missing_witness_script.IsNull() && !missing_sigs.empty()) {\n+                    only_missing_sigs = true;\n+                    input_univ.pushKV(\"next\", \"signer\");\n+                } else {\n+                    input_univ.pushKV(\"next\", \"updater\");\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_univ.pushKV(\"next\", \"finalizer\");\n+            }\n+        } else {\n+            input_univ.pushKV(\"is_final\", true);\n+        }\n+        inputs_result.push_back(input_univ);\n+    }\n+    result.pushKV(\"inputs\", inputs_result);\n+\n+    if (all_final) {\n+        result.pushKV(\"next\", \"extractor\");\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = 0;\n+        for (const CTxOut& out : psbtx.tx->vout) {\n+            out_amt += out.nValue;\n+        }\n+\n+        // Get the fee\n+        CAmount fee = in_amt - out_amt;\n+\n+        // Estimate the size\n+        size_t size;",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 276,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": 215157287,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2018-09-13T23:51:50Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217567543",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217567543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2059,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/221827004",
      "pull_request_review_id": 160568659,
      "id": 221827004,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTgyNzAwNA==",
      "diff_hunk": "@@ -7,6 +7,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error, find_output\n+from decimal import Decimal",
      "path": "test/functional/rpc_psbt.py",
      "position": null,
      "original_position": 4,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "9004ce4969eb2e9ca255a5508fd0dcab180b0d31",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Sort imports :-)",
      "created_at": "2018-10-02T05:14:10Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r221827004",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/221827004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230893599",
      "pull_request_review_id": 171736107,
      "id": 230893599,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDg5MzU5OQ==",
      "diff_hunk": "@@ -1693,6 +1694,324 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+            \"    [\\n\"\n+            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"analyzepsbt \\\"psbt\\\"\\n\"\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"signatures\\\" : [          (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+            \"        \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+            \"      }\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            std::vector<CKeyID> missing_pubkeys;\n+            std::vector<CKeyID> missing_sigs;\n+            uint160 missing_redeem_script;\n+            uint256 missing_witness_script;\n+            SignatureData sigdata;",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 218,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "ba5f9058f6c874cd1a76b5fa468b2e9c58e4604a",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unused?",
      "created_at": "2018-11-05T20:06:27Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r230893599",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230893599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1983,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230893649",
      "pull_request_review_id": 171736165,
      "id": 230893649,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDg5MzY0OQ==",
      "diff_hunk": "@@ -1693,6 +1694,324 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+            \"    [\\n\"\n+            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"analyzepsbt \\\"psbt\\\"\\n\"\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"signatures\\\" : [          (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+            \"        \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+            \"      }\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            std::vector<CKeyID> missing_pubkeys;\n+            std::vector<CKeyID> missing_sigs;\n+            uint160 missing_redeem_script;\n+            uint256 missing_witness_script;\n+            SignatureData sigdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, *psbtx.tx, input, i, 1, &missing_pubkeys, &missing_sigs, &missing_redeem_script, &missing_witness_script);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(missing_redeem_script));\n+                }\n+                if (!missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(missing_witness_script));\n+                }\n+                if (!missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (missing_pubkeys.empty() && missing_redeem_script.IsNull() && missing_witness_script.IsNull() && !missing_sigs.empty()) {\n+                    only_missing_sigs = true;\n+                    input_univ.pushKV(\"next\", \"signer\");\n+                } else {\n+                    input_univ.pushKV(\"next\", \"updater\");\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_univ.pushKV(\"next\", \"finalizer\");\n+            }\n+        } else {\n+            input_univ.pushKV(\"is_final\", true);\n+        }\n+        inputs_result.push_back(input_univ);\n+    }\n+    result.pushKV(\"inputs\", inputs_result);\n+\n+    if (all_final) {\n+        result.pushKV(\"next\", \"extractor\");\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = 0;\n+        for (const CTxOut& out : psbtx.tx->vout) {\n+            out_amt += out.nValue;\n+        }\n+\n+        // Get the fee\n+        CAmount fee = in_amt - out_amt;\n+\n+        // Estimate the size\n+        CMutableTransaction mtx(*psbtx.tx);\n+        CCoinsView view_dummy;\n+        CCoinsViewCache view(&view_dummy);\n+        bool success = true;\n+\n+        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+            PSBTInput& input = psbtx.inputs[i];\n+            SignatureData sigdata;",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 288,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "ba5f9058f6c874cd1a76b5fa468b2e9c58e4604a",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unused?",
      "created_at": "2018-11-05T20:06:36Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r230893649",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230893649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2053,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232348313",
      "pull_request_review_id": 173533990,
      "id": 232348313,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjM0ODMxMw==",
      "diff_hunk": "@@ -1693,6 +1694,324 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+            \"    [\\n\"\n+            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"analyzepsbt \\\"psbt\\\"\\n\"\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"signatures\\\" : [          (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+            \"        \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+            \"      }\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            std::vector<CKeyID> missing_pubkeys;\n+            std::vector<CKeyID> missing_sigs;\n+            uint160 missing_redeem_script;\n+            uint256 missing_witness_script;\n+            SignatureData sigdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, *psbtx.tx, input, i, 1, &missing_pubkeys, &missing_sigs, &missing_redeem_script, &missing_witness_script);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(missing_redeem_script));\n+                }\n+                if (!missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(missing_witness_script));\n+                }\n+                if (!missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (missing_pubkeys.empty() && missing_redeem_script.IsNull() && missing_witness_script.IsNull() && !missing_sigs.empty()) {\n+                    only_missing_sigs = true;\n+                    input_univ.pushKV(\"next\", \"signer\");\n+                } else {\n+                    input_univ.pushKV(\"next\", \"updater\");\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_univ.pushKV(\"next\", \"finalizer\");\n+            }\n+        } else {\n+            input_univ.pushKV(\"is_final\", true);\n+        }\n+        inputs_result.push_back(input_univ);\n+    }\n+    result.pushKV(\"inputs\", inputs_result);\n+\n+    if (all_final) {\n+        result.pushKV(\"next\", \"extractor\");\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = 0;\n+        for (const CTxOut& out : psbtx.tx->vout) {\n+            out_amt += out.nValue;",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 274,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "ba5f9058f6c874cd1a76b5fa468b2e9c58e4604a",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Looks like a case for `std::accumulate` perhaps? :-)",
      "created_at": "2018-11-09T18:27:27Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r232348313",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232348313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2039,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234827979",
      "pull_request_review_id": 176554059,
      "id": 234827979,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDgyNzk3OQ==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 118,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": 213504242,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Like the conflicting input index?",
      "created_at": "2018-11-20T00:06:37Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234827979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234827979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1888,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234828603",
      "pull_request_review_id": 176554765,
      "id": 234828603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDgyODYwMw==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 122,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": 213504324,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@achow101 could you ack/nack on #12419, esp @MeshCollider https://github.com/bitcoin/bitcoin/pull/12419#issuecomment-437636604",
      "created_at": "2018-11-20T00:09:48Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234828603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234828603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1892,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234829077",
      "pull_request_review_id": 176555323,
      "id": 234829077,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDgyOTA3Nw==",
      "diff_hunk": "@@ -1773,6 +1773,67 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"utxoupdatepsbt \\\"psbt\\\"\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f2a2f06fed01829e1f1ae574f50cce841fdcbbff",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should use `RPCHelpMan` from #14530.",
      "created_at": "2018-11-20T00:12:20Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234829077",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234829077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1780,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234830911",
      "pull_request_review_id": 176555323,
      "id": 234830911,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDgzMDkxMQ==",
      "diff_hunk": "@@ -1773,6 +1773,67 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 44,
      "original_position": 24,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f2a2f06fed01829e1f1ae574f50cce841fdcbbff",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could add test for this error.",
      "created_at": "2018-11-20T00:22:00Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234830911",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234830911"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1720,
      "original_line": 1720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234830933",
      "pull_request_review_id": 176555323,
      "id": 234830933,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDgzMDkzMw==",
      "diff_hunk": "@@ -1773,6 +1773,67 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f2a2f06fed01829e1f1ae574f50cce841fdcbbff",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, `{`",
      "created_at": "2018-11-20T00:22:07Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234830933",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234830933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1699,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237732910",
      "pull_request_review_id": 180106823,
      "id": 237732910,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzczMjkxMA==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": 213505237,
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be less code, and less complexity, which I would say is always better, absent a reason to write more code. Why write more code? \r\n",
      "created_at": "2018-11-30T03:05:00Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r237732910",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237732910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1881,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238517900",
      "pull_request_review_id": 181077066,
      "id": 238517900,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODUxNzkwMA==",
      "diff_hunk": "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "in_reply_to_id": 213505237,
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Also, this is copied from combinepsbt, where it is easiest to treat the first tx specially, because we need something to compare all the others to, to make sure the underlying transaction is the same. That restriction doesn't exist here, so the need for the extra step is gone.)",
      "created_at": "2018-12-04T03:14:31Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r238517900",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238517900"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1881,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248126733",
      "pull_request_review_id": 192943548,
      "id": 248126733,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODEyNjczMw==",
      "diff_hunk": "@@ -1773,6 +1774,324 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+            \"    [\\n\"\n+            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"analyzepsbt \\\"psbt\\\"\\n\"\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"signatures\\\" : [          (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+            \"        \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 160,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "in_reply_to_id": null,
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't match the code, right? \"next\" goes inside the input, not inside \"missing\"?",
      "created_at": "2019-01-16T01:43:07Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r248126733",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248126733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1925,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250855459",
      "pull_request_review_id": 196345641,
      "id": 250855459,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MDg1NTQ1OQ==",
      "diff_hunk": "@@ -1773,6 +1773,67 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 44,
      "original_position": 24,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f2a2f06fed01829e1f1ae574f50cce841fdcbbff",
      "in_reply_to_id": 234830911,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`DecodePSBT` has its own tests.",
      "created_at": "2019-01-25T03:17:56Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r250855459",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250855459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1720,
      "original_line": 1720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250855492",
      "pull_request_review_id": 196345691,
      "id": 250855492,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MDg1NTQ5Mg==",
      "diff_hunk": "@@ -1773,6 +1773,67 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f2a2f06fed01829e1f1ae574f50cce841fdcbbff",
      "in_reply_to_id": 234830933,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Put the bracket where?",
      "created_at": "2019-01-25T03:18:20Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r250855492",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250855492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1699,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251659769",
      "pull_request_review_id": 197339639,
      "id": 251659769,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTY1OTc2OQ==",
      "diff_hunk": "@@ -237,7 +248,7 @@ bool PSBTInputSigned(PSBTInput& input)\n     return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n }\n \n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash)\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash, std::vector<CKeyID>* missing_pubkeys, std::vector<CKeyID>* missing_sigs, uint160* missing_redeem_script, uint256* missing_witness_script, bool use_dummy)",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "e65b4a373b06dca26f1b2c291a3c98613800516d",
      "in_reply_to_id": null,
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What about just having SignPSBTInput take an (optional) output-parameter sigdata, just like ProduceSignature? This function signature is getting unwieldy.",
      "created_at": "2019-01-29T01:20:56Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r251659769",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251659769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 251,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251662651",
      "pull_request_review_id": 197342859,
      "id": 251662651,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTY2MjY1MQ==",
      "diff_hunk": "@@ -629,6 +679,18 @@ bool PSBTInput::IsSane() const\n     return true;\n }\n \n+bool PSBTInput::GetUTXO(CTxOut& utxo, int prevout_index) const",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 123,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "e65b4a373b06dca26f1b2c291a3c98613800516d",
      "in_reply_to_id": null,
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This interface feels fragile to me. Could this instead be \"bool PartiallySignedTransaction::GetInputUTXO(CTxOut& utxo, int input_index)\"? That version would be resistant to misuse, whereas this version will do non-obvious crazy things if you accidentally give it the wrong prevout_index for your input (which seems easy to do.)",
      "created_at": "2019-01-29T01:35:54Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r251662651",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251662651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 682,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251663308",
      "pull_request_review_id": 197343622,
      "id": 251663308,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTY2MzMwOA==",
      "diff_hunk": "@@ -1739,6 +1741,334 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"joinpsbts\",\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n+            {\n+                {\"txs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of base64 strings of partially signed transactions\",\n+                    {\n+                        {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+                    }}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    int32_t best_version = 1;\n+    uint32_t best_locktime = 0xffffffff;\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+        // Choose the highest version number\n+        if (psbtx.tx->nVersion > best_version) {\n+            best_version = psbtx.tx->nVersion;\n+        }\n+        // Choose the lowest lock time\n+        if (psbtx.tx->nLockTime < best_locktime) {\n+            best_locktime = psbtx.tx->nLockTime;\n+        }\n+    }\n+\n+    // Create a blank psbt where everything will be added\n+    PartiallySignedTransaction merged_psbt;\n+    merged_psbt.tx = CMutableTransaction();\n+    merged_psbt.tx->nVersion = best_version;\n+    merged_psbt.tx->nLockTime = best_locktime;\n+\n+    // Merge\n+    for (auto& psbt : psbtxs) {\n+        for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString().c_str(), psbt.tx->vin[i].prevout.n));\n+            }\n+        }\n+        for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n+        }\n+        merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"analyzepsbt\",\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"signatures\\\" : [          (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+            \"      }\\n\"\n+            \"      \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 228,
      "original_position": 221,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "e65b4a373b06dca26f1b2c291a3c98613800516d",
      "in_reply_to_id": null,
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are there cases where this isn't overwritten by a later check? If so, you should set all_final = false here. (If not you should remove this.)",
      "created_at": "2019-01-29T01:39:17Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r251663308",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251663308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1904,
      "original_line": 1904,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251663915",
      "pull_request_review_id": 197344349,
      "id": 251663915,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTY2MzkxNQ==",
      "diff_hunk": "@@ -1739,6 +1741,334 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"joinpsbts\",\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n+            {\n+                {\"txs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of base64 strings of partially signed transactions\",\n+                    {\n+                        {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+                    }}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    int32_t best_version = 1;\n+    uint32_t best_locktime = 0xffffffff;\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+        // Choose the highest version number\n+        if (psbtx.tx->nVersion > best_version) {\n+            best_version = psbtx.tx->nVersion;\n+        }\n+        // Choose the lowest lock time\n+        if (psbtx.tx->nLockTime < best_locktime) {\n+            best_locktime = psbtx.tx->nLockTime;\n+        }\n+    }\n+\n+    // Create a blank psbt where everything will be added\n+    PartiallySignedTransaction merged_psbt;\n+    merged_psbt.tx = CMutableTransaction();\n+    merged_psbt.tx->nVersion = best_version;\n+    merged_psbt.tx->nLockTime = best_locktime;\n+\n+    // Merge\n+    for (auto& psbt : psbtxs) {\n+        for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString().c_str(), psbt.tx->vin[i].prevout.n));\n+            }\n+        }\n+        for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n+        }\n+        merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"analyzepsbt\",\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"signatures\\\" : [          (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+            \"      }\\n\"\n+            \"      \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 228,
      "original_position": 221,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "e65b4a373b06dca26f1b2c291a3c98613800516d",
      "in_reply_to_id": 251663308,
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, I see, it's handled by calc_fee = false? The flow is a little hard to follow.",
      "created_at": "2019-01-29T01:42:50Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r251663915",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251663915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1904,
      "original_line": 1904,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255283623",
      "pull_request_review_id": 201846275,
      "id": 255283623,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTI4MzYyMw==",
      "diff_hunk": "@@ -1739,6 +1739,68 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 75,
      "original_position": 56,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "b2c85b14f111b5011d3cf8a397679c159825766b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not P2SH? There's no guarantee that P2SH outputs are witness of course, but there is no real harm in including too much.",
      "created_at": "2019-02-09T02:19:39Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255283623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255283623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1751,
      "original_line": 1751,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255313205",
      "pull_request_review_id": 201877843,
      "id": 255313205,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTMxMzIwNQ==",
      "diff_hunk": "@@ -1739,6 +1739,68 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 75,
      "original_position": 56,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "b2c85b14f111b5011d3cf8a397679c159825766b",
      "in_reply_to_id": 255283623,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that would be a problem right now since providing a witness utxo requires a witness signature and if a P2SH output was not witness, then it would never be signed.",
      "created_at": "2019-02-09T20:55:25Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255313205",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255313205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1751,
      "original_line": 1751,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255315183",
      "pull_request_review_id": 201879995,
      "id": 255315183,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTMxNTE4Mw==",
      "diff_hunk": "@@ -237,7 +248,7 @@ bool PSBTInputSigned(PSBTInput& input)\n     return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n }\n \n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash)\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash, std::vector<CKeyID>* missing_pubkeys, std::vector<CKeyID>* missing_sigs, uint160* missing_redeem_script, uint256* missing_witness_script, bool use_dummy)",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "e65b4a373b06dca26f1b2c291a3c98613800516d",
      "in_reply_to_id": 251659769,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-02-09T22:03:50Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255315183",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255315183"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 251,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255315191",
      "pull_request_review_id": 201880002,
      "id": 255315191,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTMxNTE5MQ==",
      "diff_hunk": "@@ -629,6 +679,18 @@ bool PSBTInput::IsSane() const\n     return true;\n }\n \n+bool PSBTInput::GetUTXO(CTxOut& utxo, int prevout_index) const",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 123,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "e65b4a373b06dca26f1b2c291a3c98613800516d",
      "in_reply_to_id": 251662651,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-02-09T22:04:04Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255315191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255315191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 682,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255315242",
      "pull_request_review_id": 201880063,
      "id": 255315242,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTMxNTI0Mg==",
      "diff_hunk": "@@ -1739,6 +1741,334 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"joinpsbts\",\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n+            {\n+                {\"txs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of base64 strings of partially signed transactions\",\n+                    {\n+                        {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+                    }}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    int32_t best_version = 1;\n+    uint32_t best_locktime = 0xffffffff;\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+        // Choose the highest version number\n+        if (psbtx.tx->nVersion > best_version) {\n+            best_version = psbtx.tx->nVersion;\n+        }\n+        // Choose the lowest lock time\n+        if (psbtx.tx->nLockTime < best_locktime) {\n+            best_locktime = psbtx.tx->nLockTime;\n+        }\n+    }\n+\n+    // Create a blank psbt where everything will be added\n+    PartiallySignedTransaction merged_psbt;\n+    merged_psbt.tx = CMutableTransaction();\n+    merged_psbt.tx->nVersion = best_version;\n+    merged_psbt.tx->nLockTime = best_locktime;\n+\n+    // Merge\n+    for (auto& psbt : psbtxs) {\n+        for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString().c_str(), psbt.tx->vin[i].prevout.n));\n+            }\n+        }\n+        for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n+        }\n+        merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"analyzepsbt\",\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"signatures\\\" : [          (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+            \"      }\\n\"\n+            \"      \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 228,
      "original_position": 221,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "e65b4a373b06dca26f1b2c291a3c98613800516d",
      "in_reply_to_id": 251663308,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not quite sure you are asking.",
      "created_at": "2019-02-09T22:06:01Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255315242",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255315242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1904,
      "original_line": 1904,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255323243",
      "pull_request_review_id": 201888156,
      "id": 255323243,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTMyMzI0Mw==",
      "diff_hunk": "@@ -1739,6 +1741,334 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"joinpsbts\",\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n+            {\n+                {\"txs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of base64 strings of partially signed transactions\",\n+                    {\n+                        {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+                    }}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    int32_t best_version = 1;\n+    uint32_t best_locktime = 0xffffffff;\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+        // Choose the highest version number\n+        if (psbtx.tx->nVersion > best_version) {\n+            best_version = psbtx.tx->nVersion;\n+        }\n+        // Choose the lowest lock time\n+        if (psbtx.tx->nLockTime < best_locktime) {\n+            best_locktime = psbtx.tx->nLockTime;\n+        }\n+    }\n+\n+    // Create a blank psbt where everything will be added\n+    PartiallySignedTransaction merged_psbt;\n+    merged_psbt.tx = CMutableTransaction();\n+    merged_psbt.tx->nVersion = best_version;\n+    merged_psbt.tx->nLockTime = best_locktime;\n+\n+    // Merge\n+    for (auto& psbt : psbtxs) {\n+        for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString().c_str(), psbt.tx->vin[i].prevout.n));\n+            }\n+        }\n+        for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n+        }\n+        merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"analyzepsbt\",\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"signatures\\\" : [          (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+            \"      }\\n\"\n+            \"      \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 228,
      "original_position": 221,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "e65b4a373b06dca26f1b2c291a3c98613800516d",
      "in_reply_to_id": 251663308,
      "user": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I think I just have trouble following the state machine of this function, which is a little complicated, and so I was confused about whether all_final was actually getting set correctly in every case. Since nobody's relying on it yet, and I haven't found any actual issues, I think it should probably go in as-is, and I may propose some refactoring when I go to actually use it.",
      "created_at": "2019-02-10T04:32:19Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255323243",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255323243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1904,
      "original_line": 1904,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255835511",
      "pull_request_review_id": 202521987,
      "id": 255835511,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTgzNTUxMQ==",
      "diff_hunk": "@@ -572,9 +576,12 @@ struct PartiallySignedTransaction\n     bool IsNull() const;\n     void Merge(const PartiallySignedTransaction& psbt);\n     bool IsSane() const;\n+    bool AddInput(const CTxIn& txin, PSBTInput& psbtin);\n+    bool AddOutput(const CTxOut& txout, const PSBTOutput& psbtout);\n     PartiallySignedTransaction() {}\n     PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n+    bool GetInputUTXO(CTxOut& utxo, int input_index) const;",
      "path": "src/script/sign.h",
      "position": null,
      "original_position": 20,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "1193ced586f5d55b4946f06cc2731c5a72389634",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please add a short doxygen documentation for the new calls.\r\n(I know, the current ones don't, but every day is a good day to get started)\r\n\r\nEdit: also, what is our normal argument ordering here? input then output arguments or vice versa? Let's try to be consistent.",
      "created_at": "2019-02-12T07:53:15Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255835511",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255835511"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 591,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255850010",
      "pull_request_review_id": 202539443,
      "id": 255850010,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTg1MDAxMA==",
      "diff_hunk": "@@ -572,9 +576,12 @@ struct PartiallySignedTransaction\n     bool IsNull() const;\n     void Merge(const PartiallySignedTransaction& psbt);\n     bool IsSane() const;\n+    bool AddInput(const CTxIn& txin, PSBTInput& psbtin);\n+    bool AddOutput(const CTxOut& txout, const PSBTOutput& psbtout);\n     PartiallySignedTransaction() {}\n     PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n+    bool GetInputUTXO(CTxOut& utxo, int input_index) const;",
      "path": "src/script/sign.h",
      "position": null,
      "original_position": 20,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "1193ced586f5d55b4946f06cc2731c5a72389634",
      "in_reply_to_id": 255835511,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe we can avoid the input/output order completely by returning an `Optional<CTxOut>` instead. We have this in `optional.h`, after all.",
      "created_at": "2019-02-12T08:43:04Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255850010",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255850010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 591,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255854713",
      "pull_request_review_id": 202544762,
      "id": 255854713,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTg1NDcxMw==",
      "diff_hunk": "@@ -290,5 +291,72 @@ def run_test(self):\n         psbt = self.nodes[1].walletcreatefundedpsbt([], [{p2pkh : 1}], 0, {\"includeWatching\" : True}, True)\n         self.nodes[0].decodepsbt(psbt['psbt'])\n \n+        # Send to all types of addresses\n+        addr1 = self.nodes[1].getnewaddress(\"\", \"bech32\")\n+        txid1 = self.nodes[0].sendtoaddress(addr1, 11)\n+        vout1 = find_output(self.nodes[0], txid1, 11)\n+        addr2 = self.nodes[1].getnewaddress(\"\", \"legacy\")\n+        txid2 = self.nodes[0].sendtoaddress(addr2, 11)\n+        vout2 = find_output(self.nodes[0], txid2, 11)\n+        addr3 = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n+        txid3 = self.nodes[0].sendtoaddress(addr3, 11)\n+        vout3 = find_output(self.nodes[0], txid3, 11)\n+        self.sync_all()\n+\n+        # Update a PSBT with UTXOs from the node\n+        # Bech32 inputs should be filled with witness UTXO. Other inputs should not be filled because they are non-witness\n+        psbt = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1},{\"txid\":txid2, \"vout\":vout2},{\"txid\":txid3, \"vout\":vout3}], {self.nodes[0].getnewaddress():32.999})\n+        decoded = self.nodes[1].decodepsbt(psbt)\n+        assert \"witness_utxo\" not in decoded['inputs'][0] and \"non_witness_utxo\" not in decoded['inputs'][0]\n+        assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n+        assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n+        updated = self.nodes[1].utxoupdatepsbt(psbt)\n+        decoded = self.nodes[1].decodepsbt(updated)\n+        assert \"witness_utxo\" in decoded['inputs'][0] and \"non_witness_utxo\" not in decoded['inputs'][0]\n+        assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n+        assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n+\n+        # Two PSBTs with a common input should not be joinable\n+        psbt1 = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1}], {self.nodes[0].getnewaddress():10.999})",
      "path": "test/functional/rpc_psbt.py",
      "position": null,
      "original_position": 50,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "1193ced586f5d55b4946f06cc2731c5a72389634",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`Decimal(\"10.999\")` I guess?\r\n(there are some more occurrences of floats for monetary values, won't comment them individually)",
      "created_at": "2019-02-12T08:56:23Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255854713",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255854713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 320,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256054582",
      "pull_request_review_id": 202793704,
      "id": 256054582,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjA1NDU4Mg==",
      "diff_hunk": "@@ -572,9 +576,12 @@ struct PartiallySignedTransaction\n     bool IsNull() const;\n     void Merge(const PartiallySignedTransaction& psbt);\n     bool IsSane() const;\n+    bool AddInput(const CTxIn& txin, PSBTInput& psbtin);\n+    bool AddOutput(const CTxOut& txout, const PSBTOutput& psbtout);\n     PartiallySignedTransaction() {}\n     PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n+    bool GetInputUTXO(CTxOut& utxo, int input_index) const;",
      "path": "src/script/sign.h",
      "position": null,
      "original_position": 20,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "1193ced586f5d55b4946f06cc2731c5a72389634",
      "in_reply_to_id": 255835511,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added doxygen comment",
      "created_at": "2019-02-12T17:08:01Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r256054582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256054582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 591,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256054620",
      "pull_request_review_id": 202793753,
      "id": 256054620,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjA1NDYyMA==",
      "diff_hunk": "@@ -290,5 +291,72 @@ def run_test(self):\n         psbt = self.nodes[1].walletcreatefundedpsbt([], [{p2pkh : 1}], 0, {\"includeWatching\" : True}, True)\n         self.nodes[0].decodepsbt(psbt['psbt'])\n \n+        # Send to all types of addresses\n+        addr1 = self.nodes[1].getnewaddress(\"\", \"bech32\")\n+        txid1 = self.nodes[0].sendtoaddress(addr1, 11)\n+        vout1 = find_output(self.nodes[0], txid1, 11)\n+        addr2 = self.nodes[1].getnewaddress(\"\", \"legacy\")\n+        txid2 = self.nodes[0].sendtoaddress(addr2, 11)\n+        vout2 = find_output(self.nodes[0], txid2, 11)\n+        addr3 = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n+        txid3 = self.nodes[0].sendtoaddress(addr3, 11)\n+        vout3 = find_output(self.nodes[0], txid3, 11)\n+        self.sync_all()\n+\n+        # Update a PSBT with UTXOs from the node\n+        # Bech32 inputs should be filled with witness UTXO. Other inputs should not be filled because they are non-witness\n+        psbt = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1},{\"txid\":txid2, \"vout\":vout2},{\"txid\":txid3, \"vout\":vout3}], {self.nodes[0].getnewaddress():32.999})\n+        decoded = self.nodes[1].decodepsbt(psbt)\n+        assert \"witness_utxo\" not in decoded['inputs'][0] and \"non_witness_utxo\" not in decoded['inputs'][0]\n+        assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n+        assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n+        updated = self.nodes[1].utxoupdatepsbt(psbt)\n+        decoded = self.nodes[1].decodepsbt(updated)\n+        assert \"witness_utxo\" in decoded['inputs'][0] and \"non_witness_utxo\" not in decoded['inputs'][0]\n+        assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n+        assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n+\n+        # Two PSBTs with a common input should not be joinable\n+        psbt1 = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1}], {self.nodes[0].getnewaddress():10.999})",
      "path": "test/functional/rpc_psbt.py",
      "position": null,
      "original_position": 50,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "1193ced586f5d55b4946f06cc2731c5a72389634",
      "in_reply_to_id": 255854713,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-02-12T17:08:05Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r256054620",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256054620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 320,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257416737",
      "pull_request_review_id": 204471308,
      "id": 257416737,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQxNjczNw==",
      "diff_hunk": "@@ -1773,6 +1773,67 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f2a2f06fed01829e1f1ae574f50cce841fdcbbff",
      "in_reply_to_id": 234830933,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Technically this violates the style guide, as it's not putting the then clause on the same line as the `if`, so it needs braces + indenting on the next line.",
      "created_at": "2019-02-15T22:51:01Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257416737",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257416737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1699,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257418589",
      "pull_request_review_id": 204471308,
      "id": 257418589,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQxODU4OQ==",
      "diff_hunk": "@@ -1739,6 +1739,68 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"}\n+            }}.ToString() +\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 75,
      "original_position": 56,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "b2c85b14f111b5011d3cf8a397679c159825766b",
      "in_reply_to_id": 255283623,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess there's an obvious solution which can be added later, namely letting the RPC take in descriptor(s) that apply to its inputs. I'll look into that after this PR is merged.",
      "created_at": "2019-02-15T23:00:03Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257418589",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257418589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1751,
      "original_line": 1751,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257420296",
      "pull_request_review_id": 204471308,
      "id": 257420296,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQyMDI5Ng==",
      "diff_hunk": "@@ -1691,6 +1694,334 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"joinpsbts\",\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n+            {\n+                {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base64 strings of partially signed transactions\",\n+                    {\n+                        {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+                    }}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    int32_t best_version = 1;\n+    uint32_t best_locktime = 0xffffffff;\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodeBase64PSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+        // Choose the highest version number\n+        if (psbtx.tx->nVersion > best_version) {\n+            best_version = psbtx.tx->nVersion;\n+        }\n+        // Choose the lowest lock time\n+        if (psbtx.tx->nLockTime < best_locktime) {\n+            best_locktime = psbtx.tx->nLockTime;\n+        }\n+    }\n+\n+    // Create a blank psbt where everything will be added\n+    PartiallySignedTransaction merged_psbt;\n+    merged_psbt.tx = CMutableTransaction();\n+    merged_psbt.tx->nVersion = best_version;\n+    merged_psbt.tx->nLockTime = best_locktime;\n+\n+    // Merge\n+    for (auto& psbt : psbtxs) {\n+        for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString().c_str(), psbt.tx->vin[i].prevout.n));\n+            }\n+        }\n+        for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n+        }\n+        merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"analyzepsbt\",\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"{\\n\"\n+                \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+                \"    {\\n\"\n+                \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+                \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+                \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+                \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"signatures\\\" : [          (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+                \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+                \"      }\\n\"\n+                \"      \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+                \"    }\\n\"\n+                \"    ,...\\n\"\n+                \"  ]\\n\"\n+                \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+                \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+                \"}\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (psbtx.GetInputUTXO(utxo, i)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 231,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "0c35f0e802274c27736b16a4542ad44bc3c7f794",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Use `PSBTInputSigned` here?",
      "created_at": "2019-02-15T23:08:49Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257420296",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257420296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1907,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257420598",
      "pull_request_review_id": 204471308,
      "id": 257420598,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQyMDU5OA==",
      "diff_hunk": "@@ -1691,6 +1694,334 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"joinpsbts\",\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n+            {\n+                {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base64 strings of partially signed transactions\",\n+                    {\n+                        {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+                    }}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    int32_t best_version = 1;\n+    uint32_t best_locktime = 0xffffffff;\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodeBase64PSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+        // Choose the highest version number\n+        if (psbtx.tx->nVersion > best_version) {\n+            best_version = psbtx.tx->nVersion;\n+        }\n+        // Choose the lowest lock time\n+        if (psbtx.tx->nLockTime < best_locktime) {\n+            best_locktime = psbtx.tx->nLockTime;\n+        }\n+    }\n+\n+    // Create a blank psbt where everything will be added\n+    PartiallySignedTransaction merged_psbt;\n+    merged_psbt.tx = CMutableTransaction();\n+    merged_psbt.tx->nVersion = best_version;\n+    merged_psbt.tx->nLockTime = best_locktime;\n+\n+    // Merge\n+    for (auto& psbt : psbtxs) {\n+        for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString().c_str(), psbt.tx->vin[i].prevout.n));\n+            }\n+        }\n+        for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n+        }\n+        merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"analyzepsbt\",\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"{\\n\"\n+                \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+                \"    {\\n\"\n+                \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+                \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+                \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+                \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"signatures\\\" : [          (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+                \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+                \"      }\\n\"\n+                \"      \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+                \"    }\\n\"\n+                \"    ,...\\n\"\n+                \"  ]\\n\"\n+                \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+                \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+                \"}\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (psbtx.GetInputUTXO(utxo, i)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 231,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "0c35f0e802274c27736b16a4542ad44bc3c7f794",
      "in_reply_to_id": 257420296,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you may want to add a check here for whether the input UTXO is present (if not, it's possible that you first set next=\"updater\", and then overwrite it in this conditional).",
      "created_at": "2019-02-15T23:10:23Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257420598",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257420598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1907,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257420943",
      "pull_request_review_id": 204471308,
      "id": 257420943,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQyMDk0Mw==",
      "diff_hunk": "@@ -1691,6 +1694,334 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"joinpsbts\",\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n+            {\n+                {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base64 strings of partially signed transactions\",\n+                    {\n+                        {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+                    }}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    int32_t best_version = 1;\n+    uint32_t best_locktime = 0xffffffff;\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodeBase64PSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+        // Choose the highest version number\n+        if (psbtx.tx->nVersion > best_version) {\n+            best_version = psbtx.tx->nVersion;\n+        }\n+        // Choose the lowest lock time\n+        if (psbtx.tx->nLockTime < best_locktime) {\n+            best_locktime = psbtx.tx->nLockTime;\n+        }\n+    }\n+\n+    // Create a blank psbt where everything will be added\n+    PartiallySignedTransaction merged_psbt;\n+    merged_psbt.tx = CMutableTransaction();\n+    merged_psbt.tx->nVersion = best_version;\n+    merged_psbt.tx->nLockTime = best_locktime;\n+\n+    // Merge\n+    for (auto& psbt : psbtxs) {\n+        for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString().c_str(), psbt.tx->vin[i].prevout.n));\n+            }\n+        }\n+        for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n+        }\n+        merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"analyzepsbt\",\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"{\\n\"\n+                \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+                \"    {\\n\"\n+                \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+                \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+                \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+                \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"signatures\\\" : [          (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+                \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+                \"      }\\n\"\n+                \"      \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+                \"    }\\n\"\n+                \"    ,...\\n\"\n+                \"  ]\\n\"\n+                \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+                \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+                \"}\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (psbtx.GetInputUTXO(utxo, i)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            SignatureData outdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, &outdata);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!outdata.missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : outdata.missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!outdata.missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(outdata.missing_redeem_script));\n+                }\n+                if (!outdata.missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(outdata.missing_witness_script));\n+                }\n+                if (!outdata.missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : outdata.missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (outdata.missing_pubkeys.empty() && outdata.missing_redeem_script.IsNull() && outdata.missing_witness_script.IsNull() && !outdata.missing_sigs.empty()) {\n+                    only_missing_sigs = true;",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 269,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "0c35f0e802274c27736b16a4542ad44bc3c7f794",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this (cross-input) variable can't be set to true here. If this branch is executed for the last input in a transaction, the global \"next\" will report \"signer\", even if keys/script or even UTXOs are missing for other inputs.\r\n\r\nYou probably want to have the variable start at true, and then set it to false if anything anywhere more than a signature is missing.",
      "created_at": "2019-02-15T23:12:27Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257420943",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257420943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1945,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257447204",
      "pull_request_review_id": 204506278,
      "id": 257447204,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQ0NzIwNA==",
      "diff_hunk": "@@ -1691,6 +1694,334 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"joinpsbts\",\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n+            {\n+                {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base64 strings of partially signed transactions\",\n+                    {\n+                        {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+                    }}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    int32_t best_version = 1;\n+    uint32_t best_locktime = 0xffffffff;\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodeBase64PSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+        // Choose the highest version number\n+        if (psbtx.tx->nVersion > best_version) {\n+            best_version = psbtx.tx->nVersion;\n+        }\n+        // Choose the lowest lock time\n+        if (psbtx.tx->nLockTime < best_locktime) {\n+            best_locktime = psbtx.tx->nLockTime;\n+        }\n+    }\n+\n+    // Create a blank psbt where everything will be added\n+    PartiallySignedTransaction merged_psbt;\n+    merged_psbt.tx = CMutableTransaction();\n+    merged_psbt.tx->nVersion = best_version;\n+    merged_psbt.tx->nLockTime = best_locktime;\n+\n+    // Merge\n+    for (auto& psbt : psbtxs) {\n+        for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString().c_str(), psbt.tx->vin[i].prevout.n));\n+            }\n+        }\n+        for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n+        }\n+        merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"analyzepsbt\",\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"{\\n\"\n+                \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+                \"    {\\n\"\n+                \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+                \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+                \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+                \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"signatures\\\" : [          (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+                \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+                \"      }\\n\"\n+                \"      \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+                \"    }\\n\"\n+                \"    ,...\\n\"\n+                \"  ]\\n\"\n+                \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+                \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+                \"}\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (psbtx.GetInputUTXO(utxo, i)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 231,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "0c35f0e802274c27736b16a4542ad44bc3c7f794",
      "in_reply_to_id": 257420296,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-02-16T05:16:45Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257447204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257447204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1907,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257447207",
      "pull_request_review_id": 204506282,
      "id": 257447207,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQ0NzIwNw==",
      "diff_hunk": "@@ -1691,6 +1694,334 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"joinpsbts\",\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n+            {\n+                {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base64 strings of partially signed transactions\",\n+                    {\n+                        {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+                    }}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    int32_t best_version = 1;\n+    uint32_t best_locktime = 0xffffffff;\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodeBase64PSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+        // Choose the highest version number\n+        if (psbtx.tx->nVersion > best_version) {\n+            best_version = psbtx.tx->nVersion;\n+        }\n+        // Choose the lowest lock time\n+        if (psbtx.tx->nLockTime < best_locktime) {\n+            best_locktime = psbtx.tx->nLockTime;\n+        }\n+    }\n+\n+    // Create a blank psbt where everything will be added\n+    PartiallySignedTransaction merged_psbt;\n+    merged_psbt.tx = CMutableTransaction();\n+    merged_psbt.tx->nVersion = best_version;\n+    merged_psbt.tx->nLockTime = best_locktime;\n+\n+    // Merge\n+    for (auto& psbt : psbtxs) {\n+        for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString().c_str(), psbt.tx->vin[i].prevout.n));\n+            }\n+        }\n+        for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n+        }\n+        merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"analyzepsbt\",\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"{\\n\"\n+                \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+                \"    {\\n\"\n+                \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+                \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+                \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+                \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"signatures\\\" : [          (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+                \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+                \"      }\\n\"\n+                \"      \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+                \"    }\\n\"\n+                \"    ,...\\n\"\n+                \"  ]\\n\"\n+                \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+                \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+                \"}\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (psbtx.GetInputUTXO(utxo, i)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            SignatureData outdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, &outdata);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!outdata.missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : outdata.missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!outdata.missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(outdata.missing_redeem_script));\n+                }\n+                if (!outdata.missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(outdata.missing_witness_script));\n+                }\n+                if (!outdata.missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : outdata.missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (outdata.missing_pubkeys.empty() && outdata.missing_redeem_script.IsNull() && outdata.missing_witness_script.IsNull() && !outdata.missing_sigs.empty()) {\n+                    only_missing_sigs = true;",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 269,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "0c35f0e802274c27736b16a4542ad44bc3c7f794",
      "in_reply_to_id": 257420943,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-02-16T05:16:51Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257447207",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257447207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1945,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257447218",
      "pull_request_review_id": 204506290,
      "id": 257447218,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQ0NzIxOA==",
      "diff_hunk": "@@ -1773,6 +1773,67 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "original_commit_id": "f2a2f06fed01829e1f1ae574f50cce841fdcbbff",
      "in_reply_to_id": 234830933,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-02-16T05:17:15Z",
      "updated_at": "2019-02-16T16:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257447218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257447218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1699,
      "side": "RIGHT"
    }
  ]
}