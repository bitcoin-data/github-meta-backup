{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020",
    "id": 736606502,
    "node_id": "PR_kwDOABII584r57km",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23020",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/23020.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/23020.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/b42d8e523885fdb80d63e9a58bee674cb5045580",
    "number": 23020,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "fix: contrib: allow multi-sig binary verification",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Related: https://github.com/bitcoin-core/bitcoincore.org/issues/793\r\n\r\nThis changeset improves the `contrib/verifybinaries/verify.py` script to account for the new binary verification procedure introduced in the 22.0 release; for details on this new process, see the note in https://github.com/bitcoin/bitcoin/issues/22634.\r\n\r\nIn short, instead of relying on a single signature from the lead maintainer attesting to the expected hashes of binary releases, this verify script now supports validating that a minimum threshold of trusted identities have signed the checksum file. \r\n\r\n![image](https://user-images.githubusercontent.com/73197/133840032-227240c1-ad12-498f-863d-5e2261f928bf.png)\r\n\r\n\r\nBoth the threshold and identities to trust are configurable by the end user, but sensible defaults are provided: identities are inferred from local GPG trust and the builder-keys file and a minimum threshold of 4 trusted signatures is configured by default. There are options for overriding these.\r\n\r\nVarious improvements have been made to the script for allow for easier programmatic use; a `--json` option is introduced and logging output is now directed to stderr. \r\n\r\n### Automatic pubkey import\r\n\r\nPubkeys that are referenced in checksum signature files can now be automatically downloaded based on a user prompt. This behavior can be disabled with the `--noninteractive` flag to support CI use.\r\n\r\nI have built in functionality for elevating local GPG trust of the imported keys, but it isn't quite working yet; I think instead of manually modifying the GPG trust database I have to use the `--sign-key` command. But this is optional functionality and fixing the broken process is the priority here, so I can enable this nicety in a follow-up.\r\n\r\n### Builder-key diffing\r\n\r\nBuilder keys (as listed in ./contrib/builder-keys/keys.txt) are used by default to establish trust in a pubkey signature. This can be disabled with `--no-builder-keys`. \r\n\r\nIf builder keys are locally supplied (by running this command from the root of the repository), they are diffed with the remote version obtained over HTTPS from Github. A diff is reported if it exists, e.g.\r\n\r\n![image](https://user-images.githubusercontent.com/73197/133835761-5fad32fd-4126-448e-bc54-f638b8b87e90.png)\r\n\r\n### Granular JSON output\r\n\r\nBecause binary verification is now a gradient on the basis of an end user's trust in a set of pubkeys, users of this script may want a granular report on which signatures were used. Stderr logging can be parsed for this information, but a convenient JSON blob is also accessible using the `--json` flag:\r\n\r\n```sh\r\n% ./contrib/verifybinaries/verify.py 22.0-x86 --noninteractive --json 2>/dev/null\r\n\r\n{\r\n  \"good_trusted_sigs\": [\r\n    \"SigData('9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C', 'Aaron Clauson (sipsorcery) <aaron@sipsorcery.com>', trusted=False, status='unknown')\",\r\n    \"SigData('637DB1E23370F84AFF88CCE03152347D07DA627C', 'Stephan Oeste (it) <it@oeste.de>', trusted=True, status='unknown')\",\r\n    \"SigData('9DEAE0DC7063249FB05474681E4AED62986CD25D', 'Wladimir J. van der Laan <laanwj@visucore.com>', trusted=True, status='unknown')\",\r\n    \"SigData('0AD83877C1F0CD1EE9BD660AD7CC770B81FD22A8', 'Ben Carman <benthecarman@live.com>', trusted=False, status='unknown')\",\r\n    \"SigData('152812300785C96444D3334D17565732E08E5E41', 'Andrew Chow (Official New Key) <achow101@gmail.com>', trusted=True, status='expired')\",\r\n    \"SigData('D1DBF2C4B96F2DEBF4C16654410108112E7EA81F', 'Hennadii Stepanov (GitHub key) <32963518+hebasto@users.noreply.github.com>', trusted=True, status='unknown')\",\r\n    \"SigData('590B7292695AFFA5B672CBB2E13FC145CD3F4304', 'Antoine Poinsot <darosior@protonmail.com>', trusted=True, status='unknown')\"\r\n  ],\r\n  \"good_untrusted_sigs\": [\r\n    \"SigData('0CCBAAFD76A2ECE2CCD3141DE2FFD5B1D88CA97D', '.0xB10C <0xb10c@gmail.com>', trusted=False, status='unknown')\",\r\n    \"SigData('28F5900B1BB5D1A4B6B6D1A9ED357015286A333D', 'Duncan Dean <duncangleeddean@gmail.com>', trusted=False, status='unknown')\",\r\n    \"SigData('CFB16E21C950F67FA95E558F2EEB9F5CC09526C1', 'Michael Ford (bitcoin-otc) <fanquake@gmail.com>', trusted=False, status='unknown')\",\r\n    \"SigData('6E01EEC9656903B0542B8F1003DB6322267C373B', 'Oliver Gugger <gugger@gmail.com>', trusted=False, status='unknown')\",\r\n    \"SigData('74E2DEF5D77260B98BC19438099BAD163C70FBFA', 'Will Clark <will8clark@gmail.com>', trusted=False, status='unknown')\"\r\n  ],\r\n  \"unknown_sigs\": [\r\n    \"SigData('82921A4B88FD454B7EB8CE3C796C4109063D4EAF', '', trusted=False, status='')\"\r\n  ],\r\n  \"bad_sigs\": [],\r\n  \"verified_binaries\": [\r\n    \"bitcoin-22.0-x86_64-linux-gnu.tar.gz\"\r\n  ]\r\n}\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/73197/133836066-251cc628-709f-4489-8f22-7beee6d9e72e.png)\r\n\r\n\r\n### Backwards incompatibility\r\n\r\nNote that I have broken the interface; the script is no longer invoked in the same way and output differs. I initially tried to retain the old format, but I found it made less and less sense for the new signature scheme, and was not easily parsed sensibly. If there are users that rely on the old output structure, they can copy the script from an old version of the source tree.\r\n\r\n### Examples\r\n\r\nValidate releases with default settings:\r\n```sh\r\n./contrib/verifybinaries/verify.py 22.0\r\n./contrib/verifybinaries/verify.py 22.0-rc2-x86_64\r\n./contrib/verifybinaries/verify.py bitcoin-core-0.13.0-rc3\r\n```\r\n\r\nGet JSON output and don't prompt for user input (no auto key import):\r\n\r\n```sh\r\n./contrib/verifybinaries/verify.py 22.0-x86 --json --noninteractive\r\n```\r\n\r\nDon't trust builder-keys by default, and rely only on local GPG state and manually\r\nspecified keys, while requiring a threshold of at least 10 trusted signatures:\r\n```sh\r\n./contrib/verifybinaries/verify.py 22.0 \\\r\n    --no-builder-keys \\\r\n    --trusted-keys 74E2DEF5D77260B98BC19438099BAD163C70FBFA,9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C \\\r\n    --min-trusted-sigs 10\r\n```\r\n\r\n\r\n### Followups\r\n\r\n- [x] update https://github.com/bitcoin-core/bitcoincore.org with new verification instructions\r\n    - https://github.com/bitcoin-core/bitcoincore.org/pull/803\r\n- [ ] fix local GPG trust elevation during pubkey import\r\n- [x] use `logging` facility instead of `print_*` functions\r\n- [x] write small `test.sh` exercising basic functionality with `--noninteractive`\r\n\r\n\r\n### New CLI interface\r\n\r\n```\r\n% ./contrib/verifybinaries/verify.py --help\r\n\r\nusage: verify.py [-h] [--verbose] [--cleanup] [--noninteractive]\r\n                 [--require-all-hosts] [--bitcoin-src-path [BITCOIN_SRC_PATH]]\r\n                 [--skip-import-builders]\r\n                 [--min-trusted-sigs [MIN_TRUSTED_SIGS]]\r\n                 [--keyserver [KEYSERVER]] [--trusted-keys [TRUSTED_KEYS]]\r\n                 [--no-builder-keys] [--json]\r\n                 version\r\n\r\nScript for verifying Bitcoin Core release binaries. This script attempts to\r\ndownload the sum file SHA256SUMS and corresponding signature file\r\nSHA256SUMS.asc from bitcoincore.org and bitcoin.org and compares them. The\r\nsum-signature file is signed by a number of builder keys. This script ensures\r\nthat there is a minimum threshold of signatures from pubkeys that we trust.\r\nThis trust is articulated on the basis of configuration options here, but by\r\ndefault is based upon a unionof (i) local GPG trust settings, and (ii) keys\r\nwhich appear in the builder-keys/keys.txt file. If a minimum good, trusted\r\nsignature threshold is met on the sum file, we then download the files\r\nspecified in SHA256SUMS, and check if the hashes of these files match those\r\nthat are specified. The script returns 0 if everything passes the checks. It\r\nreturns 1 if either the signature check or the hash check doesn't pass. If an\r\nerror occurs the return value is >= 2. Logging output goes to stderr and final\r\nbinary verification data goes to stdout. JSON output can by obtained by\r\nsetting env BINVERIFY_JSON=1.\r\n\r\npositional arguments:\r\n  version               version of the bitcoin release to download; of the\r\n                        format <major>.<minor>[.<patch>][-rc[0-9]][-platform].\r\n                        Example: 22.0-x86_64 or 0.21.0-rc2-osx\r\n\r\noptions:\r\n  -h, --help            show this help message and exit\r\n  --verbose\r\n  --cleanup             if specified, clean up files afterwards\r\n  --noninteractive      if specified, do not block for user input\r\n  --require-all-hosts   If set, require all hosts (https://bitcoincore.org,\r\n                        https://bitcoin.org) to provide signatures. (Sometimes\r\n                        bitcoin.org lags behind bitcoincore.org.)\r\n  --bitcoin-src-path [BITCOIN_SRC_PATH]\r\n                        specify path to bitcoin repository. Used to find\r\n                        builder keys.\r\n  --skip-import-builders\r\n                        If set, do not prompt to import builder pubkeys\r\n  --min-trusted-sigs [MIN_TRUSTED_SIGS]\r\n                        The minimum number of good signatures from recognized\r\n                        keys to require successful termination.\r\n  --keyserver [KEYSERVER]\r\n                        which keyserver to use\r\n  --trusted-keys [TRUSTED_KEYS]\r\n                        A list of trusted builder GPG keys, specified as CSV\r\n  --no-builder-keys     If set, do not trust the builder-keys from the bitcoin\r\n                        repo by default\r\n  --json                If set, output the result as JSON\r\n```",
    "labels": [
      {
        "id": 231994551,
        "node_id": "MDU6TGFiZWwyMzE5OTQ1NTE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Scripts%20and%20tools",
        "name": "Scripts and tools",
        "color": "ffffee",
        "default": false
      }
    ],
    "created_at": "2021-09-17T18:57:50Z",
    "updated_at": "2023-03-29T10:48:38Z",
    "closed_at": "2023-03-29T06:30:53Z",
    "mergeable_state": "unknown",
    "merge_commit_sha": "80089049a73587eb19bc1e1276d48fd422de1cb0",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "jamesob:2021-09-binary-verify",
      "ref": "2021-09-binary-verify",
      "sha": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 42077031,
        "node_id": "MDEwOlJlcG9zaXRvcnk0MjA3NzAzMQ==",
        "name": "bitcoin",
        "full_name": "jamesob/bitcoin",
        "owner": {
          "login": "jamesob",
          "id": 73197,
          "node_id": "MDQ6VXNlcjczMTk3",
          "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jamesob",
          "html_url": "https://github.com/jamesob",
          "followers_url": "https://api.github.com/users/jamesob/followers",
          "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
          "organizations_url": "https://api.github.com/users/jamesob/orgs",
          "repos_url": "https://api.github.com/users/jamesob/repos",
          "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jamesob/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jamesob/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jamesob/bitcoin",
        "archive_url": "https://api.github.com/repos/jamesob/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jamesob/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jamesob/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jamesob/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jamesob/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jamesob/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jamesob/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jamesob/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jamesob/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jamesob/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jamesob/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jamesob/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jamesob/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jamesob/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jamesob/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jamesob/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jamesob/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jamesob/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jamesob/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jamesob/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jamesob/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jamesob/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jamesob/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jamesob/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jamesob/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jamesob/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jamesob/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jamesob/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jamesob/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jamesob/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jamesob/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jamesob/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jamesob/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jamesob/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jamesob/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jamesob/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jamesob/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jamesob/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jamesob/bitcoin/hooks",
        "svn_url": "https://github.com/jamesob/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 252891,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-31T19:20:56Z",
        "created_at": "2015-09-07T22:18:03Z",
        "updated_at": "2023-05-05T06:31:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "1258af40c0d396dd922cc8dc1b4c1719b39a4026",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 645,
    "deletions": 112,
    "changed_files": 3,
    "commits": 1,
    "review_comments": 54,
    "comments": 44
  },
  "events": [
    {
      "event": "labeled",
      "id": 5321149575,
      "node_id": "LE_lADOABII5847lT-JzwAAAAE9KkyH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5321149575",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-17T19:12:26Z",
      "label": {
        "name": "Scripts and tools",
        "color": "ffffee"
      }
    },
    {
      "event": "referenced",
      "id": 5321383923,
      "node_id": "REFE_lADOABII5847lT-JzwAAAAE9Ld_z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5321383923",
      "actor": {
        "login": "shahriyar9839",
        "id": 73662595,
        "node_id": "MDQ6VXNlcjczNjYyNTk1",
        "avatar_url": "https://avatars.githubusercontent.com/u/73662595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shahriyar9839",
        "html_url": "https://github.com/shahriyar9839",
        "followers_url": "https://api.github.com/users/shahriyar9839/followers",
        "following_url": "https://api.github.com/users/shahriyar9839/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/shahriyar9839/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/shahriyar9839/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/shahriyar9839/subscriptions",
        "organizations_url": "https://api.github.com/users/shahriyar9839/orgs",
        "repos_url": "https://api.github.com/users/shahriyar9839/repos",
        "events_url": "https://api.github.com/users/shahriyar9839/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/shahriyar9839/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "05b5831aa0038cc2ae24e17ea438428eb2b6e44c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05b5831aa0038cc2ae24e17ea438428eb2b6e44c",
      "created_at": "2021-09-17T20:10:31Z"
    },
    {
      "event": "commented",
      "id": 922074813,
      "node_id": "IC_kwDOABII58429b69",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/922074813",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-17T20:52:50Z",
      "updated_at": "2021-09-17T20:53:05Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nThanks for working on this! Will review and test within the next days.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-922074813",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "referenced",
      "id": 5330665239,
      "node_id": "REFE_lADOABII5847lT-JzwAAAAE9u38X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5330665239",
      "actor": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4bf8149e600ce9eb044dd0b87726e8341521883b",
      "commit_url": "https://api.github.com/repos/bitcoin-core/bitcoincore.org/commits/4bf8149e600ce9eb044dd0b87726e8341521883b",
      "created_at": "2021-09-20T20:05:56Z"
    },
    {
      "event": "commented",
      "id": 923264745,
      "node_id": "IC_kwDOABII5843B-bp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923264745",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-20T20:18:17Z",
      "updated_at": "2021-09-20T20:18:17Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-923264745",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 923620548,
      "node_id": "IC_kwDOABII5843DVTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923620548",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-21T04:47:19Z",
      "updated_at": "2021-09-21T04:47:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nThis is great! Thanks",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-923620548",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 923848127,
      "node_id": "IC_kwDOABII5843EM2_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923848127",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-21T10:29:18Z",
      "updated_at": "2021-09-21T11:34:05Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nHave you considered using the gpgme library (like https://github.com/bitcoin-core/bitcoin-maintainer-tools/blob/master/gitian-verify.py#L66 does) instead of parsing gpg command text output? I tried this approach and it became an awful mess, using the library is more robust, though it does introduce another Python dependency.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-923848127",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 924195592,
      "node_id": "IC_kwDOABII5843FhsI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/924195592",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-21T17:21:01Z",
      "updated_at": "2021-09-21T17:21:01Z",
      "author_association": "MEMBER",
      "body": "I guess I'm doing something wrong (on macOS 11.6)?\r\n\r\n```\r\n% contrib/verifybinaries/verify.py 22.0  \r\nWARNING: https://bitcoin.org failed to provide signature file. Continuing based solely upon https://bitcoincore.org.\r\nWARNING: https://bitcoin.org failed to provide SHA256SUMS file. Continuing based solely upon https://bitcoincore.org.\r\nTraceback (most recent call last):\r\n  File \"contrib/verifybinaries/verify.py\", line 568, in <module>\r\n    sys.exit(main(sys.argv[1:]))\r\n  File \"contrib/verifybinaries/verify.py\", line 418, in main\r\n    good, unknown, bad = parse_gpg_result(output.splitlines())\r\n  File \"contrib/verifybinaries/verify.py\", line 271, in parse_gpg_result\r\n    f\"failed to evaluate all signatures: found {all_found} \"\r\nRuntimeError: failed to evaluate all signatures: found 13 but expected 10\r\n```\r\n\r\nFor 0.21.1 the SHA256SUMS file is missing, only the signatures are there: https://bitcoincore.org/bin/bitcoin-core-0.21.1/\r\n\r\n```\r\n% contrib/verifybinaries/verify.py 0.21.1\r\nError: couldn't fetch SHA256SUMS file.\r\nwget output:\r\n  --2021-09-21 19:18:24--  https://bitcoincore.org/bin/bitcoin-core-0.21.1/SHA256SUMS\r\n  Herleiden van bitcoincore.org (bitcoincore.org)... 198.251.83.116, 107.191.99.5\r\n  Verbinding maken met bitcoincore.org (bitcoincore.org)|198.251.83.116|:443... verbonden.\r\n  HTTP-verzoek is verzonden; wachten op antwoord... 404 Not Found\r\n  2021-09-21 19:18:25 Fout 404: Not Found.\r\n  ```\r\n\r\nPS it would be nice to check the timestamp as well if opentimestamp is present.\r\n\r\n",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-924195592",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 924221652,
      "node_id": "IC_kwDOABII5843FoDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/924221652",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-21T17:52:44Z",
      "updated_at": "2021-09-21T17:52:44Z",
      "author_association": "MEMBER",
      "body": "> Have you considered using the gpgme library\r\n\r\n@laanwj this is a good idea, I'll look into it. Initially I didn't want end users to have to futz with `pip` or extra Python package installation since it can get very confusing very fast for semi-technical users (and even just plain technical users), but it might be worth the complexity. I'll give that a shot and post the diff.\r\n\r\n> I guess I'm doing something wrong (on macOS 11.6)?\r\n\r\n@Sjors hm, interesting... I'm not able to reproduce on my Linux machine, but I'm betting there may be some formatting differences on different versions of GPG and/or macOS (which speaks to @laanwj's point about not relying on parsing output). Can you rerun with `--verbose` and send me the GPG output, either here or in DM?\r\n\r\n> For 0.21.1 the SHA256SUMS file is missing, only the signatures are there: https://bitcoincore.org/bin/bitcoin-core-0.21.1/\r\n\r\nOh, that's a really good point. We probably need to retain the legacy behavior for old releases. I'll work on this.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-924221652",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "mentioned",
      "id": 5337558347,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAE-JK1L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5337558347",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-21T17:52:44Z"
    },
    {
      "event": "subscribed",
      "id": 5337558351,
      "node_id": "SE_lADOABII5847lT-JzwAAAAE-JK1P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5337558351",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-21T17:52:44Z"
    },
    {
      "event": "mentioned",
      "id": 5337558356,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAE-JK1U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5337558356",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-21T17:52:44Z"
    },
    {
      "event": "subscribed",
      "id": 5337558364,
      "node_id": "SE_lADOABII5847lT-JzwAAAAE-JK1c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5337558364",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-21T17:52:44Z"
    },
    {
      "event": "commented",
      "id": 924224659,
      "node_id": "IC_kwDOABII5843FoyT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/924224659",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-21T17:56:29Z",
      "updated_at": "2021-09-21T17:56:29Z",
      "author_association": "MEMBER",
      "body": "> PS it would be nice to check the timestamp as well if opentimestamp is present.\r\n\r\nLove that idea.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-924224659",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5345093171,
      "node_id": "HRFPE_lADOABII5847lT-JzwAAAAE-l6Yz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5345093171",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-22T18:26:57Z"
    },
    {
      "event": "commented",
      "id": 925180450,
      "node_id": "IC_kwDOABII5843JSIi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925180450",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-22T18:27:43Z",
      "updated_at": "2021-09-22T18:27:43Z",
      "author_association": "MEMBER",
      "body": "I've pushed a fix for the first issue @Sjors discovered (signature miscounting) as well as a `logging` refactoring. A commit for legacy process support is coming soon, but this can still be tested with 22.0.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-925180450",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "mentioned",
      "id": 5345097865,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAE-l7iJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5345097865",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-22T18:27:43Z"
    },
    {
      "event": "subscribed",
      "id": 5345097869,
      "node_id": "SE_lADOABII5847lT-JzwAAAAE-l7iN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5345097869",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-22T18:27:43Z"
    },
    {
      "event": "commented",
      "id": 925184375,
      "node_id": "IC_kwDOABII5843JTF3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925184375",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-22T18:31:46Z",
      "updated_at": "2021-09-22T18:31:46Z",
      "author_association": "MEMBER",
      "body": "Much better, modulo somewhat scary warnings:\r\n```\r\n% contrib/verifybinaries/verify.py 22.0                                \r\n[WARNING] https://bitcoin.org failed to provide signature file. Continuing based solely upon https://bitcoincore.org.\r\n[WARNING] https://bitcoin.org failed to provide SHA256SUMS file. Continuing based solely upon https://bitcoincore.org.\r\n[WARNING] removing *-unsigned binaries (bitcoin-22.0-osx-unsigned.dmg, bitcoin-22.0-osx-unsigned.tar.gz, bitcoin-22.0-win-unsigned.tar.gz, bitcoin-22.0-win64-setup-unsigned.exe) from verification since https://bitcoincore.org does not host *-unsigned binaries\r\n[WARNING] removing *-debug binaries (bitcoin-22.0-aarch64-linux-gnu-debug.tar.gz, bitcoin-22.0-arm-linux-gnueabihf-debug.tar.gz, bitcoin-22.0-powerpc64-linux-gnu-debug.tar.gz, bitcoin-22.0-powerpc64le-linux-gnu-debug.tar.gz, bitcoin-22.0-riscv64-linux-gnu-debug.tar.gz, bitcoin-22.0-x86_64-linux-gnu-debug.tar.gz, bitcoin-22.0-win64-debug.zip) from verification since https://bitcoincore.org does not host *-debug binaries\r\n[WARNING] removing *-codesignatures binaries (bitcoin-22.0-codesignatures-22.0.tar.gz) from verification since https://bitcoincore.org does not host *-codesignatures binaries\r\nVERIFIED: bitcoin-22.0-aarch64-linux-gnu.tar.gz\r\nVERIFIED: bitcoin-22.0-arm-linux-gnueabihf.tar.gz\r\nVERIFIED: bitcoin-22.0.tar.gz\r\nVERIFIED: bitcoin-22.0-powerpc64-linux-gnu.tar.gz\r\nVERIFIED: bitcoin-22.0-powerpc64le-linux-gnu.tar.gz\r\nVERIFIED: bitcoin-22.0-riscv64-linux-gnu.tar.gz\r\nVERIFIED: bitcoin-22.0-osx-signed.dmg\r\nVERIFIED: bitcoin-22.0-osx64.tar.gz\r\nVERIFIED: bitcoin-22.0-x86_64-linux-gnu.tar.gz\r\nVERIFIED: bitcoin-22.0-win64-setup.exe\r\nVERIFIED: bitcoin-22.0-win64.zip\r\n```",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-925184375",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5346506382,
      "node_id": "HRFPE_lADOABII5847lT-JzwAAAAE-rTaO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5346506382",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-22T23:32:03Z"
    },
    {
      "event": "commented",
      "id": 925401609,
      "node_id": "IC_kwDOABII5843KIIJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925401609",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-22T23:32:24Z",
      "updated_at": "2021-09-22T23:32:24Z",
      "author_association": "MEMBER",
      "body": "I've pushed an update (thanks to @Sjors' testing) that preserves the ability to verify binaries for releases older than 22.0, but still outputs verification results for everything in a uniform way. \r\n\r\nI've also included a change that associates the sha256 hash values along with the binary filenames in JSON output, which seems potentially useful.\r\n\r\n### 22.0 output\r\n```\r\n% ./contrib/verifybinaries/verify.py 22.0 --json --quiet --noninteractive\r\n[WARNING] https://bitcoin.org failed to provide file (https://bitcoin.org/bin/bitcoin-core-22.0/SHA256SUMS.asc). Continuing based solely upon https://bitcoincore.org.\r\n[WARNING] https://bitcoin.org failed to provide file (https://bitcoin.org/bin/bitcoin-core-22.0/SHA256SUMS). Continuing based solely upon https://bitcoincore.org.\r\n[WARNING] key 152812300785C96444D3334D17565732E08E5E41 for Andrew Chow (Official New Key) <achow101@gmail.com> is expired\r\n[WARNING] UNKNOWN SIGNATURE: SigData('82921A4B88FD454B7EB8CE3C796C4109063D4EAF', '', trusted=False, status='')\r\n{\r\n  \"good_trusted_sigs\": [\r\n    \"SigData('9DEAE0DC7063249FB05474681E4AED62986CD25D', 'Wladimir J. van der Laan <laanwj@visucore.com>', trusted=True, status='unknown')\",\r\n    \"SigData('152812300785C96444D3334D17565732E08E5E41', 'Andrew Chow (Official New Key) <achow101@gmail.com>', trusted=True, status='expired')\",\r\n    \"SigData('637DB1E23370F84AFF88CCE03152347D07DA627C', 'Stephan Oeste (it) <it@oeste.de>', trusted=True, status='unknown')\",\r\n    \"SigData('590B7292695AFFA5B672CBB2E13FC145CD3F4304', 'Antoine Poinsot <darosior@protonmail.com>', trusted=True, status='unknown')\",\r\n    \"SigData('D1DBF2C4B96F2DEBF4C16654410108112E7EA81F', 'Hennadii Stepanov (GitHub key) <32963518+hebasto@users.noreply.github.com>', trusted=True, status='unknown')\",\r\n    \"SigData('0AD83877C1F0CD1EE9BD660AD7CC770B81FD22A8', 'Ben Carman <benthecarman@live.com>', trusted=False, status='unknown')\",\r\n    \"SigData('9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C', 'Aaron Clauson (sipsorcery) <aaron@sipsorcery.com>', trusted=False, status='unknown')\"\r\n  ],\r\n  \"good_untrusted_sigs\": [\r\n    \"SigData('0CCBAAFD76A2ECE2CCD3141DE2FFD5B1D88CA97D', '.0xB10C <0xb10c@gmail.com>', trusted=False, status='unknown')\",\r\n    \"SigData('28F5900B1BB5D1A4B6B6D1A9ED357015286A333D', 'Duncan Dean <duncangleeddean@gmail.com>', trusted=False, status='unknown')\",\r\n    \"SigData('CFB16E21C950F67FA95E558F2EEB9F5CC09526C1', 'Michael Ford (bitcoin-otc) <fanquake@gmail.com>', trusted=False, status='unknown')\",\r\n    \"SigData('6E01EEC9656903B0542B8F1003DB6322267C373B', 'Oliver Gugger <gugger@gmail.com>', trusted=False, status='unknown')\",\r\n    \"SigData('74E2DEF5D77260B98BC19438099BAD163C70FBFA', 'Will Clark <will8clark@gmail.com>', trusted=False, status='unknown')\"\r\n  ],\r\n  \"unknown_sigs\": [\r\n    \"SigData('82921A4B88FD454B7EB8CE3C796C4109063D4EAF', '', trusted=False, status='')\"\r\n  ],\r\n  \"bad_sigs\": [],\r\n  \"verified_binaries\": {\r\n    \"bitcoin-22.0-aarch64-linux-gnu.tar.gz\": \"ac718fed08570a81b3587587872ad85a25173afa5f9fbbd0c03ba4d1714cfa3e\",\r\n    \"bitcoin-22.0-arm-linux-gnueabihf.tar.gz\": \"b8713c6c5f03f5258b54e9f436e2ed6d85449aa24c2c9972f91963d413e86311\",\r\n    \"bitcoin-22.0.tar.gz\": \"d0e9d089b57048b1555efa7cd5a63a7ed042482045f6f33402b1df425bf9613b\",\r\n    \"bitcoin-22.0-powerpc64-linux-gnu.tar.gz\": \"2cca5f99007d060aca9d8c7cbd035dfe2f040dd8200b210ce32cdf858479f70d\",\r\n    \"bitcoin-22.0-powerpc64le-linux-gnu.tar.gz\": \"91b1e012975c5a363b5b5fcc81b5b7495e86ff703ec8262d4b9afcfec633c30d\",\r\n    \"bitcoin-22.0-riscv64-linux-gnu.tar.gz\": \"9cc3a62c469fe57e11485fdd32c916f10ce7a2899299855a2e479256ff49ff3c\",\r\n    \"bitcoin-22.0-osx-signed.dmg\": \"3b3e2680f7d9304c13bfebaf6445ada40d72324b4b3e0a07de9db807389a6c5b\",\r\n    \"bitcoin-22.0-osx64.tar.gz\": \"2744d199c3343b2d94faffdfb2c94d75a630ba27301a70e47b0ad30a7e0155e9\",\r\n    \"bitcoin-22.0-x86_64-linux-gnu.tar.gz\": \"59ebd25dd82a51638b7a6bb914586201e67db67b919b2a1ff08925a7936d1b16\",\r\n    \"bitcoin-22.0-win64-setup.exe\": \"9169989d649937c0f9ebccd3ab088501328aa319fe9e91fc7ea8e8cf0fcccede\",\r\n    \"bitcoin-22.0-win64.zip\": \"9485e4b52ed6cebfe474ab4d7d0c1be6d0bb879ba7246a8239326b2230a77eb1\"\r\n  }\r\n}\r\n```\r\n\r\n### 0.21.0 output\r\n\r\nNote that this fails because the `SHA256SUMS.asc` files differ between bitcoincore.org and bitcoin.org. This is the behavior of the script before this changeset (though now we display a unified diff of file contents), but we may want to change things to just ignore bitcoin.org in a case like this.\r\n\r\n```\r\n % ./contrib/verifybinaries/verify.py 0.21.0 --json --quiet --noninteractive\r\n[WARNING] found diff in files (SHA256SUMS.asc, SHA256SUMS.asc.2):\r\n  ---\r\n  +++\r\n  @@ -7,23 +7,23 @@\r\n   6223fd23d07133a6bfa2aa3d2554a09dc1d790d28ce67b0085d3fdcc1c126e05  bitcoin-0.21.0-osx.dmg\r\n   f8b2adfeae021a672effbc7bd40d5c48d6b94e53b2dd660f787340bf1a52e4e9  bitcoin-0.21.0-riscv64-linux-gnu.tar.gz\r\n   1a91202c62ee49fb64d57a52b8d6d01cd392fffcbef257b573800f9289655f37  bitcoin-0.21.0.tar.gz\r\n  -385a67cc4cf45558c05eb85fc500046cf033f816637fe0bff80d30debfca0128  bitcoin-0.21.0-win64-setup-unsigned.exe\r\n  +54050748ef4d4f000ea1ece472491b3e5fd546efc74ed52119354b2893f6624b  bitcoin-0.21.0-win64-setup.exe\r\n   1d0052c4ce80227fb6d0bc1c4e673ba21033e219c1f935d25f130ef7f43360d4  bitcoin-0.21.0-win64.zip\r\n   da7766775e3f9c98d7a9145429f2be8297c2672fe5b118fd3dc2411fb48e0032  bitcoin-0.21.0-x86_64-linux-gnu.tar.gz\r\n   -----BEGIN PGP SIGNATURE-----\r\n   Version: GnuPG v1.4.11 (GNU/Linux)\r\n\r\n  -iQIcBAEBCAAGBQJgXPg5AAoJEJDIAZ42wulkkl4P/jq29Je7Uqn75jkpvT8ilB8M\r\n  -5nM60ORBSsCyJHryS5sJeljLx/i8JTYkL10nUTpGDlFA3DOjM5MXgAHMJdYles7c\r\n  -PFO6TAqjrDWHgpc/HuPUCiF84N47u8xXcyWuoUjcgfLuV0K6l/1unCw6ISXZEdhy\r\n  -WTDZuqy+9lw9nWQA7VyIP+gfgMzgiH9P6x+ru9cYcXmimCv0TUtKp8iwUnW7QmrT\r\n  -aDtQJPs9sNWxjIa4WP5l4FKFlRErAyiHA24apQkOhn8YLSrIEATFE2t89HwvmIoV\r\n  -kv2BmQDrCUceC1OneFzmDP3JXJ0qa8wisw2gbUyO3EoSHfs/dlEG4+4NUQxtIwwX\r\n  -JQmaB7HII6UI86kIVIBWKA19hNiAxljSKgG7blP7+J2EKC+IDqZhuYHjpYCiJg5V\r\n  -2NSB3YE0sgKNyLPJN4OSA0h9nsBbEzHWm+BRgnkpPSsi2HSnczKzZwES31p9EGX1\r\n  -PYi4A1nk/kOFKCZh0uvaBKWR4h3MrLB9ABv3QqmkLeEJamLDfZPDC/35WRs9Z7kQ\r\n  -CUER5yMoJxq7aGjYSdd0jMxDL4akXRwf5DSN++voil3zWAqWS6XaH+9RtGmqFrZr\r\n  -uso8UR3RkAwgC5HQwgtEcyewA9xxz4MHx5UN5D+YzaejJvdDJBEa9oLry21EA34U\r\n  -071d1dTERe21zpnLj1EL\r\n  -=yP9G\r\n  +iQIcBAEBCAAGBQJgADqTAAoJEJDIAZ42wulkjtkQAJwlSTDinKsxZIMky3MeVhwB\r\n  +CmxxYiMLPQA8bwgxyc4RaTxUrqL2oExPOtfcDzcR1WbQe12niG40N/2yrtf66lG9\r\n  +KbSsQD6nKat9B3mCk9/jNkJHWmq5JJbOyfRs2mex75Lj7UHaPPrqh2rMfEewljed\r\n  +kHkDuaqeqYlTAh981WqLD+l5jnpQZqBSrcz3YTTvXWd7xKfFSVzqF/tD4CQFrPX2\r\n  +9b2BLzA/u+29Z3s+zio1l5c7fikNDd404T5U/y+NMOyCmgT4eiDGLQPlEpoGNq3w\r\n  +GYU7FNZUO9xXeatx4PI8qiq5mIK46UwfPUTeruTzNrHsME7YioUa87uSYKM8jqwP\r\n  +FSnbhYoUqCB/wPaKZwEF+2WzG88yj2+PzalVt8cnjRnTQ77COtHJqs8AjLWnVACF\r\n  +LluplM16xyiLn0FWkrEHyi5HlI+X+cqIiTtehojMBXIkHugIYMnT5XB9llh5OWXg\r\n  +Bp1UGupojLXYuMNF5R6cU5Iq+xJjbUiQ/PDm38MBlFlQ9RzRCYyZpMYZE3K9p789\r\n  +jpjdYdMPtzkYlIKD87S89JtE1s6i/SkTPhebyu/328rqkqnNKSCHnuB7Fy2iEKJj\r\n  +5kLs/LjY8yxSMuGeNl6LhWGKVZKy0AS/BztSHr2jgThfhN1BemFRcViSvcXhMeNw\r\n  +ka8Z9KLt/N0ziabBexAw\r\n  +=bi4p\r\n   -----END PGP SIGNATURE-----\r\n\r\n\r\n[ERROR] files not equal: SHA256SUMS.asc and SHA256SUMS.asc.2\r\n```\r\n\r\n### 0.20.0 output\r\n\r\nLegacy binary verifications rely solely on a successful GPG code, as was the behavior before this changeset.\r\n\r\n```\r\n% ./contrib/verifybinaries/verify.py 0.20.0 --json --quiet --noninteractive\r\n{\r\n  \"good_trusted_sigs\": [],\r\n  \"good_untrusted_sigs\": [\r\n    \"SigData('0x90C8019E36C2E964', 'Wladimir J. van der Laan (Bitcoin Core binary release signing key) <laanwj@gmail.com>', trusted=False, status='unknown')\"\r\n  ],\r\n  \"unknown_sigs\": [],\r\n  \"bad_sigs\": [],\r\n  \"verified_binaries\": {\r\n    \"bitcoin-0.20.0-aarch64-linux-gnu.tar.gz\": \"081b30b0f1af95656242c83eef30bbf7216b1a30fa8e8f29b3b160fe520d28f6\",\r\n    \"bitcoin-0.20.0-arm-linux-gnueabihf.tar.gz\": \"05014c7ff00f4496b1f389f0961d807e04505d8721d5c6f69567f2a0ec1985cc\",\r\n    \"bitcoin-0.20.0-osx64.tar.gz\": \"34f377fee2c7adf59981dde7e41215765d47b466f773cf2673137d30495b2675\",\r\n    \"bitcoin-0.20.0-osx.dmg\": \"a6e44b928d9ac04f11d43e920f4971fbdf1e77a8c28f7c14fafdd741ca7bc99f\",\r\n    \"bitcoin-0.20.0-riscv64-linux-gnu.tar.gz\": \"5b9cae3aa4197d1e557ff236754f489bce877ebba2267ce33af79b2ca4a13af6\",\r\n    \"bitcoin-0.20.0.tar.gz\": \"ec5a2358ee868d845115dc4fc3ed631ff063c57d5e0a713562d083c5c45efb28\",\r\n    \"bitcoin-0.20.0-win64-setup.exe\": \"0f1ea61a9aa9aba383a43bcdb5755b072cfff016b9c6bb0afa772a8685bcf7b0\",\r\n    \"bitcoin-0.20.0-win64.zip\": \"3e9ddfa05b7967e43fb502b735b6c4d716ec06f63ab7183df2e006ed4a6a431f\",\r\n    \"bitcoin-0.20.0-x86_64-linux-gnu.tar.gz\": \"35ec10f87b6bc1e44fd9cd1157e5dfa483eaf14d7d9a9c274774539e7824c427\"\r\n  }\r\n}\r\n```",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-925401609",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "mentioned",
      "id": 5346507239,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAE-rTnn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5346507239",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-22T23:32:24Z"
    },
    {
      "event": "subscribed",
      "id": 5346507243,
      "node_id": "SE_lADOABII5847lT-JzwAAAAE-rTnr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5346507243",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-22T23:32:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5346571302,
      "node_id": "HRFPE_lADOABII5847lT-JzwAAAAE-rjQm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5346571302",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-22T23:57:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5346602424,
      "node_id": "HRFPE_lADOABII5847lT-JzwAAAAE-rq24",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5346602424",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-23T00:07:25Z"
    },
    {
      "event": "commented",
      "id": 925617977,
      "node_id": "IC_kwDOABII5843K885",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925617977",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-23T08:46:59Z",
      "updated_at": "2021-09-23T08:46:59Z",
      "author_association": "MEMBER",
      "body": "Concept ACK - thanks for working on this.\r\n\r\n",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-925617977",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 926871883,
      "node_id": "IC_kwDOABII5843PvFL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926871883",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-24T19:31:06Z",
      "updated_at": "2021-09-24T19:33:08Z",
      "author_association": "MEMBER",
      "body": "> Have you considered using the gpgme library (like https://github.com/bitcoin-core/bitcoin-maintainer-tools/blob/master/gitian-verify.py#L66 does) instead of parsing gpg command text output?\r\n\r\nSo I spent some time thinking about this and looking around at the various libraries that're available for GPG use. While using one of them would definitely save on a little complexity here, I'm somewhat wary of the trade-offs.\r\n\r\nOn top of the added installation complexity (apparently `gpgme` isn't just a `pip install` but requires `libgpgme` development headers to be installed as well), I have broader concerns about relying on Python dependencies for uses that are this sensitive.\r\n\r\nIf we use a third-party Python lib, we're opening up the trust model to encompass not just the Core repo and the Python runtime, but the author of the Python library and the PyPI servers. Obviously we could pin hashes, vendor the library, etc. etc. but I think that will ultimately be more work than the [70 odd lines of code](https://github.com/bitcoin/bitcoin/blob/a7ad989b075a1e4e50aa38e3e39531feeb83ccc3/contrib/verifybinaries/verify.py#L237-L302) that munge GPG output.\r\n\r\nIt strikes me that dealing with possible (and probably explicit) failure of this script on less common platforms because of unexpected GPG formatting is probably preferable to opening ourselves up to vulnerabilities based on third-party dependencies and packaging infrastructure. At least when it comes to something as important as verifying Bitcoin binaries.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-926871883",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 927695179,
      "node_id": "IC_kwDOABII5843S4FL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927695179",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-27T09:34:52Z",
      "updated_at": "2021-09-27T09:34:52Z",
      "author_association": "MEMBER",
      "body": "I tend to agree that it's worth a bit of hassle to not have too many dependencies for this verify script.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-927695179",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 932810227,
      "node_id": "IC_kwDOABII5843mY3z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932810227",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-02T19:39:10Z",
      "updated_at": "2021-10-02T19:39:10Z",
      "author_association": "MEMBER",
      "body": "Recently I worked on a Linux machine where `gpg` printed its verification results in its local language (German, in my case). In such a case, the verification script would obviously fail, as it expects English as output language. Can we find a way to cope with that? I didn't look deeper yet on what the output language depends on (I guess some typical locale environment variable like `LANGUAGE` or `LC_MESSAGES`). Maybe there is a command line flag that can enforce a certain language. In the worst case, we can always start up gpg with a shell script that overrides the locale settings temporarily. \r\n\r\nThis is one concern that we wouldn't need to take care of when using a library like `gpgme`, though I generally agree with the opinion that we want to keep the dependencies minimal (as expressed by @jamesob and @Sjors).",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-932810227",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "mentioned",
      "id": 5398678695,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAFByUyn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5398678695",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-02T19:39:11Z"
    },
    {
      "event": "subscribed",
      "id": 5398678697,
      "node_id": "SE_lADOABII5847lT-JzwAAAAFByUyp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5398678697",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-02T19:39:11Z"
    },
    {
      "event": "mentioned",
      "id": 5398678699,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAFByUyr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5398678699",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-02T19:39:11Z"
    },
    {
      "event": "subscribed",
      "id": 5398678701,
      "node_id": "SE_lADOABII5847lT-JzwAAAAFByUyt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5398678701",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-02T19:39:11Z"
    },
    {
      "event": "commented",
      "id": 942279451,
      "node_id": "IC_kwDOABII5844Kgsb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/942279451",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-13T12:59:31Z",
      "updated_at": "2021-10-13T13:25:47Z",
      "author_association": "MEMBER",
      "body": "> This is one concern that we wouldn't need to take care of when using a library like gpgme, though I generally agree with the opinion that we want to keep the dependencies minimal (as expressed by\r\n\r\nYes it would never run into language issues with libgpgme because it uses the GPG code directly, not through parsing text. And FWIW, libgpgme generally seems to already be installed on Ubuntu-ish machines (it's not like bitcoin would be the only thing using this). \r\nI agree about dependency concerns otherwise of course.\r\n\r\n> but I think that will ultimately be more work than the 70 odd lines of code that munge GPG output.\r\n\r\nWhat I'm mostly concerned about is that munging GPG output is conceptually brittle. It's not a good machine interface. A change in the text output from one version to another may cause the script to misbehave (likely it would fail safely, not dangerously, due to the exit code, but okay).",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-942279451",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 942632953,
      "node_id": "IC_kwDOABII5844L2_5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/942632953",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-13T19:09:49Z",
      "updated_at": "2021-10-13T19:09:49Z",
      "author_association": "MEMBER",
      "body": "> In such a case, the verification script would obviously fail, as it expects English as output language.\r\n\r\nAre you able to actually trigger such a failure at the moment? I think I saw some dutch in @Sjors' output, but the script worked fine. If you are I'd be curious to see it.\r\n\r\n> What I'm mostly concerned about is that munging GPG output is conceptually brittle.\r\n\r\nI don't want to push back too hard, but right now the script in master is plain broken. This actually works (despite maybe being brittle), and so I think it's worth considering for merge as-is. \r\n\r\nI'm happy to do a follow-up if we actually get reports of failures, or perhaps even before then if we find a decent way to handle the additional dependencies. Nothing in this approach precludes that, but incorporating libgpgme seems like a decent chunk of additional work given we'd now have to deal with packaging considerations. It'd be a shame for the perfect to be the enemy of the good in this case.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-942632953",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "mentioned",
      "id": 5459308203,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAFFZm6r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5459308203",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-13T19:09:49Z"
    },
    {
      "event": "subscribed",
      "id": 5459308208,
      "node_id": "SE_lADOABII5847lT-JzwAAAAFFZm6w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5459308208",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-13T19:09:50Z"
    },
    {
      "event": "commented",
      "id": 942665347,
      "node_id": "IC_kwDOABII5844L-6D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/942665347",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-13T19:50:45Z",
      "updated_at": "2021-10-13T19:50:45Z",
      "author_association": "MEMBER",
      "body": "One easy mitigation might be to specify the envvar `LANG=en` before each gpg call (https://stackoverflow.com/a/33961763/1611953).",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-942665347",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5465380655,
      "node_id": "HRFPE_lADOABII5847lT-JzwAAAAFFwxcv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5465380655",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-14T17:35:01Z"
    },
    {
      "event": "commented",
      "id": 943575489,
      "node_id": "IC_kwDOABII5844PdHB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/943575489",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-14T17:38:05Z",
      "updated_at": "2021-10-14T17:38:05Z",
      "author_association": "MEMBER",
      "body": "Okay, I've verified that `LANGUAGE=x` does control output language for (my version of) gpg:\r\n```\r\n13:33:26 james@teller /home/james % LANGUAGE=en gpg --verify sigs.txt\r\ngpg: Signature made Thu 02 Sep 2021 01:52:57 PM EDT\r\ngpg:                using RSA key 4589779ADFC14F3327534EA8A3A31BAD5A2A5B10\r\ngpg: Good signature from \"Peter D. Gray <peter@coinkite.com>\" [unknown]\r\ngpg: WARNING: This key is not certified with a trusted signature!\r\ngpg:          There is no indication that the signature belongs to the owner.\r\nPrimary key fingerprint: 4589 779A DFC1 4F33 2753  4EA8 A3A3 1BAD 5A2A 5B10\r\n\r\n13:33:27 james@teller /home/james % LANGUAGE=fr gpg --verify sigs.txt\r\ngpg: Signature faite le Thu 02 Sep 2021 01:52:57 PM EDT\r\ngpg:                avec la clef RSA 4589779ADFC14F3327534EA8A3A31BAD5A2A5B10\r\ngpg: Bonne signature de « Peter D. Gray <peter@coinkite.com> » [inconnu]\r\ngpg: Attention : cette clef n'est pas certifiée avec une signature de confiance.\r\ngpg:             Rien n'indique que la signature appartient à son propriétaire.\r\nEmpreinte de clef principale : 4589 779A DFC1 4F33 2753  4EA8 A3A3 1BAD 5A2A 5B10\r\n```\r\nand also demonstrated that the script would have broken in that case, albeit explicitly.\r\n\r\nI've added a commit that specifies `LANGUAGE=en` before the gpg command and so avoids this issue. Thanks for raising the point! And FWIW I'm still not averse to using libgpgme at some point, but I do think more thought is required about how to manage the packaging complexity of that. I really don't like the idea of introducing PyPI and its servers into our process.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-943575489",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 982831579,
      "node_id": "IC_kwDOABII5846lNHb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/982831579",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-30T17:00:31Z",
      "updated_at": "2021-11-30T17:00:31Z",
      "author_association": "MEMBER",
      "body": "Gentle reminder here that the script in master is broken for 22.0 verification. It'd be great to either get this reviewed/merged or get some clear direction on what's needed to move this forward.\r\n\r\nI understand that parsing GPG text output is less than ideal, but I'm still of the opinion that the alternative of introducing a reliance on `gpgme` and all the packaging considerations that come along with it is less appealing. The downside of parsing text is potentially having explicit errors occur which users can report - this is opposed to the implicit risks of gpgme packaging and the disincentives that come along with a more onerous install process.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-982831579",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "reviewed",
      "id": 827016327,
      "node_id": "PRR_kwDOABII584xS0SH",
      "url": null,
      "actor": null,
      "commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Started to review this (a92ec88cbc6e153eabf5e809d8960454488cc391). Looks good, there's just a lot to go over",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-827016327",
      "submitted_at": "2021-12-08T22:54:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "reviewed",
      "id": 828027865,
      "node_id": "PRR_kwDOABII584xWrPZ",
      "url": null,
      "actor": null,
      "commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "More review of a92ec88cbc6e153eabf5e809d8960454488cc391. Mostly done I think. Will continue",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-828027865",
      "submitted_at": "2021-12-09T21:16:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "comment_deleted",
      "id": 5743823804,
      "node_id": "CDE_lADOABII5847lT-JzwAAAAFWW8u8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5743823804",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-09T21:44:39Z"
    },
    {
      "event": "commented",
      "id": 993917253,
      "node_id": "IC_kwDOABII5847PflF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/993917253",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-14T19:38:33Z",
      "updated_at": "2021-12-14T19:38:33Z",
      "author_association": "MEMBER",
      "body": "Thanks (as always) for the great review and feedback @ryanofsky. To avoid painful review invalidation (and an even more painful rebase process), I've addressed the majority of your feedback in an additional commit. ",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-993917253",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "mentioned",
      "id": 5766551156,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAFXtpZ0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5766551156",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-14T19:38:33Z"
    },
    {
      "event": "subscribed",
      "id": 5766551162,
      "node_id": "SE_lADOABII5847lT-JzwAAAAFXtpZ6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5766551162",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-14T19:38:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5772483562,
      "node_id": "HRFPE_lADOABII5847lT-JzwAAAAFYERvq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5772483562",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-15T16:13:58Z"
    },
    {
      "event": "commented",
      "id": 994943488,
      "node_id": "IC_kwDOABII5847TaIA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/994943488",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-15T16:15:46Z",
      "updated_at": "2021-12-15T16:15:46Z",
      "author_association": "MEMBER",
      "body": "Pushed a rebase that ports the functional tests from .sh to .py - immediately to fix the shellcheck failures, but I'd been meaning to do this anyway because the tests are easier to write and maintain in Python.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-994943488",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 997207479,
      "node_id": "IC_kwDOABII5847cC23",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997207479",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-18T14:06:56Z",
      "updated_at": "2021-12-18T14:06:56Z",
      "author_association": "MEMBER",
      "body": "> Pushed a rebase that ports the functional tests from .sh to .py \r\n\r\nThank you!",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-997207479",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 998984273,
      "node_id": "IC_kwDOABII5847i0pR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998984273",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T18:01:12Z",
      "updated_at": "2021-12-21T18:01:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "tACK 396cb35a2205a625ce3ba1a86d97754fbb983e85. I really like this and IMO should be very simple to explain to end users.",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-998984273",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 1192694320,
      "node_id": "IC_kwDOABII585HFxIw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1192694320",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-22T15:33:56Z",
      "updated_at": "2022-07-22T15:33:56Z",
      "author_association": "MEMBER",
      "body": "Should I just close this?",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1192694320",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 1192700096,
      "node_id": "IC_kwDOABII585HFyjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1192700096",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-22T15:37:25Z",
      "updated_at": "2022-07-22T15:37:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "I would prefer not, I really like this solution",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1192700096",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "reviewed",
      "id": 1097576225,
      "node_id": "PRR_kwDOABII585Ba68h",
      "url": null,
      "actor": null,
      "commit_id": "0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1097576225",
      "submitted_at": "2022-09-06T13:19:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "reviewed",
      "id": 1098240546,
      "node_id": "PRR_kwDOABII585BddIi",
      "url": null,
      "actor": null,
      "commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1098240546",
      "submitted_at": "2022-09-06T21:02:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "reviewed",
      "id": 1098255438,
      "node_id": "PRR_kwDOABII585BdgxO",
      "url": null,
      "actor": null,
      "commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1098255438",
      "submitted_at": "2022-09-06T21:16:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "reviewed",
      "id": 1098286686,
      "node_id": "PRR_kwDOABII585BdoZe",
      "url": null,
      "actor": null,
      "commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1098286686",
      "submitted_at": "2022-09-06T21:40:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "reviewed",
      "id": 1098288835,
      "node_id": "PRR_kwDOABII585Bdo7D",
      "url": null,
      "actor": null,
      "commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1098288835",
      "submitted_at": "2022-09-06T21:41:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "reviewed",
      "id": 1098299195,
      "node_id": "PRR_kwDOABII585Bdrc7",
      "url": null,
      "actor": null,
      "commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1098299195",
      "submitted_at": "2022-09-06T21:54:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "reviewed",
      "id": 1098302418,
      "node_id": "PRR_kwDOABII585BdsPS",
      "url": null,
      "actor": null,
      "commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "tACK with the changes I suggested inline previously.",
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1098302418",
      "submitted_at": "2022-09-06T22:04:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "commented",
      "id": 1238718049,
      "node_id": "IC_kwDOABII585J1VZh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1238718049",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-06T22:32:16Z",
      "updated_at": "2022-09-06T22:32:16Z",
      "author_association": "MEMBER",
      "body": "@willcl-ark thanks very much for the review; pushed your feedback.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1238718049",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "mentioned",
      "id": 7334197818,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAG1Jvo6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7334197818",
      "actor": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-06T22:32:16Z"
    },
    {
      "event": "subscribed",
      "id": 7334197827,
      "node_id": "SE_lADOABII5847lT-JzwAAAAG1JvpD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7334197827",
      "actor": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-06T22:32:16Z"
    },
    {
      "event": "commented",
      "id": 1256352958,
      "node_id": "IC_kwDOABII585K4my-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256352958",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-23T15:20:23Z",
      "updated_at": "2023-03-29T10:48:38Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [theStack](https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-922074813), [jonatack](https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-923264745), [laanwj](https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-923848127), [fanquake](https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-925617977), [willcl-ark](https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1098302418), [achow101](https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1351239310) |\n| Stale ACK | [Rspigler](https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-998984273) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27358](https://github.com/bitcoin/bitcoin/pull/27358) (contrib: allow multi-sig binary verification v2 by theuni)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1256352958",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 1307677430,
      "node_id": "IC_kwDOABII585N8ZL2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1307677430",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:42Z",
      "updated_at": "2022-11-08T18:48:42Z",
      "author_association": "MEMBER",
      "body": "Review tally:\r\n- @willcl-ark: tACK\r\n- @Rspigler: tACK\r\n- @ryanofsky: some review \r\n- @fanquake: concept ACK\r\n- @theStack: concept ACK\r\n- @laanwj: concept ACK\r\n- @Sjors: had tested a little\r\n\r\nFriendly reminder that the existing script is broken for modern releases.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1307677430",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "mentioned",
      "id": 7765796494,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAHO4KaO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796494",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:42Z"
    },
    {
      "event": "subscribed",
      "id": 7765796505,
      "node_id": "SE_lADOABII5847lT-JzwAAAAHO4KaZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796505",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:42Z"
    },
    {
      "event": "mentioned",
      "id": 7765796521,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAHO4Kap",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796521",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:42Z"
    },
    {
      "event": "subscribed",
      "id": 7765796532,
      "node_id": "SE_lADOABII5847lT-JzwAAAAHO4Ka0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796532",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:42Z"
    },
    {
      "event": "mentioned",
      "id": 7765796539,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAHO4Ka7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796539",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:42Z"
    },
    {
      "event": "subscribed",
      "id": 7765796544,
      "node_id": "SE_lADOABII5847lT-JzwAAAAHO4KbA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796544",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:42Z"
    },
    {
      "event": "mentioned",
      "id": 7765796556,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAHO4KbM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796556",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:42Z"
    },
    {
      "event": "subscribed",
      "id": 7765796570,
      "node_id": "SE_lADOABII5847lT-JzwAAAAHO4Kba",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796570",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:42Z"
    },
    {
      "event": "mentioned",
      "id": 7765796598,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAHO4Kb2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796598",
      "actor": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:43Z"
    },
    {
      "event": "subscribed",
      "id": 7765796613,
      "node_id": "SE_lADOABII5847lT-JzwAAAAHO4KcF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796613",
      "actor": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:43Z"
    },
    {
      "event": "mentioned",
      "id": 7765796626,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAHO4KcS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796626",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:43Z"
    },
    {
      "event": "subscribed",
      "id": 7765796634,
      "node_id": "SE_lADOABII5847lT-JzwAAAAHO4Kca",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796634",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:43Z"
    },
    {
      "event": "mentioned",
      "id": 7765796654,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAHO4Kcu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796654",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:43Z"
    },
    {
      "event": "subscribed",
      "id": 7765796664,
      "node_id": "SE_lADOABII5847lT-JzwAAAAHO4Kc4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7765796664",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-08T18:48:43Z"
    },
    {
      "event": "commented",
      "id": 1308623128,
      "node_id": "IC_kwDOABII585OAAEY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1308623128",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-09T11:39:48Z",
      "updated_at": "2022-11-09T11:39:48Z",
      "author_association": "MEMBER",
      "body": "I'll take this for another spin after the v24.0 release.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1308623128",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 1327493013,
      "node_id": "IC_kwDOABII585PH--V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1327493013",
      "actor": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-25T13:42:35Z",
      "updated_at": "2022-11-25T13:42:35Z",
      "author_association": "MEMBER",
      "body": "Works with 24.0 for me:\r\n\r\n<details>\r\n  <summary>Console output </summary>\r\n  \r\n```\r\n❯ ./contrib/verifybinaries/verify.py --verbose 24.0-x86_64\r\n[INFO] got file https://bitcoincore.org/bin/bitcoin-core-24.0/SHA256SUMS.asc as SHA256SUMS.asc\r\n[WARNING] https://bitcoin.org failed to provide file (https://bitcoin.org/bin/bitcoin-core-24.0/SHA256SUMS.asc). Continuing based solely upon https://bitcoincore.org.\r\n[WARNING] found diff (local vs. GH) in builder keys:\r\n  ---\r\n\r\n  +++\r\n\r\n  @@ -1,3 +1,4 @@\r\n\r\n  +982A193E3CE0EED535E09023188CBB2648416AD5 0xB10C (0xb10c)\r\n   9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C Aaron Clauson (sipsorcery)\r\n   617C90010B3BD370B0AC7D424BB42E31C79111B8 Akira Takizawa (akx20000)\r\n   E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach (aschildbach)\r\n\r\n[INFO] got file https://bitcoincore.org/bin/bitcoin-core-24.0/SHA256SUMS as SHA256SUMS\r\n[WARNING] https://bitcoin.org failed to provide file (https://bitcoin.org/bin/bitcoin-core-24.0/SHA256SUMS). Continuing based solely upon https://bitcoincore.org.\r\n[INFO] gpg output:\r\n  gpg: assuming signed data in 'SHA256SUMS'\r\n  gpg: Signature made Thu 17 Nov 2022 19:10:20 GMT\r\n  gpg:                using RSA key 152812300785C96444D3334D17565732E08E5E41\r\n  gpg:                issuer \"andrew@achow101.com\"\r\n  gpg: Good signature from \"Andrew Chow <andrew@achow101.com>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: 1528 1230 0785 C964 44D3  334D 1756 5732 E08E 5E41\r\n  gpg: Signature made Fri 18 Nov 2022 17:38:13 GMT\r\n  gpg:                using RSA key 0AD83877C1F0CD1EE9BD660AD7CC770B81FD22A8\r\n  gpg:                issuer \"benthecarman@live.com\"\r\n  gpg: Good signature from \"Ben Carman <benthecarman@live.com>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: 0AD8 3877 C1F0 CD1E E9BD  660A D7CC 770B 81FD 22A8\r\n  gpg: Signature made Thu 17 Nov 2022 20:36:14 GMT\r\n  gpg:                using RSA key 101598DC823C1B5F9A6624ABA5E0907A0380E6C3\r\n  gpg: requesting key 0xA5E0907A0380E6C3 from hkp server keyserver.ubuntu.com\r\n  gpg: key 0xA5E0907A0380E6C3: public key \"CoinForensics (SigningKey) <59567284+coinforensics@users.noreply.github.com>\" imported\r\n  gpg: Total number processed: 1\r\n  gpg:               imported: 1\r\n  gpg: Good signature from \"CoinForensics (SigningKey) <59567284+coinforensics@users.noreply.github.com>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: 1015 98DC 823C 1B5F 9A66  24AB A5E0 907A 0380 E6C3\r\n  gpg: Signature made Thu 17 Nov 2022 18:59:53 GMT\r\n  gpg:                using RSA key CFB16E21C950F67FA95E558F2EEB9F5CC09526C1\r\n  gpg:                issuer \"fanquake@gmail.com\"\r\n  gpg: Good signature from \"Michael Ford (bitcoin-otc) <fanquake@gmail.com>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: E777 299F C265 DD04 7930  70EB 944D 35F9 AC3D B76A\r\n       Subkey fingerprint: CFB1 6E21 C950 F67F A95E  558F 2EEB 9F5C C095 26C1\r\n  gpg: Signature made Fri 18 Nov 2022 04:30:59 GMT\r\n  gpg:                using RSA key F19F5FF2B0589EC341220045BA03F4DBE0C63FB4\r\n  gpg: Good signature from \"Gloria Zhao <gloriazhao@berkeley.edu>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: 6B00 2C6E A3F9 1B1B 0DF0  C9BC 8F61 7F12 00A6 D25C\r\n       Subkey fingerprint: F19F 5FF2 B058 9EC3 4122  0045 BA03 F4DB E0C6 3FB4\r\n  gpg: Signature made Thu 17 Nov 2022 19:11:54 GMT\r\n  gpg:                using RSA key F4FC70F07310028424EFC20A8E4256593F177720\r\n  gpg:                issuer \"gugger@gmail.com\"\r\n  gpg: Good signature from \"Oliver Gugger <gugger@gmail.com>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: F4FC 70F0 7310 0284 24EF  C20A 8E42 5659 3F17 7720\r\n  gpg: Signature made Mon 21 Nov 2022 09:40:28 GMT\r\n  gpg:                using RSA key D1DBF2C4B96F2DEBF4C16654410108112E7EA81F\r\n  gpg:                issuer \"hebasto@gmail.com\"\r\n  gpg: Good signature from \"Hennadii Stepanov (GitHub key) <32963518+hebasto@users.noreply.github.com>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: D1DB F2C4 B96F 2DEB F4C1  6654 4101 0811 2E7E A81F\r\n  gpg: Signature made Sat 19 Nov 2022 09:07:19 GMT\r\n  gpg:                using RSA key 287AE4CA1187C68C08B49CB2D11BD4F33F1DB499\r\n  gpg: Good signature from \"jackielove4u <jackielove4u@hotmail.com>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: 287A E4CA 1187 C68C 08B4  9CB2 D11B D4F3 3F1D B499\r\n  gpg: Signature made Thu 24 Nov 2022 09:34:31 GMT\r\n  gpg:                using RSA key 9DEAE0DC7063249FB05474681E4AED62986CD25D\r\n  gpg: Good signature from \"Wladimir J. van der Laan <laanwj@protonmail.com>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: 71A3 B167 3540 5025 D447  E8F2 7481 0B01 2346 C9A6\r\n       Subkey fingerprint: 9DEA E0DC 7063 249F B054  7468 1E4A ED62 986C D25D\r\n  gpg: Signature made Mon 21 Nov 2022 15:16:20 GMT\r\n  gpg:                using RSA key 3EB0DEE6004A13BE5A0CC758BF2978B068054311\r\n  gpg: Good signature from \"Pieter Wuille <pieter@wuille.net>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: 133E AC17 9436 F14A 5CF1  B794 860F EB80 4E66 9320\r\n       Subkey fingerprint: 3EB0 DEE6 004A 13BE 5A0C  C758 BF29 78B0 6805 4311\r\n  gpg: Signature made Sat 19 Nov 2022 13:10:12 GMT\r\n  gpg:                using RSA key 9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C\r\n  gpg:                issuer \"aaron@sipsorcery.com\"\r\n  gpg: Good signature from \"Aaron Clauson (sipsorcery) <aaron@sipsorcery.com>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: 9D3C C86A 72F8 4943 42EA  5FD1 0A41 BDC3 F4FA FF1C\r\n  gpg: Signature made Thu 17 Nov 2022 21:23:22 GMT\r\n  gpg:                using RSA key ED9BDF7AD6A55E232E84524257FF9BDBCC301009\r\n  gpg: Good signature from \"Sjors Provoost <sjors@sprovoost.nl>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: ED9B DF7A D6A5 5E23 2E84  5242 57FF 9BDB CC30 1009\r\n  gpg: Signature made Tue 22 Nov 2022 11:04:28 GMT\r\n  gpg:                using RSA key 6A8F9C266528E25AEB1D7731C2371D91CB716EA7\r\n  gpg:                issuer \"sebastian.falbesoner@gmail.com\"\r\n  gpg: requesting key 0xC2371D91CB716EA7 from hkp server keyserver.ubuntu.com\r\n  gpg: key 0xC2371D91CB716EA7: public key \"Sebastian Falbesoner (theStack) <sebastian.falbesoner@gmail.com>\" imported\r\n  gpg: Total number processed: 1\r\n  gpg:               imported: 1\r\n  gpg: Good signature from \"Sebastian Falbesoner (theStack) <sebastian.falbesoner@gmail.com>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: 6A8F 9C26 6528 E25A EB1D  7731 C237 1D91 CB71 6EA7\r\n  gpg: Signature made Thu 17 Nov 2022 19:35:52 GMT\r\n  gpg:                using RSA key 28E72909F1717FE9607754F8A7BEB2621678D37D\r\n  gpg:                issuer \"vertion@protonmail.com\"\r\n  gpg: Good signature from \"vertion <vertion@protonmail.com>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n  gpg:          There is no indication that the signature belongs to the owner.\r\n  Primary key fingerprint: 28E7 2909 F171 7FE9 6077  54F8 A7BE B262 1678 D37D\r\n[INFO] got 8 good, trusted signatures\r\n[INFO] GOOD SIGNATURE: SigData('D1DBF2C4B96F2DEBF4C16654410108112E7EA81F', 'Hennadii Stepanov (GitHub key) <32963518+hebasto@users.noreply.github.com>', trusted=False, status='unknown')\r\n[INFO] GOOD SIGNATURE: SigData('6A8F9C266528E25AEB1D7731C2371D91CB716EA7', 'Sebastian Falbesoner (theStack) <sebastian.falbesoner@gmail.com>', trusted=False, status='unknown')\r\n[INFO] GOOD SIGNATURE: SigData('152812300785C96444D3334D17565732E08E5E41', 'Andrew Chow <andrew@achow101.com>', trusted=False, status='unknown')\r\n[INFO] GOOD SIGNATURE: SigData('F4FC70F07310028424EFC20A8E4256593F177720', 'Oliver Gugger <gugger@gmail.com>', trusted=False, status='unknown')\r\n[INFO] GOOD SIGNATURE: SigData('101598DC823C1B5F9A6624ABA5E0907A0380E6C3', 'CoinForensics (SigningKey) <59567284+coinforensics@users.noreply.github.com>', trusted=False, status='unknown')\r\n[INFO] GOOD SIGNATURE: SigData('0AD83877C1F0CD1EE9BD660AD7CC770B81FD22A8', 'Ben Carman <benthecarman@live.com>', trusted=False, status='unknown')\r\n[INFO] GOOD SIGNATURE: SigData('ED9BDF7AD6A55E232E84524257FF9BDBCC301009', 'Sjors Provoost <sjors@sprovoost.nl>', trusted=False, status='unknown')\r\n[INFO] GOOD SIGNATURE: SigData('9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C', 'Aaron Clauson (sipsorcery) <aaron@sipsorcery.com>', trusted=False, status='unknown')\r\n[INFO] GOOD SIGNATURE (untrusted): SigData('CFB16E21C950F67FA95E558F2EEB9F5CC09526C1', 'Michael Ford (bitcoin-otc) <fanquake@gmail.com>', trusted=False, status='unknown')\r\n[INFO] GOOD SIGNATURE (untrusted): SigData('F19F5FF2B0589EC341220045BA03F4DBE0C63FB4', 'Gloria Zhao <gloriazhao@berkeley.edu>', trusted=False, status='unknown')\r\n[INFO] GOOD SIGNATURE (untrusted): SigData('287AE4CA1187C68C08B49CB2D11BD4F33F1DB499', 'jackielove4u <jackielove4u@hotmail.com>', trusted=False, status='unknown')\r\n[INFO] GOOD SIGNATURE (untrusted): SigData('9DEAE0DC7063249FB05474681E4AED62986CD25D', 'Wladimir J. van der Laan <laanwj@protonmail.com>', trusted=False, status='unknown')\r\n[INFO] GOOD SIGNATURE (untrusted): SigData('3EB0DEE6004A13BE5A0CC758BF2978B068054311', 'Pieter Wuille <pieter@wuille.net>', trusted=False, status='unknown')\r\n[INFO] GOOD SIGNATURE (untrusted): SigData('28E72909F1717FE9607754F8A7BEB2621678D37D', 'vertion <vertion@protonmail.com>', trusted=False, status='unknown')\r\n[INFO] removing *-unsigned binaries (bitcoin-24.0-x86_64-apple-darwin-unsigned.dmg, bitcoin-24.0-x86_64-apple-darwin-unsigned.tar.gz) from verification since https://bitcoincore.org does not host *-unsigned binaries\r\n[INFO] removing *-debug binaries (bitcoin-24.0-x86_64-linux-gnu-debug.tar.gz) from verification since https://bitcoincore.org does not host *-debug binaries\r\n[INFO] downloading bitcoin-24.0-x86_64-apple-darwin.dmg\r\n[INFO] downloading bitcoin-24.0-x86_64-apple-darwin.tar.gz\r\n[INFO] downloading bitcoin-24.0-x86_64-linux-gnu.tar.gz\r\n[INFO] did not clean up /tmp/bitcoin_verify_binaries.24.0-x86_64\r\nVERIFIED: bitcoin-24.0-x86_64-apple-darwin.dmg\r\nVERIFIED: bitcoin-24.0-x86_64-apple-darwin.tar.gz\r\nVERIFIED: bitcoin-24.0-x86_64-linux-gnu.tar.gz\r\n```\r\n\r\n</details>",
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1327493013",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 1329062246,
      "node_id": "IC_kwDOABII585PN-Fm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1329062246",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T13:07:45Z",
      "updated_at": "2022-11-28T13:30:45Z",
      "author_association": "MEMBER",
      "body": "Tested dff50dc68a54799df4415be6fea52a1e6fc88fc1 on v23.0 and v24.0. It noticed some new keys were added. It asked me to fetch keys I didn't have yet. It output a bunch of comforting `VERIFIED` lines :-)\r\n\r\nI also tested that editing a file right after it's downloaded, will indeed cause it to fail the checksum (`[CRITICAL] Hashes don't match.`).\r\n\r\nI ran `contrib/verifybinaries/test.py` locally:\r\n\r\n```\r\n% contrib/verifybinaries/test.py \r\n✓ 'Nonexistent version should fail' passed\r\n✓ 'Malformed version should fail' passed\r\n✓ '--min-trusted-sigs 20 should fail' passed\r\n- testing multisig verification (22.0)\r\n✓ '22.0 should succeed' passed\r\n- testing single-sig verification (0.20.0)\r\nTraceback (most recent call last):\r\n  File \"contrib/verifybinaries/test.py\", line 62, in <module>\r\n    main()\r\n  File \"contrib/verifybinaries/test.py\", line 33, in main\r\n    result = json.loads(_20.stdout.decode())\r\n  File \"/Users/sjors/.pyenv/versions/3.6.15/lib/python3.6/json/__init__.py\", line 354, in loads\r\n    return _default_decoder.decode(s)\r\n  File \"/Users/sjors/.pyenv/versions/3.6.15/lib/python3.6/json/decoder.py\", line 339, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"/Users/sjors/.pyenv/versions/3.6.15/lib/python3.6/json/decoder.py\", line 357, in raw_decode\r\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\r\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\r\n```\r\n\r\n(tried twice)\r\n\r\nThis is consistent with me not being able to verify 0.20.0. The error is a bit cryptic.\r\n\r\n```\r\n./contrib/verifybinaries/verify.py 0.20.0\r\n[INFO] got file https://bitcoincore.org/bin/bitcoin-core-0.20.0/SHA256SUMS.asc as SHA256SUMS.asc\r\n[INFO] got file https://bitcoin.org/bin/bitcoin-core-0.20.0/SHA256SUMS.asc as SHA256SUMS.asc.2\r\nTraceback (most recent call last):\r\n  File \"./contrib/verifybinaries/verify.py\", line 687, in <module>\r\n    sys.exit(main(sys.argv[1:]))\r\n  File \"./contrib/verifybinaries/verify.py\", line 560, in main\r\n    SIGNATUREFILENAME, args)\r\n  File \"./contrib/verifybinaries/verify.py\", line 481, in check_single_sig\r\n    good, unknown, bad = parse_gpg_result(output.splitlines())\r\n  File \"./contrib/verifybinaries/verify.py\", line 273, in parse_gpg_result\r\n    raise RuntimeError(\"failed to detect signature being resolved\")\r\nRuntimeError: failed to detect signature being resolved\r\n```\r\n",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1329062246",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 1329108838,
      "node_id": "IC_kwDOABII585POJdm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1329108838",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T13:39:46Z",
      "updated_at": "2022-11-28T13:39:46Z",
      "author_association": "MEMBER",
      "body": "> This is consistent with me not being able to verify 0.20.0. The error is a bit cryptic.\r\n\r\n`0.y.x` isn't using guix, only `y.x`, so I guess this is expected?",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1329108838",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "reviewed",
      "id": 1195843388,
      "node_id": "PRR_kwDOABII585HRx88",
      "url": null,
      "actor": null,
      "commit_id": "dff50dc68a54799df4415be6fea52a1e6fc88fc1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1195843388",
      "submitted_at": "2022-11-28T13:49:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "commented",
      "id": 1329248286,
      "node_id": "IC_kwDOABII585POrge",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1329248286",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T14:57:21Z",
      "updated_at": "2022-11-28T14:57:21Z",
      "author_association": "MEMBER",
      "body": "> This is consistent with me not being able to verify 0.20.0. The error is a bit cryptic.\r\n\r\nDo you have Wladimir's old release signing key imported? \r\n```\r\ngpg --keyserver [...] --recv-key 01EA5486DE18A882D4C2684590C8019E36C2E964\r\n```\r\n\r\nWhen reproducing, I found that that fixed both the test failure as well as the inability to verify 0.20.0.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1329248286",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 1329284816,
      "node_id": "IC_kwDOABII585PO0bQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1329284816",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T15:20:01Z",
      "updated_at": "2022-11-28T15:20:01Z",
      "author_association": "MEMBER",
      "body": "Thanks for testing @Sjors and for the look @MarcoFalke. I've pushed a small commit that improves error diagnostics for the test script, and ensures that the old release key is installed.\r\n\r\nI looked at removing single-sig (legacy) verification, but I'd actually like to keep it in. I think it's a useful way to retrieve old releases of Bitcoin, and the marginal code to review/maintain [is relatively little](https://github.com/jamesob/bitcoin/blob/f6cfcb7cf9790fe189e1789417cd96f79f776153/contrib/verifybinaries/verify.py#L475-L483).",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1329284816",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "mentioned",
      "id": 7904007381,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAHXHZTV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7904007381",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T15:20:02Z"
    },
    {
      "event": "subscribed",
      "id": 7904007395,
      "node_id": "SE_lADOABII5847lT-JzwAAAAHXHZTj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7904007395",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T15:20:02Z"
    },
    {
      "event": "mentioned",
      "id": 7904007411,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAHXHZTz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7904007411",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T15:20:02Z"
    },
    {
      "event": "subscribed",
      "id": 7904007424,
      "node_id": "SE_lADOABII5847lT-JzwAAAAHXHZUA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7904007424",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T15:20:02Z"
    },
    {
      "event": "commented",
      "id": 1330392677,
      "node_id": "IC_kwDOABII585PTC5l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1330392677",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-29T10:12:52Z",
      "updated_at": "2022-11-29T10:14:25Z",
      "author_association": "MEMBER",
      "body": "With this new commit I get the same error message when fetching 0.20.0.\r\n\r\nWhen running the test I get \"In order to run tests, you should first import the old release signing key:\", however importing that key has no effect since I already have it.\r\n\r\nI have the old release key, though it's marked as expired. I tried pulling from the default key server that [gpgtools.org](https://gpgtools.org/) uses (hkps://keys.openpgp.org), but that doesn't change the status. Also tried `gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 01EA5486DE18A882D4C2684590C8019E36C2E964`.\r\n\r\nI assume the key has intentionally not been renewed, so we have to handle the expiration somehow.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1330392677",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "reviewed",
      "id": 1197276577,
      "node_id": "PRR_kwDOABII585HXP2h",
      "url": null,
      "actor": null,
      "commit_id": "f6cfcb7cf9790fe189e1789417cd96f79f776153",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1197276577",
      "submitted_at": "2022-11-29T10:22:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "reviewed",
      "id": 1197281387,
      "node_id": "PRR_kwDOABII585HXRBr",
      "url": null,
      "actor": null,
      "commit_id": "f6cfcb7cf9790fe189e1789417cd96f79f776153",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1197281387",
      "submitted_at": "2022-11-29T10:25:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "reviewed",
      "id": 1225915958,
      "node_id": "PRR_kwDOABII585JEf42",
      "url": null,
      "actor": null,
      "commit_id": "f6cfcb7cf9790fe189e1789417cd96f79f776153",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1225915958",
      "submitted_at": "2022-12-21T11:21:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "milestoned",
      "id": 8538250213,
      "node_id": "MIE_lADOABII5847lT-JzwAAAAH861vl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8538250213",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-16T15:29:39Z",
      "milestone": {
        "title": "25.0"
      }
    },
    {
      "event": "commented",
      "id": 1433269528,
      "node_id": "IC_kwDOABII585VbfUY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433269528",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-16T15:29:43Z",
      "updated_at": "2023-02-16T15:29:43Z",
      "author_association": "MEMBER",
      "body": "Assigned this to the 25.x milestone. We either need to make these scripts useful/usable, or we should just delete them.\r\n\r\n> I looked at removing single-sig (legacy) verification, but I'd actually like to keep it in.\r\n\r\nGiven that the legacy signing key [has been revoked](https://lists.linuxfoundation.org/pipermail/bitcoin-core-dev/2023-February/000115.html):\r\n\r\n> Please remove it from verification pipelines.\r\n\r\nprobably makes more sense to remove.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1433269528",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "labeled",
      "id": 8538464001,
      "node_id": "LE_lADOABII5847lT-JzwAAAAH87p8B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8538464001",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-16T15:47:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1433301398,
      "node_id": "IC_kwDOABII585VbnGW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433301398",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-16T15:48:35Z",
      "updated_at": "2023-02-16T15:48:35Z",
      "author_association": "MEMBER",
      "body": "> We either need to make these scripts useful/usable, or we should just delete them.\r\n\r\nAgreed - right now in master this script is useless for contemporary versions.\r\n\r\nUnless anyone thinks otherwise, I think the best way forward here is for me to remove support for pre-multi-sig binaries and compress this change down to a single commit for easier review.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1433301398",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8594290635,
      "node_id": "HRFPE_lADOABII5847lT-JzwAAAAIAQnfL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8594290635",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-23T17:31:49Z"
    },
    {
      "event": "commented",
      "id": 1442170863,
      "node_id": "IC_kwDOABII585V9cfv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1442170863",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-23T17:33:30Z",
      "updated_at": "2023-02-23T17:33:30Z",
      "author_association": "MEMBER",
      "body": "I've rebased/squashed/simplified the script here to\r\n- incorporate the removal of builder keys from this repo, and\r\n- remove support for single-sig release signing (users are referred to old versions of this script for that).",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1442170863",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "unlabeled",
      "id": 8594503894,
      "node_id": "UNLE_lADOABII5847lT-JzwAAAAIARbjW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8594503894",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-23T17:56:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI0MmQ4ZTUyMzg4NWZkYjgwZDYzZTlhNThiZWU2NzRjYjUwNDU1ODA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b42d8e523885fdb80d63e9a58bee674cb5045580",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b42d8e523885fdb80d63e9a58bee674cb5045580",
      "tree": {
        "sha": "8281e32066d895224f8e041e8c38d81a2c1a4a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8281e32066d895224f8e041e8c38d81a2c1a4a5e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30874a7cc9e8ae92f5ee342b5457faf265af1415",
          "sha": "30874a7cc9e8ae92f5ee342b5457faf265af1415",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/30874a7cc9e8ae92f5ee342b5457faf265af1415"
        }
      ],
      "message": "contrib: verifybinaries: allow multisig verification\n\nThis commit adds the functionality necessary to transition from\ndoing binary verification on the basis of a single signature to\nrequiring a minimum threshold of trusted signatures.\n\nA signature can appear as \"good\" from GPG output, but it may not come\nfrom an identity the user trusts. We call these \"good, untrusted\"\nsignatures.\n\nWe report bad signatures but do not necessarily fail in their presence,\nsince a bad signature might coexist with enough good, trusted signatures\nto fulfill our criteria.\n\nIf \"--import-keys\" is enabled, we will prompt the user to\noptionally try to retrieve unknown keys. Marking them as trusted locally\nis a WIP, but keys which are retrieved successfully and appear on the\nbuilder-keys list will immediately count as being useful towards\nfulfilling the threshold.\n\nLogging is improved and an option to output JSON that summarizes the\nwhole sum signature and binary verification processes has been added.\n\nCo-authored-by: Russ Yanofsky <russ@yanofsky.org>\nCo-authored-by: willcl-ark <will8clark@gmail.com>",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2023-02-23T22:02:45Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-16T22:33:20Z"
      },
      "sha": "b42d8e523885fdb80d63e9a58bee674cb5045580"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8596336302,
      "node_id": "HRFPE_lADOABII5847lT-JzwAAAAIAYa6u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8596336302",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-23T22:02:51Z"
    },
    {
      "event": "reviewed",
      "id": 1313479671,
      "node_id": "PRR_kwDOABII585OShv3",
      "url": null,
      "actor": null,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1313479671",
      "submitted_at": "2023-02-24T14:12:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "reviewed",
      "id": 1314697670,
      "node_id": "PRR_kwDOABII585OXLHG",
      "url": null,
      "actor": null,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested lightly on OpenBSD 7.2 (amd64) with versions 22.1 / 23.1 / 24.0.1 and didn't run into any issues so far. Automatic key import (`--import-keys`) and JSON output mode (`--json`) work as expected. :heavy_check_mark: Planning to code-review and test a bit more in-depth (i.e. intentionally triggering a failed verification and other individual errors) within the following days.\r\n\r\n(Not sure if it has to do with my connection but fetching the binaries from bitcoincore.org was extra slow today, taking several minutes per file).",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1314697670",
      "submitted_at": "2023-02-26T17:16:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "commented",
      "id": 1478325196,
      "node_id": "IC_kwDOABII585YHXPM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1478325196",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T17:38:09Z",
      "updated_at": "2023-03-21T17:38:09Z",
      "author_association": "MEMBER",
      "body": "Can you (here or in a separate PR) add support for validating release artifacts without actually downloading them (ie pre-downloaded release artifacts)?",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1478325196",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "reviewed",
      "id": 1351239310,
      "node_id": "PRR_kwDOABII585QikaO",
      "url": null,
      "actor": null,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nIt would be nice to have this in, given how long our current verification script has been broken.\r\n\r\nI think it would be better to also allow the user to specify the paths to the files to verify instead of automatically downloading them. This would be particularly useful when the files haven't been uploaded yet, e.g. on the website server itself prior to publishing the binaries.\r\n\r\nThe linter is unhappy for some reason.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#pullrequestreview-1351239310",
      "submitted_at": "2023-03-21T19:30:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
    },
    {
      "event": "commented",
      "id": 1480603300,
      "node_id": "IC_kwDOABII585YQDak",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1480603300",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-23T04:59:10Z",
      "updated_at": "2023-03-23T04:59:10Z",
      "author_association": "MEMBER",
      "body": "https://github.com/achow101/bitcoin/tree/pr23020-direct-bins-gpg-parse is a branch which implements a subcommand for verifying binaries directly and to use `--status-file` for the machine parseable output.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1480603300",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 1481055451,
      "node_id": "IC_kwDOABII585YRxzb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1481055451",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-23T11:52:45Z",
      "updated_at": "2023-03-23T11:52:45Z",
      "author_association": "MEMBER",
      "body": "I probably won't have time in the next few days to attend to this, so feel free to open a replacement PR with @achow101's branch if I'm holding anything up.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1481055451",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "mentioned",
      "id": 8826557083,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAIOGpKb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8826557083",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-23T11:52:45Z"
    },
    {
      "event": "subscribed",
      "id": 8826557102,
      "node_id": "SE_lADOABII5847lT-JzwAAAAIOGpKu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8826557102",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-23T11:52:46Z"
    },
    {
      "event": "commented",
      "id": 1481930724,
      "node_id": "IC_kwDOABII585YVHfk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1481930724",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-23T21:22:26Z",
      "updated_at": "2023-03-23T21:22:26Z",
      "author_association": "MEMBER",
      "body": "> https://github.com/achow101/bitcoin/tree/pr23020-direct-bins-gpg-parse is a branch which implements a subcommand for verifying binaries directly and to use `--status-file` for the machine parseable output.\r\n\r\nTesting your branch now. Let me know if you'd like to take review elsewhere.\r\n\r\nSorry I don't speak much python. Some of these problems may already exist as opposed to being introduced here.\r\n\r\nFirst, testing with python3.8:\r\n`verify.py pub 23.0-x86_64`\r\n```bash\r\n  File \"/home/cory/dev/bitcoin2/contrib/verifybinaries/verify.py\", line 192, in parse_gpg_result\r\n    def line_begins_with(patt: str, line: str) -> t.Optional[re.Match[str]]:\r\nTypeError: 'type' object is not subscriptable\r\n```\r\n\r\npython3.9 gets past this, but runs into this:\r\n\r\n`verify.py pub 23.0-x86_64`\r\n``` bash\r\n  File \"/home/cory/dev/bitcoin2/contrib/verifybinaries/verify.py\", line 228, in parse_gpg_result\r\n    curr_sigdata.key, _, _, _, _, _, _ = line.split()[2:8]\r\nValueError: not enough values to unpack (expected 7, got 6)\r\n```\r\n\r\nI was able to get past that with the following naive change:\r\n\r\n```diff --git a/contrib/verifybinaries/verify.py b/contrib/verifybinaries/verify.py\r\nindex 51c8aa584f..407030a71c 100755\r\n--- a/contrib/verifybinaries/verify.py\r\n+++ b/contrib/verifybinaries/verify.py\r\n@@ -227,3 +227,3 @@ def parse_gpg_result(\r\n         elif line_begins_with(r\"ERRSIG(?:\\s|$)\", line):\r\n-            curr_sigdata.key, _, _, _, _, _, _ = line.split()[2:8]\r\n+            curr_sigdata.key, _, _, _, _, _ = line.split()[2:8]\r\n             curr_sigs = unknown_sigs\r\n```\r\nAt that point, verification succeeds.\r\n\r\nTesting local binaries:\r\n\r\nAgain, fails with python3.8 for the same reason. Works as expected with python3.9.\r\n\r\nIt would be nice if: if no binary is named, check for everything listed in SHA256SUMS. I suspect that would make it easier to automate its use.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1481930724",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "commented",
      "id": 1481979695,
      "node_id": "IC_kwDOABII585YVTcv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1481979695",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-23T22:09:35Z",
      "updated_at": "2023-03-23T22:17:50Z",
      "author_association": "MEMBER",
      "body": "> I probably won't have time in the next few days to attend to this, so feel free to open a replacement PR with @achow101's branch if I'm holding anything up.\r\n\r\nUnfortunately I will be away for the next two weeks soon, so I won't have any time to maintain a replacement PR either.\r\n\r\n> First, testing with python3.8: `verify.py pub 23.0-x86_64`\r\n> \r\n> ```shell\r\n>   File \"/home/cory/dev/bitcoin2/contrib/verifybinaries/verify.py\", line 192, in parse_gpg_result\r\n>     def line_begins_with(patt: str, line: str) -> t.Optional[re.Match[str]]:\r\n> TypeError: 'type' object is not subscriptable\r\n> ```\r\n\r\nThis is an issue with the original in this PR, but I've added a commit to my branch that fixes it.\r\n\r\n> `verify.py pub 23.0-x86_64`\r\n> \r\n> ```shell\r\n>   File \"/home/cory/dev/bitcoin2/contrib/verifybinaries/verify.py\", line 228, in parse_gpg_result\r\n>     curr_sigdata.key, _, _, _, _, _, _ = line.split()[2:8]\r\n> ValueError: not enough values to unpack (expected 7, got 6)\r\n> ```\r\n\r\nFixed\r\n\r\n> It would be nice if: if no binary is named, check for everything listed in SHA256SUMS. I suspect that would make it easier to automate its use.\r\n\r\nI've updated my branch to allow this.\r\n\r\nI've also updated it to allow specifying only the SHA256SUMS and it will assume the signature file name.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1481979695",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "mentioned",
      "id": 8832936807,
      "node_id": "MEE_lADOABII5847lT-JzwAAAAIOe-tn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8832936807",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-23T22:09:36Z"
    },
    {
      "event": "subscribed",
      "id": 8832936816,
      "node_id": "SE_lADOABII5847lT-JzwAAAAIOe-tw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8832936816",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-23T22:09:36Z"
    },
    {
      "event": "commented",
      "id": 1488017645,
      "node_id": "IC_kwDOABII585YsVjt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1488017645",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-29T06:30:45Z",
      "updated_at": "2023-03-29T06:30:45Z",
      "author_association": "MEMBER",
      "body": "Closing for now. In favour of #27358, which incorporated this, and other changes.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1488017645",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23020"
    },
    {
      "event": "closed",
      "id": 8872401088,
      "node_id": "CE_lADOABII5847lT-JzwAAAAIQ1hjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8872401088",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-29T06:30:54Z"
    },
    {
      "event": "demilestoned",
      "id": 8872402577,
      "node_id": "DEME_lADOABII5847lT-JzwAAAAIQ1h6R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8872402577",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-29T06:31:07Z",
      "milestone": {
        "title": "25.0"
      }
    },
    {
      "event": "referenced",
      "id": 8952051446,
      "node_id": "REFE_lADOABII5847lT-JzwAAAAIVlXb2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8952051446",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "db720b5a703c90625fa7a4773bd2db5672427cbe",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/db720b5a703c90625fa7a4773bd2db5672427cbe",
      "created_at": "2023-04-07T07:26:55Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765289101",
      "pull_request_review_id": 827016327,
      "id": 765289101,
      "node_id": "PRRC_kwDOABII584tnWKN",
      "diff_hunk": "@@ -1,41 +1,94 @@\n ### Verify Binaries\n \n-#### Preparation:\n+#### Preparation\n \n-Make sure you obtain the proper release signing key and verify the fingerprint with several independent sources.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n-```sh\n-$ gpg --fingerprint \"Bitcoin Core binary release signing key\"\n-pub   4096R/36C2E964 2015-06-24 [expires: YYYY-MM-DD]\n-      Key fingerprint = 01EA 5486 DE18 A882 D4C2  6845 90C8 019E 36C2 E964\n-uid                  Wladimir J. van der Laan (Bitcoin Core binary release signing key) <laanwj@gmail.com>\n-```\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin/bitcoin/tree/master/contrib/builder-keys) and\n+decide which of these keys you would like to trust. For each key you want to trust, you\n+must obtain that key for your local GPG installation (you can use this script to do\n+this automatically, or you can do it yourself).\n+\n+You can obtain these keys by\n+  - (most laborious) through a browser using a key server (e.g. https://keyserver.ubuntu.com/),\n+  - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n+  - (easiest) you can run the packaged `verifybinaries.py` script to have it automatically\n+    retrieve unrecognized keys.\n+\n+#### Legacy verification\n+\n+Historically, the lead maintainer Wladimir J. van der Laan has provided the sole signing\n+key for releases, but since 22.0 Bitcoin release sum files are signed as described\n+above using a plurality of keys.\n+\n+Legacy verification is preserved for releases before v22.0; namely, GPG verification for\n+a checksum file based solely on a valid signature by the old release key\n+(`0x90C8019E36C2E964`).\n+\n+#### Usage\n+\n+This script attempts to download the checksum file (`SHA256SUMS`) and corresponding\n+signature file `SHA256SUMS.asc` from a number of sources, but chiefly\n+https://bitcoincore.org.",
      "path": "contrib/verifybinaries/README.md",
      "position": null,
      "original_position": 46,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would maybe just say bitcoincore.org and bitcoin.org to be less mysterious",
      "created_at": "2021-12-08T22:19:10Z",
      "updated_at": "2021-12-08T22:54:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r765289101",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765289101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": 37,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765293018",
      "pull_request_review_id": 827016327,
      "id": 765293018,
      "node_id": "PRRC_kwDOABII584tnXHa",
      "diff_hunk": "@@ -59,124 +194,457 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 190,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Print the actual error? {e}",
      "created_at": "2021-12-08T22:26:31Z",
      "updated_at": "2021-12-08T22:54:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r765293018",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765293018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 203,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765297323",
      "pull_request_review_id": 827016327,
      "id": 765297323,
      "node_id": "PRRC_kwDOABII584tnYKr",
      "diff_hunk": "@@ -59,124 +194,457 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    # Enforce English output since we're relying on output that contains natural language.\n+    # Use string-shell form (vs. args as list) because passing LANGUAGE via `env` doesn't\n+    # seem to work.\n+    args = (\n+        'LANGUAGE=en gpg --yes --decrypt '\n+        + (f' --output {output_filename} ' if output_filename else '')\n+        + signature_filename)",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 206,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Previous version of this that used an arg list seemed better, because it avoided shell syntax that wouldn't work on windows and would have trouble with spaces and special characters.\r\n\r\nI don't think there should be an issue passing the LANGUAGE value if you just add `, env=dict(os.environ, LANGUAGE=\"en\")` to the subprocess call.\r\n\r\n",
      "created_at": "2021-12-08T22:34:47Z",
      "updated_at": "2021-12-08T22:54:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r765297323",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765297323"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": 213,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765303913",
      "pull_request_review_id": 827016327,
      "id": 765303913,
      "node_id": "PRRC_kwDOABII584tnZxp",
      "diff_hunk": "@@ -59,124 +194,457 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    # Enforce English output since we're relying on output that contains natural language.\n+    # Use string-shell form (vs. args as list) because passing LANGUAGE via `env` doesn't\n+    # seem to work.\n+    args = (\n+        'LANGUAGE=en gpg --yes --decrypt '\n+        + (f' --output {output_filename} ' if output_filename else '')\n+        + signature_filename)\n+\n+    result = subprocess.run(args, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    for i, line in enumerate(output):\n+        if 'using RSA key' in line:",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 240,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would seem more readable and also more reassuring to do a fuller parse of GPG lines, instead of picking out little pieces of text. E.g.\r\n\r\n```python\r\nm = re.match(^\" *using RSA key (0x[0-9a-f]{18}|[0-9a-f]{40}$\")\r\n```\r\n\r\nIf you're just doing fragments like `'using RSA key' in line`, who is to say the script won't match the text `NOT using RSA key` and you just gave me a fake binary and ran away with my secret keys.",
      "created_at": "2021-12-08T22:48:10Z",
      "updated_at": "2021-12-08T22:54:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r765303913",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765303913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766033525",
      "pull_request_review_id": 828027865,
      "id": 766033525,
      "node_id": "PRRC_kwDOABII584tqL51",
      "diff_hunk": "@@ -59,124 +194,457 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    # Enforce English output since we're relying on output that contains natural language.\n+    # Use string-shell form (vs. args as list) because passing LANGUAGE via `env` doesn't\n+    # seem to work.\n+    args = (\n+        'LANGUAGE=en gpg --yes --decrypt '\n+        + (f' --output {output_filename} ' if output_filename else '')\n+        + signature_filename)\n+\n+    result = subprocess.run(args, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    for i, line in enumerate(output):\n+        if 'using RSA key' in line:\n+            if curr_key:\n+                raise RuntimeError(\n+                    f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n+                    \"this could mean we have encountered a bad signature! check GPG output!\")\n+            curr_key = line.split('key ')[-1].strip()\n+            assert len(curr_key) == 40 or (len(curr_key) == 18 and curr_key.startswith('0x'))\n+\n+        if \"Can't check signature: No public key\" in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            unknown_sigs.append(SigData(curr_key, '', False, ''))\n+            curr_key = None\n+\n+        if 'Good signature from ' in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+\n+            # It's safe to index output[i + 1] because if we saw a good sig, there should\n+            # always be another line\n+            trusted = (\n+                'This key is not certified with a trusted signature' not in output[i + 1])\n+            good_sigs.append(SigData(curr_key, name, trusted, status))\n+            curr_key = None\n+\n+        if 'bad signature from' in line.lower():\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+            bad_sigs.append(SigData(curr_key, name, False, status))\n+            curr_key = None\n+\n+        # Track total signatures included\n+        if ': Signature made ' in line:\n+            total_resolved_sigs += 1\n+\n+    all_found = len(good_sigs + bad_sigs + unknown_sigs)\n+    if all_found != total_resolved_sigs:\n+        raise RuntimeError(\n+            f\"failed to evaluate all signatures: found {all_found} \"\n+            f\"but expected {total_resolved_sigs}\")\n+\n+    return (good_sigs, unknown_sigs, bad_sigs)\n+\n+\n+def parse_gpg_from_line(line: str) -> (str, str):\n+    \"\"\"Returns name and expiration status.\"\"\"\n+    assert 'signature from' in line\n+\n+    name_end = line.split(' from ')[-1]\n+    m = re.search(r'(?P<name>\".+\") \\[(?P<status>\\w+)\\]', name_end)\n+    assert m\n+    (name, status) = m.groups()\n+    name = name.strip('\"\\'')\n+\n+    return (name, status)\n+\n+\n def files_are_equal(filename1, filename2):\n     with open(filename1, 'rb') as file1:\n         contents1 = file1.read()\n     with open(filename2, 'rb') as file2:\n         contents2 = file2.read()\n-    return contents1 == contents2\n+    eq = contents1 == contents2\n \n+    if not eq:\n+        with open(filename1, 'r', encoding='utf-8') as f1, \\\n+                open(filename2, 'r', encoding='utf-8') as f2:\n+            f1lines = f1.readlines()\n+            f2lines = f2.readlines()\n \n-def verify_with_gpg(signature_filename, output_filename):\n-    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n-                             output_filename, signature_filename],\n-                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n-    return result.returncode, result.stdout.decode().rstrip()\n+            diff = indent(\n+                ''.join(difflib.unified_diff(f1lines, f2lines)))\n+            log.warning(f\"found diff in files ({filename1}, {filename2}):\\n{diff}\\n\")\n \n+    return eq\n \n-def remove_files(filenames):\n-    for filename in filenames:\n-        os.remove(filename)\n+\n+def get_files_from_hosts_and_compare(\n+    hosts: t.List[str], path: str, filename: str, require_all: bool = False\n+) -> ReturnCode:\n+    \"\"\"\n+    Retrieve the same file from a number of hosts and ensure they have the same contents.\n+    The first host given will be treated as the \"primary\" host, and is required to succeed.\n+\n+    Args:\n+        filename: for writing the file locally.\n+    \"\"\"\n+    assert len(hosts) > 1\n+    primary_host = hosts[0]\n+    other_hosts = hosts[1:]\n+    got_files = []\n+\n+    def join_url(host: str) -> str:\n+        return host.rstrip('/') + '/' + path.lstrip('/')\n+\n+    url = join_url(primary_host)\n+    success, output = download_with_wget(url, filename)\n+    if not success:\n+        log.error(\n+            f\"couldn't fetch file ({url}). \"\n+            \"Have you specified the version number in the following format?\\n\"\n+            f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n+            f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n+            f\"wget output:\\n{indent(output)}\")\n+        return ReturnCode.FILE_GET_FAILED\n+    else:\n+        log.info(f\"got file {url} as {filename}\")\n+        got_files.append(filename)\n+\n+    for i, host in enumerate(other_hosts):\n+        url = join_url(host)\n+        fname = filename + f'.{i + 2}'\n+        success, output = download_with_wget(url, fname)\n+\n+        if require_all and not success:\n+            log.error(\n+                f\"{host} failed to provide file ({url}), but {primary_host} did?\\n\"\n+                f\"wget output:\\n{indent(output)}\")\n+            return ReturnCode.FILE_MISSING_FROM_ONE_HOST\n+        elif not success:\n+            log.warning(\n+                f\"{host} failed to provide file ({url}). \"\n+                f\"Continuing based solely upon {primary_host}.\")\n+        else:\n+            log.info(f\"got file {url} as {fname}\")\n+            got_files.append(fname)\n+\n+    for i, got_file in enumerate(got_files):\n+        if got_file == got_files[-1]:\n+            break  # break on last file, nothing after it to compare to\n+\n+        compare_to = got_files[i + 1]\n+        if not files_are_equal(got_file, compare_to):\n+            log.error(f\"files not equal: {got_file} and {compare_to}\")\n+            return ReturnCode.FILES_NOT_EQUAL\n+\n+    return ReturnCode.SUCCESS\n+\n+\n+def get_builder_keys(bitcoin_dir: Path) -> t.Dict[str, str]:\n+    \"\"\"\n+    Return a map of builder key to name from a local or remote source,\n+    in that order of preference.\n+    If we have them locally, compare them to the github repo.\n+    \"\"\"\n+    local_builder_keys = []\n+    local_builder_path = bitcoin_dir / 'contrib' / 'builder-keys' / 'keys.txt'\n+    if local_builder_path.exists():\n+        local_builder_keys = local_builder_path.read_text().splitlines()\n+\n+    success, gh_builder_keys = download_lines_with_urllib(BUILDER_KEYS_GH_URL)\n+    if not success:\n+        log.warning(f\"unable to retrieve builder keys from {BUILDER_KEYS_GH_URL}\")\n+\n+    if not (success or local_builder_keys):\n+        log.error(\"unable to retrieve builder keys locally or remotely\")\n+\n+    # check the local and remote builder keys against each other and report diff\n+    if local_builder_keys and gh_builder_keys:\n+        if local_builder_keys != gh_builder_keys:\n+            diff = indent(\n+                '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)))\n+            log.warning(f\"found diff (local vs. GH) in builder keys:\\n{diff}\\n\")\n+\n+    # Prefer local builder keys to those obtained remotely.\n+    builder_keys = local_builder_keys or gh_builder_keys or []\n+\n+    builder_key_map = {}\n+    for i in builder_keys:\n+        key, name = i.split(' ', 1)\n+        builder_key_map[key] = name\n+\n+    return builder_key_map\n+\n+\n+def check_multisig(\n+    sigfilename: str, args: argparse.Namespace, builder_key_map: t.Dict[str, str]\n+):\n+    # check signature\n+    #\n+    # We don't write output to a file because this command will almost certainly\n+    # fail with GPG exit code '2' (and so not writing to --output) because of the\n+    # likely presence of multiple untrusted signatures.\n+    retval, output = verify_with_gpg(sigfilename)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    # Retrieve unknown keys that are in the repo builder list and then try GPG again.\n+    if unknown and not args.noninteractive and not args.skip_import_builders:\n+        for unsig in unknown:\n+            name = builder_key_map.get(unsig.key, '<unknown>')\n+            if input(f\" ? Retrieve key {unsig.key} for {name}? (y/N) \").lower() == \"y\":\n+                ran = subprocess.run(\n+                    f\"gpg --keyserver {args.keyserver} --recv-keys {unsig.key}\", shell=True)\n+\n+                if ran.returncode != 0:\n+                    log.warning(f\"failed to retrieve key {unsig.key} for {name}\")\n+\n+    return retval, output, good, unknown, bad\n+\n+\n+def check_single_sig(sigfilename: str, args: argparse.Namespace):\n+    retval, output = verify_with_gpg(sigfilename, SUMS_FILENAME)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    return retval, output, good, unknown, bad\n \n \n def main(args):\n-    # sanity check\n-    if len(args) < 1:\n-        print(\"Error: need to specify a version on the command line\")\n-        return 3\n+    args = parser.parse_args()\n+    if args.quiet:\n+        log.setLevel(logging.WARNING)\n+\n+    WORKINGDIR = Path(tempfile.gettempdir()) / f\"bitcoin_verify_binaries.{args.version}\"\n+\n+    def cleanup():\n+        log.info(\"cleaning up files\")\n+        os.chdir(Path.home())\n+        shutil.rmtree(WORKINGDIR)\n \n     # determine remote dir dependent on provided version string\n-    version_base, version_rc, os_filter = parse_version_string(args[0])\n+    version_base, version_rc, os_filter = parse_version_string(args.version)\n     remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n     if version_rc:\n         remote_dir += f\"test.{version_rc}/\"\n-    remote_sigfile = remote_dir + SIGNATUREFILENAME\n+    remote_sigs_path = remote_dir + SIGNATUREFILENAME\n+    remote_sums_path = remote_dir + SUMS_FILENAME\n \n+    bitcoin_dir_maybe = Path(args.bitcoin_src_path) if args.bitcoin_src_path else Path.cwd()\n     # create working directory\n     os.makedirs(WORKINGDIR, exist_ok=True)\n     os.chdir(WORKINGDIR)\n \n-    # fetch first signature file\n-    sigfile1 = SIGNATUREFILENAME\n-    success, output = download_with_wget(HOST1 + remote_sigfile, sigfile1)\n-    if not success:\n-        print(\"Error: couldn't fetch signature file. \"\n-              \"Have you specified the version number in the following format?\")\n-        print(f\"[{VERSIONPREFIX}]<version>[-rc[0-9]][-platform] \"\n-              f\"(example: {VERSIONPREFIX}0.21.0-rc3-osx)\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n-        return 4\n-\n-    # fetch second signature file\n-    sigfile2 = SIGNATUREFILENAME + \".2\"\n-    success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n-    if not success:\n-        print(\"bitcoin.org failed to provide signature file, \"\n-              \"but bitcoincore.org did?\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n-        remove_files([sigfile1])\n-        return 5\n-\n-    # ensure that both signature files are equal\n-    if not files_are_equal(sigfile1, sigfile2):\n-        print(\"bitcoin.org and bitcoincore.org signature files were not equal?\")\n-        print(f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n-        return 6\n-\n-    # check signature and extract data into file\n-    retval, output = verify_with_gpg(sigfile1, HASHFILE)\n-    if retval != 0:\n-        if retval == 1:\n-            print(\"Bad signature.\")\n-        elif retval == 2:\n-            print(\"gpg error. Do you have the Bitcoin Core binary release \"\n-                  \"signing key installed?\")\n-        print(\"gpg output:\")\n-        print(indent(output, '\\t'))\n-        remove_files([sigfile1, sigfile2, HASHFILE])\n-        return 1\n+    version_tuple = [int(i) for i in version_base.split('.')]\n+    hosts = [HOST1, HOST2]\n+\n+    got_sig_status = get_files_from_hosts_and_compare(\n+        hosts, remote_sigs_path, SIGNATUREFILENAME, args.require_all_hosts)\n+    if got_sig_status != ReturnCode.SUCCESS:\n+        return got_sig_status\n+\n+    # Multi-sig verification is available after 22.0.\n+    MULTISIG_SUPPORTED = version_tuple[0] >= 22\n+\n+    if MULTISIG_SUPPORTED:\n+        min_trusted_sigs = args.min_trusted_sigs\n+        gpg_allowed_codes = [0, 2]  # 2 is returned when untrusted signatures are present.\n+        builder_key_map = get_builder_keys(bitcoin_dir_maybe)\n+\n+        got_sums_status = get_files_from_hosts_and_compare(\n+            hosts, remote_sums_path, SUMS_FILENAME, args.require_all_hosts)\n+        if got_sums_status != ReturnCode.SUCCESS:\n+            return got_sums_status\n+\n+        gpg_retval, gpg_output, good, unknown, bad = check_multisig(\n+            SIGNATUREFILENAME, args, builder_key_map)\n+    else:\n+        # As long as GPG return codes are okay, the sig is valid for pre-22.0.\n+        min_trusted_sigs = 0\n+        gpg_allowed_codes = [0]\n+        builder_key_map = {}\n+\n+        gpg_retval, gpg_output, good, unknown, bad = check_single_sig(\n+            SIGNATUREFILENAME, args)\n+\n+    if gpg_retval not in gpg_allowed_codes:\n+        if gpg_retval == 1:\n+            log.critical(\"Bad signature.\")\n+        if gpg_retval == 2:\n+            log.critical(\n+                \"gpg error. Do you have the Bitcoin Core binary release \"\n+                \"signing key installed?\")\n+        else:\n+            log.critical(\"unexpected GPG exit code\")",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 578,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add exit code {gpg_retval}?",
      "created_at": "2021-12-09T18:04:37Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766033525",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766033525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766076167",
      "pull_request_review_id": 828027865,
      "id": 766076167,
      "node_id": "PRRC_kwDOABII584tqWUH",
      "diff_hunk": "@@ -2,29 +2,164 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Script for verifying Bitcoin Core release binaries\n-\n-This script attempts to download the signature file SHA256SUMS.asc from\n-bitcoincore.org and bitcoin.org and compares them.\n-It first checks if the signature passes, and then downloads the files\n-specified in the file, and checks if the hashes of these files match those\n-that are specified in the signature file.\n-The script returns 0 if everything passes the checks. It returns 1 if either\n-the signature check or the hash check doesn't pass. If an error occurs the\n-return value is >= 2.\n+\"\"\"Script for verifying Bitcoin Core release binaries.\n+\n+This script attempts to download the sum file SHA256SUMS and corresponding\n+signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n+compares them.\n+\n+The sum-signature file is signed by a number of builder keys. This script\n+ensures that there is a minimum threshold of signatures from pubkeys that\n+we trust. This trust is articulated on the basis of configuration options\n+here, but by default is based upon a unionof (i) local GPG trust settings,\n+and (ii) keys which appear in the builder-keys/keys.txt file.\n+\n+If a minimum good, trusted signature threshold is met on the sum file, we then\n+download the files specified in SHA256SUMS, and check if the hashes of these\n+files match those that are specified. The script returns 0 if everything passes\n+the checks. It returns 1 if either the signature check or the hash check\n+doesn't pass. If an error occurs the return value is >= 2.\n+\n+Logging output goes to stderr and final binary verification data goes to stdout.\n+\n+JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n-from hashlib import sha256\n+import argparse\n+import difflib\n+import json\n+import logging\n import os\n import subprocess\n+import typing as t\n+import re\n import sys\n-from textwrap import indent\n+import shutil\n+import tempfile\n+import textwrap\n+import urllib.request\n+import enum\n+from hashlib import sha256\n+from pathlib import Path\n \n-WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n-HASHFILE = \"hashes.tmp\"\n+# The primary host; this will fail if we can't retrieve files from here.\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n-SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+SUMS_FILENAME = 'SHA256SUMS'\n+SIGNATUREFILENAME = f\"{SUMS_FILENAME}.asc\"\n+BUILDER_KEYS_GH_URL = (\n+    \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n+)\n+\n+\n+class ReturnCode(enum.IntEnum):\n+    SUCCESS = 0\n+    INTEGRITY_FAILURE = 1\n+    FILE_GET_FAILED = 4\n+    FILE_MISSING_FROM_ONE_HOST = 5\n+    FILES_NOT_EQUAL = 6\n+    NO_BINARIES_MATCH = 7\n+    NOT_ENOUGH_GOOD_SIGS = 9\n+    BINARY_DOWNLOAD_FAILED = 10\n+\n+\n+def set_up_logger(is_verbose: bool = True) -> logging.Logger:\n+    \"\"\"Set up a logger that writes to stderr.\"\"\"\n+    log = logging.getLogger(__name__)\n+    log.setLevel(logging.INFO if is_verbose else logging.WARNING)\n+    console = logging.StreamHandler(sys.stderr)  # log to stderr\n+    console.setLevel(logging.DEBUG)\n+    formatter = logging.Formatter('[%(levelname)s] %(message)s')\n+    console.setFormatter(formatter)\n+    log.addHandler(console)\n+    return log\n+\n+\n+log = set_up_logger()\n+\n+\n+def indent(output: str) -> str:\n+    return textwrap.indent(output, '  ')\n+\n+\n+def bool_from_env(key, default=False) -> bool:\n+    if key not in os.environ:\n+        return default\n+    raw = os.environ[key]\n+    return raw in ['1', 'True', 'true']",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 103,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does not seem great if BINVERIFY_REQUIRE_ALL_HOSTS=yes is treated as false. It would be better to raise an error if value is unrecognized.\r\n\r\n```python\r\nif value.lower() in (\"1', \"true\"):\r\n    return True\r\nif value.lower() in (\"0\", \"false\"):\r\n    return False\r\nraise ValueError(f\"Unrecognized environment value {key}={value}\")\r\n```",
      "created_at": "2021-12-09T19:07:16Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766076167",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766076167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766085408",
      "pull_request_review_id": 828027865,
      "id": 766085408,
      "node_id": "PRRC_kwDOABII584tqYkg",
      "diff_hunk": "@@ -59,124 +194,457 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    # Enforce English output since we're relying on output that contains natural language.\n+    # Use string-shell form (vs. args as list) because passing LANGUAGE via `env` doesn't\n+    # seem to work.\n+    args = (\n+        'LANGUAGE=en gpg --yes --decrypt '\n+        + (f' --output {output_filename} ' if output_filename else '')\n+        + signature_filename)\n+\n+    result = subprocess.run(args, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    for i, line in enumerate(output):\n+        if 'using RSA key' in line:\n+            if curr_key:\n+                raise RuntimeError(\n+                    f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n+                    \"this could mean we have encountered a bad signature! check GPG output!\")\n+            curr_key = line.split('key ')[-1].strip()\n+            assert len(curr_key) == 40 or (len(curr_key) == 18 and curr_key.startswith('0x'))\n+\n+        if \"Can't check signature: No public key\" in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            unknown_sigs.append(SigData(curr_key, '', False, ''))\n+            curr_key = None\n+\n+        if 'Good signature from ' in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+\n+            # It's safe to index output[i + 1] because if we saw a good sig, there should\n+            # always be another line\n+            trusted = (\n+                'This key is not certified with a trusted signature' not in output[i + 1])\n+            good_sigs.append(SigData(curr_key, name, trusted, status))\n+            curr_key = None\n+\n+        if 'bad signature from' in line.lower():\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+            bad_sigs.append(SigData(curr_key, name, False, status))\n+            curr_key = None\n+\n+        # Track total signatures included\n+        if ': Signature made ' in line:\n+            total_resolved_sigs += 1\n+\n+    all_found = len(good_sigs + bad_sigs + unknown_sigs)\n+    if all_found != total_resolved_sigs:\n+        raise RuntimeError(\n+            f\"failed to evaluate all signatures: found {all_found} \"\n+            f\"but expected {total_resolved_sigs}\")\n+\n+    return (good_sigs, unknown_sigs, bad_sigs)\n+\n+\n+def parse_gpg_from_line(line: str) -> (str, str):\n+    \"\"\"Returns name and expiration status.\"\"\"\n+    assert 'signature from' in line\n+\n+    name_end = line.split(' from ')[-1]\n+    m = re.search(r'(?P<name>\".+\") \\[(?P<status>\\w+)\\]', name_end)\n+    assert m\n+    (name, status) = m.groups()\n+    name = name.strip('\"\\'')\n+\n+    return (name, status)\n+\n+\n def files_are_equal(filename1, filename2):\n     with open(filename1, 'rb') as file1:\n         contents1 = file1.read()\n     with open(filename2, 'rb') as file2:\n         contents2 = file2.read()\n-    return contents1 == contents2\n+    eq = contents1 == contents2\n \n+    if not eq:\n+        with open(filename1, 'r', encoding='utf-8') as f1, \\\n+                open(filename2, 'r', encoding='utf-8') as f2:\n+            f1lines = f1.readlines()\n+            f2lines = f2.readlines()\n \n-def verify_with_gpg(signature_filename, output_filename):\n-    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n-                             output_filename, signature_filename],\n-                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n-    return result.returncode, result.stdout.decode().rstrip()\n+            diff = indent(\n+                ''.join(difflib.unified_diff(f1lines, f2lines)))\n+            log.warning(f\"found diff in files ({filename1}, {filename2}):\\n{diff}\\n\")\n \n+    return eq\n \n-def remove_files(filenames):\n-    for filename in filenames:\n-        os.remove(filename)\n+\n+def get_files_from_hosts_and_compare(\n+    hosts: t.List[str], path: str, filename: str, require_all: bool = False\n+) -> ReturnCode:\n+    \"\"\"\n+    Retrieve the same file from a number of hosts and ensure they have the same contents.\n+    The first host given will be treated as the \"primary\" host, and is required to succeed.\n+\n+    Args:\n+        filename: for writing the file locally.\n+    \"\"\"\n+    assert len(hosts) > 1\n+    primary_host = hosts[0]\n+    other_hosts = hosts[1:]\n+    got_files = []\n+\n+    def join_url(host: str) -> str:\n+        return host.rstrip('/') + '/' + path.lstrip('/')\n+\n+    url = join_url(primary_host)\n+    success, output = download_with_wget(url, filename)\n+    if not success:\n+        log.error(\n+            f\"couldn't fetch file ({url}). \"\n+            \"Have you specified the version number in the following format?\\n\"\n+            f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n+            f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n+            f\"wget output:\\n{indent(output)}\")\n+        return ReturnCode.FILE_GET_FAILED\n+    else:\n+        log.info(f\"got file {url} as {filename}\")\n+        got_files.append(filename)\n+\n+    for i, host in enumerate(other_hosts):\n+        url = join_url(host)\n+        fname = filename + f'.{i + 2}'\n+        success, output = download_with_wget(url, fname)\n+\n+        if require_all and not success:\n+            log.error(\n+                f\"{host} failed to provide file ({url}), but {primary_host} did?\\n\"\n+                f\"wget output:\\n{indent(output)}\")\n+            return ReturnCode.FILE_MISSING_FROM_ONE_HOST\n+        elif not success:\n+            log.warning(\n+                f\"{host} failed to provide file ({url}). \"\n+                f\"Continuing based solely upon {primary_host}.\")\n+        else:\n+            log.info(f\"got file {url} as {fname}\")\n+            got_files.append(fname)\n+\n+    for i, got_file in enumerate(got_files):\n+        if got_file == got_files[-1]:\n+            break  # break on last file, nothing after it to compare to\n+\n+        compare_to = got_files[i + 1]\n+        if not files_are_equal(got_file, compare_to):\n+            log.error(f\"files not equal: {got_file} and {compare_to}\")\n+            return ReturnCode.FILES_NOT_EQUAL\n+\n+    return ReturnCode.SUCCESS\n+\n+\n+def get_builder_keys(bitcoin_dir: Path) -> t.Dict[str, str]:\n+    \"\"\"\n+    Return a map of builder key to name from a local or remote source,\n+    in that order of preference.\n+    If we have them locally, compare them to the github repo.\n+    \"\"\"\n+    local_builder_keys = []\n+    local_builder_path = bitcoin_dir / 'contrib' / 'builder-keys' / 'keys.txt'\n+    if local_builder_path.exists():\n+        local_builder_keys = local_builder_path.read_text().splitlines()\n+\n+    success, gh_builder_keys = download_lines_with_urllib(BUILDER_KEYS_GH_URL)\n+    if not success:\n+        log.warning(f\"unable to retrieve builder keys from {BUILDER_KEYS_GH_URL}\")\n+\n+    if not (success or local_builder_keys):\n+        log.error(\"unable to retrieve builder keys locally or remotely\")\n+\n+    # check the local and remote builder keys against each other and report diff\n+    if local_builder_keys and gh_builder_keys:\n+        if local_builder_keys != gh_builder_keys:\n+            diff = indent(\n+                '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)))\n+            log.warning(f\"found diff (local vs. GH) in builder keys:\\n{diff}\\n\")\n+\n+    # Prefer local builder keys to those obtained remotely.\n+    builder_keys = local_builder_keys or gh_builder_keys or []\n+\n+    builder_key_map = {}\n+    for i in builder_keys:\n+        key, name = i.split(' ', 1)\n+        builder_key_map[key] = name\n+\n+    return builder_key_map\n+\n+\n+def check_multisig(\n+    sigfilename: str, args: argparse.Namespace, builder_key_map: t.Dict[str, str]\n+):\n+    # check signature\n+    #\n+    # We don't write output to a file because this command will almost certainly\n+    # fail with GPG exit code '2' (and so not writing to --output) because of the\n+    # likely presence of multiple untrusted signatures.\n+    retval, output = verify_with_gpg(sigfilename)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    # Retrieve unknown keys that are in the repo builder list and then try GPG again.\n+    if unknown and not args.noninteractive and not args.skip_import_builders:\n+        for unsig in unknown:\n+            name = builder_key_map.get(unsig.key, '<unknown>')\n+            if input(f\" ? Retrieve key {unsig.key} for {name}? (y/N) \").lower() == \"y\":\n+                ran = subprocess.run(\n+                    f\"gpg --keyserver {args.keyserver} --recv-keys {unsig.key}\", shell=True)\n+\n+                if ran.returncode != 0:\n+                    log.warning(f\"failed to retrieve key {unsig.key} for {name}\")\n+\n+    return retval, output, good, unknown, bad\n+\n+\n+def check_single_sig(sigfilename: str, args: argparse.Namespace):\n+    retval, output = verify_with_gpg(sigfilename, SUMS_FILENAME)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    return retval, output, good, unknown, bad\n \n \n def main(args):\n-    # sanity check\n-    if len(args) < 1:\n-        print(\"Error: need to specify a version on the command line\")\n-        return 3\n+    args = parser.parse_args()\n+    if args.quiet:\n+        log.setLevel(logging.WARNING)\n+\n+    WORKINGDIR = Path(tempfile.gettempdir()) / f\"bitcoin_verify_binaries.{args.version}\"\n+\n+    def cleanup():\n+        log.info(\"cleaning up files\")\n+        os.chdir(Path.home())\n+        shutil.rmtree(WORKINGDIR)\n \n     # determine remote dir dependent on provided version string\n-    version_base, version_rc, os_filter = parse_version_string(args[0])\n+    version_base, version_rc, os_filter = parse_version_string(args.version)",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 484,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Version is the main required argument so if it isn't parsed correctly it might be good to print a helpful error like \"Version {args.version!r} can't be parsed\" instead of just printing the exception",
      "created_at": "2021-12-09T19:21:06Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766085408",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766085408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766087843",
      "pull_request_review_id": 828027865,
      "id": 766087843,
      "node_id": "PRRC_kwDOABII584tqZKj",
      "diff_hunk": "@@ -59,124 +194,457 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    # Enforce English output since we're relying on output that contains natural language.\n+    # Use string-shell form (vs. args as list) because passing LANGUAGE via `env` doesn't\n+    # seem to work.\n+    args = (\n+        'LANGUAGE=en gpg --yes --decrypt '\n+        + (f' --output {output_filename} ' if output_filename else '')\n+        + signature_filename)\n+\n+    result = subprocess.run(args, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    for i, line in enumerate(output):\n+        if 'using RSA key' in line:\n+            if curr_key:\n+                raise RuntimeError(\n+                    f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n+                    \"this could mean we have encountered a bad signature! check GPG output!\")\n+            curr_key = line.split('key ')[-1].strip()\n+            assert len(curr_key) == 40 or (len(curr_key) == 18 and curr_key.startswith('0x'))\n+\n+        if \"Can't check signature: No public key\" in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            unknown_sigs.append(SigData(curr_key, '', False, ''))\n+            curr_key = None\n+\n+        if 'Good signature from ' in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+\n+            # It's safe to index output[i + 1] because if we saw a good sig, there should\n+            # always be another line\n+            trusted = (\n+                'This key is not certified with a trusted signature' not in output[i + 1])\n+            good_sigs.append(SigData(curr_key, name, trusted, status))\n+            curr_key = None\n+\n+        if 'bad signature from' in line.lower():\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+            bad_sigs.append(SigData(curr_key, name, False, status))\n+            curr_key = None\n+\n+        # Track total signatures included\n+        if ': Signature made ' in line:\n+            total_resolved_sigs += 1\n+\n+    all_found = len(good_sigs + bad_sigs + unknown_sigs)\n+    if all_found != total_resolved_sigs:\n+        raise RuntimeError(\n+            f\"failed to evaluate all signatures: found {all_found} \"\n+            f\"but expected {total_resolved_sigs}\")\n+\n+    return (good_sigs, unknown_sigs, bad_sigs)\n+\n+\n+def parse_gpg_from_line(line: str) -> (str, str):\n+    \"\"\"Returns name and expiration status.\"\"\"\n+    assert 'signature from' in line\n+\n+    name_end = line.split(' from ')[-1]\n+    m = re.search(r'(?P<name>\".+\") \\[(?P<status>\\w+)\\]', name_end)\n+    assert m\n+    (name, status) = m.groups()\n+    name = name.strip('\"\\'')\n+\n+    return (name, status)\n+\n+\n def files_are_equal(filename1, filename2):\n     with open(filename1, 'rb') as file1:\n         contents1 = file1.read()\n     with open(filename2, 'rb') as file2:\n         contents2 = file2.read()\n-    return contents1 == contents2\n+    eq = contents1 == contents2\n \n+    if not eq:\n+        with open(filename1, 'r', encoding='utf-8') as f1, \\\n+                open(filename2, 'r', encoding='utf-8') as f2:\n+            f1lines = f1.readlines()\n+            f2lines = f2.readlines()\n \n-def verify_with_gpg(signature_filename, output_filename):\n-    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n-                             output_filename, signature_filename],\n-                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n-    return result.returncode, result.stdout.decode().rstrip()\n+            diff = indent(\n+                ''.join(difflib.unified_diff(f1lines, f2lines)))\n+            log.warning(f\"found diff in files ({filename1}, {filename2}):\\n{diff}\\n\")\n \n+    return eq\n \n-def remove_files(filenames):\n-    for filename in filenames:\n-        os.remove(filename)\n+\n+def get_files_from_hosts_and_compare(\n+    hosts: t.List[str], path: str, filename: str, require_all: bool = False\n+) -> ReturnCode:\n+    \"\"\"\n+    Retrieve the same file from a number of hosts and ensure they have the same contents.\n+    The first host given will be treated as the \"primary\" host, and is required to succeed.\n+\n+    Args:\n+        filename: for writing the file locally.\n+    \"\"\"\n+    assert len(hosts) > 1\n+    primary_host = hosts[0]\n+    other_hosts = hosts[1:]\n+    got_files = []\n+\n+    def join_url(host: str) -> str:\n+        return host.rstrip('/') + '/' + path.lstrip('/')\n+\n+    url = join_url(primary_host)\n+    success, output = download_with_wget(url, filename)\n+    if not success:\n+        log.error(\n+            f\"couldn't fetch file ({url}). \"\n+            \"Have you specified the version number in the following format?\\n\"\n+            f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n+            f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n+            f\"wget output:\\n{indent(output)}\")\n+        return ReturnCode.FILE_GET_FAILED\n+    else:\n+        log.info(f\"got file {url} as {filename}\")\n+        got_files.append(filename)\n+\n+    for i, host in enumerate(other_hosts):\n+        url = join_url(host)\n+        fname = filename + f'.{i + 2}'\n+        success, output = download_with_wget(url, fname)\n+\n+        if require_all and not success:\n+            log.error(\n+                f\"{host} failed to provide file ({url}), but {primary_host} did?\\n\"\n+                f\"wget output:\\n{indent(output)}\")\n+            return ReturnCode.FILE_MISSING_FROM_ONE_HOST\n+        elif not success:\n+            log.warning(\n+                f\"{host} failed to provide file ({url}). \"\n+                f\"Continuing based solely upon {primary_host}.\")\n+        else:\n+            log.info(f\"got file {url} as {fname}\")\n+            got_files.append(fname)\n+\n+    for i, got_file in enumerate(got_files):\n+        if got_file == got_files[-1]:\n+            break  # break on last file, nothing after it to compare to\n+\n+        compare_to = got_files[i + 1]\n+        if not files_are_equal(got_file, compare_to):\n+            log.error(f\"files not equal: {got_file} and {compare_to}\")\n+            return ReturnCode.FILES_NOT_EQUAL\n+\n+    return ReturnCode.SUCCESS\n+\n+\n+def get_builder_keys(bitcoin_dir: Path) -> t.Dict[str, str]:\n+    \"\"\"\n+    Return a map of builder key to name from a local or remote source,\n+    in that order of preference.\n+    If we have them locally, compare them to the github repo.\n+    \"\"\"\n+    local_builder_keys = []\n+    local_builder_path = bitcoin_dir / 'contrib' / 'builder-keys' / 'keys.txt'\n+    if local_builder_path.exists():\n+        local_builder_keys = local_builder_path.read_text().splitlines()\n+\n+    success, gh_builder_keys = download_lines_with_urllib(BUILDER_KEYS_GH_URL)\n+    if not success:\n+        log.warning(f\"unable to retrieve builder keys from {BUILDER_KEYS_GH_URL}\")\n+\n+    if not (success or local_builder_keys):\n+        log.error(\"unable to retrieve builder keys locally or remotely\")\n+\n+    # check the local and remote builder keys against each other and report diff\n+    if local_builder_keys and gh_builder_keys:\n+        if local_builder_keys != gh_builder_keys:\n+            diff = indent(\n+                '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)))\n+            log.warning(f\"found diff (local vs. GH) in builder keys:\\n{diff}\\n\")\n+\n+    # Prefer local builder keys to those obtained remotely.\n+    builder_keys = local_builder_keys or gh_builder_keys or []\n+\n+    builder_key_map = {}\n+    for i in builder_keys:\n+        key, name = i.split(' ', 1)\n+        builder_key_map[key] = name\n+\n+    return builder_key_map\n+\n+\n+def check_multisig(\n+    sigfilename: str, args: argparse.Namespace, builder_key_map: t.Dict[str, str]\n+):\n+    # check signature\n+    #\n+    # We don't write output to a file because this command will almost certainly\n+    # fail with GPG exit code '2' (and so not writing to --output) because of the\n+    # likely presence of multiple untrusted signatures.\n+    retval, output = verify_with_gpg(sigfilename)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    # Retrieve unknown keys that are in the repo builder list and then try GPG again.\n+    if unknown and not args.noninteractive and not args.skip_import_builders:\n+        for unsig in unknown:\n+            name = builder_key_map.get(unsig.key, '<unknown>')\n+            if input(f\" ? Retrieve key {unsig.key} for {name}? (y/N) \").lower() == \"y\":\n+                ran = subprocess.run(\n+                    f\"gpg --keyserver {args.keyserver} --recv-keys {unsig.key}\", shell=True)",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 447,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Another use of shell=True here doesn't handle spaces and special characters and would be easy to eliminate with\r\n\r\n```python\r\n[\"gpg\", \"--keyserver\", args.keyserver, \"--recv-keys\", unsig.key]\r\n```",
      "created_at": "2021-12-09T19:24:54Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766087843",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766087843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 451,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766089203",
      "pull_request_review_id": 828027865,
      "id": 766089203,
      "node_id": "PRRC_kwDOABII584tqZfz",
      "diff_hunk": "@@ -59,124 +194,457 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    # Enforce English output since we're relying on output that contains natural language.\n+    # Use string-shell form (vs. args as list) because passing LANGUAGE via `env` doesn't\n+    # seem to work.\n+    args = (\n+        'LANGUAGE=en gpg --yes --decrypt '\n+        + (f' --output {output_filename} ' if output_filename else '')\n+        + signature_filename)\n+\n+    result = subprocess.run(args, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    for i, line in enumerate(output):\n+        if 'using RSA key' in line:\n+            if curr_key:\n+                raise RuntimeError(\n+                    f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n+                    \"this could mean we have encountered a bad signature! check GPG output!\")\n+            curr_key = line.split('key ')[-1].strip()\n+            assert len(curr_key) == 40 or (len(curr_key) == 18 and curr_key.startswith('0x'))\n+\n+        if \"Can't check signature: No public key\" in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            unknown_sigs.append(SigData(curr_key, '', False, ''))\n+            curr_key = None\n+\n+        if 'Good signature from ' in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+\n+            # It's safe to index output[i + 1] because if we saw a good sig, there should\n+            # always be another line\n+            trusted = (\n+                'This key is not certified with a trusted signature' not in output[i + 1])\n+            good_sigs.append(SigData(curr_key, name, trusted, status))\n+            curr_key = None\n+\n+        if 'bad signature from' in line.lower():\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+            bad_sigs.append(SigData(curr_key, name, False, status))\n+            curr_key = None\n+\n+        # Track total signatures included\n+        if ': Signature made ' in line:\n+            total_resolved_sigs += 1\n+\n+    all_found = len(good_sigs + bad_sigs + unknown_sigs)\n+    if all_found != total_resolved_sigs:\n+        raise RuntimeError(\n+            f\"failed to evaluate all signatures: found {all_found} \"\n+            f\"but expected {total_resolved_sigs}\")\n+\n+    return (good_sigs, unknown_sigs, bad_sigs)\n+\n+\n+def parse_gpg_from_line(line: str) -> (str, str):\n+    \"\"\"Returns name and expiration status.\"\"\"\n+    assert 'signature from' in line\n+\n+    name_end = line.split(' from ')[-1]\n+    m = re.search(r'(?P<name>\".+\") \\[(?P<status>\\w+)\\]', name_end)\n+    assert m\n+    (name, status) = m.groups()\n+    name = name.strip('\"\\'')\n+\n+    return (name, status)\n+\n+\n def files_are_equal(filename1, filename2):\n     with open(filename1, 'rb') as file1:\n         contents1 = file1.read()\n     with open(filename2, 'rb') as file2:\n         contents2 = file2.read()\n-    return contents1 == contents2\n+    eq = contents1 == contents2\n \n+    if not eq:\n+        with open(filename1, 'r', encoding='utf-8') as f1, \\\n+                open(filename2, 'r', encoding='utf-8') as f2:\n+            f1lines = f1.readlines()\n+            f2lines = f2.readlines()\n \n-def verify_with_gpg(signature_filename, output_filename):\n-    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n-                             output_filename, signature_filename],\n-                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n-    return result.returncode, result.stdout.decode().rstrip()\n+            diff = indent(\n+                ''.join(difflib.unified_diff(f1lines, f2lines)))\n+            log.warning(f\"found diff in files ({filename1}, {filename2}):\\n{diff}\\n\")\n \n+    return eq\n \n-def remove_files(filenames):\n-    for filename in filenames:\n-        os.remove(filename)\n+\n+def get_files_from_hosts_and_compare(\n+    hosts: t.List[str], path: str, filename: str, require_all: bool = False\n+) -> ReturnCode:\n+    \"\"\"\n+    Retrieve the same file from a number of hosts and ensure they have the same contents.\n+    The first host given will be treated as the \"primary\" host, and is required to succeed.\n+\n+    Args:\n+        filename: for writing the file locally.\n+    \"\"\"\n+    assert len(hosts) > 1\n+    primary_host = hosts[0]\n+    other_hosts = hosts[1:]\n+    got_files = []\n+\n+    def join_url(host: str) -> str:\n+        return host.rstrip('/') + '/' + path.lstrip('/')\n+\n+    url = join_url(primary_host)\n+    success, output = download_with_wget(url, filename)\n+    if not success:\n+        log.error(\n+            f\"couldn't fetch file ({url}). \"\n+            \"Have you specified the version number in the following format?\\n\"\n+            f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n+            f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n+            f\"wget output:\\n{indent(output)}\")\n+        return ReturnCode.FILE_GET_FAILED\n+    else:\n+        log.info(f\"got file {url} as {filename}\")\n+        got_files.append(filename)\n+\n+    for i, host in enumerate(other_hosts):\n+        url = join_url(host)\n+        fname = filename + f'.{i + 2}'\n+        success, output = download_with_wget(url, fname)\n+\n+        if require_all and not success:\n+            log.error(\n+                f\"{host} failed to provide file ({url}), but {primary_host} did?\\n\"\n+                f\"wget output:\\n{indent(output)}\")\n+            return ReturnCode.FILE_MISSING_FROM_ONE_HOST\n+        elif not success:\n+            log.warning(\n+                f\"{host} failed to provide file ({url}). \"\n+                f\"Continuing based solely upon {primary_host}.\")\n+        else:\n+            log.info(f\"got file {url} as {fname}\")\n+            got_files.append(fname)\n+\n+    for i, got_file in enumerate(got_files):\n+        if got_file == got_files[-1]:\n+            break  # break on last file, nothing after it to compare to\n+\n+        compare_to = got_files[i + 1]\n+        if not files_are_equal(got_file, compare_to):\n+            log.error(f\"files not equal: {got_file} and {compare_to}\")\n+            return ReturnCode.FILES_NOT_EQUAL\n+\n+    return ReturnCode.SUCCESS\n+\n+\n+def get_builder_keys(bitcoin_dir: Path) -> t.Dict[str, str]:\n+    \"\"\"\n+    Return a map of builder key to name from a local or remote source,\n+    in that order of preference.\n+    If we have them locally, compare them to the github repo.\n+    \"\"\"\n+    local_builder_keys = []\n+    local_builder_path = bitcoin_dir / 'contrib' / 'builder-keys' / 'keys.txt'\n+    if local_builder_path.exists():\n+        local_builder_keys = local_builder_path.read_text().splitlines()\n+\n+    success, gh_builder_keys = download_lines_with_urllib(BUILDER_KEYS_GH_URL)\n+    if not success:\n+        log.warning(f\"unable to retrieve builder keys from {BUILDER_KEYS_GH_URL}\")\n+\n+    if not (success or local_builder_keys):\n+        log.error(\"unable to retrieve builder keys locally or remotely\")\n+\n+    # check the local and remote builder keys against each other and report diff\n+    if local_builder_keys and gh_builder_keys:\n+        if local_builder_keys != gh_builder_keys:\n+            diff = indent(\n+                '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)))\n+            log.warning(f\"found diff (local vs. GH) in builder keys:\\n{diff}\\n\")\n+\n+    # Prefer local builder keys to those obtained remotely.\n+    builder_keys = local_builder_keys or gh_builder_keys or []\n+\n+    builder_key_map = {}\n+    for i in builder_keys:\n+        key, name = i.split(' ', 1)\n+        builder_key_map[key] = name\n+\n+    return builder_key_map\n+\n+\n+def check_multisig(\n+    sigfilename: str, args: argparse.Namespace, builder_key_map: t.Dict[str, str]\n+):\n+    # check signature\n+    #\n+    # We don't write output to a file because this command will almost certainly\n+    # fail with GPG exit code '2' (and so not writing to --output) because of the\n+    # likely presence of multiple untrusted signatures.\n+    retval, output = verify_with_gpg(sigfilename)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    # Retrieve unknown keys that are in the repo builder list and then try GPG again.\n+    if unknown and not args.noninteractive and not args.skip_import_builders:\n+        for unsig in unknown:\n+            name = builder_key_map.get(unsig.key, '<unknown>')\n+            if input(f\" ? Retrieve key {unsig.key} for {name}? (y/N) \").lower() == \"y\":",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 445,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be better if this loop if an unrecognized response was given, instead of assuming a response like \"yes\" means no.",
      "created_at": "2021-12-09T19:26:46Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766089203",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766089203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 449,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766093053",
      "pull_request_review_id": 828027865,
      "id": 766093053,
      "node_id": "PRRC_kwDOABII584tqab9",
      "diff_hunk": "@@ -59,124 +194,457 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    # Enforce English output since we're relying on output that contains natural language.\n+    # Use string-shell form (vs. args as list) because passing LANGUAGE via `env` doesn't\n+    # seem to work.\n+    args = (\n+        'LANGUAGE=en gpg --yes --decrypt '\n+        + (f' --output {output_filename} ' if output_filename else '')\n+        + signature_filename)\n+\n+    result = subprocess.run(args, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    for i, line in enumerate(output):\n+        if 'using RSA key' in line:\n+            if curr_key:\n+                raise RuntimeError(\n+                    f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n+                    \"this could mean we have encountered a bad signature! check GPG output!\")\n+            curr_key = line.split('key ')[-1].strip()\n+            assert len(curr_key) == 40 or (len(curr_key) == 18 and curr_key.startswith('0x'))\n+\n+        if \"Can't check signature: No public key\" in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            unknown_sigs.append(SigData(curr_key, '', False, ''))\n+            curr_key = None\n+\n+        if 'Good signature from ' in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+\n+            # It's safe to index output[i + 1] because if we saw a good sig, there should\n+            # always be another line\n+            trusted = (\n+                'This key is not certified with a trusted signature' not in output[i + 1])\n+            good_sigs.append(SigData(curr_key, name, trusted, status))\n+            curr_key = None\n+\n+        if 'bad signature from' in line.lower():\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+            bad_sigs.append(SigData(curr_key, name, False, status))\n+            curr_key = None\n+\n+        # Track total signatures included\n+        if ': Signature made ' in line:\n+            total_resolved_sigs += 1\n+\n+    all_found = len(good_sigs + bad_sigs + unknown_sigs)\n+    if all_found != total_resolved_sigs:\n+        raise RuntimeError(\n+            f\"failed to evaluate all signatures: found {all_found} \"\n+            f\"but expected {total_resolved_sigs}\")\n+\n+    return (good_sigs, unknown_sigs, bad_sigs)\n+\n+\n+def parse_gpg_from_line(line: str) -> (str, str):\n+    \"\"\"Returns name and expiration status.\"\"\"\n+    assert 'signature from' in line\n+\n+    name_end = line.split(' from ')[-1]\n+    m = re.search(r'(?P<name>\".+\") \\[(?P<status>\\w+)\\]', name_end)\n+    assert m\n+    (name, status) = m.groups()\n+    name = name.strip('\"\\'')\n+\n+    return (name, status)\n+\n+\n def files_are_equal(filename1, filename2):\n     with open(filename1, 'rb') as file1:\n         contents1 = file1.read()\n     with open(filename2, 'rb') as file2:\n         contents2 = file2.read()\n-    return contents1 == contents2\n+    eq = contents1 == contents2\n \n+    if not eq:\n+        with open(filename1, 'r', encoding='utf-8') as f1, \\\n+                open(filename2, 'r', encoding='utf-8') as f2:\n+            f1lines = f1.readlines()\n+            f2lines = f2.readlines()\n \n-def verify_with_gpg(signature_filename, output_filename):\n-    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n-                             output_filename, signature_filename],\n-                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n-    return result.returncode, result.stdout.decode().rstrip()\n+            diff = indent(\n+                ''.join(difflib.unified_diff(f1lines, f2lines)))\n+            log.warning(f\"found diff in files ({filename1}, {filename2}):\\n{diff}\\n\")\n \n+    return eq\n \n-def remove_files(filenames):\n-    for filename in filenames:\n-        os.remove(filename)\n+\n+def get_files_from_hosts_and_compare(\n+    hosts: t.List[str], path: str, filename: str, require_all: bool = False\n+) -> ReturnCode:\n+    \"\"\"\n+    Retrieve the same file from a number of hosts and ensure they have the same contents.\n+    The first host given will be treated as the \"primary\" host, and is required to succeed.\n+\n+    Args:\n+        filename: for writing the file locally.\n+    \"\"\"\n+    assert len(hosts) > 1\n+    primary_host = hosts[0]\n+    other_hosts = hosts[1:]\n+    got_files = []\n+\n+    def join_url(host: str) -> str:\n+        return host.rstrip('/') + '/' + path.lstrip('/')\n+\n+    url = join_url(primary_host)\n+    success, output = download_with_wget(url, filename)\n+    if not success:\n+        log.error(\n+            f\"couldn't fetch file ({url}). \"\n+            \"Have you specified the version number in the following format?\\n\"\n+            f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n+            f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n+            f\"wget output:\\n{indent(output)}\")\n+        return ReturnCode.FILE_GET_FAILED\n+    else:\n+        log.info(f\"got file {url} as {filename}\")\n+        got_files.append(filename)\n+\n+    for i, host in enumerate(other_hosts):\n+        url = join_url(host)\n+        fname = filename + f'.{i + 2}'\n+        success, output = download_with_wget(url, fname)\n+\n+        if require_all and not success:\n+            log.error(\n+                f\"{host} failed to provide file ({url}), but {primary_host} did?\\n\"\n+                f\"wget output:\\n{indent(output)}\")\n+            return ReturnCode.FILE_MISSING_FROM_ONE_HOST\n+        elif not success:\n+            log.warning(\n+                f\"{host} failed to provide file ({url}). \"\n+                f\"Continuing based solely upon {primary_host}.\")\n+        else:\n+            log.info(f\"got file {url} as {fname}\")\n+            got_files.append(fname)\n+\n+    for i, got_file in enumerate(got_files):\n+        if got_file == got_files[-1]:\n+            break  # break on last file, nothing after it to compare to\n+\n+        compare_to = got_files[i + 1]\n+        if not files_are_equal(got_file, compare_to):\n+            log.error(f\"files not equal: {got_file} and {compare_to}\")\n+            return ReturnCode.FILES_NOT_EQUAL\n+\n+    return ReturnCode.SUCCESS\n+\n+\n+def get_builder_keys(bitcoin_dir: Path) -> t.Dict[str, str]:\n+    \"\"\"\n+    Return a map of builder key to name from a local or remote source,\n+    in that order of preference.\n+    If we have them locally, compare them to the github repo.\n+    \"\"\"\n+    local_builder_keys = []\n+    local_builder_path = bitcoin_dir / 'contrib' / 'builder-keys' / 'keys.txt'\n+    if local_builder_path.exists():\n+        local_builder_keys = local_builder_path.read_text().splitlines()\n+\n+    success, gh_builder_keys = download_lines_with_urllib(BUILDER_KEYS_GH_URL)\n+    if not success:\n+        log.warning(f\"unable to retrieve builder keys from {BUILDER_KEYS_GH_URL}\")\n+\n+    if not (success or local_builder_keys):\n+        log.error(\"unable to retrieve builder keys locally or remotely\")\n+\n+    # check the local and remote builder keys against each other and report diff\n+    if local_builder_keys and gh_builder_keys:\n+        if local_builder_keys != gh_builder_keys:\n+            diff = indent(\n+                '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)))\n+            log.warning(f\"found diff (local vs. GH) in builder keys:\\n{diff}\\n\")\n+\n+    # Prefer local builder keys to those obtained remotely.\n+    builder_keys = local_builder_keys or gh_builder_keys or []\n+\n+    builder_key_map = {}\n+    for i in builder_keys:\n+        key, name = i.split(' ', 1)\n+        builder_key_map[key] = name\n+\n+    return builder_key_map\n+\n+\n+def check_multisig(\n+    sigfilename: str, args: argparse.Namespace, builder_key_map: t.Dict[str, str]\n+):\n+    # check signature\n+    #\n+    # We don't write output to a file because this command will almost certainly\n+    # fail with GPG exit code '2' (and so not writing to --output) because of the\n+    # likely presence of multiple untrusted signatures.\n+    retval, output = verify_with_gpg(sigfilename)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    # Retrieve unknown keys that are in the repo builder list and then try GPG again.\n+    if unknown and not args.noninteractive and not args.skip_import_builders:\n+        for unsig in unknown:\n+            name = builder_key_map.get(unsig.key, '<unknown>')\n+            if input(f\" ? Retrieve key {unsig.key} for {name}? (y/N) \").lower() == \"y\":\n+                ran = subprocess.run(\n+                    f\"gpg --keyserver {args.keyserver} --recv-keys {unsig.key}\", shell=True)\n+\n+                if ran.returncode != 0:\n+                    log.warning(f\"failed to retrieve key {unsig.key} for {name}\")\n+\n+    return retval, output, good, unknown, bad\n+\n+\n+def check_single_sig(sigfilename: str, args: argparse.Namespace):\n+    retval, output = verify_with_gpg(sigfilename, SUMS_FILENAME)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    return retval, output, good, unknown, bad\n \n \n def main(args):\n-    # sanity check\n-    if len(args) < 1:\n-        print(\"Error: need to specify a version on the command line\")\n-        return 3\n+    args = parser.parse_args()\n+    if args.quiet:\n+        log.setLevel(logging.WARNING)\n+\n+    WORKINGDIR = Path(tempfile.gettempdir()) / f\"bitcoin_verify_binaries.{args.version}\"\n+\n+    def cleanup():\n+        log.info(\"cleaning up files\")\n+        os.chdir(Path.home())\n+        shutil.rmtree(WORKINGDIR)\n \n     # determine remote dir dependent on provided version string\n-    version_base, version_rc, os_filter = parse_version_string(args[0])\n+    version_base, version_rc, os_filter = parse_version_string(args.version)\n     remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n     if version_rc:\n         remote_dir += f\"test.{version_rc}/\"\n-    remote_sigfile = remote_dir + SIGNATUREFILENAME\n+    remote_sigs_path = remote_dir + SIGNATUREFILENAME\n+    remote_sums_path = remote_dir + SUMS_FILENAME\n \n+    bitcoin_dir_maybe = Path(args.bitcoin_src_path) if args.bitcoin_src_path else Path.cwd()\n     # create working directory\n     os.makedirs(WORKINGDIR, exist_ok=True)\n     os.chdir(WORKINGDIR)\n \n-    # fetch first signature file\n-    sigfile1 = SIGNATUREFILENAME\n-    success, output = download_with_wget(HOST1 + remote_sigfile, sigfile1)\n-    if not success:\n-        print(\"Error: couldn't fetch signature file. \"\n-              \"Have you specified the version number in the following format?\")\n-        print(f\"[{VERSIONPREFIX}]<version>[-rc[0-9]][-platform] \"\n-              f\"(example: {VERSIONPREFIX}0.21.0-rc3-osx)\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n-        return 4\n-\n-    # fetch second signature file\n-    sigfile2 = SIGNATUREFILENAME + \".2\"\n-    success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n-    if not success:\n-        print(\"bitcoin.org failed to provide signature file, \"\n-              \"but bitcoincore.org did?\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n-        remove_files([sigfile1])\n-        return 5\n-\n-    # ensure that both signature files are equal\n-    if not files_are_equal(sigfile1, sigfile2):\n-        print(\"bitcoin.org and bitcoincore.org signature files were not equal?\")\n-        print(f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n-        return 6\n-\n-    # check signature and extract data into file\n-    retval, output = verify_with_gpg(sigfile1, HASHFILE)\n-    if retval != 0:\n-        if retval == 1:\n-            print(\"Bad signature.\")\n-        elif retval == 2:\n-            print(\"gpg error. Do you have the Bitcoin Core binary release \"\n-                  \"signing key installed?\")\n-        print(\"gpg output:\")\n-        print(indent(output, '\\t'))\n-        remove_files([sigfile1, sigfile2, HASHFILE])\n-        return 1\n+    version_tuple = [int(i) for i in version_base.split('.')]\n+    hosts = [HOST1, HOST2]\n+\n+    got_sig_status = get_files_from_hosts_and_compare(\n+        hosts, remote_sigs_path, SIGNATUREFILENAME, args.require_all_hosts)\n+    if got_sig_status != ReturnCode.SUCCESS:\n+        return got_sig_status\n+\n+    # Multi-sig verification is available after 22.0.\n+    MULTISIG_SUPPORTED = version_tuple[0] >= 22\n+\n+    if MULTISIG_SUPPORTED:\n+        min_trusted_sigs = args.min_trusted_sigs\n+        gpg_allowed_codes = [0, 2]  # 2 is returned when untrusted signatures are present.\n+        builder_key_map = get_builder_keys(bitcoin_dir_maybe)\n+\n+        got_sums_status = get_files_from_hosts_and_compare(\n+            hosts, remote_sums_path, SUMS_FILENAME, args.require_all_hosts)\n+        if got_sums_status != ReturnCode.SUCCESS:\n+            return got_sums_status\n+\n+        gpg_retval, gpg_output, good, unknown, bad = check_multisig(\n+            SIGNATUREFILENAME, args, builder_key_map)\n+    else:\n+        # As long as GPG return codes are okay, the sig is valid for pre-22.0.\n+        min_trusted_sigs = 0\n+        gpg_allowed_codes = [0]\n+        builder_key_map = {}\n+\n+        gpg_retval, gpg_output, good, unknown, bad = check_single_sig(\n+            SIGNATUREFILENAME, args)\n+\n+    if gpg_retval not in gpg_allowed_codes:\n+        if gpg_retval == 1:\n+            log.critical(\"Bad signature.\")\n+        if gpg_retval == 2:\n+            log.critical(\n+                \"gpg error. Do you have the Bitcoin Core binary release \"\n+                \"signing key installed?\")\n+        else:\n+            log.critical(\"unexpected GPG exit code\")\n+\n+        log.error(f\"gpg output:\\n{indent(gpg_output)}\")\n+        cleanup()\n+        return ReturnCode.INTEGRITY_FAILURE\n+\n+    # Decide which keys we trust, though not \"trust\" in the GPG sense, but rather\n+    # which pubkeys convince us that this sums file is legitimate. In other words,\n+    # which pubkeys within the Bitcoin community do we trust for the purposes of\n+    # binary verification?\n+    trusted_keys = set()\n+    if not args.no_builder_keys:\n+        trusted_keys |= set(builder_key_map.keys())\n+    if args.trusted_keys:\n+        trusted_keys |= set(args.trusted_keys.split(','))\n+\n+    # Tally signatures and make sure we have enough good, trusted to fulfill\n+    # our threshold.\n+    good_trusted = {sig for sig in good if sig.trusted or sig.key in trusted_keys}\n+    good_untrusted = [sig for sig in good if sig not in good_trusted]\n+    num_trusted = len(good_trusted)\n+    log.info(f\"got {num_trusted} good, trusted signatures\")\n+\n+    if num_trusted < min_trusted_sigs:\n+        log.error(\n+            \"not enough trusted sigs to meet threshold \"\n+            f\"({num_trusted} vs. {min_trusted_sigs})\")\n+        return ReturnCode.NOT_ENOUGH_GOOD_SIGS\n+\n+    for sig in good_trusted:\n+        log.info(f\"GOOD SIGNATURE: {sig}\")\n+\n+    for sig in good_untrusted:\n+        log.info(f\"GOOD SIGNATURE (untrusted): {sig}\")\n+\n+    for sig in [sig for sig in good if sig.status == 'expired']:\n+        log.warning(f\"key {sig.key} for {sig.name} is expired\")\n+\n+    for sig in bad:\n+        log.warning(f\"BAD SIGNATURE: {sig}\")\n+\n+    for sig in unknown:\n+        log.warning(f\"UNKNOWN SIGNATURE: {sig}\")",
      "path": "contrib/verifybinaries/verify.py",
      "position": 601,
      "original_position": 620,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This `main()` function has a lot of verification logic mixed in with a lot of printing code like this. Would be good to move informational parts of `main()` to separate `print_signature_info` or similar functions, so it's easy for someone trying to see how verification works to see what this is doing.",
      "created_at": "2021-12-09T19:32:06Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766093053",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766093053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": 525,
      "original_start_line": 564,
      "start_side": "RIGHT",
      "line": 538,
      "original_line": 538,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766105083",
      "pull_request_review_id": 828027865,
      "id": 766105083,
      "node_id": "PRRC_kwDOABII584tqdX7",
      "diff_hunk": "@@ -59,124 +194,457 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    # Enforce English output since we're relying on output that contains natural language.\n+    # Use string-shell form (vs. args as list) because passing LANGUAGE via `env` doesn't\n+    # seem to work.\n+    args = (\n+        'LANGUAGE=en gpg --yes --decrypt '\n+        + (f' --output {output_filename} ' if output_filename else '')\n+        + signature_filename)\n+\n+    result = subprocess.run(args, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    for i, line in enumerate(output):\n+        if 'using RSA key' in line:\n+            if curr_key:\n+                raise RuntimeError(\n+                    f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n+                    \"this could mean we have encountered a bad signature! check GPG output!\")\n+            curr_key = line.split('key ')[-1].strip()\n+            assert len(curr_key) == 40 or (len(curr_key) == 18 and curr_key.startswith('0x'))\n+\n+        if \"Can't check signature: No public key\" in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            unknown_sigs.append(SigData(curr_key, '', False, ''))\n+            curr_key = None\n+\n+        if 'Good signature from ' in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+\n+            # It's safe to index output[i + 1] because if we saw a good sig, there should\n+            # always be another line\n+            trusted = (\n+                'This key is not certified with a trusted signature' not in output[i + 1])\n+            good_sigs.append(SigData(curr_key, name, trusted, status))\n+            curr_key = None\n+\n+        if 'bad signature from' in line.lower():\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+            bad_sigs.append(SigData(curr_key, name, False, status))\n+            curr_key = None\n+\n+        # Track total signatures included\n+        if ': Signature made ' in line:\n+            total_resolved_sigs += 1\n+\n+    all_found = len(good_sigs + bad_sigs + unknown_sigs)\n+    if all_found != total_resolved_sigs:\n+        raise RuntimeError(\n+            f\"failed to evaluate all signatures: found {all_found} \"\n+            f\"but expected {total_resolved_sigs}\")\n+\n+    return (good_sigs, unknown_sigs, bad_sigs)\n+\n+\n+def parse_gpg_from_line(line: str) -> (str, str):\n+    \"\"\"Returns name and expiration status.\"\"\"\n+    assert 'signature from' in line\n+\n+    name_end = line.split(' from ')[-1]\n+    m = re.search(r'(?P<name>\".+\") \\[(?P<status>\\w+)\\]', name_end)\n+    assert m\n+    (name, status) = m.groups()\n+    name = name.strip('\"\\'')\n+\n+    return (name, status)\n+\n+\n def files_are_equal(filename1, filename2):\n     with open(filename1, 'rb') as file1:\n         contents1 = file1.read()\n     with open(filename2, 'rb') as file2:\n         contents2 = file2.read()\n-    return contents1 == contents2\n+    eq = contents1 == contents2\n \n+    if not eq:\n+        with open(filename1, 'r', encoding='utf-8') as f1, \\\n+                open(filename2, 'r', encoding='utf-8') as f2:\n+            f1lines = f1.readlines()\n+            f2lines = f2.readlines()\n \n-def verify_with_gpg(signature_filename, output_filename):\n-    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n-                             output_filename, signature_filename],\n-                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n-    return result.returncode, result.stdout.decode().rstrip()\n+            diff = indent(\n+                ''.join(difflib.unified_diff(f1lines, f2lines)))\n+            log.warning(f\"found diff in files ({filename1}, {filename2}):\\n{diff}\\n\")\n \n+    return eq\n \n-def remove_files(filenames):\n-    for filename in filenames:\n-        os.remove(filename)\n+\n+def get_files_from_hosts_and_compare(\n+    hosts: t.List[str], path: str, filename: str, require_all: bool = False\n+) -> ReturnCode:\n+    \"\"\"\n+    Retrieve the same file from a number of hosts and ensure they have the same contents.\n+    The first host given will be treated as the \"primary\" host, and is required to succeed.\n+\n+    Args:\n+        filename: for writing the file locally.\n+    \"\"\"\n+    assert len(hosts) > 1\n+    primary_host = hosts[0]\n+    other_hosts = hosts[1:]\n+    got_files = []\n+\n+    def join_url(host: str) -> str:\n+        return host.rstrip('/') + '/' + path.lstrip('/')\n+\n+    url = join_url(primary_host)\n+    success, output = download_with_wget(url, filename)\n+    if not success:\n+        log.error(\n+            f\"couldn't fetch file ({url}). \"\n+            \"Have you specified the version number in the following format?\\n\"\n+            f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n+            f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n+            f\"wget output:\\n{indent(output)}\")\n+        return ReturnCode.FILE_GET_FAILED\n+    else:\n+        log.info(f\"got file {url} as {filename}\")\n+        got_files.append(filename)\n+\n+    for i, host in enumerate(other_hosts):\n+        url = join_url(host)\n+        fname = filename + f'.{i + 2}'\n+        success, output = download_with_wget(url, fname)\n+\n+        if require_all and not success:\n+            log.error(\n+                f\"{host} failed to provide file ({url}), but {primary_host} did?\\n\"\n+                f\"wget output:\\n{indent(output)}\")\n+            return ReturnCode.FILE_MISSING_FROM_ONE_HOST\n+        elif not success:\n+            log.warning(\n+                f\"{host} failed to provide file ({url}). \"\n+                f\"Continuing based solely upon {primary_host}.\")\n+        else:\n+            log.info(f\"got file {url} as {fname}\")\n+            got_files.append(fname)\n+\n+    for i, got_file in enumerate(got_files):\n+        if got_file == got_files[-1]:\n+            break  # break on last file, nothing after it to compare to\n+\n+        compare_to = got_files[i + 1]\n+        if not files_are_equal(got_file, compare_to):\n+            log.error(f\"files not equal: {got_file} and {compare_to}\")\n+            return ReturnCode.FILES_NOT_EQUAL\n+\n+    return ReturnCode.SUCCESS\n+\n+\n+def get_builder_keys(bitcoin_dir: Path) -> t.Dict[str, str]:\n+    \"\"\"\n+    Return a map of builder key to name from a local or remote source,\n+    in that order of preference.\n+    If we have them locally, compare them to the github repo.\n+    \"\"\"\n+    local_builder_keys = []\n+    local_builder_path = bitcoin_dir / 'contrib' / 'builder-keys' / 'keys.txt'\n+    if local_builder_path.exists():\n+        local_builder_keys = local_builder_path.read_text().splitlines()\n+\n+    success, gh_builder_keys = download_lines_with_urllib(BUILDER_KEYS_GH_URL)\n+    if not success:\n+        log.warning(f\"unable to retrieve builder keys from {BUILDER_KEYS_GH_URL}\")\n+\n+    if not (success or local_builder_keys):\n+        log.error(\"unable to retrieve builder keys locally or remotely\")\n+\n+    # check the local and remote builder keys against each other and report diff\n+    if local_builder_keys and gh_builder_keys:\n+        if local_builder_keys != gh_builder_keys:\n+            diff = indent(\n+                '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)))\n+            log.warning(f\"found diff (local vs. GH) in builder keys:\\n{diff}\\n\")\n+\n+    # Prefer local builder keys to those obtained remotely.\n+    builder_keys = local_builder_keys or gh_builder_keys or []\n+\n+    builder_key_map = {}\n+    for i in builder_keys:\n+        key, name = i.split(' ', 1)\n+        builder_key_map[key] = name\n+\n+    return builder_key_map\n+\n+\n+def check_multisig(\n+    sigfilename: str, args: argparse.Namespace, builder_key_map: t.Dict[str, str]\n+):\n+    # check signature\n+    #\n+    # We don't write output to a file because this command will almost certainly\n+    # fail with GPG exit code '2' (and so not writing to --output) because of the\n+    # likely presence of multiple untrusted signatures.\n+    retval, output = verify_with_gpg(sigfilename)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    # Retrieve unknown keys that are in the repo builder list and then try GPG again.\n+    if unknown and not args.noninteractive and not args.skip_import_builders:\n+        for unsig in unknown:\n+            name = builder_key_map.get(unsig.key, '<unknown>')\n+            if input(f\" ? Retrieve key {unsig.key} for {name}? (y/N) \").lower() == \"y\":\n+                ran = subprocess.run(\n+                    f\"gpg --keyserver {args.keyserver} --recv-keys {unsig.key}\", shell=True)\n+\n+                if ran.returncode != 0:\n+                    log.warning(f\"failed to retrieve key {unsig.key} for {name}\")\n+\n+    return retval, output, good, unknown, bad\n+\n+\n+def check_single_sig(sigfilename: str, args: argparse.Namespace):\n+    retval, output = verify_with_gpg(sigfilename, SUMS_FILENAME)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    return retval, output, good, unknown, bad\n \n \n def main(args):\n-    # sanity check\n-    if len(args) < 1:\n-        print(\"Error: need to specify a version on the command line\")\n-        return 3\n+    args = parser.parse_args()\n+    if args.quiet:\n+        log.setLevel(logging.WARNING)\n+\n+    WORKINGDIR = Path(tempfile.gettempdir()) / f\"bitcoin_verify_binaries.{args.version}\"\n+\n+    def cleanup():\n+        log.info(\"cleaning up files\")\n+        os.chdir(Path.home())\n+        shutil.rmtree(WORKINGDIR)\n \n     # determine remote dir dependent on provided version string\n-    version_base, version_rc, os_filter = parse_version_string(args[0])\n+    version_base, version_rc, os_filter = parse_version_string(args.version)\n     remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n     if version_rc:\n         remote_dir += f\"test.{version_rc}/\"\n-    remote_sigfile = remote_dir + SIGNATUREFILENAME\n+    remote_sigs_path = remote_dir + SIGNATUREFILENAME\n+    remote_sums_path = remote_dir + SUMS_FILENAME\n \n+    bitcoin_dir_maybe = Path(args.bitcoin_src_path) if args.bitcoin_src_path else Path.cwd()",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 492,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Instead of making behavior depend on directory where script was called from, I think it would be more stable to use the script location like:\r\n\r\n```python\r\nlocal_keys = (Path(args.bitcoin_src_path) / 'contrib' if args.bitcoin_src_path else\r\n              Path(__file__).resolve().parent.parent) / 'builder-keys' / 'keys.txt'\r\n```\r\n",
      "created_at": "2021-12-09T19:49:46Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766105083",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766105083"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 490,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766119564",
      "pull_request_review_id": 828027865,
      "id": 766119564,
      "node_id": "PRRC_kwDOABII584tqg6M",
      "diff_hunk": "@@ -2,29 +2,164 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Script for verifying Bitcoin Core release binaries\n-\n-This script attempts to download the signature file SHA256SUMS.asc from\n-bitcoincore.org and bitcoin.org and compares them.\n-It first checks if the signature passes, and then downloads the files\n-specified in the file, and checks if the hashes of these files match those\n-that are specified in the signature file.\n-The script returns 0 if everything passes the checks. It returns 1 if either\n-the signature check or the hash check doesn't pass. If an error occurs the\n-return value is >= 2.\n+\"\"\"Script for verifying Bitcoin Core release binaries.\n+\n+This script attempts to download the sum file SHA256SUMS and corresponding\n+signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n+compares them.\n+\n+The sum-signature file is signed by a number of builder keys. This script\n+ensures that there is a minimum threshold of signatures from pubkeys that\n+we trust. This trust is articulated on the basis of configuration options\n+here, but by default is based upon a unionof (i) local GPG trust settings,\n+and (ii) keys which appear in the builder-keys/keys.txt file.\n+\n+If a minimum good, trusted signature threshold is met on the sum file, we then\n+download the files specified in SHA256SUMS, and check if the hashes of these\n+files match those that are specified. The script returns 0 if everything passes\n+the checks. It returns 1 if either the signature check or the hash check\n+doesn't pass. If an error occurs the return value is >= 2.\n+\n+Logging output goes to stderr and final binary verification data goes to stdout.\n+\n+JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n-from hashlib import sha256\n+import argparse\n+import difflib\n+import json\n+import logging\n import os\n import subprocess\n+import typing as t\n+import re\n import sys\n-from textwrap import indent\n+import shutil\n+import tempfile\n+import textwrap\n+import urllib.request\n+import enum\n+from hashlib import sha256\n+from pathlib import Path\n \n-WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n-HASHFILE = \"hashes.tmp\"\n+# The primary host; this will fail if we can't retrieve files from here.\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n-SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+SUMS_FILENAME = 'SHA256SUMS'\n+SIGNATUREFILENAME = f\"{SUMS_FILENAME}.asc\"\n+BUILDER_KEYS_GH_URL = (\n+    \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n+)\n+\n+\n+class ReturnCode(enum.IntEnum):\n+    SUCCESS = 0\n+    INTEGRITY_FAILURE = 1\n+    FILE_GET_FAILED = 4\n+    FILE_MISSING_FROM_ONE_HOST = 5\n+    FILES_NOT_EQUAL = 6\n+    NO_BINARIES_MATCH = 7\n+    NOT_ENOUGH_GOOD_SIGS = 9\n+    BINARY_DOWNLOAD_FAILED = 10\n+\n+\n+def set_up_logger(is_verbose: bool = True) -> logging.Logger:\n+    \"\"\"Set up a logger that writes to stderr.\"\"\"\n+    log = logging.getLogger(__name__)\n+    log.setLevel(logging.INFO if is_verbose else logging.WARNING)\n+    console = logging.StreamHandler(sys.stderr)  # log to stderr\n+    console.setLevel(logging.DEBUG)\n+    formatter = logging.Formatter('[%(levelname)s] %(message)s')\n+    console.setFormatter(formatter)\n+    log.addHandler(console)\n+    return log\n+\n+\n+log = set_up_logger()\n+\n+\n+def indent(output: str) -> str:\n+    return textwrap.indent(output, '  ')\n+\n+\n+def bool_from_env(key, default=False) -> bool:\n+    if key not in os.environ:\n+        return default\n+    raw = os.environ[key]\n+    return raw in ['1', 'True', 'true']\n+\n+\n+VERSION_FORMAT = \"<major>.<minor>[.<patch>][-rc[0-9]][-platform]\"\n+VERSION_EXAMPLE = \"22.0-x86_64 or 0.21.0-rc2-osx\"\n+\n+parser = argparse.ArgumentParser(description=__doc__)\n+parser.add_argument(\n+    'version', type=str, help=(\n+        f'version of the bitcoin release to download; of the format '\n+        f'{VERSION_FORMAT}. Example: {VERSION_EXAMPLE}')\n+)\n+parser.add_argument(\n+    '-v', '--verbose', action='store_true',\n+    default=bool_from_env('BINVERIFY_VERBOSE'),\n+)\n+parser.add_argument(\n+    '-q', '--quiet', action='store_true',\n+    default=bool_from_env('BINVERIFY_QUIET'),\n+)\n+parser.add_argument(\n+    '--cleanup', action='store_true',\n+    default=bool_from_env('BINVERIFY_CLEANUP'),\n+    help='if specified, clean up files afterwards'\n+)\n+parser.add_argument(\n+    '--noninteractive', action='store_true',\n+    default=bool_from_env('BINVERIFY_NONINTERACTIVE'),\n+    help='if specified, do not block for user input'\n+)\n+parser.add_argument(\n+    '--require-all-hosts', action='store_true',\n+    default=bool_from_env('BINVERIFY_REQUIRE_ALL_HOSTS'),\n+    help=(\n+        f'If set, require all hosts ({HOST1}, {HOST2}) to provide signatures. '\n+        '(Sometimes bitcoin.org lags behind bitcoincore.org.)')\n+)\n+parser.add_argument(\n+    '--bitcoin-src-path', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_BITCOIN_SRC_PATH', ''),\n+    help='specify path to bitcoin repository. Used to find builder keys.',\n+)\n+parser.add_argument(\n+    '--skip-import-builders', action='store_true',\n+    default=bool_from_env('BINVERIFY_SKIP_IMPORT_BUILDERS'),\n+    help='If set, do not prompt to import builder pubkeys',\n+)",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 149,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This optiony seems awkard currently and not useful. Would suggest dropping or replacing with a '--import-builder-keys' bool option.\r\n\r\nRight now this option is redundant and does the exact same thing as --noninteractive. It's also indirect, choosing whether or not to prompt about receiving keys, instead of just choosing whether or not to receive keys.\r\n\r\nI think it would be better have a plain `--import-builder-keys` option (defaulting to false) that would provide a way to import keys with `--noninteractive`, and confirm before importing each key without `--noninteractive`",
      "created_at": "2021-12-09T20:11:20Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766119564",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766119564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": 131,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766123661",
      "pull_request_review_id": 828027865,
      "id": 766123661,
      "node_id": "PRRC_kwDOABII584tqh6N",
      "diff_hunk": "@@ -2,29 +2,164 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Script for verifying Bitcoin Core release binaries\n-\n-This script attempts to download the signature file SHA256SUMS.asc from\n-bitcoincore.org and bitcoin.org and compares them.\n-It first checks if the signature passes, and then downloads the files\n-specified in the file, and checks if the hashes of these files match those\n-that are specified in the signature file.\n-The script returns 0 if everything passes the checks. It returns 1 if either\n-the signature check or the hash check doesn't pass. If an error occurs the\n-return value is >= 2.\n+\"\"\"Script for verifying Bitcoin Core release binaries.\n+\n+This script attempts to download the sum file SHA256SUMS and corresponding\n+signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n+compares them.\n+\n+The sum-signature file is signed by a number of builder keys. This script\n+ensures that there is a minimum threshold of signatures from pubkeys that\n+we trust. This trust is articulated on the basis of configuration options\n+here, but by default is based upon a unionof (i) local GPG trust settings,\n+and (ii) keys which appear in the builder-keys/keys.txt file.\n+\n+If a minimum good, trusted signature threshold is met on the sum file, we then\n+download the files specified in SHA256SUMS, and check if the hashes of these\n+files match those that are specified. The script returns 0 if everything passes\n+the checks. It returns 1 if either the signature check or the hash check\n+doesn't pass. If an error occurs the return value is >= 2.\n+\n+Logging output goes to stderr and final binary verification data goes to stdout.\n+\n+JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n-from hashlib import sha256\n+import argparse\n+import difflib\n+import json\n+import logging\n import os\n import subprocess\n+import typing as t\n+import re\n import sys\n-from textwrap import indent\n+import shutil\n+import tempfile\n+import textwrap\n+import urllib.request\n+import enum\n+from hashlib import sha256\n+from pathlib import Path\n \n-WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n-HASHFILE = \"hashes.tmp\"\n+# The primary host; this will fail if we can't retrieve files from here.\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n-SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+SUMS_FILENAME = 'SHA256SUMS'\n+SIGNATUREFILENAME = f\"{SUMS_FILENAME}.asc\"\n+BUILDER_KEYS_GH_URL = (\n+    \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n+)\n+\n+\n+class ReturnCode(enum.IntEnum):\n+    SUCCESS = 0\n+    INTEGRITY_FAILURE = 1\n+    FILE_GET_FAILED = 4\n+    FILE_MISSING_FROM_ONE_HOST = 5\n+    FILES_NOT_EQUAL = 6\n+    NO_BINARIES_MATCH = 7\n+    NOT_ENOUGH_GOOD_SIGS = 9\n+    BINARY_DOWNLOAD_FAILED = 10\n+\n+\n+def set_up_logger(is_verbose: bool = True) -> logging.Logger:\n+    \"\"\"Set up a logger that writes to stderr.\"\"\"\n+    log = logging.getLogger(__name__)\n+    log.setLevel(logging.INFO if is_verbose else logging.WARNING)\n+    console = logging.StreamHandler(sys.stderr)  # log to stderr\n+    console.setLevel(logging.DEBUG)\n+    formatter = logging.Formatter('[%(levelname)s] %(message)s')\n+    console.setFormatter(formatter)\n+    log.addHandler(console)\n+    return log\n+\n+\n+log = set_up_logger()\n+\n+\n+def indent(output: str) -> str:\n+    return textwrap.indent(output, '  ')\n+\n+\n+def bool_from_env(key, default=False) -> bool:\n+    if key not in os.environ:\n+        return default\n+    raw = os.environ[key]\n+    return raw in ['1', 'True', 'true']\n+\n+\n+VERSION_FORMAT = \"<major>.<minor>[.<patch>][-rc[0-9]][-platform]\"\n+VERSION_EXAMPLE = \"22.0-x86_64 or 0.21.0-rc2-osx\"\n+\n+parser = argparse.ArgumentParser(description=__doc__)\n+parser.add_argument(\n+    'version', type=str, help=(\n+        f'version of the bitcoin release to download; of the format '\n+        f'{VERSION_FORMAT}. Example: {VERSION_EXAMPLE}')\n+)\n+parser.add_argument(\n+    '-v', '--verbose', action='store_true',\n+    default=bool_from_env('BINVERIFY_VERBOSE'),\n+)\n+parser.add_argument(\n+    '-q', '--quiet', action='store_true',\n+    default=bool_from_env('BINVERIFY_QUIET'),\n+)\n+parser.add_argument(\n+    '--cleanup', action='store_true',\n+    default=bool_from_env('BINVERIFY_CLEANUP'),\n+    help='if specified, clean up files afterwards'\n+)\n+parser.add_argument(\n+    '--noninteractive', action='store_true',\n+    default=bool_from_env('BINVERIFY_NONINTERACTIVE'),\n+    help='if specified, do not block for user input'\n+)\n+parser.add_argument(\n+    '--require-all-hosts', action='store_true',\n+    default=bool_from_env('BINVERIFY_REQUIRE_ALL_HOSTS'),\n+    help=(\n+        f'If set, require all hosts ({HOST1}, {HOST2}) to provide signatures. '\n+        '(Sometimes bitcoin.org lags behind bitcoincore.org.)')\n+)\n+parser.add_argument(\n+    '--bitcoin-src-path', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_BITCOIN_SRC_PATH', ''),\n+    help='specify path to bitcoin repository. Used to find builder keys.',\n+)\n+parser.add_argument(\n+    '--skip-import-builders', action='store_true',\n+    default=bool_from_env('BINVERIFY_SKIP_IMPORT_BUILDERS'),\n+    help='If set, do not prompt to import builder pubkeys',\n+)\n+parser.add_argument(\n+    '--min-trusted-sigs', type=int, action='store', nargs='?',\n+    default=int(os.environ.get('BINVERIFY_MIN_TRUSTED_SIGS', 4)),\n+    help=(\n+        'The minimum number of good signatures from recognized keys to '\n+        'require successful termination.'),",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 155,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be good to say this option is ignored when verifying older releases with only one signature.",
      "created_at": "2021-12-09T20:16:57Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766123661",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766123661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766126255",
      "pull_request_review_id": 828027865,
      "id": 766126255,
      "node_id": "PRRC_kwDOABII584tqiiv",
      "diff_hunk": "@@ -2,29 +2,164 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Script for verifying Bitcoin Core release binaries\n-\n-This script attempts to download the signature file SHA256SUMS.asc from\n-bitcoincore.org and bitcoin.org and compares them.\n-It first checks if the signature passes, and then downloads the files\n-specified in the file, and checks if the hashes of these files match those\n-that are specified in the signature file.\n-The script returns 0 if everything passes the checks. It returns 1 if either\n-the signature check or the hash check doesn't pass. If an error occurs the\n-return value is >= 2.\n+\"\"\"Script for verifying Bitcoin Core release binaries.\n+\n+This script attempts to download the sum file SHA256SUMS and corresponding\n+signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n+compares them.\n+\n+The sum-signature file is signed by a number of builder keys. This script\n+ensures that there is a minimum threshold of signatures from pubkeys that\n+we trust. This trust is articulated on the basis of configuration options\n+here, but by default is based upon a unionof (i) local GPG trust settings,\n+and (ii) keys which appear in the builder-keys/keys.txt file.\n+\n+If a minimum good, trusted signature threshold is met on the sum file, we then\n+download the files specified in SHA256SUMS, and check if the hashes of these\n+files match those that are specified. The script returns 0 if everything passes\n+the checks. It returns 1 if either the signature check or the hash check\n+doesn't pass. If an error occurs the return value is >= 2.\n+\n+Logging output goes to stderr and final binary verification data goes to stdout.\n+\n+JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n-from hashlib import sha256\n+import argparse\n+import difflib\n+import json\n+import logging\n import os\n import subprocess\n+import typing as t\n+import re\n import sys\n-from textwrap import indent\n+import shutil\n+import tempfile\n+import textwrap\n+import urllib.request\n+import enum\n+from hashlib import sha256\n+from pathlib import Path\n \n-WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n-HASHFILE = \"hashes.tmp\"\n+# The primary host; this will fail if we can't retrieve files from here.\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n-SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+SUMS_FILENAME = 'SHA256SUMS'\n+SIGNATUREFILENAME = f\"{SUMS_FILENAME}.asc\"\n+BUILDER_KEYS_GH_URL = (\n+    \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n+)\n+\n+\n+class ReturnCode(enum.IntEnum):\n+    SUCCESS = 0\n+    INTEGRITY_FAILURE = 1\n+    FILE_GET_FAILED = 4\n+    FILE_MISSING_FROM_ONE_HOST = 5\n+    FILES_NOT_EQUAL = 6\n+    NO_BINARIES_MATCH = 7\n+    NOT_ENOUGH_GOOD_SIGS = 9\n+    BINARY_DOWNLOAD_FAILED = 10\n+\n+\n+def set_up_logger(is_verbose: bool = True) -> logging.Logger:\n+    \"\"\"Set up a logger that writes to stderr.\"\"\"\n+    log = logging.getLogger(__name__)\n+    log.setLevel(logging.INFO if is_verbose else logging.WARNING)\n+    console = logging.StreamHandler(sys.stderr)  # log to stderr\n+    console.setLevel(logging.DEBUG)\n+    formatter = logging.Formatter('[%(levelname)s] %(message)s')\n+    console.setFormatter(formatter)\n+    log.addHandler(console)\n+    return log\n+\n+\n+log = set_up_logger()\n+\n+\n+def indent(output: str) -> str:\n+    return textwrap.indent(output, '  ')\n+\n+\n+def bool_from_env(key, default=False) -> bool:\n+    if key not in os.environ:\n+        return default\n+    raw = os.environ[key]\n+    return raw in ['1', 'True', 'true']\n+\n+\n+VERSION_FORMAT = \"<major>.<minor>[.<patch>][-rc[0-9]][-platform]\"\n+VERSION_EXAMPLE = \"22.0-x86_64 or 0.21.0-rc2-osx\"\n+\n+parser = argparse.ArgumentParser(description=__doc__)\n+parser.add_argument(\n+    'version', type=str, help=(\n+        f'version of the bitcoin release to download; of the format '\n+        f'{VERSION_FORMAT}. Example: {VERSION_EXAMPLE}')\n+)\n+parser.add_argument(\n+    '-v', '--verbose', action='store_true',\n+    default=bool_from_env('BINVERIFY_VERBOSE'),\n+)\n+parser.add_argument(\n+    '-q', '--quiet', action='store_true',\n+    default=bool_from_env('BINVERIFY_QUIET'),\n+)\n+parser.add_argument(\n+    '--cleanup', action='store_true',\n+    default=bool_from_env('BINVERIFY_CLEANUP'),\n+    help='if specified, clean up files afterwards'\n+)\n+parser.add_argument(\n+    '--noninteractive', action='store_true',\n+    default=bool_from_env('BINVERIFY_NONINTERACTIVE'),\n+    help='if specified, do not block for user input'\n+)\n+parser.add_argument(\n+    '--require-all-hosts', action='store_true',\n+    default=bool_from_env('BINVERIFY_REQUIRE_ALL_HOSTS'),\n+    help=(\n+        f'If set, require all hosts ({HOST1}, {HOST2}) to provide signatures. '\n+        '(Sometimes bitcoin.org lags behind bitcoincore.org.)')\n+)\n+parser.add_argument(\n+    '--bitcoin-src-path', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_BITCOIN_SRC_PATH', ''),\n+    help='specify path to bitcoin repository. Used to find builder keys.',\n+)\n+parser.add_argument(\n+    '--skip-import-builders', action='store_true',\n+    default=bool_from_env('BINVERIFY_SKIP_IMPORT_BUILDERS'),\n+    help='If set, do not prompt to import builder pubkeys',\n+)\n+parser.add_argument(\n+    '--min-trusted-sigs', type=int, action='store', nargs='?',\n+    default=int(os.environ.get('BINVERIFY_MIN_TRUSTED_SIGS', 4)),\n+    help=(\n+        'The minimum number of good signatures from recognized keys to '\n+        'require successful termination.'),\n+)\n+parser.add_argument(\n+    '--keyserver', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_KEYSERVER', 'hkp://keyserver.ubuntu.com'),\n+    help='which keyserver to use',\n+)\n+parser.add_argument(\n+    '--trusted-keys', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_TRUSTED_KEYS', ''),\n+    help='A list of trusted builder GPG keys, specified as CSV',",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 165,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be good to say this has nothing to with GPG trusted keys\r\n\r\nAlso might be good to say \"separated by commas\" instead of \"specified as CSV\". CSV implies extra complexity around escaping",
      "created_at": "2021-12-09T20:21:00Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766126255",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766126255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766134684",
      "pull_request_review_id": 828027865,
      "id": 766134684,
      "node_id": "PRRC_kwDOABII584tqkmc",
      "diff_hunk": "@@ -2,29 +2,164 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Script for verifying Bitcoin Core release binaries\n-\n-This script attempts to download the signature file SHA256SUMS.asc from\n-bitcoincore.org and bitcoin.org and compares them.\n-It first checks if the signature passes, and then downloads the files\n-specified in the file, and checks if the hashes of these files match those\n-that are specified in the signature file.\n-The script returns 0 if everything passes the checks. It returns 1 if either\n-the signature check or the hash check doesn't pass. If an error occurs the\n-return value is >= 2.\n+\"\"\"Script for verifying Bitcoin Core release binaries.\n+\n+This script attempts to download the sum file SHA256SUMS and corresponding\n+signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n+compares them.\n+\n+The sum-signature file is signed by a number of builder keys. This script\n+ensures that there is a minimum threshold of signatures from pubkeys that\n+we trust. This trust is articulated on the basis of configuration options\n+here, but by default is based upon a unionof (i) local GPG trust settings,\n+and (ii) keys which appear in the builder-keys/keys.txt file.\n+\n+If a minimum good, trusted signature threshold is met on the sum file, we then\n+download the files specified in SHA256SUMS, and check if the hashes of these\n+files match those that are specified. The script returns 0 if everything passes\n+the checks. It returns 1 if either the signature check or the hash check\n+doesn't pass. If an error occurs the return value is >= 2.\n+\n+Logging output goes to stderr and final binary verification data goes to stdout.\n+\n+JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n-from hashlib import sha256\n+import argparse\n+import difflib\n+import json\n+import logging\n import os\n import subprocess\n+import typing as t\n+import re\n import sys\n-from textwrap import indent\n+import shutil\n+import tempfile\n+import textwrap\n+import urllib.request\n+import enum\n+from hashlib import sha256\n+from pathlib import Path\n \n-WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n-HASHFILE = \"hashes.tmp\"\n+# The primary host; this will fail if we can't retrieve files from here.\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n-SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+SUMS_FILENAME = 'SHA256SUMS'\n+SIGNATUREFILENAME = f\"{SUMS_FILENAME}.asc\"\n+BUILDER_KEYS_GH_URL = (\n+    \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n+)\n+\n+\n+class ReturnCode(enum.IntEnum):\n+    SUCCESS = 0\n+    INTEGRITY_FAILURE = 1\n+    FILE_GET_FAILED = 4\n+    FILE_MISSING_FROM_ONE_HOST = 5\n+    FILES_NOT_EQUAL = 6\n+    NO_BINARIES_MATCH = 7\n+    NOT_ENOUGH_GOOD_SIGS = 9\n+    BINARY_DOWNLOAD_FAILED = 10\n+\n+\n+def set_up_logger(is_verbose: bool = True) -> logging.Logger:\n+    \"\"\"Set up a logger that writes to stderr.\"\"\"\n+    log = logging.getLogger(__name__)\n+    log.setLevel(logging.INFO if is_verbose else logging.WARNING)\n+    console = logging.StreamHandler(sys.stderr)  # log to stderr\n+    console.setLevel(logging.DEBUG)\n+    formatter = logging.Formatter('[%(levelname)s] %(message)s')\n+    console.setFormatter(formatter)\n+    log.addHandler(console)\n+    return log\n+\n+\n+log = set_up_logger()\n+\n+\n+def indent(output: str) -> str:\n+    return textwrap.indent(output, '  ')\n+\n+\n+def bool_from_env(key, default=False) -> bool:\n+    if key not in os.environ:\n+        return default\n+    raw = os.environ[key]\n+    return raw in ['1', 'True', 'true']\n+\n+\n+VERSION_FORMAT = \"<major>.<minor>[.<patch>][-rc[0-9]][-platform]\"\n+VERSION_EXAMPLE = \"22.0-x86_64 or 0.21.0-rc2-osx\"\n+\n+parser = argparse.ArgumentParser(description=__doc__)\n+parser.add_argument(\n+    'version', type=str, help=(\n+        f'version of the bitcoin release to download; of the format '\n+        f'{VERSION_FORMAT}. Example: {VERSION_EXAMPLE}')\n+)\n+parser.add_argument(\n+    '-v', '--verbose', action='store_true',\n+    default=bool_from_env('BINVERIFY_VERBOSE'),\n+)\n+parser.add_argument(\n+    '-q', '--quiet', action='store_true',\n+    default=bool_from_env('BINVERIFY_QUIET'),\n+)\n+parser.add_argument(\n+    '--cleanup', action='store_true',\n+    default=bool_from_env('BINVERIFY_CLEANUP'),\n+    help='if specified, clean up files afterwards'\n+)\n+parser.add_argument(\n+    '--noninteractive', action='store_true',\n+    default=bool_from_env('BINVERIFY_NONINTERACTIVE'),\n+    help='if specified, do not block for user input'\n+)\n+parser.add_argument(\n+    '--require-all-hosts', action='store_true',\n+    default=bool_from_env('BINVERIFY_REQUIRE_ALL_HOSTS'),\n+    help=(\n+        f'If set, require all hosts ({HOST1}, {HOST2}) to provide signatures. '\n+        '(Sometimes bitcoin.org lags behind bitcoincore.org.)')\n+)\n+parser.add_argument(\n+    '--bitcoin-src-path', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_BITCOIN_SRC_PATH', ''),\n+    help='specify path to bitcoin repository. Used to find builder keys.',\n+)\n+parser.add_argument(\n+    '--skip-import-builders', action='store_true',\n+    default=bool_from_env('BINVERIFY_SKIP_IMPORT_BUILDERS'),\n+    help='If set, do not prompt to import builder pubkeys',\n+)\n+parser.add_argument(\n+    '--min-trusted-sigs', type=int, action='store', nargs='?',\n+    default=int(os.environ.get('BINVERIFY_MIN_TRUSTED_SIGS', 4)),\n+    help=(\n+        'The minimum number of good signatures from recognized keys to '\n+        'require successful termination.'),\n+)\n+parser.add_argument(\n+    '--keyserver', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_KEYSERVER', 'hkp://keyserver.ubuntu.com'),\n+    help='which keyserver to use',\n+)\n+parser.add_argument(\n+    '--trusted-keys', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_TRUSTED_KEYS', ''),\n+    help='A list of trusted builder GPG keys, specified as CSV',\n+)\n+parser.add_argument(\n+    '--no-builder-keys', action='store_true',",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 168,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would call this `--trust-builder-keys` to be consistent with `--trusted-keys` and `--min-trusted-sigs`.\r\n\r\nCurrent double negation and interaction with environment variable also seems awkward and has weird edge cases, like there's no way to set the argument to false if the environment variable sets it to true.\r\n\r\nMaybe this would be better:\r\n\r\n```python\r\nparser.add_argument('--trust-builder-keys', dest='trust_builder_keys', action='store_true', help=\"Treat keys in local builder-keys/keys.txt file as trusted\")\r\nparser.add_argument('--no-trust-builder-keys', dest='trust_builder_keys', action='store_false')\r\nparser.set_defaults(trust_builder_keys=bool_from_env('BINVERIFY_TRUST_BUILDER_KEYS', True))\r\n```",
      "created_at": "2021-12-09T20:34:44Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766134684",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766134684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766142230",
      "pull_request_review_id": 828027865,
      "id": 766142230,
      "node_id": "PRRC_kwDOABII584tqmcW",
      "diff_hunk": "@@ -2,29 +2,164 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Script for verifying Bitcoin Core release binaries\n-\n-This script attempts to download the signature file SHA256SUMS.asc from\n-bitcoincore.org and bitcoin.org and compares them.\n-It first checks if the signature passes, and then downloads the files\n-specified in the file, and checks if the hashes of these files match those\n-that are specified in the signature file.\n-The script returns 0 if everything passes the checks. It returns 1 if either\n-the signature check or the hash check doesn't pass. If an error occurs the\n-return value is >= 2.\n+\"\"\"Script for verifying Bitcoin Core release binaries.\n+\n+This script attempts to download the sum file SHA256SUMS and corresponding\n+signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n+compares them.\n+\n+The sum-signature file is signed by a number of builder keys. This script\n+ensures that there is a minimum threshold of signatures from pubkeys that\n+we trust. This trust is articulated on the basis of configuration options\n+here, but by default is based upon a unionof (i) local GPG trust settings,\n+and (ii) keys which appear in the builder-keys/keys.txt file.\n+\n+If a minimum good, trusted signature threshold is met on the sum file, we then\n+download the files specified in SHA256SUMS, and check if the hashes of these\n+files match those that are specified. The script returns 0 if everything passes\n+the checks. It returns 1 if either the signature check or the hash check\n+doesn't pass. If an error occurs the return value is >= 2.\n+\n+Logging output goes to stderr and final binary verification data goes to stdout.\n+\n+JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n-from hashlib import sha256\n+import argparse\n+import difflib\n+import json\n+import logging\n import os\n import subprocess\n+import typing as t\n+import re\n import sys\n-from textwrap import indent\n+import shutil\n+import tempfile\n+import textwrap\n+import urllib.request\n+import enum\n+from hashlib import sha256\n+from pathlib import Path\n \n-WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n-HASHFILE = \"hashes.tmp\"\n+# The primary host; this will fail if we can't retrieve files from here.\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n-SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+SUMS_FILENAME = 'SHA256SUMS'\n+SIGNATUREFILENAME = f\"{SUMS_FILENAME}.asc\"\n+BUILDER_KEYS_GH_URL = (\n+    \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n+)\n+\n+\n+class ReturnCode(enum.IntEnum):\n+    SUCCESS = 0\n+    INTEGRITY_FAILURE = 1\n+    FILE_GET_FAILED = 4\n+    FILE_MISSING_FROM_ONE_HOST = 5\n+    FILES_NOT_EQUAL = 6\n+    NO_BINARIES_MATCH = 7\n+    NOT_ENOUGH_GOOD_SIGS = 9\n+    BINARY_DOWNLOAD_FAILED = 10",
      "path": "contrib/verifybinaries/verify.py",
      "position": 77,
      "original_position": 77,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There are gaps in numbering here, so maybe would renumber, but I think it would be better to simplify semantics and just return SUCCESS-Verification succeeded, binary is trusted, FAILED-Verification failed, binary is not trusted, or ERROR-Not possible to verify, need to fix errors or retry\r\n\r\nMore detailed errors and status information would seem more appropriate to include in text and json output than condense into a status byte.",
      "created_at": "2021-12-09T20:47:15Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766142230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766142230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": 57,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766144667",
      "pull_request_review_id": 828027865,
      "id": 766144667,
      "node_id": "PRRC_kwDOABII584tqnCb",
      "diff_hunk": "@@ -2,29 +2,164 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Script for verifying Bitcoin Core release binaries\n-\n-This script attempts to download the signature file SHA256SUMS.asc from\n-bitcoincore.org and bitcoin.org and compares them.\n-It first checks if the signature passes, and then downloads the files\n-specified in the file, and checks if the hashes of these files match those\n-that are specified in the signature file.\n-The script returns 0 if everything passes the checks. It returns 1 if either\n-the signature check or the hash check doesn't pass. If an error occurs the\n-return value is >= 2.\n+\"\"\"Script for verifying Bitcoin Core release binaries.\n+\n+This script attempts to download the sum file SHA256SUMS and corresponding\n+signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n+compares them.\n+\n+The sum-signature file is signed by a number of builder keys. This script\n+ensures that there is a minimum threshold of signatures from pubkeys that\n+we trust. This trust is articulated on the basis of configuration options\n+here, but by default is based upon a unionof (i) local GPG trust settings,\n+and (ii) keys which appear in the builder-keys/keys.txt file.\n+\n+If a minimum good, trusted signature threshold is met on the sum file, we then\n+download the files specified in SHA256SUMS, and check if the hashes of these\n+files match those that are specified. The script returns 0 if everything passes\n+the checks. It returns 1 if either the signature check or the hash check\n+doesn't pass. If an error occurs the return value is >= 2.\n+\n+Logging output goes to stderr and final binary verification data goes to stdout.\n+\n+JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n-from hashlib import sha256\n+import argparse\n+import difflib\n+import json\n+import logging\n import os\n import subprocess\n+import typing as t\n+import re\n import sys\n-from textwrap import indent\n+import shutil\n+import tempfile\n+import textwrap\n+import urllib.request\n+import enum\n+from hashlib import sha256\n+from pathlib import Path\n \n-WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n-HASHFILE = \"hashes.tmp\"\n+# The primary host; this will fail if we can't retrieve files from here.\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n-SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+SUMS_FILENAME = 'SHA256SUMS'\n+SIGNATUREFILENAME = f\"{SUMS_FILENAME}.asc\"\n+BUILDER_KEYS_GH_URL = (\n+    \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n+)\n+\n+\n+class ReturnCode(enum.IntEnum):\n+    SUCCESS = 0\n+    INTEGRITY_FAILURE = 1\n+    FILE_GET_FAILED = 4\n+    FILE_MISSING_FROM_ONE_HOST = 5\n+    FILES_NOT_EQUAL = 6\n+    NO_BINARIES_MATCH = 7\n+    NOT_ENOUGH_GOOD_SIGS = 9\n+    BINARY_DOWNLOAD_FAILED = 10\n+\n+\n+def set_up_logger(is_verbose: bool = True) -> logging.Logger:\n+    \"\"\"Set up a logger that writes to stderr.\"\"\"\n+    log = logging.getLogger(__name__)\n+    log.setLevel(logging.INFO if is_verbose else logging.WARNING)\n+    console = logging.StreamHandler(sys.stderr)  # log to stderr\n+    console.setLevel(logging.DEBUG)\n+    formatter = logging.Formatter('[%(levelname)s] %(message)s')\n+    console.setFormatter(formatter)\n+    log.addHandler(console)\n+    return log\n+\n+\n+log = set_up_logger()",
      "path": "contrib/verifybinaries/verify.py",
      "position": 93,
      "original_position": 92,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this being called here instead of in main? Would be more straightforward if log.setLevel was just called once in `set_up_logger` instead of changing later in main()",
      "created_at": "2021-12-09T20:51:00Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766144667",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766144667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 79,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766147623",
      "pull_request_review_id": 828027865,
      "id": 766147623,
      "node_id": "PRRC_kwDOABII584tqnwn",
      "diff_hunk": "@@ -2,29 +2,164 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Script for verifying Bitcoin Core release binaries\n-\n-This script attempts to download the signature file SHA256SUMS.asc from\n-bitcoincore.org and bitcoin.org and compares them.\n-It first checks if the signature passes, and then downloads the files\n-specified in the file, and checks if the hashes of these files match those\n-that are specified in the signature file.\n-The script returns 0 if everything passes the checks. It returns 1 if either\n-the signature check or the hash check doesn't pass. If an error occurs the\n-return value is >= 2.\n+\"\"\"Script for verifying Bitcoin Core release binaries.\n+\n+This script attempts to download the sum file SHA256SUMS and corresponding\n+signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n+compares them.\n+\n+The sum-signature file is signed by a number of builder keys. This script\n+ensures that there is a minimum threshold of signatures from pubkeys that\n+we trust. This trust is articulated on the basis of configuration options\n+here, but by default is based upon a unionof (i) local GPG trust settings,\n+and (ii) keys which appear in the builder-keys/keys.txt file.\n+\n+If a minimum good, trusted signature threshold is met on the sum file, we then\n+download the files specified in SHA256SUMS, and check if the hashes of these\n+files match those that are specified. The script returns 0 if everything passes\n+the checks. It returns 1 if either the signature check or the hash check\n+doesn't pass. If an error occurs the return value is >= 2.\n+\n+Logging output goes to stderr and final binary verification data goes to stdout.\n+\n+JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n-from hashlib import sha256\n+import argparse\n+import difflib\n+import json\n+import logging\n import os\n import subprocess\n+import typing as t\n+import re\n import sys\n-from textwrap import indent\n+import shutil\n+import tempfile\n+import textwrap\n+import urllib.request\n+import enum\n+from hashlib import sha256\n+from pathlib import Path\n \n-WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n-HASHFILE = \"hashes.tmp\"\n+# The primary host; this will fail if we can't retrieve files from here.\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n-SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+SUMS_FILENAME = 'SHA256SUMS'\n+SIGNATUREFILENAME = f\"{SUMS_FILENAME}.asc\"\n+BUILDER_KEYS_GH_URL = (\n+    \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n+)\n+\n+\n+class ReturnCode(enum.IntEnum):\n+    SUCCESS = 0\n+    INTEGRITY_FAILURE = 1\n+    FILE_GET_FAILED = 4\n+    FILE_MISSING_FROM_ONE_HOST = 5\n+    FILES_NOT_EQUAL = 6\n+    NO_BINARIES_MATCH = 7\n+    NOT_ENOUGH_GOOD_SIGS = 9\n+    BINARY_DOWNLOAD_FAILED = 10\n+\n+\n+def set_up_logger(is_verbose: bool = True) -> logging.Logger:\n+    \"\"\"Set up a logger that writes to stderr.\"\"\"\n+    log = logging.getLogger(__name__)\n+    log.setLevel(logging.INFO if is_verbose else logging.WARNING)\n+    console = logging.StreamHandler(sys.stderr)  # log to stderr\n+    console.setLevel(logging.DEBUG)\n+    formatter = logging.Formatter('[%(levelname)s] %(message)s')\n+    console.setFormatter(formatter)\n+    log.addHandler(console)\n+    return log\n+\n+\n+log = set_up_logger()\n+\n+\n+def indent(output: str) -> str:\n+    return textwrap.indent(output, '  ')\n+\n+\n+def bool_from_env(key, default=False) -> bool:\n+    if key not in os.environ:\n+        return default\n+    raw = os.environ[key]\n+    return raw in ['1', 'True', 'true']\n+\n+\n+VERSION_FORMAT = \"<major>.<minor>[.<patch>][-rc[0-9]][-platform]\"\n+VERSION_EXAMPLE = \"22.0-x86_64 or 0.21.0-rc2-osx\"\n+\n+parser = argparse.ArgumentParser(description=__doc__)\n+parser.add_argument(\n+    'version', type=str, help=(\n+        f'version of the bitcoin release to download; of the format '\n+        f'{VERSION_FORMAT}. Example: {VERSION_EXAMPLE}')\n+)\n+parser.add_argument(\n+    '-v', '--verbose', action='store_true',\n+    default=bool_from_env('BINVERIFY_VERBOSE'),\n+)\n+parser.add_argument(\n+    '-q', '--quiet', action='store_true',\n+    default=bool_from_env('BINVERIFY_QUIET'),\n+)\n+parser.add_argument(\n+    '--cleanup', action='store_true',\n+    default=bool_from_env('BINVERIFY_CLEANUP'),\n+    help='if specified, clean up files afterwards'\n+)\n+parser.add_argument(\n+    '--noninteractive', action='store_true',\n+    default=bool_from_env('BINVERIFY_NONINTERACTIVE'),\n+    help='if specified, do not block for user input'\n+)\n+parser.add_argument(\n+    '--require-all-hosts', action='store_true',\n+    default=bool_from_env('BINVERIFY_REQUIRE_ALL_HOSTS'),\n+    help=(\n+        f'If set, require all hosts ({HOST1}, {HOST2}) to provide signatures. '\n+        '(Sometimes bitcoin.org lags behind bitcoincore.org.)')\n+)\n+parser.add_argument(\n+    '--bitcoin-src-path', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_BITCOIN_SRC_PATH', ''),\n+    help='specify path to bitcoin repository. Used to find builder keys.',\n+)\n+parser.add_argument(\n+    '--skip-import-builders', action='store_true',\n+    default=bool_from_env('BINVERIFY_SKIP_IMPORT_BUILDERS'),\n+    help='If set, do not prompt to import builder pubkeys',\n+)\n+parser.add_argument(\n+    '--min-trusted-sigs', type=int, action='store', nargs='?',\n+    default=int(os.environ.get('BINVERIFY_MIN_TRUSTED_SIGS', 4)),\n+    help=(\n+        'The minimum number of good signatures from recognized keys to '\n+        'require successful termination.'),\n+)\n+parser.add_argument(\n+    '--keyserver', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_KEYSERVER', 'hkp://keyserver.ubuntu.com'),\n+    help='which keyserver to use',\n+)\n+parser.add_argument(\n+    '--trusted-keys', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_TRUSTED_KEYS', ''),\n+    help='A list of trusted builder GPG keys, specified as CSV',\n+)\n+parser.add_argument(\n+    '--no-builder-keys', action='store_true',\n+    default=bool_from_env('BINVERIFY_NO_BUILDER_KEYS'),\n+    help='If set, do not trust the builder-keys from the bitcoin repo by default',\n+)\n+parser.add_argument(\n+    '--json', action='store_true',\n+    default=bool_from_env('BINVERIFY_JSON'),\n+    help='If set, output the result as JSON',\n+)",
      "path": "contrib/verifybinaries/verify.py",
      "position": 166,
      "original_position": 176,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess this is preexisting code but parse_version_string below seems to silently accept len(parts) >= 3 instead of treating it like an error. Would seem more reliable to parse the full string and not silently ignore any parts. Otherwise script might return success while not verifying the thing it was supposed to verify.",
      "created_at": "2021-12-09T20:55:47Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766147623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766147623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766153692",
      "pull_request_review_id": 828027865,
      "id": 766153692,
      "node_id": "PRRC_kwDOABII584tqpPc",
      "diff_hunk": "@@ -59,124 +194,457 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    # Enforce English output since we're relying on output that contains natural language.\n+    # Use string-shell form (vs. args as list) because passing LANGUAGE via `env` doesn't\n+    # seem to work.\n+    args = (\n+        'LANGUAGE=en gpg --yes --decrypt '\n+        + (f' --output {output_filename} ' if output_filename else '')\n+        + signature_filename)\n+\n+    result = subprocess.run(args, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    for i, line in enumerate(output):\n+        if 'using RSA key' in line:\n+            if curr_key:\n+                raise RuntimeError(\n+                    f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n+                    \"this could mean we have encountered a bad signature! check GPG output!\")\n+            curr_key = line.split('key ')[-1].strip()\n+            assert len(curr_key) == 40 or (len(curr_key) == 18 and curr_key.startswith('0x'))\n+\n+        if \"Can't check signature: No public key\" in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            unknown_sigs.append(SigData(curr_key, '', False, ''))\n+            curr_key = None\n+\n+        if 'Good signature from ' in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+\n+            # It's safe to index output[i + 1] because if we saw a good sig, there should\n+            # always be another line\n+            trusted = (\n+                'This key is not certified with a trusted signature' not in output[i + 1])\n+            good_sigs.append(SigData(curr_key, name, trusted, status))\n+            curr_key = None\n+\n+        if 'bad signature from' in line.lower():\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+            bad_sigs.append(SigData(curr_key, name, False, status))\n+            curr_key = None\n+\n+        # Track total signatures included\n+        if ': Signature made ' in line:\n+            total_resolved_sigs += 1\n+\n+    all_found = len(good_sigs + bad_sigs + unknown_sigs)\n+    if all_found != total_resolved_sigs:\n+        raise RuntimeError(\n+            f\"failed to evaluate all signatures: found {all_found} \"\n+            f\"but expected {total_resolved_sigs}\")\n+\n+    return (good_sigs, unknown_sigs, bad_sigs)\n+\n+\n+def parse_gpg_from_line(line: str) -> (str, str):\n+    \"\"\"Returns name and expiration status.\"\"\"\n+    assert 'signature from' in line\n+\n+    name_end = line.split(' from ')[-1]\n+    m = re.search(r'(?P<name>\".+\") \\[(?P<status>\\w+)\\]', name_end)\n+    assert m\n+    (name, status) = m.groups()\n+    name = name.strip('\"\\'')\n+\n+    return (name, status)\n+\n+\n def files_are_equal(filename1, filename2):\n     with open(filename1, 'rb') as file1:\n         contents1 = file1.read()\n     with open(filename2, 'rb') as file2:\n         contents2 = file2.read()\n-    return contents1 == contents2\n+    eq = contents1 == contents2\n \n+    if not eq:\n+        with open(filename1, 'r', encoding='utf-8') as f1, \\\n+                open(filename2, 'r', encoding='utf-8') as f2:\n+            f1lines = f1.readlines()\n+            f2lines = f2.readlines()\n \n-def verify_with_gpg(signature_filename, output_filename):\n-    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n-                             output_filename, signature_filename],\n-                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n-    return result.returncode, result.stdout.decode().rstrip()\n+            diff = indent(\n+                ''.join(difflib.unified_diff(f1lines, f2lines)))\n+            log.warning(f\"found diff in files ({filename1}, {filename2}):\\n{diff}\\n\")\n \n+    return eq\n \n-def remove_files(filenames):\n-    for filename in filenames:\n-        os.remove(filename)\n+\n+def get_files_from_hosts_and_compare(\n+    hosts: t.List[str], path: str, filename: str, require_all: bool = False\n+) -> ReturnCode:\n+    \"\"\"\n+    Retrieve the same file from a number of hosts and ensure they have the same contents.\n+    The first host given will be treated as the \"primary\" host, and is required to succeed.\n+\n+    Args:\n+        filename: for writing the file locally.\n+    \"\"\"\n+    assert len(hosts) > 1\n+    primary_host = hosts[0]\n+    other_hosts = hosts[1:]\n+    got_files = []\n+\n+    def join_url(host: str) -> str:\n+        return host.rstrip('/') + '/' + path.lstrip('/')\n+\n+    url = join_url(primary_host)\n+    success, output = download_with_wget(url, filename)\n+    if not success:\n+        log.error(\n+            f\"couldn't fetch file ({url}). \"\n+            \"Have you specified the version number in the following format?\\n\"\n+            f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n+            f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n+            f\"wget output:\\n{indent(output)}\")\n+        return ReturnCode.FILE_GET_FAILED\n+    else:\n+        log.info(f\"got file {url} as {filename}\")\n+        got_files.append(filename)\n+\n+    for i, host in enumerate(other_hosts):\n+        url = join_url(host)\n+        fname = filename + f'.{i + 2}'\n+        success, output = download_with_wget(url, fname)\n+\n+        if require_all and not success:\n+            log.error(\n+                f\"{host} failed to provide file ({url}), but {primary_host} did?\\n\"\n+                f\"wget output:\\n{indent(output)}\")\n+            return ReturnCode.FILE_MISSING_FROM_ONE_HOST\n+        elif not success:\n+            log.warning(\n+                f\"{host} failed to provide file ({url}). \"\n+                f\"Continuing based solely upon {primary_host}.\")\n+        else:\n+            log.info(f\"got file {url} as {fname}\")\n+            got_files.append(fname)\n+\n+    for i, got_file in enumerate(got_files):\n+        if got_file == got_files[-1]:\n+            break  # break on last file, nothing after it to compare to\n+\n+        compare_to = got_files[i + 1]\n+        if not files_are_equal(got_file, compare_to):\n+            log.error(f\"files not equal: {got_file} and {compare_to}\")\n+            return ReturnCode.FILES_NOT_EQUAL\n+\n+    return ReturnCode.SUCCESS\n+\n+\n+def get_builder_keys(bitcoin_dir: Path) -> t.Dict[str, str]:\n+    \"\"\"\n+    Return a map of builder key to name from a local or remote source,\n+    in that order of preference.\n+    If we have them locally, compare them to the github repo.\n+    \"\"\"\n+    local_builder_keys = []\n+    local_builder_path = bitcoin_dir / 'contrib' / 'builder-keys' / 'keys.txt'\n+    if local_builder_path.exists():\n+        local_builder_keys = local_builder_path.read_text().splitlines()\n+\n+    success, gh_builder_keys = download_lines_with_urllib(BUILDER_KEYS_GH_URL)\n+    if not success:\n+        log.warning(f\"unable to retrieve builder keys from {BUILDER_KEYS_GH_URL}\")\n+\n+    if not (success or local_builder_keys):\n+        log.error(\"unable to retrieve builder keys locally or remotely\")\n+\n+    # check the local and remote builder keys against each other and report diff\n+    if local_builder_keys and gh_builder_keys:\n+        if local_builder_keys != gh_builder_keys:\n+            diff = indent(\n+                '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)))\n+            log.warning(f\"found diff (local vs. GH) in builder keys:\\n{diff}\\n\")\n+\n+    # Prefer local builder keys to those obtained remotely.\n+    builder_keys = local_builder_keys or gh_builder_keys or []\n+\n+    builder_key_map = {}\n+    for i in builder_keys:\n+        key, name = i.split(' ', 1)\n+        builder_key_map[key] = name\n+\n+    return builder_key_map\n+\n+\n+def check_multisig(\n+    sigfilename: str, args: argparse.Namespace, builder_key_map: t.Dict[str, str]\n+):\n+    # check signature\n+    #\n+    # We don't write output to a file because this command will almost certainly\n+    # fail with GPG exit code '2' (and so not writing to --output) because of the\n+    # likely presence of multiple untrusted signatures.\n+    retval, output = verify_with_gpg(sigfilename)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    # Retrieve unknown keys that are in the repo builder list and then try GPG again.\n+    if unknown and not args.noninteractive and not args.skip_import_builders:\n+        for unsig in unknown:\n+            name = builder_key_map.get(unsig.key, '<unknown>')\n+            if input(f\" ? Retrieve key {unsig.key} for {name}? (y/N) \").lower() == \"y\":\n+                ran = subprocess.run(\n+                    f\"gpg --keyserver {args.keyserver} --recv-keys {unsig.key}\", shell=True)\n+\n+                if ran.returncode != 0:\n+                    log.warning(f\"failed to retrieve key {unsig.key} for {name}\")\n+\n+    return retval, output, good, unknown, bad\n+\n+\n+def check_single_sig(sigfilename: str, args: argparse.Namespace):\n+    retval, output = verify_with_gpg(sigfilename, SUMS_FILENAME)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    return retval, output, good, unknown, bad\n \n \n def main(args):\n-    # sanity check\n-    if len(args) < 1:\n-        print(\"Error: need to specify a version on the command line\")\n-        return 3\n+    args = parser.parse_args()\n+    if args.quiet:\n+        log.setLevel(logging.WARNING)\n+\n+    WORKINGDIR = Path(tempfile.gettempdir()) / f\"bitcoin_verify_binaries.{args.version}\"\n+\n+    def cleanup():\n+        log.info(\"cleaning up files\")\n+        os.chdir(Path.home())\n+        shutil.rmtree(WORKINGDIR)\n \n     # determine remote dir dependent on provided version string\n-    version_base, version_rc, os_filter = parse_version_string(args[0])\n+    version_base, version_rc, os_filter = parse_version_string(args.version)\n     remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n     if version_rc:\n         remote_dir += f\"test.{version_rc}/\"\n-    remote_sigfile = remote_dir + SIGNATUREFILENAME\n+    remote_sigs_path = remote_dir + SIGNATUREFILENAME\n+    remote_sums_path = remote_dir + SUMS_FILENAME\n \n+    bitcoin_dir_maybe = Path(args.bitcoin_src_path) if args.bitcoin_src_path else Path.cwd()\n     # create working directory\n     os.makedirs(WORKINGDIR, exist_ok=True)\n     os.chdir(WORKINGDIR)\n \n-    # fetch first signature file\n-    sigfile1 = SIGNATUREFILENAME\n-    success, output = download_with_wget(HOST1 + remote_sigfile, sigfile1)\n-    if not success:\n-        print(\"Error: couldn't fetch signature file. \"\n-              \"Have you specified the version number in the following format?\")\n-        print(f\"[{VERSIONPREFIX}]<version>[-rc[0-9]][-platform] \"\n-              f\"(example: {VERSIONPREFIX}0.21.0-rc3-osx)\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n-        return 4\n-\n-    # fetch second signature file\n-    sigfile2 = SIGNATUREFILENAME + \".2\"\n-    success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n-    if not success:\n-        print(\"bitcoin.org failed to provide signature file, \"\n-              \"but bitcoincore.org did?\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n-        remove_files([sigfile1])\n-        return 5\n-\n-    # ensure that both signature files are equal\n-    if not files_are_equal(sigfile1, sigfile2):\n-        print(\"bitcoin.org and bitcoincore.org signature files were not equal?\")\n-        print(f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n-        return 6\n-\n-    # check signature and extract data into file\n-    retval, output = verify_with_gpg(sigfile1, HASHFILE)\n-    if retval != 0:\n-        if retval == 1:\n-            print(\"Bad signature.\")\n-        elif retval == 2:\n-            print(\"gpg error. Do you have the Bitcoin Core binary release \"\n-                  \"signing key installed?\")\n-        print(\"gpg output:\")\n-        print(indent(output, '\\t'))\n-        remove_files([sigfile1, sigfile2, HASHFILE])\n-        return 1\n+    version_tuple = [int(i) for i in version_base.split('.')]\n+    hosts = [HOST1, HOST2]\n+\n+    got_sig_status = get_files_from_hosts_and_compare(\n+        hosts, remote_sigs_path, SIGNATUREFILENAME, args.require_all_hosts)\n+    if got_sig_status != ReturnCode.SUCCESS:\n+        return got_sig_status\n+\n+    # Multi-sig verification is available after 22.0.\n+    MULTISIG_SUPPORTED = version_tuple[0] >= 22\n+\n+    if MULTISIG_SUPPORTED:\n+        min_trusted_sigs = args.min_trusted_sigs\n+        gpg_allowed_codes = [0, 2]  # 2 is returned when untrusted signatures are present.\n+        builder_key_map = get_builder_keys(bitcoin_dir_maybe)\n+\n+        got_sums_status = get_files_from_hosts_and_compare(\n+            hosts, remote_sums_path, SUMS_FILENAME, args.require_all_hosts)\n+        if got_sums_status != ReturnCode.SUCCESS:\n+            return got_sums_status\n+\n+        gpg_retval, gpg_output, good, unknown, bad = check_multisig(\n+            SIGNATUREFILENAME, args, builder_key_map)\n+    else:\n+        # As long as GPG return codes are okay, the sig is valid for pre-22.0.\n+        min_trusted_sigs = 0\n+        gpg_allowed_codes = [0]\n+        builder_key_map = {}\n+\n+        gpg_retval, gpg_output, good, unknown, bad = check_single_sig(\n+            SIGNATUREFILENAME, args)\n+\n+    if gpg_retval not in gpg_allowed_codes:\n+        if gpg_retval == 1:\n+            log.critical(\"Bad signature.\")\n+        if gpg_retval == 2:\n+            log.critical(\n+                \"gpg error. Do you have the Bitcoin Core binary release \"\n+                \"signing key installed?\")\n+        else:\n+            log.critical(\"unexpected GPG exit code\")\n+\n+        log.error(f\"gpg output:\\n{indent(gpg_output)}\")\n+        cleanup()\n+        return ReturnCode.INTEGRITY_FAILURE\n+\n+    # Decide which keys we trust, though not \"trust\" in the GPG sense, but rather\n+    # which pubkeys convince us that this sums file is legitimate. In other words,\n+    # which pubkeys within the Bitcoin community do we trust for the purposes of\n+    # binary verification?\n+    trusted_keys = set()\n+    if not args.no_builder_keys:\n+        trusted_keys |= set(builder_key_map.keys())\n+    if args.trusted_keys:\n+        trusted_keys |= set(args.trusted_keys.split(','))\n+\n+    # Tally signatures and make sure we have enough good, trusted to fulfill\n+    # our threshold.\n+    good_trusted = {sig for sig in good if sig.trusted or sig.key in trusted_keys}\n+    good_untrusted = [sig for sig in good if sig not in good_trusted]\n+    num_trusted = len(good_trusted)\n+    log.info(f\"got {num_trusted} good, trusted signatures\")\n+\n+    if num_trusted < min_trusted_sigs:\n+        log.error(\n+            \"not enough trusted sigs to meet threshold \"\n+            f\"({num_trusted} vs. {min_trusted_sigs})\")\n+        return ReturnCode.NOT_ENOUGH_GOOD_SIGS\n+\n+    for sig in good_trusted:\n+        log.info(f\"GOOD SIGNATURE: {sig}\")\n+\n+    for sig in good_untrusted:\n+        log.info(f\"GOOD SIGNATURE (untrusted): {sig}\")\n+\n+    for sig in [sig for sig in good if sig.status == 'expired']:\n+        log.warning(f\"key {sig.key} for {sig.name} is expired\")\n+\n+    for sig in bad:\n+        log.warning(f\"BAD SIGNATURE: {sig}\")\n+\n+    for sig in unknown:\n+        log.warning(f\"UNKNOWN SIGNATURE: {sig}\")\n \n     # extract hashes/filenames of binaries to verify from hash file;\n     # each line has the following format: \"<hash> <binary_filename>\"\n-    with open(HASHFILE, 'r', encoding='utf8') as hash_file:\n-        hashes_to_verify = [\n-            line.split()[:2] for line in hash_file if os_filter in line]\n-    remove_files([HASHFILE])\n+    with open(SUMS_FILENAME, 'r', encoding='utf8') as hash_file:\n+        hashes_to_verify = [line.split()[:2] for line in hash_file if os_filter in line]\n+    remove_files([SUMS_FILENAME])\n     if not hashes_to_verify:\n-        print(\"error: no files matched the platform specified\")\n-        return 7\n+        log.error(\"no files matched the platform specified\")\n+        return ReturnCode.NO_BINARIES_MATCH\n+\n+    # remove binaries that are known not to be hosted by bitcoincore.org\n+    fragments_to_remove = ['-unsigned', '-debug', '-codesignatures']\n+    for fragment in fragments_to_remove:\n+        nobinaries = [i for i in hashes_to_verify if fragment in i[1]]\n+        if nobinaries:\n+            remove_str = ', '.join(i[1] for i in nobinaries)\n+            log.info(\n+                f\"removing *{fragment} binaries ({remove_str}) from verification \"\n+                f\"since {HOST1} does not host *{fragment} binaries\")\n+            hashes_to_verify = [i for i in hashes_to_verify if fragment not in i[1]]\n \n     # download binaries\n     for _, binary_filename in hashes_to_verify:\n-        print(f\"Downloading {binary_filename}\")\n-        download_with_wget(HOST1 + remote_dir + binary_filename)\n+        log.info(f\"downloading {binary_filename}\")\n+        success, output = download_with_wget(HOST1 + remote_dir + binary_filename)",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 653,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is calling wget without `-O` so if wget decides to write a .1, .2 file then then code below will verify the old existing file not the new downloaded file. Would be better to pass `binary_filename` as an explicit second argument to `download_with_wget`",
      "created_at": "2021-12-09T21:05:43Z",
      "updated_at": "2021-12-09T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r766153692",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766153692"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 602,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768960053",
      "pull_request_review_id": 831918532,
      "id": 768960053,
      "node_id": "PRRC_kwDOABII584t1WY1",
      "diff_hunk": "@@ -59,124 +194,457 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    # Enforce English output since we're relying on output that contains natural language.\n+    # Use string-shell form (vs. args as list) because passing LANGUAGE via `env` doesn't\n+    # seem to work.\n+    args = (\n+        'LANGUAGE=en gpg --yes --decrypt '\n+        + (f' --output {output_filename} ' if output_filename else '')\n+        + signature_filename)\n+\n+    result = subprocess.run(args, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    for i, line in enumerate(output):\n+        if 'using RSA key' in line:\n+            if curr_key:\n+                raise RuntimeError(\n+                    f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n+                    \"this could mean we have encountered a bad signature! check GPG output!\")\n+            curr_key = line.split('key ')[-1].strip()\n+            assert len(curr_key) == 40 or (len(curr_key) == 18 and curr_key.startswith('0x'))\n+\n+        if \"Can't check signature: No public key\" in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            unknown_sigs.append(SigData(curr_key, '', False, ''))\n+            curr_key = None\n+\n+        if 'Good signature from ' in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+\n+            # It's safe to index output[i + 1] because if we saw a good sig, there should\n+            # always be another line\n+            trusted = (\n+                'This key is not certified with a trusted signature' not in output[i + 1])\n+            good_sigs.append(SigData(curr_key, name, trusted, status))\n+            curr_key = None\n+\n+        if 'bad signature from' in line.lower():\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+            bad_sigs.append(SigData(curr_key, name, False, status))\n+            curr_key = None\n+\n+        # Track total signatures included\n+        if ': Signature made ' in line:\n+            total_resolved_sigs += 1\n+\n+    all_found = len(good_sigs + bad_sigs + unknown_sigs)\n+    if all_found != total_resolved_sigs:\n+        raise RuntimeError(\n+            f\"failed to evaluate all signatures: found {all_found} \"\n+            f\"but expected {total_resolved_sigs}\")\n+\n+    return (good_sigs, unknown_sigs, bad_sigs)\n+\n+\n+def parse_gpg_from_line(line: str) -> (str, str):\n+    \"\"\"Returns name and expiration status.\"\"\"\n+    assert 'signature from' in line\n+\n+    name_end = line.split(' from ')[-1]\n+    m = re.search(r'(?P<name>\".+\") \\[(?P<status>\\w+)\\]', name_end)\n+    assert m\n+    (name, status) = m.groups()\n+    name = name.strip('\"\\'')\n+\n+    return (name, status)\n+\n+\n def files_are_equal(filename1, filename2):\n     with open(filename1, 'rb') as file1:\n         contents1 = file1.read()\n     with open(filename2, 'rb') as file2:\n         contents2 = file2.read()\n-    return contents1 == contents2\n+    eq = contents1 == contents2\n \n+    if not eq:\n+        with open(filename1, 'r', encoding='utf-8') as f1, \\\n+                open(filename2, 'r', encoding='utf-8') as f2:\n+            f1lines = f1.readlines()\n+            f2lines = f2.readlines()\n \n-def verify_with_gpg(signature_filename, output_filename):\n-    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n-                             output_filename, signature_filename],\n-                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n-    return result.returncode, result.stdout.decode().rstrip()\n+            diff = indent(\n+                ''.join(difflib.unified_diff(f1lines, f2lines)))\n+            log.warning(f\"found diff in files ({filename1}, {filename2}):\\n{diff}\\n\")\n \n+    return eq\n \n-def remove_files(filenames):\n-    for filename in filenames:\n-        os.remove(filename)\n+\n+def get_files_from_hosts_and_compare(\n+    hosts: t.List[str], path: str, filename: str, require_all: bool = False\n+) -> ReturnCode:\n+    \"\"\"\n+    Retrieve the same file from a number of hosts and ensure they have the same contents.\n+    The first host given will be treated as the \"primary\" host, and is required to succeed.\n+\n+    Args:\n+        filename: for writing the file locally.\n+    \"\"\"\n+    assert len(hosts) > 1\n+    primary_host = hosts[0]\n+    other_hosts = hosts[1:]\n+    got_files = []\n+\n+    def join_url(host: str) -> str:\n+        return host.rstrip('/') + '/' + path.lstrip('/')\n+\n+    url = join_url(primary_host)\n+    success, output = download_with_wget(url, filename)\n+    if not success:\n+        log.error(\n+            f\"couldn't fetch file ({url}). \"\n+            \"Have you specified the version number in the following format?\\n\"\n+            f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n+            f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n+            f\"wget output:\\n{indent(output)}\")\n+        return ReturnCode.FILE_GET_FAILED\n+    else:\n+        log.info(f\"got file {url} as {filename}\")\n+        got_files.append(filename)\n+\n+    for i, host in enumerate(other_hosts):\n+        url = join_url(host)\n+        fname = filename + f'.{i + 2}'\n+        success, output = download_with_wget(url, fname)\n+\n+        if require_all and not success:\n+            log.error(\n+                f\"{host} failed to provide file ({url}), but {primary_host} did?\\n\"\n+                f\"wget output:\\n{indent(output)}\")\n+            return ReturnCode.FILE_MISSING_FROM_ONE_HOST\n+        elif not success:\n+            log.warning(\n+                f\"{host} failed to provide file ({url}). \"\n+                f\"Continuing based solely upon {primary_host}.\")\n+        else:\n+            log.info(f\"got file {url} as {fname}\")\n+            got_files.append(fname)\n+\n+    for i, got_file in enumerate(got_files):\n+        if got_file == got_files[-1]:\n+            break  # break on last file, nothing after it to compare to\n+\n+        compare_to = got_files[i + 1]\n+        if not files_are_equal(got_file, compare_to):\n+            log.error(f\"files not equal: {got_file} and {compare_to}\")\n+            return ReturnCode.FILES_NOT_EQUAL\n+\n+    return ReturnCode.SUCCESS\n+\n+\n+def get_builder_keys(bitcoin_dir: Path) -> t.Dict[str, str]:\n+    \"\"\"\n+    Return a map of builder key to name from a local or remote source,\n+    in that order of preference.\n+    If we have them locally, compare them to the github repo.\n+    \"\"\"\n+    local_builder_keys = []\n+    local_builder_path = bitcoin_dir / 'contrib' / 'builder-keys' / 'keys.txt'\n+    if local_builder_path.exists():\n+        local_builder_keys = local_builder_path.read_text().splitlines()\n+\n+    success, gh_builder_keys = download_lines_with_urllib(BUILDER_KEYS_GH_URL)\n+    if not success:\n+        log.warning(f\"unable to retrieve builder keys from {BUILDER_KEYS_GH_URL}\")\n+\n+    if not (success or local_builder_keys):\n+        log.error(\"unable to retrieve builder keys locally or remotely\")\n+\n+    # check the local and remote builder keys against each other and report diff\n+    if local_builder_keys and gh_builder_keys:\n+        if local_builder_keys != gh_builder_keys:\n+            diff = indent(\n+                '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)))\n+            log.warning(f\"found diff (local vs. GH) in builder keys:\\n{diff}\\n\")\n+\n+    # Prefer local builder keys to those obtained remotely.\n+    builder_keys = local_builder_keys or gh_builder_keys or []\n+\n+    builder_key_map = {}\n+    for i in builder_keys:\n+        key, name = i.split(' ', 1)\n+        builder_key_map[key] = name\n+\n+    return builder_key_map\n+\n+\n+def check_multisig(\n+    sigfilename: str, args: argparse.Namespace, builder_key_map: t.Dict[str, str]\n+):\n+    # check signature\n+    #\n+    # We don't write output to a file because this command will almost certainly\n+    # fail with GPG exit code '2' (and so not writing to --output) because of the\n+    # likely presence of multiple untrusted signatures.\n+    retval, output = verify_with_gpg(sigfilename)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    # Retrieve unknown keys that are in the repo builder list and then try GPG again.\n+    if unknown and not args.noninteractive and not args.skip_import_builders:\n+        for unsig in unknown:\n+            name = builder_key_map.get(unsig.key, '<unknown>')\n+            if input(f\" ? Retrieve key {unsig.key} for {name}? (y/N) \").lower() == \"y\":\n+                ran = subprocess.run(\n+                    f\"gpg --keyserver {args.keyserver} --recv-keys {unsig.key}\", shell=True)\n+\n+                if ran.returncode != 0:\n+                    log.warning(f\"failed to retrieve key {unsig.key} for {name}\")\n+\n+    return retval, output, good, unknown, bad\n+\n+\n+def check_single_sig(sigfilename: str, args: argparse.Namespace):\n+    retval, output = verify_with_gpg(sigfilename, SUMS_FILENAME)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    return retval, output, good, unknown, bad\n \n \n def main(args):\n-    # sanity check\n-    if len(args) < 1:\n-        print(\"Error: need to specify a version on the command line\")\n-        return 3\n+    args = parser.parse_args()\n+    if args.quiet:\n+        log.setLevel(logging.WARNING)\n+\n+    WORKINGDIR = Path(tempfile.gettempdir()) / f\"bitcoin_verify_binaries.{args.version}\"\n+\n+    def cleanup():\n+        log.info(\"cleaning up files\")\n+        os.chdir(Path.home())\n+        shutil.rmtree(WORKINGDIR)\n \n     # determine remote dir dependent on provided version string\n-    version_base, version_rc, os_filter = parse_version_string(args[0])\n+    version_base, version_rc, os_filter = parse_version_string(args.version)\n     remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n     if version_rc:\n         remote_dir += f\"test.{version_rc}/\"\n-    remote_sigfile = remote_dir + SIGNATUREFILENAME\n+    remote_sigs_path = remote_dir + SIGNATUREFILENAME\n+    remote_sums_path = remote_dir + SUMS_FILENAME\n \n+    bitcoin_dir_maybe = Path(args.bitcoin_src_path) if args.bitcoin_src_path else Path.cwd()\n     # create working directory\n     os.makedirs(WORKINGDIR, exist_ok=True)\n     os.chdir(WORKINGDIR)\n \n-    # fetch first signature file\n-    sigfile1 = SIGNATUREFILENAME\n-    success, output = download_with_wget(HOST1 + remote_sigfile, sigfile1)\n-    if not success:\n-        print(\"Error: couldn't fetch signature file. \"\n-              \"Have you specified the version number in the following format?\")\n-        print(f\"[{VERSIONPREFIX}]<version>[-rc[0-9]][-platform] \"\n-              f\"(example: {VERSIONPREFIX}0.21.0-rc3-osx)\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n-        return 4\n-\n-    # fetch second signature file\n-    sigfile2 = SIGNATUREFILENAME + \".2\"\n-    success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n-    if not success:\n-        print(\"bitcoin.org failed to provide signature file, \"\n-              \"but bitcoincore.org did?\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n-        remove_files([sigfile1])\n-        return 5\n-\n-    # ensure that both signature files are equal\n-    if not files_are_equal(sigfile1, sigfile2):\n-        print(\"bitcoin.org and bitcoincore.org signature files were not equal?\")\n-        print(f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n-        return 6\n-\n-    # check signature and extract data into file\n-    retval, output = verify_with_gpg(sigfile1, HASHFILE)\n-    if retval != 0:\n-        if retval == 1:\n-            print(\"Bad signature.\")\n-        elif retval == 2:\n-            print(\"gpg error. Do you have the Bitcoin Core binary release \"\n-                  \"signing key installed?\")\n-        print(\"gpg output:\")\n-        print(indent(output, '\\t'))\n-        remove_files([sigfile1, sigfile2, HASHFILE])\n-        return 1\n+    version_tuple = [int(i) for i in version_base.split('.')]\n+    hosts = [HOST1, HOST2]\n+\n+    got_sig_status = get_files_from_hosts_and_compare(\n+        hosts, remote_sigs_path, SIGNATUREFILENAME, args.require_all_hosts)\n+    if got_sig_status != ReturnCode.SUCCESS:\n+        return got_sig_status\n+\n+    # Multi-sig verification is available after 22.0.\n+    MULTISIG_SUPPORTED = version_tuple[0] >= 22\n+\n+    if MULTISIG_SUPPORTED:\n+        min_trusted_sigs = args.min_trusted_sigs\n+        gpg_allowed_codes = [0, 2]  # 2 is returned when untrusted signatures are present.\n+        builder_key_map = get_builder_keys(bitcoin_dir_maybe)\n+\n+        got_sums_status = get_files_from_hosts_and_compare(\n+            hosts, remote_sums_path, SUMS_FILENAME, args.require_all_hosts)\n+        if got_sums_status != ReturnCode.SUCCESS:\n+            return got_sums_status\n+\n+        gpg_retval, gpg_output, good, unknown, bad = check_multisig(\n+            SIGNATUREFILENAME, args, builder_key_map)\n+    else:\n+        # As long as GPG return codes are okay, the sig is valid for pre-22.0.\n+        min_trusted_sigs = 0\n+        gpg_allowed_codes = [0]\n+        builder_key_map = {}\n+\n+        gpg_retval, gpg_output, good, unknown, bad = check_single_sig(\n+            SIGNATUREFILENAME, args)\n+\n+    if gpg_retval not in gpg_allowed_codes:\n+        if gpg_retval == 1:\n+            log.critical(\"Bad signature.\")\n+        if gpg_retval == 2:\n+            log.critical(\n+                \"gpg error. Do you have the Bitcoin Core binary release \"\n+                \"signing key installed?\")\n+        else:\n+            log.critical(\"unexpected GPG exit code\")\n+\n+        log.error(f\"gpg output:\\n{indent(gpg_output)}\")\n+        cleanup()\n+        return ReturnCode.INTEGRITY_FAILURE\n+\n+    # Decide which keys we trust, though not \"trust\" in the GPG sense, but rather\n+    # which pubkeys convince us that this sums file is legitimate. In other words,\n+    # which pubkeys within the Bitcoin community do we trust for the purposes of\n+    # binary verification?\n+    trusted_keys = set()\n+    if not args.no_builder_keys:\n+        trusted_keys |= set(builder_key_map.keys())\n+    if args.trusted_keys:\n+        trusted_keys |= set(args.trusted_keys.split(','))\n+\n+    # Tally signatures and make sure we have enough good, trusted to fulfill\n+    # our threshold.\n+    good_trusted = {sig for sig in good if sig.trusted or sig.key in trusted_keys}\n+    good_untrusted = [sig for sig in good if sig not in good_trusted]\n+    num_trusted = len(good_trusted)\n+    log.info(f\"got {num_trusted} good, trusted signatures\")\n+\n+    if num_trusted < min_trusted_sigs:\n+        log.error(\n+            \"not enough trusted sigs to meet threshold \"\n+            f\"({num_trusted} vs. {min_trusted_sigs})\")\n+        return ReturnCode.NOT_ENOUGH_GOOD_SIGS\n+\n+    for sig in good_trusted:\n+        log.info(f\"GOOD SIGNATURE: {sig}\")\n+\n+    for sig in good_untrusted:\n+        log.info(f\"GOOD SIGNATURE (untrusted): {sig}\")\n+\n+    for sig in [sig for sig in good if sig.status == 'expired']:\n+        log.warning(f\"key {sig.key} for {sig.name} is expired\")\n+\n+    for sig in bad:\n+        log.warning(f\"BAD SIGNATURE: {sig}\")\n+\n+    for sig in unknown:\n+        log.warning(f\"UNKNOWN SIGNATURE: {sig}\")",
      "path": "contrib/verifybinaries/verify.py",
      "position": 601,
      "original_position": 620,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": 766093053,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While this is good feedback and could be done, I don't have time to do this refactoring - may be a good follow-up for a newer contrib looking for a task.",
      "created_at": "2021-12-14T19:00:52Z",
      "updated_at": "2021-12-14T19:00:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r768960053",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768960053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": 525,
      "original_start_line": 564,
      "start_side": "RIGHT",
      "line": 538,
      "original_line": 538,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768966877",
      "pull_request_review_id": 831928475,
      "id": 768966877,
      "node_id": "PRRC_kwDOABII584t1YDd",
      "diff_hunk": "@@ -2,29 +2,164 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Script for verifying Bitcoin Core release binaries\n-\n-This script attempts to download the signature file SHA256SUMS.asc from\n-bitcoincore.org and bitcoin.org and compares them.\n-It first checks if the signature passes, and then downloads the files\n-specified in the file, and checks if the hashes of these files match those\n-that are specified in the signature file.\n-The script returns 0 if everything passes the checks. It returns 1 if either\n-the signature check or the hash check doesn't pass. If an error occurs the\n-return value is >= 2.\n+\"\"\"Script for verifying Bitcoin Core release binaries.\n+\n+This script attempts to download the sum file SHA256SUMS and corresponding\n+signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n+compares them.\n+\n+The sum-signature file is signed by a number of builder keys. This script\n+ensures that there is a minimum threshold of signatures from pubkeys that\n+we trust. This trust is articulated on the basis of configuration options\n+here, but by default is based upon a unionof (i) local GPG trust settings,\n+and (ii) keys which appear in the builder-keys/keys.txt file.\n+\n+If a minimum good, trusted signature threshold is met on the sum file, we then\n+download the files specified in SHA256SUMS, and check if the hashes of these\n+files match those that are specified. The script returns 0 if everything passes\n+the checks. It returns 1 if either the signature check or the hash check\n+doesn't pass. If an error occurs the return value is >= 2.\n+\n+Logging output goes to stderr and final binary verification data goes to stdout.\n+\n+JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n-from hashlib import sha256\n+import argparse\n+import difflib\n+import json\n+import logging\n import os\n import subprocess\n+import typing as t\n+import re\n import sys\n-from textwrap import indent\n+import shutil\n+import tempfile\n+import textwrap\n+import urllib.request\n+import enum\n+from hashlib import sha256\n+from pathlib import Path\n \n-WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n-HASHFILE = \"hashes.tmp\"\n+# The primary host; this will fail if we can't retrieve files from here.\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n-SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+SUMS_FILENAME = 'SHA256SUMS'\n+SIGNATUREFILENAME = f\"{SUMS_FILENAME}.asc\"\n+BUILDER_KEYS_GH_URL = (\n+    \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n+)\n+\n+\n+class ReturnCode(enum.IntEnum):\n+    SUCCESS = 0\n+    INTEGRITY_FAILURE = 1\n+    FILE_GET_FAILED = 4\n+    FILE_MISSING_FROM_ONE_HOST = 5\n+    FILES_NOT_EQUAL = 6\n+    NO_BINARIES_MATCH = 7\n+    NOT_ENOUGH_GOOD_SIGS = 9\n+    BINARY_DOWNLOAD_FAILED = 10\n+\n+\n+def set_up_logger(is_verbose: bool = True) -> logging.Logger:\n+    \"\"\"Set up a logger that writes to stderr.\"\"\"\n+    log = logging.getLogger(__name__)\n+    log.setLevel(logging.INFO if is_verbose else logging.WARNING)\n+    console = logging.StreamHandler(sys.stderr)  # log to stderr\n+    console.setLevel(logging.DEBUG)\n+    formatter = logging.Formatter('[%(levelname)s] %(message)s')\n+    console.setFormatter(formatter)\n+    log.addHandler(console)\n+    return log\n+\n+\n+log = set_up_logger()\n+\n+\n+def indent(output: str) -> str:\n+    return textwrap.indent(output, '  ')\n+\n+\n+def bool_from_env(key, default=False) -> bool:\n+    if key not in os.environ:\n+        return default\n+    raw = os.environ[key]\n+    return raw in ['1', 'True', 'true']\n+\n+\n+VERSION_FORMAT = \"<major>.<minor>[.<patch>][-rc[0-9]][-platform]\"\n+VERSION_EXAMPLE = \"22.0-x86_64 or 0.21.0-rc2-osx\"\n+\n+parser = argparse.ArgumentParser(description=__doc__)\n+parser.add_argument(\n+    'version', type=str, help=(\n+        f'version of the bitcoin release to download; of the format '\n+        f'{VERSION_FORMAT}. Example: {VERSION_EXAMPLE}')\n+)\n+parser.add_argument(\n+    '-v', '--verbose', action='store_true',\n+    default=bool_from_env('BINVERIFY_VERBOSE'),\n+)\n+parser.add_argument(\n+    '-q', '--quiet', action='store_true',\n+    default=bool_from_env('BINVERIFY_QUIET'),\n+)\n+parser.add_argument(\n+    '--cleanup', action='store_true',\n+    default=bool_from_env('BINVERIFY_CLEANUP'),\n+    help='if specified, clean up files afterwards'\n+)\n+parser.add_argument(\n+    '--noninteractive', action='store_true',\n+    default=bool_from_env('BINVERIFY_NONINTERACTIVE'),\n+    help='if specified, do not block for user input'\n+)\n+parser.add_argument(\n+    '--require-all-hosts', action='store_true',\n+    default=bool_from_env('BINVERIFY_REQUIRE_ALL_HOSTS'),\n+    help=(\n+        f'If set, require all hosts ({HOST1}, {HOST2}) to provide signatures. '\n+        '(Sometimes bitcoin.org lags behind bitcoincore.org.)')\n+)\n+parser.add_argument(\n+    '--bitcoin-src-path', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_BITCOIN_SRC_PATH', ''),\n+    help='specify path to bitcoin repository. Used to find builder keys.',\n+)\n+parser.add_argument(\n+    '--skip-import-builders', action='store_true',\n+    default=bool_from_env('BINVERIFY_SKIP_IMPORT_BUILDERS'),\n+    help='If set, do not prompt to import builder pubkeys',\n+)",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 149,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": 766119564,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll just remove `--skip-import-builders` for now and we can revisit in a follow-up if desired.",
      "created_at": "2021-12-14T19:11:00Z",
      "updated_at": "2021-12-14T19:11:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r768966877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768966877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": 131,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768969941",
      "pull_request_review_id": 831932891,
      "id": 768969941,
      "node_id": "PRRC_kwDOABII584t1YzV",
      "diff_hunk": "@@ -2,29 +2,164 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Script for verifying Bitcoin Core release binaries\n-\n-This script attempts to download the signature file SHA256SUMS.asc from\n-bitcoincore.org and bitcoin.org and compares them.\n-It first checks if the signature passes, and then downloads the files\n-specified in the file, and checks if the hashes of these files match those\n-that are specified in the signature file.\n-The script returns 0 if everything passes the checks. It returns 1 if either\n-the signature check or the hash check doesn't pass. If an error occurs the\n-return value is >= 2.\n+\"\"\"Script for verifying Bitcoin Core release binaries.\n+\n+This script attempts to download the sum file SHA256SUMS and corresponding\n+signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n+compares them.\n+\n+The sum-signature file is signed by a number of builder keys. This script\n+ensures that there is a minimum threshold of signatures from pubkeys that\n+we trust. This trust is articulated on the basis of configuration options\n+here, but by default is based upon a unionof (i) local GPG trust settings,\n+and (ii) keys which appear in the builder-keys/keys.txt file.\n+\n+If a minimum good, trusted signature threshold is met on the sum file, we then\n+download the files specified in SHA256SUMS, and check if the hashes of these\n+files match those that are specified. The script returns 0 if everything passes\n+the checks. It returns 1 if either the signature check or the hash check\n+doesn't pass. If an error occurs the return value is >= 2.\n+\n+Logging output goes to stderr and final binary verification data goes to stdout.\n+\n+JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n-from hashlib import sha256\n+import argparse\n+import difflib\n+import json\n+import logging\n import os\n import subprocess\n+import typing as t\n+import re\n import sys\n-from textwrap import indent\n+import shutil\n+import tempfile\n+import textwrap\n+import urllib.request\n+import enum\n+from hashlib import sha256\n+from pathlib import Path\n \n-WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n-HASHFILE = \"hashes.tmp\"\n+# The primary host; this will fail if we can't retrieve files from here.\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n-SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+SUMS_FILENAME = 'SHA256SUMS'\n+SIGNATUREFILENAME = f\"{SUMS_FILENAME}.asc\"\n+BUILDER_KEYS_GH_URL = (\n+    \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n+)\n+\n+\n+class ReturnCode(enum.IntEnum):\n+    SUCCESS = 0\n+    INTEGRITY_FAILURE = 1\n+    FILE_GET_FAILED = 4\n+    FILE_MISSING_FROM_ONE_HOST = 5\n+    FILES_NOT_EQUAL = 6\n+    NO_BINARIES_MATCH = 7\n+    NOT_ENOUGH_GOOD_SIGS = 9\n+    BINARY_DOWNLOAD_FAILED = 10",
      "path": "contrib/verifybinaries/verify.py",
      "position": 77,
      "original_position": 77,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": 766142230,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm going to leave this as-is to marginally aid people migrating from the old script. If we want we can add a generic failure code, but I don't think there's any harm in having specific non-zero error codes.",
      "created_at": "2021-12-14T19:15:32Z",
      "updated_at": "2021-12-14T19:15:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r768969941",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768969941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": 57,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768971420",
      "pull_request_review_id": 831934908,
      "id": 768971420,
      "node_id": "PRRC_kwDOABII584t1ZKc",
      "diff_hunk": "@@ -2,29 +2,164 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Script for verifying Bitcoin Core release binaries\n-\n-This script attempts to download the signature file SHA256SUMS.asc from\n-bitcoincore.org and bitcoin.org and compares them.\n-It first checks if the signature passes, and then downloads the files\n-specified in the file, and checks if the hashes of these files match those\n-that are specified in the signature file.\n-The script returns 0 if everything passes the checks. It returns 1 if either\n-the signature check or the hash check doesn't pass. If an error occurs the\n-return value is >= 2.\n+\"\"\"Script for verifying Bitcoin Core release binaries.\n+\n+This script attempts to download the sum file SHA256SUMS and corresponding\n+signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n+compares them.\n+\n+The sum-signature file is signed by a number of builder keys. This script\n+ensures that there is a minimum threshold of signatures from pubkeys that\n+we trust. This trust is articulated on the basis of configuration options\n+here, but by default is based upon a unionof (i) local GPG trust settings,\n+and (ii) keys which appear in the builder-keys/keys.txt file.\n+\n+If a minimum good, trusted signature threshold is met on the sum file, we then\n+download the files specified in SHA256SUMS, and check if the hashes of these\n+files match those that are specified. The script returns 0 if everything passes\n+the checks. It returns 1 if either the signature check or the hash check\n+doesn't pass. If an error occurs the return value is >= 2.\n+\n+Logging output goes to stderr and final binary verification data goes to stdout.\n+\n+JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n-from hashlib import sha256\n+import argparse\n+import difflib\n+import json\n+import logging\n import os\n import subprocess\n+import typing as t\n+import re\n import sys\n-from textwrap import indent\n+import shutil\n+import tempfile\n+import textwrap\n+import urllib.request\n+import enum\n+from hashlib import sha256\n+from pathlib import Path\n \n-WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n-HASHFILE = \"hashes.tmp\"\n+# The primary host; this will fail if we can't retrieve files from here.\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n-SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+SUMS_FILENAME = 'SHA256SUMS'\n+SIGNATUREFILENAME = f\"{SUMS_FILENAME}.asc\"\n+BUILDER_KEYS_GH_URL = (\n+    \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n+)\n+\n+\n+class ReturnCode(enum.IntEnum):\n+    SUCCESS = 0\n+    INTEGRITY_FAILURE = 1\n+    FILE_GET_FAILED = 4\n+    FILE_MISSING_FROM_ONE_HOST = 5\n+    FILES_NOT_EQUAL = 6\n+    NO_BINARIES_MATCH = 7\n+    NOT_ENOUGH_GOOD_SIGS = 9\n+    BINARY_DOWNLOAD_FAILED = 10\n+\n+\n+def set_up_logger(is_verbose: bool = True) -> logging.Logger:\n+    \"\"\"Set up a logger that writes to stderr.\"\"\"\n+    log = logging.getLogger(__name__)\n+    log.setLevel(logging.INFO if is_verbose else logging.WARNING)\n+    console = logging.StreamHandler(sys.stderr)  # log to stderr\n+    console.setLevel(logging.DEBUG)\n+    formatter = logging.Formatter('[%(levelname)s] %(message)s')\n+    console.setFormatter(formatter)\n+    log.addHandler(console)\n+    return log\n+\n+\n+log = set_up_logger()",
      "path": "contrib/verifybinaries/verify.py",
      "position": 93,
      "original_position": 92,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": 766144667,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's called here so that the `log` reference can be used in functions defined before main.",
      "created_at": "2021-12-14T19:17:37Z",
      "updated_at": "2021-12-14T19:17:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r768971420",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768971420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 79,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768973455",
      "pull_request_review_id": 831937758,
      "id": 768973455,
      "node_id": "PRRC_kwDOABII584t1ZqP",
      "diff_hunk": "@@ -59,124 +194,457 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    # Enforce English output since we're relying on output that contains natural language.\n+    # Use string-shell form (vs. args as list) because passing LANGUAGE via `env` doesn't\n+    # seem to work.\n+    args = (\n+        'LANGUAGE=en gpg --yes --decrypt '\n+        + (f' --output {output_filename} ' if output_filename else '')\n+        + signature_filename)\n+\n+    result = subprocess.run(args, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    for i, line in enumerate(output):\n+        if 'using RSA key' in line:\n+            if curr_key:\n+                raise RuntimeError(\n+                    f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n+                    \"this could mean we have encountered a bad signature! check GPG output!\")\n+            curr_key = line.split('key ')[-1].strip()\n+            assert len(curr_key) == 40 or (len(curr_key) == 18 and curr_key.startswith('0x'))\n+\n+        if \"Can't check signature: No public key\" in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            unknown_sigs.append(SigData(curr_key, '', False, ''))\n+            curr_key = None\n+\n+        if 'Good signature from ' in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+\n+            # It's safe to index output[i + 1] because if we saw a good sig, there should\n+            # always be another line\n+            trusted = (\n+                'This key is not certified with a trusted signature' not in output[i + 1])\n+            good_sigs.append(SigData(curr_key, name, trusted, status))\n+            curr_key = None\n+\n+        if 'bad signature from' in line.lower():\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+            bad_sigs.append(SigData(curr_key, name, False, status))\n+            curr_key = None\n+\n+        # Track total signatures included\n+        if ': Signature made ' in line:\n+            total_resolved_sigs += 1\n+\n+    all_found = len(good_sigs + bad_sigs + unknown_sigs)\n+    if all_found != total_resolved_sigs:\n+        raise RuntimeError(\n+            f\"failed to evaluate all signatures: found {all_found} \"\n+            f\"but expected {total_resolved_sigs}\")\n+\n+    return (good_sigs, unknown_sigs, bad_sigs)\n+\n+\n+def parse_gpg_from_line(line: str) -> (str, str):\n+    \"\"\"Returns name and expiration status.\"\"\"\n+    assert 'signature from' in line\n+\n+    name_end = line.split(' from ')[-1]\n+    m = re.search(r'(?P<name>\".+\") \\[(?P<status>\\w+)\\]', name_end)\n+    assert m\n+    (name, status) = m.groups()\n+    name = name.strip('\"\\'')\n+\n+    return (name, status)\n+\n+\n def files_are_equal(filename1, filename2):\n     with open(filename1, 'rb') as file1:\n         contents1 = file1.read()\n     with open(filename2, 'rb') as file2:\n         contents2 = file2.read()\n-    return contents1 == contents2\n+    eq = contents1 == contents2\n \n+    if not eq:\n+        with open(filename1, 'r', encoding='utf-8') as f1, \\\n+                open(filename2, 'r', encoding='utf-8') as f2:\n+            f1lines = f1.readlines()\n+            f2lines = f2.readlines()\n \n-def verify_with_gpg(signature_filename, output_filename):\n-    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n-                             output_filename, signature_filename],\n-                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n-    return result.returncode, result.stdout.decode().rstrip()\n+            diff = indent(\n+                ''.join(difflib.unified_diff(f1lines, f2lines)))\n+            log.warning(f\"found diff in files ({filename1}, {filename2}):\\n{diff}\\n\")\n \n+    return eq\n \n-def remove_files(filenames):\n-    for filename in filenames:\n-        os.remove(filename)\n+\n+def get_files_from_hosts_and_compare(\n+    hosts: t.List[str], path: str, filename: str, require_all: bool = False\n+) -> ReturnCode:\n+    \"\"\"\n+    Retrieve the same file from a number of hosts and ensure they have the same contents.\n+    The first host given will be treated as the \"primary\" host, and is required to succeed.\n+\n+    Args:\n+        filename: for writing the file locally.\n+    \"\"\"\n+    assert len(hosts) > 1\n+    primary_host = hosts[0]\n+    other_hosts = hosts[1:]\n+    got_files = []\n+\n+    def join_url(host: str) -> str:\n+        return host.rstrip('/') + '/' + path.lstrip('/')\n+\n+    url = join_url(primary_host)\n+    success, output = download_with_wget(url, filename)\n+    if not success:\n+        log.error(\n+            f\"couldn't fetch file ({url}). \"\n+            \"Have you specified the version number in the following format?\\n\"\n+            f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n+            f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n+            f\"wget output:\\n{indent(output)}\")\n+        return ReturnCode.FILE_GET_FAILED\n+    else:\n+        log.info(f\"got file {url} as {filename}\")\n+        got_files.append(filename)\n+\n+    for i, host in enumerate(other_hosts):\n+        url = join_url(host)\n+        fname = filename + f'.{i + 2}'\n+        success, output = download_with_wget(url, fname)\n+\n+        if require_all and not success:\n+            log.error(\n+                f\"{host} failed to provide file ({url}), but {primary_host} did?\\n\"\n+                f\"wget output:\\n{indent(output)}\")\n+            return ReturnCode.FILE_MISSING_FROM_ONE_HOST\n+        elif not success:\n+            log.warning(\n+                f\"{host} failed to provide file ({url}). \"\n+                f\"Continuing based solely upon {primary_host}.\")\n+        else:\n+            log.info(f\"got file {url} as {fname}\")\n+            got_files.append(fname)\n+\n+    for i, got_file in enumerate(got_files):\n+        if got_file == got_files[-1]:\n+            break  # break on last file, nothing after it to compare to\n+\n+        compare_to = got_files[i + 1]\n+        if not files_are_equal(got_file, compare_to):\n+            log.error(f\"files not equal: {got_file} and {compare_to}\")\n+            return ReturnCode.FILES_NOT_EQUAL\n+\n+    return ReturnCode.SUCCESS\n+\n+\n+def get_builder_keys(bitcoin_dir: Path) -> t.Dict[str, str]:\n+    \"\"\"\n+    Return a map of builder key to name from a local or remote source,\n+    in that order of preference.\n+    If we have them locally, compare them to the github repo.\n+    \"\"\"\n+    local_builder_keys = []\n+    local_builder_path = bitcoin_dir / 'contrib' / 'builder-keys' / 'keys.txt'\n+    if local_builder_path.exists():\n+        local_builder_keys = local_builder_path.read_text().splitlines()\n+\n+    success, gh_builder_keys = download_lines_with_urllib(BUILDER_KEYS_GH_URL)\n+    if not success:\n+        log.warning(f\"unable to retrieve builder keys from {BUILDER_KEYS_GH_URL}\")\n+\n+    if not (success or local_builder_keys):\n+        log.error(\"unable to retrieve builder keys locally or remotely\")\n+\n+    # check the local and remote builder keys against each other and report diff\n+    if local_builder_keys and gh_builder_keys:\n+        if local_builder_keys != gh_builder_keys:\n+            diff = indent(\n+                '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)))\n+            log.warning(f\"found diff (local vs. GH) in builder keys:\\n{diff}\\n\")\n+\n+    # Prefer local builder keys to those obtained remotely.\n+    builder_keys = local_builder_keys or gh_builder_keys or []\n+\n+    builder_key_map = {}\n+    for i in builder_keys:\n+        key, name = i.split(' ', 1)\n+        builder_key_map[key] = name\n+\n+    return builder_key_map\n+\n+\n+def check_multisig(\n+    sigfilename: str, args: argparse.Namespace, builder_key_map: t.Dict[str, str]\n+):\n+    # check signature\n+    #\n+    # We don't write output to a file because this command will almost certainly\n+    # fail with GPG exit code '2' (and so not writing to --output) because of the\n+    # likely presence of multiple untrusted signatures.\n+    retval, output = verify_with_gpg(sigfilename)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    # Retrieve unknown keys that are in the repo builder list and then try GPG again.\n+    if unknown and not args.noninteractive and not args.skip_import_builders:\n+        for unsig in unknown:\n+            name = builder_key_map.get(unsig.key, '<unknown>')\n+            if input(f\" ? Retrieve key {unsig.key} for {name}? (y/N) \").lower() == \"y\":\n+                ran = subprocess.run(\n+                    f\"gpg --keyserver {args.keyserver} --recv-keys {unsig.key}\", shell=True)\n+\n+                if ran.returncode != 0:\n+                    log.warning(f\"failed to retrieve key {unsig.key} for {name}\")\n+\n+    return retval, output, good, unknown, bad\n+\n+\n+def check_single_sig(sigfilename: str, args: argparse.Namespace):\n+    retval, output = verify_with_gpg(sigfilename, SUMS_FILENAME)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    return retval, output, good, unknown, bad\n \n \n def main(args):\n-    # sanity check\n-    if len(args) < 1:\n-        print(\"Error: need to specify a version on the command line\")\n-        return 3\n+    args = parser.parse_args()\n+    if args.quiet:\n+        log.setLevel(logging.WARNING)\n+\n+    WORKINGDIR = Path(tempfile.gettempdir()) / f\"bitcoin_verify_binaries.{args.version}\"\n+\n+    def cleanup():\n+        log.info(\"cleaning up files\")\n+        os.chdir(Path.home())\n+        shutil.rmtree(WORKINGDIR)\n \n     # determine remote dir dependent on provided version string\n-    version_base, version_rc, os_filter = parse_version_string(args[0])\n+    version_base, version_rc, os_filter = parse_version_string(args.version)\n     remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n     if version_rc:\n         remote_dir += f\"test.{version_rc}/\"\n-    remote_sigfile = remote_dir + SIGNATUREFILENAME\n+    remote_sigs_path = remote_dir + SIGNATUREFILENAME\n+    remote_sums_path = remote_dir + SUMS_FILENAME\n \n+    bitcoin_dir_maybe = Path(args.bitcoin_src_path) if args.bitcoin_src_path else Path.cwd()\n     # create working directory\n     os.makedirs(WORKINGDIR, exist_ok=True)\n     os.chdir(WORKINGDIR)\n \n-    # fetch first signature file\n-    sigfile1 = SIGNATUREFILENAME\n-    success, output = download_with_wget(HOST1 + remote_sigfile, sigfile1)\n-    if not success:\n-        print(\"Error: couldn't fetch signature file. \"\n-              \"Have you specified the version number in the following format?\")\n-        print(f\"[{VERSIONPREFIX}]<version>[-rc[0-9]][-platform] \"\n-              f\"(example: {VERSIONPREFIX}0.21.0-rc3-osx)\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n-        return 4\n-\n-    # fetch second signature file\n-    sigfile2 = SIGNATUREFILENAME + \".2\"\n-    success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n-    if not success:\n-        print(\"bitcoin.org failed to provide signature file, \"\n-              \"but bitcoincore.org did?\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n-        remove_files([sigfile1])\n-        return 5\n-\n-    # ensure that both signature files are equal\n-    if not files_are_equal(sigfile1, sigfile2):\n-        print(\"bitcoin.org and bitcoincore.org signature files were not equal?\")\n-        print(f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n-        return 6\n-\n-    # check signature and extract data into file\n-    retval, output = verify_with_gpg(sigfile1, HASHFILE)\n-    if retval != 0:\n-        if retval == 1:\n-            print(\"Bad signature.\")\n-        elif retval == 2:\n-            print(\"gpg error. Do you have the Bitcoin Core binary release \"\n-                  \"signing key installed?\")\n-        print(\"gpg output:\")\n-        print(indent(output, '\\t'))\n-        remove_files([sigfile1, sigfile2, HASHFILE])\n-        return 1\n+    version_tuple = [int(i) for i in version_base.split('.')]\n+    hosts = [HOST1, HOST2]\n+\n+    got_sig_status = get_files_from_hosts_and_compare(\n+        hosts, remote_sigs_path, SIGNATUREFILENAME, args.require_all_hosts)\n+    if got_sig_status != ReturnCode.SUCCESS:\n+        return got_sig_status\n+\n+    # Multi-sig verification is available after 22.0.\n+    MULTISIG_SUPPORTED = version_tuple[0] >= 22\n+\n+    if MULTISIG_SUPPORTED:\n+        min_trusted_sigs = args.min_trusted_sigs\n+        gpg_allowed_codes = [0, 2]  # 2 is returned when untrusted signatures are present.\n+        builder_key_map = get_builder_keys(bitcoin_dir_maybe)\n+\n+        got_sums_status = get_files_from_hosts_and_compare(\n+            hosts, remote_sums_path, SUMS_FILENAME, args.require_all_hosts)\n+        if got_sums_status != ReturnCode.SUCCESS:\n+            return got_sums_status\n+\n+        gpg_retval, gpg_output, good, unknown, bad = check_multisig(\n+            SIGNATUREFILENAME, args, builder_key_map)\n+    else:\n+        # As long as GPG return codes are okay, the sig is valid for pre-22.0.\n+        min_trusted_sigs = 0\n+        gpg_allowed_codes = [0]\n+        builder_key_map = {}\n+\n+        gpg_retval, gpg_output, good, unknown, bad = check_single_sig(\n+            SIGNATUREFILENAME, args)\n+\n+    if gpg_retval not in gpg_allowed_codes:\n+        if gpg_retval == 1:\n+            log.critical(\"Bad signature.\")\n+        if gpg_retval == 2:\n+            log.critical(\n+                \"gpg error. Do you have the Bitcoin Core binary release \"\n+                \"signing key installed?\")\n+        else:\n+            log.critical(\"unexpected GPG exit code\")\n+\n+        log.error(f\"gpg output:\\n{indent(gpg_output)}\")\n+        cleanup()\n+        return ReturnCode.INTEGRITY_FAILURE\n+\n+    # Decide which keys we trust, though not \"trust\" in the GPG sense, but rather\n+    # which pubkeys convince us that this sums file is legitimate. In other words,\n+    # which pubkeys within the Bitcoin community do we trust for the purposes of\n+    # binary verification?\n+    trusted_keys = set()\n+    if not args.no_builder_keys:\n+        trusted_keys |= set(builder_key_map.keys())\n+    if args.trusted_keys:\n+        trusted_keys |= set(args.trusted_keys.split(','))\n+\n+    # Tally signatures and make sure we have enough good, trusted to fulfill\n+    # our threshold.\n+    good_trusted = {sig for sig in good if sig.trusted or sig.key in trusted_keys}\n+    good_untrusted = [sig for sig in good if sig not in good_trusted]\n+    num_trusted = len(good_trusted)\n+    log.info(f\"got {num_trusted} good, trusted signatures\")\n+\n+    if num_trusted < min_trusted_sigs:\n+        log.error(\n+            \"not enough trusted sigs to meet threshold \"\n+            f\"({num_trusted} vs. {min_trusted_sigs})\")\n+        return ReturnCode.NOT_ENOUGH_GOOD_SIGS\n+\n+    for sig in good_trusted:\n+        log.info(f\"GOOD SIGNATURE: {sig}\")\n+\n+    for sig in good_untrusted:\n+        log.info(f\"GOOD SIGNATURE (untrusted): {sig}\")\n+\n+    for sig in [sig for sig in good if sig.status == 'expired']:\n+        log.warning(f\"key {sig.key} for {sig.name} is expired\")\n+\n+    for sig in bad:\n+        log.warning(f\"BAD SIGNATURE: {sig}\")\n+\n+    for sig in unknown:\n+        log.warning(f\"UNKNOWN SIGNATURE: {sig}\")\n \n     # extract hashes/filenames of binaries to verify from hash file;\n     # each line has the following format: \"<hash> <binary_filename>\"\n-    with open(HASHFILE, 'r', encoding='utf8') as hash_file:\n-        hashes_to_verify = [\n-            line.split()[:2] for line in hash_file if os_filter in line]\n-    remove_files([HASHFILE])\n+    with open(SUMS_FILENAME, 'r', encoding='utf8') as hash_file:\n+        hashes_to_verify = [line.split()[:2] for line in hash_file if os_filter in line]\n+    remove_files([SUMS_FILENAME])\n     if not hashes_to_verify:\n-        print(\"error: no files matched the platform specified\")\n-        return 7\n+        log.error(\"no files matched the platform specified\")\n+        return ReturnCode.NO_BINARIES_MATCH\n+\n+    # remove binaries that are known not to be hosted by bitcoincore.org\n+    fragments_to_remove = ['-unsigned', '-debug', '-codesignatures']\n+    for fragment in fragments_to_remove:\n+        nobinaries = [i for i in hashes_to_verify if fragment in i[1]]\n+        if nobinaries:\n+            remove_str = ', '.join(i[1] for i in nobinaries)\n+            log.info(\n+                f\"removing *{fragment} binaries ({remove_str}) from verification \"\n+                f\"since {HOST1} does not host *{fragment} binaries\")\n+            hashes_to_verify = [i for i in hashes_to_verify if fragment not in i[1]]\n \n     # download binaries\n     for _, binary_filename in hashes_to_verify:\n-        print(f\"Downloading {binary_filename}\")\n-        download_with_wget(HOST1 + remote_dir + binary_filename)\n+        log.info(f\"downloading {binary_filename}\")\n+        success, output = download_with_wget(HOST1 + remote_dir + binary_filename)",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 653,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": 766153692,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch!",
      "created_at": "2021-12-14T19:20:27Z",
      "updated_at": "2021-12-14T19:20:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r768973455",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768973455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 602,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768973595",
      "pull_request_review_id": 831937985,
      "id": 768973595,
      "node_id": "PRRC_kwDOABII584t1Zsb",
      "diff_hunk": "@@ -59,124 +194,457 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    # Enforce English output since we're relying on output that contains natural language.\n+    # Use string-shell form (vs. args as list) because passing LANGUAGE via `env` doesn't\n+    # seem to work.\n+    args = (\n+        'LANGUAGE=en gpg --yes --decrypt '\n+        + (f' --output {output_filename} ' if output_filename else '')\n+        + signature_filename)\n+\n+    result = subprocess.run(args, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    for i, line in enumerate(output):\n+        if 'using RSA key' in line:",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 240,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": 765303913,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Excellent point, thanks!",
      "created_at": "2021-12-14T19:20:42Z",
      "updated_at": "2021-12-14T19:20:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r768973595",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768973595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768985678",
      "pull_request_review_id": 831955649,
      "id": 768985678,
      "node_id": "PRRC_kwDOABII584t1cpO",
      "diff_hunk": "@@ -2,29 +2,164 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Script for verifying Bitcoin Core release binaries\n-\n-This script attempts to download the signature file SHA256SUMS.asc from\n-bitcoincore.org and bitcoin.org and compares them.\n-It first checks if the signature passes, and then downloads the files\n-specified in the file, and checks if the hashes of these files match those\n-that are specified in the signature file.\n-The script returns 0 if everything passes the checks. It returns 1 if either\n-the signature check or the hash check doesn't pass. If an error occurs the\n-return value is >= 2.\n+\"\"\"Script for verifying Bitcoin Core release binaries.\n+\n+This script attempts to download the sum file SHA256SUMS and corresponding\n+signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n+compares them.\n+\n+The sum-signature file is signed by a number of builder keys. This script\n+ensures that there is a minimum threshold of signatures from pubkeys that\n+we trust. This trust is articulated on the basis of configuration options\n+here, but by default is based upon a unionof (i) local GPG trust settings,\n+and (ii) keys which appear in the builder-keys/keys.txt file.\n+\n+If a minimum good, trusted signature threshold is met on the sum file, we then\n+download the files specified in SHA256SUMS, and check if the hashes of these\n+files match those that are specified. The script returns 0 if everything passes\n+the checks. It returns 1 if either the signature check or the hash check\n+doesn't pass. If an error occurs the return value is >= 2.\n+\n+Logging output goes to stderr and final binary verification data goes to stdout.\n+\n+JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n-from hashlib import sha256\n+import argparse\n+import difflib\n+import json\n+import logging\n import os\n import subprocess\n+import typing as t\n+import re\n import sys\n-from textwrap import indent\n+import shutil\n+import tempfile\n+import textwrap\n+import urllib.request\n+import enum\n+from hashlib import sha256\n+from pathlib import Path\n \n-WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n-HASHFILE = \"hashes.tmp\"\n+# The primary host; this will fail if we can't retrieve files from here.\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n-SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+SUMS_FILENAME = 'SHA256SUMS'\n+SIGNATUREFILENAME = f\"{SUMS_FILENAME}.asc\"\n+BUILDER_KEYS_GH_URL = (\n+    \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n+)\n+\n+\n+class ReturnCode(enum.IntEnum):\n+    SUCCESS = 0\n+    INTEGRITY_FAILURE = 1\n+    FILE_GET_FAILED = 4\n+    FILE_MISSING_FROM_ONE_HOST = 5\n+    FILES_NOT_EQUAL = 6\n+    NO_BINARIES_MATCH = 7\n+    NOT_ENOUGH_GOOD_SIGS = 9\n+    BINARY_DOWNLOAD_FAILED = 10\n+\n+\n+def set_up_logger(is_verbose: bool = True) -> logging.Logger:\n+    \"\"\"Set up a logger that writes to stderr.\"\"\"\n+    log = logging.getLogger(__name__)\n+    log.setLevel(logging.INFO if is_verbose else logging.WARNING)\n+    console = logging.StreamHandler(sys.stderr)  # log to stderr\n+    console.setLevel(logging.DEBUG)\n+    formatter = logging.Formatter('[%(levelname)s] %(message)s')\n+    console.setFormatter(formatter)\n+    log.addHandler(console)\n+    return log\n+\n+\n+log = set_up_logger()\n+\n+\n+def indent(output: str) -> str:\n+    return textwrap.indent(output, '  ')\n+\n+\n+def bool_from_env(key, default=False) -> bool:\n+    if key not in os.environ:\n+        return default\n+    raw = os.environ[key]\n+    return raw in ['1', 'True', 'true']\n+\n+\n+VERSION_FORMAT = \"<major>.<minor>[.<patch>][-rc[0-9]][-platform]\"\n+VERSION_EXAMPLE = \"22.0-x86_64 or 0.21.0-rc2-osx\"\n+\n+parser = argparse.ArgumentParser(description=__doc__)\n+parser.add_argument(\n+    'version', type=str, help=(\n+        f'version of the bitcoin release to download; of the format '\n+        f'{VERSION_FORMAT}. Example: {VERSION_EXAMPLE}')\n+)\n+parser.add_argument(\n+    '-v', '--verbose', action='store_true',\n+    default=bool_from_env('BINVERIFY_VERBOSE'),\n+)\n+parser.add_argument(\n+    '-q', '--quiet', action='store_true',\n+    default=bool_from_env('BINVERIFY_QUIET'),\n+)\n+parser.add_argument(\n+    '--cleanup', action='store_true',\n+    default=bool_from_env('BINVERIFY_CLEANUP'),\n+    help='if specified, clean up files afterwards'\n+)\n+parser.add_argument(\n+    '--noninteractive', action='store_true',\n+    default=bool_from_env('BINVERIFY_NONINTERACTIVE'),\n+    help='if specified, do not block for user input'\n+)\n+parser.add_argument(\n+    '--require-all-hosts', action='store_true',\n+    default=bool_from_env('BINVERIFY_REQUIRE_ALL_HOSTS'),\n+    help=(\n+        f'If set, require all hosts ({HOST1}, {HOST2}) to provide signatures. '\n+        '(Sometimes bitcoin.org lags behind bitcoincore.org.)')\n+)\n+parser.add_argument(\n+    '--bitcoin-src-path', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_BITCOIN_SRC_PATH', ''),\n+    help='specify path to bitcoin repository. Used to find builder keys.',\n+)\n+parser.add_argument(\n+    '--skip-import-builders', action='store_true',\n+    default=bool_from_env('BINVERIFY_SKIP_IMPORT_BUILDERS'),\n+    help='If set, do not prompt to import builder pubkeys',\n+)\n+parser.add_argument(\n+    '--min-trusted-sigs', type=int, action='store', nargs='?',\n+    default=int(os.environ.get('BINVERIFY_MIN_TRUSTED_SIGS', 4)),\n+    help=(\n+        'The minimum number of good signatures from recognized keys to '\n+        'require successful termination.'),\n+)\n+parser.add_argument(\n+    '--keyserver', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_KEYSERVER', 'hkp://keyserver.ubuntu.com'),\n+    help='which keyserver to use',\n+)\n+parser.add_argument(\n+    '--trusted-keys', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_TRUSTED_KEYS', ''),\n+    help='A list of trusted builder GPG keys, specified as CSV',\n+)\n+parser.add_argument(\n+    '--no-builder-keys', action='store_true',\n+    default=bool_from_env('BINVERIFY_NO_BUILDER_KEYS'),\n+    help='If set, do not trust the builder-keys from the bitcoin repo by default',\n+)\n+parser.add_argument(\n+    '--json', action='store_true',\n+    default=bool_from_env('BINVERIFY_JSON'),\n+    help='If set, output the result as JSON',\n+)",
      "path": "contrib/verifybinaries/verify.py",
      "position": 166,
      "original_position": 176,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "a92ec88cbc6e153eabf5e809d8960454488cc391",
      "in_reply_to_id": 766147623,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Don't have time to think about the best way to handle this, so will leave for a follow-up.",
      "created_at": "2021-12-14T19:38:25Z",
      "updated_at": "2021-12-14T19:38:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r768985678",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768985678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/963698985",
      "pull_request_review_id": 1097576225,
      "id": 963698985,
      "node_id": "PRRC_kwDOABII5845cOEp",
      "diff_hunk": "@@ -63,6 +71,17 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [l.strip().decode() for l in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        print_warn(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        print_warn(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])",
      "path": "contrib/verifybinaries/verify.py",
      "position": 197,
      "original_position": 47,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0",
      "in_reply_to_id": null,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Pico-nit in case you re-touch: fn returns an unparenthesized tuple on L77 and parenthesized here. There's no behavioural difference in Python, but could be nice to have them the same (as \"the comma makes the tuple\", perhaps both unparenthesized?)",
      "created_at": "2022-09-06T13:19:20Z",
      "updated_at": "2022-09-06T13:19:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r963698985",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/963698985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964163444",
      "pull_request_review_id": 1098240546,
      "id": 964163444,
      "node_id": "PRRC_kwDOABII5845d_d0",
      "diff_hunk": "@@ -47,136 +189,498 @@ def parse_version_string(version_str):\n     return version_base, version_rc, version_os\n \n \n-def download_with_wget(remote_file, local_file=None):\n-    if local_file:\n-        wget_args = ['wget', '-O', local_file, remote_file]\n-    else:\n-        # use timestamping mechanism if local filename is not explicitly set\n-        wget_args = ['wget', '-N', remote_file]\n-\n-    result = subprocess.run(wget_args,\n+def download_with_wget(remote_file, local_file):\n+    result = subprocess.run(['wget', '-O', local_file, remote_file],\n                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError as e:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError): {e}\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    args = [\n+        'gpg', '--yes', '--decrypt',\n+        '--output', output_filename if output_filename else '', signature_filename]\n+\n+    env = dict(os.environ, LANGUAGE='en')\n+    result = subprocess.run(args, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, env=env)\n+    log.debug(f'Result from GPG ({result.returncode}): {result.stdout}')\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    # Ensure that all lines we match on include a prefix that prevents malicious input\n+    # from fooling the parser.\n+    def line_begins_with(patt: str, line: str) -> bool:\n+        return re.match(r'^\\s*(gpg:)?(\\s+)' + patt, line)\n+\n+    for i, line in enumerate(output):\n+        if line_begins_with(r\"using RSA key (0x[0-9a-fA-F]{16}|[0-9a-fA-F]{40})$\", line):\n+            if curr_key:\n+                raise RuntimeError(\n+                    f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n+                    \"this could mean we have encountered a bad signature! check GPG output!\")\n+            curr_key = line.split('key ')[-1].strip()\n+            assert len(curr_key) == 40 or (len(curr_key) == 18 and curr_key.startswith('0x'))\n+\n+        if line_begins_with(r\"Can't check signature: No public key$\", line):\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            unknown_sigs.append(SigData(curr_key, '', False, ''))\n+            curr_key = None\n+\n+        if line_begins_with(r'Good signature from (\".+\")(\\s+)(\\[.+\\])$', line):\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+\n+            # It's safe to index output[i + 1] because if we saw a good sig, there should",
      "path": "contrib/verifybinaries/verify.py",
      "position": 271,
      "original_position": 283,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "in_reply_to_id": null,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There may well be another line in the good case, however my output looks like this for many keys:\r\n\r\n```\r\n  gpg: Good signature from \"Antoine Poinsot <darosior@protonmail.com>\" [unknown]\r\n  gpg:                 aka \"darosior <darosior@protonmail.com>\" [unknown]\r\n  gpg:                 aka \"Antoine Poinsot <antoine@revault.dev>\" [unknown]\r\n  gpg:                 aka \"darosior <darosior@ln.dev>\" [unknown]\r\n  gpg: WARNING: This key is not certified with a trusted signature!\r\n```\r\n\r\nSo it shows up as `trusted = True`, when in fact it should not be",
      "created_at": "2022-09-06T21:02:08Z",
      "updated_at": "2022-09-06T21:02:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r964163444",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964163444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 264,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964165977",
      "pull_request_review_id": 1098243681,
      "id": 964165977,
      "node_id": "PRRC_kwDOABII5845eAFZ",
      "diff_hunk": "@@ -47,136 +189,498 @@ def parse_version_string(version_str):\n     return version_base, version_rc, version_os\n \n \n-def download_with_wget(remote_file, local_file=None):\n-    if local_file:\n-        wget_args = ['wget', '-O', local_file, remote_file]\n-    else:\n-        # use timestamping mechanism if local filename is not explicitly set\n-        wget_args = ['wget', '-N', remote_file]\n-\n-    result = subprocess.run(wget_args,\n+def download_with_wget(remote_file, local_file):\n+    result = subprocess.run(['wget', '-O', local_file, remote_file],\n                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError as e:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError): {e}\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    args = [\n+        'gpg', '--yes', '--decrypt',\n+        '--output', output_filename if output_filename else '', signature_filename]\n+\n+    env = dict(os.environ, LANGUAGE='en')\n+    result = subprocess.run(args, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, env=env)\n+    log.debug(f'Result from GPG ({result.returncode}): {result.stdout}')\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    # Ensure that all lines we match on include a prefix that prevents malicious input\n+    # from fooling the parser.\n+    def line_begins_with(patt: str, line: str) -> bool:\n+        return re.match(r'^\\s*(gpg:)?(\\s+)' + patt, line)\n+\n+    for i, line in enumerate(output):\n+        if line_begins_with(r\"using RSA key (0x[0-9a-fA-F]{16}|[0-9a-fA-F]{40})$\", line):\n+            if curr_key:\n+                raise RuntimeError(\n+                    f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n+                    \"this could mean we have encountered a bad signature! check GPG output!\")\n+            curr_key = line.split('key ')[-1].strip()\n+            assert len(curr_key) == 40 or (len(curr_key) == 18 and curr_key.startswith('0x'))\n+\n+        if line_begins_with(r\"Can't check signature: No public key$\", line):\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            unknown_sigs.append(SigData(curr_key, '', False, ''))\n+            curr_key = None\n+\n+        if line_begins_with(r'Good signature from (\".+\")(\\s+)(\\[.+\\])$', line):\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+\n+            # It's safe to index output[i + 1] because if we saw a good sig, there should",
      "path": "contrib/verifybinaries/verify.py",
      "position": 271,
      "original_position": 283,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "in_reply_to_id": 964163444,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~Perhaps keep indexing until we reach a line which does not start with `aka`, and then check that? This does feel quite brittle though.~\r\n\r\nActually it seems like we might be able to use `gpg --verify-options show-primary-uid-only` to hide the `aka` lines, according to https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration-Options.html",
      "created_at": "2022-09-06T21:05:01Z",
      "updated_at": "2022-09-06T21:07:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r964165977",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964165977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 264,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964177784",
      "pull_request_review_id": 1098255438,
      "id": 964177784,
      "node_id": "PRRC_kwDOABII5845eC94",
      "diff_hunk": "@@ -47,136 +189,498 @@ def parse_version_string(version_str):\n     return version_base, version_rc, version_os\n \n \n-def download_with_wget(remote_file, local_file=None):\n-    if local_file:\n-        wget_args = ['wget', '-O', local_file, remote_file]\n-    else:\n-        # use timestamping mechanism if local filename is not explicitly set\n-        wget_args = ['wget', '-N', remote_file]\n-\n-    result = subprocess.run(wget_args,\n+def download_with_wget(remote_file, local_file):\n+    result = subprocess.run(['wget', '-O', local_file, remote_file],\n                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError as e:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError): {e}\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    args = [\n+        'gpg', '--yes', '--decrypt',",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 222,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "in_reply_to_id": null,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        'gpg', '--yes', '--decrypt', '--verify-options', 'show-primary-uid-only',\r\n```",
      "created_at": "2022-09-06T21:16:11Z",
      "updated_at": "2022-09-06T21:16:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r964177784",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964177784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964178396",
      "pull_request_review_id": 1098256241,
      "id": 964178396,
      "node_id": "PRRC_kwDOABII5845eDHc",
      "diff_hunk": "@@ -47,136 +189,498 @@ def parse_version_string(version_str):\n     return version_base, version_rc, version_os\n \n \n-def download_with_wget(remote_file, local_file=None):\n-    if local_file:\n-        wget_args = ['wget', '-O', local_file, remote_file]\n-    else:\n-        # use timestamping mechanism if local filename is not explicitly set\n-        wget_args = ['wget', '-N', remote_file]\n-\n-    result = subprocess.run(wget_args,\n+def download_with_wget(remote_file, local_file):\n+    result = subprocess.run(['wget', '-O', local_file, remote_file],\n                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError as e:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError): {e}\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    args = [\n+        'gpg', '--yes', '--decrypt',",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 222,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "in_reply_to_id": 964177784,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This fixes my comment about not strictly checking trusted for keys displaying akas (https://github.com/bitcoin/bitcoin/pull/23020/files#r964163444)",
      "created_at": "2022-09-06T21:17:04Z",
      "updated_at": "2022-09-06T21:17:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r964178396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964178396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964201756",
      "pull_request_review_id": 1098286686,
      "id": 964201756,
      "node_id": "PRRC_kwDOABII5845eI0c",
      "diff_hunk": "@@ -47,136 +189,498 @@ def parse_version_string(version_str):\n     return version_base, version_rc, version_os\n \n \n-def download_with_wget(remote_file, local_file=None):\n-    if local_file:\n-        wget_args = ['wget', '-O', local_file, remote_file]\n-    else:\n-        # use timestamping mechanism if local filename is not explicitly set\n-        wget_args = ['wget', '-N', remote_file]\n-\n-    result = subprocess.run(wget_args,\n+def download_with_wget(remote_file, local_file):\n+    result = subprocess.run(['wget', '-O', local_file, remote_file],\n                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError as e:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError): {e}\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    args = [\n+        'gpg', '--yes', '--decrypt',\n+        '--output', output_filename if output_filename else '', signature_filename]\n+\n+    env = dict(os.environ, LANGUAGE='en')\n+    result = subprocess.run(args, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, env=env)\n+    log.debug(f'Result from GPG ({result.returncode}): {result.stdout}')\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    # Ensure that all lines we match on include a prefix that prevents malicious input\n+    # from fooling the parser.\n+    def line_begins_with(patt: str, line: str) -> bool:\n+        return re.match(r'^\\s*(gpg:)?(\\s+)' + patt, line)\n+\n+    for i, line in enumerate(output):\n+        if line_begins_with(r\"using RSA key (0x[0-9a-fA-F]{16}|[0-9a-fA-F]{40})$\", line):",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 264,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "in_reply_to_id": null,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "  For v23.0 one user now has an ECDSA key which seems to break this script (`output[70:80]`)\r\n  ```\r\n  gpg: Signature made Sat 23 Apr 2022 13:39:56 BST\r\n  gpg:                using ECDSA key C388F6961FB972A95678E327F62711DBDCA8AE56\r\n  gpg:                issuer \"kvaciral@protonmail.com\"\r\n  gpg: key 0x2F9867672542AC32: \"kvaciral@protonmail.com <kvaciral@protonmail.com>\" not changed\r\n  gpg: Total number processed: 1\r\n  gpg:              unchanged: 1\r\n  gpg: requesting key 0xF62711DBDCA8AE56 from hkps server keys.openpgp.org\r\n  gpg: key 0xF62711DBDCA8AE56: new key but contains no user ID - skipped\r\n  gpg: Total number processed: 1\r\n  gpg:           w/o user IDs: 1\r\n  gpg: Can't check signature: No public key\r\n  ```\r\n  \r\n  After this block is skipped `curr_key` is not set, which then causes the `RuntimeError` on L269 to hit",
      "created_at": "2022-09-06T21:40:36Z",
      "updated_at": "2022-09-06T21:40:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r964201756",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964201756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964203244",
      "pull_request_review_id": 1098288835,
      "id": 964203244,
      "node_id": "PRRC_kwDOABII5845eJLs",
      "diff_hunk": "@@ -47,136 +189,498 @@ def parse_version_string(version_str):\n     return version_base, version_rc, version_os\n \n \n-def download_with_wget(remote_file, local_file=None):\n-    if local_file:\n-        wget_args = ['wget', '-O', local_file, remote_file]\n-    else:\n-        # use timestamping mechanism if local filename is not explicitly set\n-        wget_args = ['wget', '-N', remote_file]\n-\n-    result = subprocess.run(wget_args,\n+def download_with_wget(remote_file, local_file):\n+    result = subprocess.run(['wget', '-O', local_file, remote_file],\n                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError as e:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError): {e}\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    args = [\n+        'gpg', '--yes', '--decrypt',\n+        '--output', output_filename if output_filename else '', signature_filename]\n+\n+    env = dict(os.environ, LANGUAGE='en')\n+    result = subprocess.run(args, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, env=env)\n+    log.debug(f'Result from GPG ({result.returncode}): {result.stdout}')\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    # Ensure that all lines we match on include a prefix that prevents malicious input\n+    # from fooling the parser.\n+    def line_begins_with(patt: str, line: str) -> bool:\n+        return re.match(r'^\\s*(gpg:)?(\\s+)' + patt, line)\n+\n+    for i, line in enumerate(output):\n+        if line_begins_with(r\"using RSA key (0x[0-9a-fA-F]{16}|[0-9a-fA-F]{40})$\", line):",
      "path": "contrib/verifybinaries/verify.py",
      "position": null,
      "original_position": 264,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "in_reply_to_id": null,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        if line_begins_with(r\"using (ECDSA|RSA) key (0x[0-9a-fA-F]{16}|[0-9a-fA-F]{40})$\", line):\r\n```",
      "created_at": "2022-09-06T21:41:47Z",
      "updated_at": "2022-09-06T21:41:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r964203244",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964203244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964210645",
      "pull_request_review_id": 1098299195,
      "id": 964210645,
      "node_id": "PRRC_kwDOABII5845eK_V",
      "diff_hunk": "@@ -1,41 +1,93 @@\n ### Verify Binaries\n \n-#### Preparation:\n+#### Preparation\n \n-Make sure you obtain the proper release signing key and verify the fingerprint with several independent sources.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n-```sh\n-$ gpg --fingerprint \"Bitcoin Core binary release signing key\"\n-pub   4096R/36C2E964 2015-06-24 [expires: YYYY-MM-DD]\n-      Key fingerprint = 01EA 5486 DE18 A882 D4C2  6845 90C8 019E 36C2 E964\n-uid                  Wladimir J. van der Laan (Bitcoin Core binary release signing key) <laanwj@gmail.com>\n-```\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin/bitcoin/tree/master/contrib/builder-keys) and\n+decide which of these keys you would like to trust. For each key you want to trust, you\n+must obtain that key for your local GPG installation (you can use this script to do\n+this automatically, or you can do it yourself).\n+\n+You can obtain these keys by\n+  - (most laborious) through a browser using a key server (e.g. https://keyserver.ubuntu.com/),\n+  - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n+  - (easiest) you can run the packaged `verifybinaries.py` script to have it automatically\n+    retrieve unrecognized keys.\n+\n+#### Legacy verification\n+\n+Historically, the lead maintainer Wladimir J. van der Laan has provided the sole signing\n+key for releases, but since 22.0 Bitcoin release sum files are signed as described\n+above using a plurality of keys.\n+\n+Legacy verification is preserved for releases before v22.0; namely, GPG verification for\n+a checksum file based solely on a valid signature by the old release key\n+(`0x90C8019E36C2E964`).\n+\n+#### Usage\n+\n+This script attempts to download the checksum file (`SHA256SUMS`) and corresponding\n+signature file `SHA256SUMS.asc` from https://bitcoincore.org and https://bitcoin.org.\n \n-#### Usage:\n+It first checks if the checksum file is valid based upon a plurality of signatures, and\n+then downloads the release files specified in the checksum file, and checks if the\n+hashes of the release files are as expected.\n \n-This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n+If we encounter pubkeys in the signature file that we do not recognize, the script\n+will prompt the user as to whether they'd like to download the pubkeys (unless the\n+`BINVERIFY_NONINTERACTIVE=1` option is set).\n \n-It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n+If the script is run from the root of the bitcoin/bitcoin repository, it will by\n+default use the `builder-keys/keys.txt` file to establish trusted pubkeys.\n \n-The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n+The script returns 0 if everything passes the checks. It returns 1 if either the\n+signature check or the hash check doesn't pass. An exit code of >2 indicates an error.\n \n+See the `Config` object for various options.\n+\n+#### Examples\n+\n+Validate releases with default settings:\n+```sh\n+./contrib/verifybinaries/verify.py 22.0\n+./contrib/verifybinaries/verify.py 22.0-rc2\n+./contrib/verifybinaries/verify.py 0.11.2\n+./contrib/verifybinaries/verify.py bitcoin-core-0.12.0\n+./contrib/verifybinaries/verify.py bitcoin-core-0.13.0-rc3\n+```\n+\n+Get JSON output and don't prompt for user input (no auto key import):\n+\n+```sh\n+./contrib/verifybinaries/verify.py 22.0-x86 --json --noninteractive\n+```\n \n+Don't trust builder-keys by default, and rely only on local GPG state and manually\n+specified keys, while requiring a threshold of at least 10 trusted signatures:\n ```sh\n-./verify.py bitcoin-core-0.11.2\n-./verify.py bitcoin-core-0.12.0\n-./verify.py bitcoin-core-0.13.0-rc3\n+./contrib/verifybinaries/verify.py 22.0-x86 \\\n+    --no-builder-keys \\",
      "path": "contrib/verifybinaries/README.md",
      "position": null,
      "original_position": 91,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "in_reply_to_id": null,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps this option name was changed?\r\n\r\n```suggestion\r\n    --no-trust-builder-keys \\\r\n```",
      "created_at": "2022-09-06T21:54:14Z",
      "updated_at": "2022-09-06T21:54:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r964210645",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964210645"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964213335",
      "pull_request_review_id": 1098302418,
      "id": 964213335,
      "node_id": "PRRC_kwDOABII5845eLpX",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+#!/usr/bin/env python3\n+\n+import json\n+import sys\n+import subprocess\n+from pathlib import Path\n+\n+\n+def main():\n+    \"\"\"Tests ordered roughly from faster to slower.\"\"\"\n+\n+    expect_code(run_verify('0.32'), 4, \"Nonexistent version should fail\")\n+    expect_code(run_verify('0.32.awefa.12f9h'), 11, \"Malformed version should fail\")\n+    expect_code(run_verify('22.0 --min-trusted-sigs 20'), 9, \"--min-trusted-sigs 20 should fail\")\n+\n+    _220 = run_verify('22.0 --json')\n+    result = json.loads(_220.stdout.decode())\n+\n+    print(\"- testing multisig verification (22.0)\", flush=True)\n+    expect_code(_220, 0, \"22.0 should succeed\")\n+    v = result['verified_binaries']\n+    assert result['good_trusted_sigs']\n+    assert v['bitcoin-22.0-aarch64-linux-gnu.tar.gz'] == 'ac718fed08570a81b3587587872ad85a25173afa5f9fbbd0c03ba4d1714cfa3e'\n+    assert v['bitcoin-22.0-osx64.tar.gz'] == '2744d199c3343b2d94faffdfb2c94d75a630ba27301a70e47b0ad30a7e0155e9'\n+    assert v['bitcoin-22.0-x86_64-linux-gnu.tar.gz'] == '59ebd25dd82a51638b7a6bb914586201e67db67b919b2a1ff08925a7936d1b16'\n+\n+    print(\"- testing single-sig verification (0.20.0)\", flush=True)\n+    _20 = run_verify('0.20.0 --json')\n+    result = json.loads(_20.stdout.decode())\n+    v = result['verified_binaries']\n+\n+    expect_code(_20, 0, \"0.20.0 should succeed\")\n+    assert v['bitcoin-0.20.0-aarch64-linux-gnu.tar.gz'] == '081b30b0f1af95656242c83eef30bbf7216b1a30fa8e8f29b3b160fe520d28f6'\n+    assert v['bitcoin-0.20.0-arm-linux-gnueabihf.tar.gz'] == '05014c7ff00f4496b1f389f0961d807e04505d8721d5c6f69567f2a0ec1985cc'\n+    assert v['bitcoin-0.20.0-osx64.tar.gz'] == '34f377fee2c7adf59981dde7e41215765d47b466f773cf2673137d30495b2675'\n+\n+\n+def run_verify(extra: str) -> subprocess.CompletedProcess:\n+    maybe_here = Path.cwd() / 'verify.py'\n+    path = maybe_here if maybe_here.exists() else Path.cwd() / 'contrib' / 'verifybinaries' / 'verify.py'\n+\n+    return subprocess.run(\n+        f\"{path} --noninteractive --cleanup {extra}\", capture_output=True, shell=True)",
      "path": "contrib/verifybinaries/test.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "396cb35a2205a625ce3ba1a86d97754fbb983e85",
      "in_reply_to_id": null,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Capture_output is python 3.7. Can just capture both with `subprocess.PIPE` though:\r\n\r\n```suggestion\r\n        f\"{path} --noninteractive --cleanup {extra}\", stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\r\n```",
      "created_at": "2022-09-06T22:02:33Z",
      "updated_at": "2022-09-06T22:04:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r964213335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/964213335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1033565503",
      "pull_request_review_id": 1195843388,
      "id": 1033565503,
      "node_id": "PRRC_kwDOABII5849mvU_",
      "diff_hunk": "@@ -1,41 +1,93 @@\n ### Verify Binaries\n \n-#### Preparation:\n+#### Preparation\n \n-Make sure you obtain the proper release signing key and verify the fingerprint with several independent sources.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n-```sh\n-$ gpg --fingerprint \"Bitcoin Core binary release signing key\"\n-pub   4096R/36C2E964 2015-06-24 [expires: YYYY-MM-DD]\n-      Key fingerprint = 01EA 5486 DE18 A882 D4C2  6845 90C8 019E 36C2 E964\n-uid                  Wladimir J. van der Laan (Bitcoin Core binary release signing key) <laanwj@gmail.com>\n-```\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin/bitcoin/tree/master/contrib/builder-keys) and\n+decide which of these keys you would like to trust. For each key you want to trust, you\n+must obtain that key for your local GPG installation (you can use this script to do\n+this automatically, or you can do it yourself).\n+\n+You can obtain these keys by\n+  - (most laborious) through a browser using a key server (e.g. https://keyserver.ubuntu.com/),\n+  - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n+  - (easiest) you can run the packaged `verifybinaries.py` script to have it automatically\n+    retrieve unrecognized keys.\n+\n+#### Legacy verification",
      "path": "contrib/verifybinaries/README.md",
      "position": null,
      "original_position": 32,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "dff50dc68a54799df4415be6fea52a1e6fc88fc1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe this can be removed, given that the releases are EOL and it doesn't seem to be working https://github.com/bitcoin/bitcoin/pull/23020#issuecomment-1329062246\r\n\r\nIf someone really wants to do this, they can just use the previous script, no?",
      "created_at": "2022-11-28T13:49:47Z",
      "updated_at": "2022-11-28T13:49:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1033565503",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1033565503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1033572454",
      "pull_request_review_id": 1195853412,
      "id": 1033572454,
      "node_id": "PRRC_kwDOABII5849mxBm",
      "diff_hunk": "@@ -1,41 +1,93 @@\n ### Verify Binaries\n \n-#### Preparation:\n+#### Preparation\n \n-Make sure you obtain the proper release signing key and verify the fingerprint with several independent sources.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n-```sh\n-$ gpg --fingerprint \"Bitcoin Core binary release signing key\"\n-pub   4096R/36C2E964 2015-06-24 [expires: YYYY-MM-DD]\n-      Key fingerprint = 01EA 5486 DE18 A882 D4C2  6845 90C8 019E 36C2 E964\n-uid                  Wladimir J. van der Laan (Bitcoin Core binary release signing key) <laanwj@gmail.com>\n-```\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin/bitcoin/tree/master/contrib/builder-keys) and\n+decide which of these keys you would like to trust. For each key you want to trust, you\n+must obtain that key for your local GPG installation (you can use this script to do\n+this automatically, or you can do it yourself).\n+\n+You can obtain these keys by\n+  - (most laborious) through a browser using a key server (e.g. https://keyserver.ubuntu.com/),\n+  - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n+  - (easiest) you can run the packaged `verifybinaries.py` script to have it automatically\n+    retrieve unrecognized keys.\n+\n+#### Legacy verification",
      "path": "contrib/verifybinaries/README.md",
      "position": null,
      "original_position": 32,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "dff50dc68a54799df4415be6fea52a1e6fc88fc1",
      "in_reply_to_id": 1033565503,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Dropping the legacy checks would also make review and testing easier.",
      "created_at": "2022-11-28T13:56:08Z",
      "updated_at": "2022-11-28T13:56:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1033572454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1033572454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034564345",
      "pull_request_review_id": 1197276577,
      "id": 1034564345,
      "node_id": "PRRC_kwDOABII5849qjL5",
      "diff_hunk": "@@ -8,19 +8,24 @@\n \n def main():\n     \"\"\"Tests ordered roughly from faster to slower.\"\"\"\n+    if subprocess.run(\"gpg --list-keys | grep 0x90C8019E36C2E964 >/dev/null\", shell=True).returncode != 0:",
      "path": "contrib/verifybinaries/test.py",
      "position": null,
      "original_position": 4,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "f6cfcb7cf9790fe189e1789417cd96f79f776153",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "On macOS gpg (GnuPG/MacGPG2) 2.2.40 has a slightly different output format for `--list-keys`. It won't include the `0x`. The manual also recommends adding `--with-colons` for a machine-readable format that's meant to stay consistent.\r\n\r\nSo maybe try: `gpg --list-keys --with-colons | grep 90C8019E36C2E964 >/dev/null`\r\n\r\nOn Ubuntu 22.10 with gpg (GnuPG) 2.2.35 it also doesn't like the `0x` prefix.",
      "created_at": "2022-11-29T10:22:21Z",
      "updated_at": "2022-11-29T10:32:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1034564345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034564345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034567563",
      "pull_request_review_id": 1197281387,
      "id": 1034567563,
      "node_id": "PRRC_kwDOABII5849qj-L",
      "diff_hunk": "@@ -8,19 +8,24 @@\n \n def main():\n     \"\"\"Tests ordered roughly from faster to slower.\"\"\"\n+    if subprocess.run(\"gpg --list-keys | grep 0x90C8019E36C2E964 >/dev/null\", shell=True).returncode != 0:\n+        print(\"In order to run tests, you should first import the old release signing key:\")\n+        print(\"  gpg --recv-key 01EA5486DE18A882D4C2684590C8019E36C2E964\")",
      "path": "contrib/verifybinaries/test.py",
      "position": null,
      "original_position": 6,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "f6cfcb7cf9790fe189e1789417cd96f79f776153",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Let's add `--keyserver hkps://keyserver.ubuntu.com` to save the user a Google search for `gpg: key 90C8019E36C2E964: new key but contains no user ID - skipped`.\r\n\r\nOr we could just add it to the repo at this point, especially handy if key servers ever decide to drop expired keys entirely.",
      "created_at": "2022-11-29T10:25:25Z",
      "updated_at": "2022-11-29T10:26:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1034567563",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034567563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034571116",
      "pull_request_review_id": 1197286420,
      "id": 1034571116,
      "node_id": "PRRC_kwDOABII5849qk1s",
      "diff_hunk": "@@ -8,19 +8,24 @@\n \n def main():\n     \"\"\"Tests ordered roughly from faster to slower.\"\"\"\n+    if subprocess.run(\"gpg --list-keys | grep 0x90C8019E36C2E964 >/dev/null\", shell=True).returncode != 0:",
      "path": "contrib/verifybinaries/test.py",
      "position": null,
      "original_position": 4,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "f6cfcb7cf9790fe189e1789417cd96f79f776153",
      "in_reply_to_id": 1034564345,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "With that change, the 0.22.0 test fails for me as before.",
      "created_at": "2022-11-29T10:28:33Z",
      "updated_at": "2022-11-29T10:28:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1034571116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034571116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034585172",
      "pull_request_review_id": 1197306606,
      "id": 1034585172,
      "node_id": "PRRC_kwDOABII5849qoRU",
      "diff_hunk": "@@ -8,19 +8,24 @@\n \n def main():\n     \"\"\"Tests ordered roughly from faster to slower.\"\"\"\n+    if subprocess.run(\"gpg --list-keys | grep 0x90C8019E36C2E964 >/dev/null\", shell=True).returncode != 0:",
      "path": "contrib/verifybinaries/test.py",
      "position": null,
      "original_position": 4,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "f6cfcb7cf9790fe189e1789417cd96f79f776153",
      "in_reply_to_id": 1034564345,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> So maybe try: `gpg --list-keys --with-colons | grep 90C8019E36C2E964 >/dev/null`\r\n\r\nTested and also working on Ubuntu\r\n\r\n",
      "created_at": "2022-11-29T10:41:44Z",
      "updated_at": "2022-11-29T10:41:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1034585172",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034585172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034600396",
      "pull_request_review_id": 1197329750,
      "id": 1034600396,
      "node_id": "PRRC_kwDOABII5849qr_M",
      "diff_hunk": "@@ -8,19 +8,24 @@\n \n def main():\n     \"\"\"Tests ordered roughly from faster to slower.\"\"\"\n+    if subprocess.run(\"gpg --list-keys | grep 0x90C8019E36C2E964 >/dev/null\", shell=True).returncode != 0:",
      "path": "contrib/verifybinaries/test.py",
      "position": null,
      "original_position": 4,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "f6cfcb7cf9790fe189e1789417cd96f79f776153",
      "in_reply_to_id": 1034564345,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Test also fails on a (relatively) fresh Ubuntu 22.10 machine. As does `contrib/verifybinaries/verify.py 0.20.0`.",
      "created_at": "2022-11-29T10:56:25Z",
      "updated_at": "2022-11-29T10:56:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1034600396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034600396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1054276812",
      "pull_request_review_id": 1225915958,
      "id": 1054276812,
      "node_id": "PRRC_kwDOABII584-1vzM",
      "diff_hunk": "@@ -1,41 +1,93 @@\n ### Verify Binaries\n \n-#### Preparation:\n+#### Preparation\n \n-Make sure you obtain the proper release signing key and verify the fingerprint with several independent sources.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n-```sh\n-$ gpg --fingerprint \"Bitcoin Core binary release signing key\"\n-pub   4096R/36C2E964 2015-06-24 [expires: YYYY-MM-DD]\n-      Key fingerprint = 01EA 5486 DE18 A882 D4C2  6845 90C8 019E 36C2 E964\n-uid                  Wladimir J. van der Laan (Bitcoin Core binary release signing key) <laanwj@gmail.com>\n-```\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin/bitcoin/tree/master/contrib/builder-keys) and",
      "path": "contrib/verifybinaries/README.md",
      "position": null,
      "original_position": 21,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "f6cfcb7cf9790fe189e1789417cd96f79f776153",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure if it makes sense to pick the trust based on this list. It is outdated and there are many keys, such as mine, which have never contributed a signature for any guix release (https://github.com/bitcoin/bitcoin/pull/26598#issuecomment-1337066475). Also, it doesn't seem ideal to blindly trust the list, when the only requirement to get on the list, is to upload one or two attestations.\r\n\r\nIt might be better (and less code) to just treat all good signatures as good, but untrusted, unless they are trusted by the local gpg.",
      "created_at": "2022-12-21T11:21:14Z",
      "updated_at": "2022-12-21T11:21:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1054276812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1054276812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117048617",
      "pull_request_review_id": 1313479671,
      "id": 1117048617,
      "node_id": "PRRC_kwDOABII585ClM8p",
      "diff_hunk": "@@ -1,30 +1,77 @@\n ### Verify Binaries\n \n-#### Usage:\n+#### Preparation\n \n-This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n-It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin-core/guix.sigs/tree/main/builder-keys) and\n+decide which of these keys you would like to trust. For each key you want to trust, you\n+must obtain that key for your local GPG installation.\n \n-The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n+You can obtain these keys by\n+  - through a browser using a key server (e.g. keyserver.ubuntu.com),\n+  - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n+  - you can run the packaged `verifybinaries.py ... --import-keys` script to \n+    have it automatically retrieve unrecognized keys.\n \n+#### Usage\n \n+This script attempts to download the checksum file (`SHA256SUMS`) and corresponding\n+signature file `SHA256SUMS.asc` from https://bitcoincore.org and https://bitcoin.org.",
      "path": "contrib/verifybinaries/README.md",
      "position": 30,
      "original_position": 30,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note that bitcoin.org only currently offers `22.0`, and it would seem unlikely that it will offer newer versions any in the near future. It also doesn't actually provide `https://bitcoin.org/bin/bitcoin-core-22.0/SHA256SUMS.asc`, so can't even be used for verification. Could make sense to drop it from this script for now?",
      "created_at": "2023-02-24T14:03:15Z",
      "updated_at": "2023-02-24T14:18:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1117048617",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117048617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117049036",
      "pull_request_review_id": 1313479671,
      "id": 1117049036,
      "node_id": "PRRC_kwDOABII585ClNDM",
      "diff_hunk": "@@ -1,30 +1,77 @@\n ### Verify Binaries\n \n-#### Usage:\n+#### Preparation\n \n-This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n-It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin-core/guix.sigs/tree/main/builder-keys) and\n+decide which of these keys you would like to trust. For each key you want to trust, you\n+must obtain that key for your local GPG installation.\n \n-The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n+You can obtain these keys by\n+  - through a browser using a key server (e.g. keyserver.ubuntu.com),\n+  - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n+  - you can run the packaged `verifybinaries.py ... --import-keys` script to \n+    have it automatically retrieve unrecognized keys.\n \n+#### Usage\n \n+This script attempts to download the checksum file (`SHA256SUMS`) and corresponding\n+signature file `SHA256SUMS.asc` from https://bitcoincore.org and https://bitcoin.org.\n+\n+It first checks if the checksum file is valid based upon a plurality of signatures, and\n+then downloads the release files specified in the checksum file, and checks if the\n+hashes of the release files are as expected.\n+\n+If we encounter pubkeys in the signature file that we do not recognize, the script\n+can prompt the user as to whether they'd like to download the pubkeys. To enable\n+this behavior, use the `--import-keys` flag.\n+\n+The script returns 0 if everything passes the checks. It returns 1 if either the\n+signature check or the hash check doesn't pass. An exit code of >2 indicates an error.\n+\n+See the `Config` object for various options.\n+\n+#### Examples\n+\n+Validate releases with default settings:\n+```sh\n+./contrib/verifybinaries/verify.py 22.0\n+./contrib/verifybinaries/verify.py 22.0-rc2\n+./contrib/verifybinaries/verify.py bitcoin-core-23.0",
      "path": "contrib/verifybinaries/README.md",
      "position": 51,
      "original_position": 51,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we need to offer both ways of doing this? Can we just pick either `./contrib/verifybinaries/verify.py xx.y` or `./contrib/verifybinaries/verify.py bitcoin-core-xx.y`? My preference would be just the version number, as I'd think anyone running this script already knows they are downloading and verifying Bitcoin Core?",
      "created_at": "2023-02-24T14:03:32Z",
      "updated_at": "2023-02-24T14:12:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1117049036",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117049036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117050954",
      "pull_request_review_id": 1313479671,
      "id": 1117050954,
      "node_id": "PRRC_kwDOABII585ClNhK",
      "diff_hunk": "@@ -1,30 +1,77 @@\n ### Verify Binaries\n \n-#### Usage:\n+#### Preparation\n \n-This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n-It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin-core/guix.sigs/tree/main/builder-keys) and\n+decide which of these keys you would like to trust. For each key you want to trust, you\n+must obtain that key for your local GPG installation.\n \n-The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n+You can obtain these keys by\n+  - through a browser using a key server (e.g. keyserver.ubuntu.com),\n+  - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n+  - you can run the packaged `verifybinaries.py ... --import-keys` script to \n+    have it automatically retrieve unrecognized keys.\n \n+#### Usage\n \n+This script attempts to download the checksum file (`SHA256SUMS`) and corresponding\n+signature file `SHA256SUMS.asc` from https://bitcoincore.org and https://bitcoin.org.\n+\n+It first checks if the checksum file is valid based upon a plurality of signatures, and\n+then downloads the release files specified in the checksum file, and checks if the\n+hashes of the release files are as expected.\n+\n+If we encounter pubkeys in the signature file that we do not recognize, the script\n+can prompt the user as to whether they'd like to download the pubkeys. To enable\n+this behavior, use the `--import-keys` flag.\n+\n+The script returns 0 if everything passes the checks. It returns 1 if either the\n+signature check or the hash check doesn't pass. An exit code of >2 indicates an error.\n+\n+See the `Config` object for various options.\n+\n+#### Examples\n+\n+Validate releases with default settings:\n+```sh\n+./contrib/verifybinaries/verify.py 22.0\n+./contrib/verifybinaries/verify.py 22.0-rc2\n+./contrib/verifybinaries/verify.py bitcoin-core-23.0\n+./contrib/verifybinaries/verify.py bitcoin-core-23.0-rc1\n+```\n+\n+Get JSON output and don't prompt for user input (no auto key import):\n+\n+```sh\n+./contrib/verifybinaries/verify.py 22.0-x86 --json\n+```\n+\n+Don't trust builder-keys by default, and rely only on local GPG state and manually\n+specified keys, while requiring a threshold of at least 10 trusted signatures:\n ```sh\n-./verify.py bitcoin-core-0.11.2\n-./verify.py bitcoin-core-0.12.0\n-./verify.py bitcoin-core-0.13.0-rc3\n+./contrib/verifybinaries/verify.py 22.0-x86 \\\n+    --no-trust-builder-keys \\\n+    --trusted-keys 74E2DEF5D77260B98BC19438099BAD163C70FBFA,9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C \\\n+    --min-trusted-sigs 10\n ```\n \n If you only want to download the binaries of certain platform, add the corresponding suffix, e.g.:\n \n ```sh\n-./verify.py bitcoin-core-0.11.2-osx\n-./verify.py 0.12.0-linux\n-./verify.py bitcoin-core-0.13.0-rc3-win64\n+./contrib/verifybinaries/verify.py bitcoin-core-22.0-osx\n+./contrib/verifybinaries/verify.py bitcoin-core-22.0-rc2-win64\n ```\n \n If you do not want to keep the downloaded binaries, specify anything as the second parameter.",
      "path": "contrib/verifybinaries/README.md",
      "position": 83,
      "original_position": 83,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should we just add an explicit `--delete` argument to the script, rather than \"append a random anything\", as was proposed in #26985.",
      "created_at": "2023-02-24T14:05:03Z",
      "updated_at": "2023-02-24T14:12:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1117050954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117050954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 73,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117055238",
      "pull_request_review_id": 1313479671,
      "id": 1117055238,
      "node_id": "PRRC_kwDOABII585ClOkG",
      "diff_hunk": "@@ -1,30 +1,77 @@\n ### Verify Binaries\n \n-#### Usage:\n+#### Preparation\n \n-This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n-It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin-core/guix.sigs/tree/main/builder-keys) and\n+decide which of these keys you would like to trust. For each key you want to trust, you\n+must obtain that key for your local GPG installation.\n \n-The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n+You can obtain these keys by\n+  - through a browser using a key server (e.g. keyserver.ubuntu.com),\n+  - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n+  - you can run the packaged `verifybinaries.py ... --import-keys` script to \n+    have it automatically retrieve unrecognized keys.\n \n+#### Usage\n \n+This script attempts to download the checksum file (`SHA256SUMS`) and corresponding\n+signature file `SHA256SUMS.asc` from https://bitcoincore.org and https://bitcoin.org.\n+\n+It first checks if the checksum file is valid based upon a plurality of signatures, and\n+then downloads the release files specified in the checksum file, and checks if the\n+hashes of the release files are as expected.\n+\n+If we encounter pubkeys in the signature file that we do not recognize, the script\n+can prompt the user as to whether they'd like to download the pubkeys. To enable\n+this behavior, use the `--import-keys` flag.\n+\n+The script returns 0 if everything passes the checks. It returns 1 if either the",
      "path": "contrib/verifybinaries/README.md",
      "position": 40,
      "original_position": 40,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there a reason to split this into return codes of `1` & `2`? I think failing to verify is just much of an error as anything else?",
      "created_at": "2023-02-24T14:08:17Z",
      "updated_at": "2023-02-24T14:12:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1117055238",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117055238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117057952",
      "pull_request_review_id": 1313479671,
      "id": 1117057952,
      "node_id": "PRRC_kwDOABII585ClPOg",
      "diff_hunk": "@@ -1,30 +1,77 @@\n ### Verify Binaries\n \n-#### Usage:\n+#### Preparation\n \n-This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n-It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin-core/guix.sigs/tree/main/builder-keys) and\n+decide which of these keys you would like to trust. For each key you want to trust, you\n+must obtain that key for your local GPG installation.\n \n-The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n+You can obtain these keys by\n+  - through a browser using a key server (e.g. keyserver.ubuntu.com),\n+  - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n+  - you can run the packaged `verifybinaries.py ... --import-keys` script to \n+    have it automatically retrieve unrecognized keys.\n \n+#### Usage\n \n+This script attempts to download the checksum file (`SHA256SUMS`) and corresponding\n+signature file `SHA256SUMS.asc` from https://bitcoincore.org and https://bitcoin.org.\n+\n+It first checks if the checksum file is valid based upon a plurality of signatures, and\n+then downloads the release files specified in the checksum file, and checks if the\n+hashes of the release files are as expected.\n+\n+If we encounter pubkeys in the signature file that we do not recognize, the script\n+can prompt the user as to whether they'd like to download the pubkeys. To enable\n+this behavior, use the `--import-keys` flag.\n+\n+The script returns 0 if everything passes the checks. It returns 1 if either the\n+signature check or the hash check doesn't pass. An exit code of >2 indicates an error.\n+\n+See the `Config` object for various options.\n+\n+#### Examples\n+\n+Validate releases with default settings:\n+```sh\n+./contrib/verifybinaries/verify.py 22.0\n+./contrib/verifybinaries/verify.py 22.0-rc2\n+./contrib/verifybinaries/verify.py bitcoin-core-23.0\n+./contrib/verifybinaries/verify.py bitcoin-core-23.0-rc1\n+```\n+\n+Get JSON output and don't prompt for user input (no auto key import):\n+\n+```sh\n+./contrib/verifybinaries/verify.py 22.0-x86 --json\n+```\n+\n+Don't trust builder-keys by default, and rely only on local GPG state and manually\n+specified keys, while requiring a threshold of at least 10 trusted signatures:\n ```sh\n-./verify.py bitcoin-core-0.11.2\n-./verify.py bitcoin-core-0.12.0\n-./verify.py bitcoin-core-0.13.0-rc3\n+./contrib/verifybinaries/verify.py 22.0-x86 \\\n+    --no-trust-builder-keys \\\n+    --trusted-keys 74E2DEF5D77260B98BC19438099BAD163C70FBFA,9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C \\\n+    --min-trusted-sigs 10",
      "path": "contrib/verifybinaries/README.md",
      "position": 70,
      "original_position": 70,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    --min-good-sigs 10\r\n```",
      "created_at": "2023-02-24T14:10:17Z",
      "updated_at": "2023-02-24T14:12:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1117057952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117057952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117058463",
      "pull_request_review_id": 1313479671,
      "id": 1117058463,
      "node_id": "PRRC_kwDOABII585ClPWf",
      "diff_hunk": "@@ -1,30 +1,77 @@\n ### Verify Binaries\n \n-#### Usage:\n+#### Preparation\n \n-This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n-It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin-core/guix.sigs/tree/main/builder-keys) and\n+decide which of these keys you would like to trust. For each key you want to trust, you\n+must obtain that key for your local GPG installation.\n \n-The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n+You can obtain these keys by\n+  - through a browser using a key server (e.g. keyserver.ubuntu.com),\n+  - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n+  - you can run the packaged `verifybinaries.py ... --import-keys` script to \n+    have it automatically retrieve unrecognized keys.\n \n+#### Usage\n \n+This script attempts to download the checksum file (`SHA256SUMS`) and corresponding\n+signature file `SHA256SUMS.asc` from https://bitcoincore.org and https://bitcoin.org.\n+\n+It first checks if the checksum file is valid based upon a plurality of signatures, and\n+then downloads the release files specified in the checksum file, and checks if the\n+hashes of the release files are as expected.\n+\n+If we encounter pubkeys in the signature file that we do not recognize, the script\n+can prompt the user as to whether they'd like to download the pubkeys. To enable\n+this behavior, use the `--import-keys` flag.\n+\n+The script returns 0 if everything passes the checks. It returns 1 if either the\n+signature check or the hash check doesn't pass. An exit code of >2 indicates an error.\n+\n+See the `Config` object for various options.\n+\n+#### Examples\n+\n+Validate releases with default settings:\n+```sh\n+./contrib/verifybinaries/verify.py 22.0\n+./contrib/verifybinaries/verify.py 22.0-rc2\n+./contrib/verifybinaries/verify.py bitcoin-core-23.0\n+./contrib/verifybinaries/verify.py bitcoin-core-23.0-rc1\n+```\n+\n+Get JSON output and don't prompt for user input (no auto key import):\n+\n+```sh\n+./contrib/verifybinaries/verify.py 22.0-x86 --json\n+```\n+\n+Don't trust builder-keys by default, and rely only on local GPG state and manually\n+specified keys, while requiring a threshold of at least 10 trusted signatures:\n ```sh\n-./verify.py bitcoin-core-0.11.2\n-./verify.py bitcoin-core-0.12.0\n-./verify.py bitcoin-core-0.13.0-rc3\n+./contrib/verifybinaries/verify.py 22.0-x86 \\\n+    --no-trust-builder-keys \\",
      "path": "contrib/verifybinaries/README.md",
      "position": 68,
      "original_position": 68,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Where is the `--no-trust-builder-keys` option?",
      "created_at": "2023-02-24T14:10:38Z",
      "updated_at": "2023-02-24T14:12:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1117058463",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1117058463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1118115828",
      "pull_request_review_id": 1314697670,
      "id": 1118115828,
      "node_id": "PRRC_kwDOABII585CpRf0",
      "diff_hunk": "@@ -1,30 +1,77 @@\n ### Verify Binaries\n \n-#### Usage:\n+#### Preparation\n \n-This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n-It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin-core/guix.sigs/tree/main/builder-keys) and\n+decide which of these keys you would like to trust. For each key you want to trust, you\n+must obtain that key for your local GPG installation.\n \n-The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n+You can obtain these keys by\n+  - through a browser using a key server (e.g. keyserver.ubuntu.com),\n+  - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n+  - you can run the packaged `verifybinaries.py ... --import-keys` script to \n+    have it automatically retrieve unrecognized keys.\n \n+#### Usage\n \n+This script attempts to download the checksum file (`SHA256SUMS`) and corresponding\n+signature file `SHA256SUMS.asc` from https://bitcoincore.org and https://bitcoin.org.\n+\n+It first checks if the checksum file is valid based upon a plurality of signatures, and\n+then downloads the release files specified in the checksum file, and checks if the\n+hashes of the release files are as expected.\n+\n+If we encounter pubkeys in the signature file that we do not recognize, the script\n+can prompt the user as to whether they'd like to download the pubkeys. To enable\n+this behavior, use the `--import-keys` flag.\n+\n+The script returns 0 if everything passes the checks. It returns 1 if either the\n+signature check or the hash check doesn't pass. An exit code of >2 indicates an error.",
      "path": "contrib/verifybinaries/README.md",
      "position": 41,
      "original_position": 41,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nsignature check or the hash check doesn't pass. An exit code of >=2 indicates an error.\r\n```\r\nnon-blocking nit: could list all the individual return code's meaning here, or at least mention something like \"(see the `ReturnCode` class for individual error reasons)\".",
      "created_at": "2023-02-26T16:34:53Z",
      "updated_at": "2023-02-26T17:16:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1118115828",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1118115828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1118120078",
      "pull_request_review_id": 1314697670,
      "id": 1118120078,
      "node_id": "PRRC_kwDOABII585CpSiO",
      "diff_hunk": "@@ -47,136 +172,441 @@ def parse_version_string(version_str):\n     return version_base, version_rc, version_os\n \n \n-def download_with_wget(remote_file, local_file=None):\n-    if local_file:\n-        wget_args = ['wget', '-O', local_file, remote_file]\n-    else:\n-        # use timestamping mechanism if local filename is not explicitly set\n-        wget_args = ['wget', '-N', remote_file]\n-\n-    result = subprocess.run(wget_args,\n+def download_with_wget(remote_file, local_file):\n+    result = subprocess.run(['wget', '-O', local_file, remote_file],\n                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> t.Tuple[bool, t.List[str]]:\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return (True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()])\n+    except urllib.request.HTTPError as e:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError): {e}\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    args = [\n+        'gpg', '--yes', '--decrypt', '--verify-options', 'show-primary-uid-only',\n+        '--output', output_filename if output_filename else '', signature_filename]\n+\n+    env = dict(os.environ, LANGUAGE='en')\n+    result = subprocess.run(args, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, env=env)\n+    log.debug(f'Result from GPG ({result.returncode}): {result.stdout}')\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(\n+    output: t.List[str]\n+) -> t.Tuple[t.List[SigData], t.List[SigData], t.List[SigData]]:\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    # Ensure that all lines we match on include a prefix that prevents malicious input\n+    # from fooling the parser.\n+    def line_begins_with(patt: str, line: str) -> t.Optional[re.Match[str]]:\n+        return re.match(r'^\\s*(gpg:)?(\\s+)' + patt, line)\n+\n+    detected_name = ''\n+\n+    for i, line in enumerate(output):\n+        if line_begins_with(r\"using (ECDSA|RSA) key (0x[0-9a-fA-F]{16}|[0-9a-fA-F]{40})$\", line):\n+            if curr_key:\n+                raise RuntimeError(\n+                    f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n+                    \"this could mean we have encountered a bad signature! check GPG output!\")\n+            curr_key = line.split('key ')[-1].strip()\n+            assert len(curr_key) == 40 or (len(curr_key) == 18 and curr_key.startswith('0x'))\n+\n+        if line_begins_with(r\"Can't check signature: No public key$\", line):\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            unknown_sigs.append(SigData(curr_key, detected_name, False, ''))\n+            detected_name = ''\n+            curr_key = None\n+\n+        if line_begins_with(r'Good signature from (\".+\")(\\s+)(\\[.+\\])$', line):\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+\n+            # It's safe to index output[i + 1] because if we saw a good sig, there should\n+            # always be another line\n+            trusted = (\n+                'This key is not certified with a trusted signature' not in output[i + 1])\n+            good_sigs.append(SigData(curr_key, name, trusted, status))\n+            curr_key = None\n+\n+        if line_begins_with(\"issuer \", line):\n+            detected_name = line.split(\"issuer \")[-1].strip('\"')\n+\n+        if 'bad signature from' in line.lower():\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+            bad_sigs.append(SigData(curr_key, name, False, status))\n+            curr_key = None\n+\n+        # Track total signatures included\n+        if line_begins_with('Signature made ', line):\n+            total_resolved_sigs += 1\n+\n+    all_found = len(good_sigs + bad_sigs + unknown_sigs)\n+    if all_found != total_resolved_sigs:\n+        raise RuntimeError(\n+            f\"failed to evaluate all signatures: found {all_found} \"\n+            f\"but expected {total_resolved_sigs}\")\n+\n+    return (good_sigs, unknown_sigs, bad_sigs)\n+\n+\n+def parse_gpg_from_line(line: str) -> t.Tuple[str, str]:\n+    \"\"\"Returns name and expiration status.\"\"\"\n+    assert 'signature from' in line\n+\n+    name_end = line.split(' from ')[-1]\n+    m = re.search(r'(?P<name>\".+\") \\[(?P<status>\\w+)\\]', name_end)\n+    assert m\n+    (name, status) = m.groups()\n+    name = name.strip('\"\\'')\n+\n+    return (name, status)\n+\n+\n def files_are_equal(filename1, filename2):\n     with open(filename1, 'rb') as file1:\n         contents1 = file1.read()\n     with open(filename2, 'rb') as file2:\n         contents2 = file2.read()\n-    return contents1 == contents2\n+    eq = contents1 == contents2\n \n+    if not eq:\n+        with open(filename1, 'r', encoding='utf-8') as f1, \\\n+                open(filename2, 'r', encoding='utf-8') as f2:\n+            f1lines = f1.readlines()\n+            f2lines = f2.readlines()\n \n-def verify_with_gpg(signature_filename, output_filename):\n-    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n-                             output_filename, signature_filename],\n-                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n-    return result.returncode, result.stdout.decode().rstrip()\n+            diff = indent(\n+                ''.join(difflib.unified_diff(f1lines, f2lines)))\n+            log.warning(f\"found diff in files ({filename1}, {filename2}):\\n{diff}\\n\")\n \n+    return eq\n \n-def remove_files(filenames):\n-    for filename in filenames:\n-        os.remove(filename)\n+\n+def get_files_from_hosts_and_compare(\n+    hosts: t.List[str], path: str, filename: str, require_all: bool = False\n+) -> ReturnCode:\n+    \"\"\"\n+    Retrieve the same file from a number of hosts and ensure they have the same contents.\n+    The first host given will be treated as the \"primary\" host, and is required to succeed.\n+\n+    Args:\n+        filename: for writing the file locally.\n+    \"\"\"\n+    assert len(hosts) > 1\n+    primary_host = hosts[0]\n+    other_hosts = hosts[1:]\n+    got_files = []\n+\n+    def join_url(host: str) -> str:\n+        return host.rstrip('/') + '/' + path.lstrip('/')\n+\n+    url = join_url(primary_host)\n+    success, output = download_with_wget(url, filename)\n+    if not success:\n+        log.error(\n+            f\"couldn't fetch file ({url}). \"\n+            \"Have you specified the version number in the following format?\\n\"\n+            f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n+            f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n+            f\"wget output:\\n{indent(output)}\")\n+        return ReturnCode.FILE_GET_FAILED\n+    else:\n+        log.info(f\"got file {url} as {filename}\")\n+        got_files.append(filename)\n+\n+    for i, host in enumerate(other_hosts):\n+        url = join_url(host)\n+        fname = filename + f'.{i + 2}'\n+        success, output = download_with_wget(url, fname)\n+\n+        if require_all and not success:\n+            log.error(\n+                f\"{host} failed to provide file ({url}), but {primary_host} did?\\n\"\n+                f\"wget output:\\n{indent(output)}\")\n+            return ReturnCode.FILE_MISSING_FROM_ONE_HOST\n+        elif not success:\n+            log.warning(\n+                f\"{host} failed to provide file ({url}). \"\n+                f\"Continuing based solely upon {primary_host}.\")\n+        else:\n+            log.info(f\"got file {url} as {fname}\")\n+            got_files.append(fname)\n+\n+    for i, got_file in enumerate(got_files):\n+        if got_file == got_files[-1]:\n+            break  # break on last file, nothing after it to compare to\n+\n+        compare_to = got_files[i + 1]\n+        if not files_are_equal(got_file, compare_to):\n+            log.error(f\"files not equal: {got_file} and {compare_to}\")\n+            return ReturnCode.FILES_NOT_EQUAL\n+\n+    return ReturnCode.SUCCESS\n+\n+\n+def check_multisig(sigfilename: str, args: argparse.Namespace):\n+    # check signature\n+    #\n+    # We don't write output to a file because this command will almost certainly\n+    # fail with GPG exit code '2' (and so not writing to --output) because of the\n+    # likely presence of multiple untrusted signatures.\n+    retval, output = verify_with_gpg(sigfilename)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    if unknown and args.import_keys:\n+        # Retrieve unknown keys and then try GPG again.\n+        for unsig in unknown:\n+            if prompt_yn(f\" ? Retrieve key {unsig.key} ({unsig.name})? (y/N) \"):\n+                ran = subprocess.run(\n+                    [\"gpg\", \"--keyserver\", args.keyserver, \"--recv-keys\", unsig.key])\n+\n+                if ran.returncode != 0:\n+                    log.warning(f\"failed to retrieve key {unsig.key}\")\n+\n+        # Reparse the GPG output now that we have more keys\n+        retval, output = verify_with_gpg(sigfilename)\n+        good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    return retval, output, good, unknown, bad\n+\n+\n+def prompt_yn(prompt) -> bool:\n+    \"\"\"Return true if the user inputs 'y'.\"\"\"\n+    got = ''\n+    while got not in ['y', 'n']:\n+        got = input(prompt).lower()\n+    return got == 'y'\n \n \n def main(args):\n-    # sanity check\n-    if len(args) < 1:\n-        print(\"Error: need to specify a version on the command line\")\n-        return 3\n+    args = parser.parse_args()\n+    if args.quiet:\n+        log.setLevel(logging.WARNING)\n+\n+    WORKINGDIR = Path(tempfile.gettempdir()) / f\"bitcoin_verify_binaries.{args.version}\"\n+\n+    def cleanup():\n+        log.info(\"cleaning up files\")\n+        os.chdir(Path.home())\n+        shutil.rmtree(WORKINGDIR)\n \n     # determine remote dir dependent on provided version string\n-    version_base, version_rc, os_filter = parse_version_string(args[0])\n+    try:\n+        version_base, version_rc, os_filter = parse_version_string(args.version)\n+        version_tuple = [int(i) for i in version_base.split('.')]\n+    except Exception as e:\n+        log.debug(e)\n+        log.error(f\"unable to parse version; expected format is {VERSION_FORMAT}\")\n+        log.error(f\"  e.g. {VERSION_EXAMPLE}\")\n+        return ReturnCode.BAD_VERSION\n+\n     remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n     if version_rc:\n         remote_dir += f\"test.{version_rc}/\"\n-    remote_sigfile = remote_dir + SIGNATUREFILENAME\n+    remote_sigs_path = remote_dir + SIGNATUREFILENAME\n+    remote_sums_path = remote_dir + SUMS_FILENAME\n \n     # create working directory\n     os.makedirs(WORKINGDIR, exist_ok=True)\n     os.chdir(WORKINGDIR)\n \n-    # fetch first signature file\n-    sigfile1 = SIGNATUREFILENAME\n-    success, output = download_with_wget(HOST1 + remote_sigfile, sigfile1)\n-    if not success:\n-        print(\"Error: couldn't fetch signature file. \"\n-              \"Have you specified the version number in the following format?\")\n-        print(f\"[{VERSIONPREFIX}]<version>[-rc[0-9]][-platform] \"\n-              f\"(example: {VERSIONPREFIX}0.21.0-rc3-osx)\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n-        return 4\n-\n-    # fetch second signature file\n-    sigfile2 = SIGNATUREFILENAME + \".2\"\n-    success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n-    if not success:\n-        print(\"bitcoin.org failed to provide signature file, \"\n-              \"but bitcoincore.org did?\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n-        remove_files([sigfile1])\n-        return 5\n-\n-    # ensure that both signature files are equal\n-    if not files_are_equal(sigfile1, sigfile2):\n-        print(\"bitcoin.org and bitcoincore.org signature files were not equal?\")\n-        print(f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n-        return 6\n-\n-    # check signature and extract data into file\n-    retval, output = verify_with_gpg(sigfile1, HASHFILE)\n-    if retval != 0:\n-        if retval == 1:\n-            print(\"Bad signature.\")\n-        elif retval == 2:\n-            print(\"gpg error. Do you have the Bitcoin Core binary release \"\n-                  \"signing key installed?\")\n-        print(\"gpg output:\")\n-        print(indent(output, '\\t'))\n-        remove_files([sigfile1, sigfile2, HASHFILE])\n-        return 1\n+    hosts = [HOST1, HOST2]\n+\n+    got_sig_status = get_files_from_hosts_and_compare(\n+        hosts, remote_sigs_path, SIGNATUREFILENAME, args.require_all_hosts)\n+    if got_sig_status != ReturnCode.SUCCESS:\n+        return got_sig_status\n+\n+    # Multi-sig verification is available after 22.0.\n+    if version_tuple[0] >= 22:\n+        min_good_sigs = args.min_good_sigs\n+        gpg_allowed_codes = [0, 2]  # 2 is returned when untrusted signatures are present.\n+\n+        got_sums_status = get_files_from_hosts_and_compare(\n+            hosts, remote_sums_path, SUMS_FILENAME, args.require_all_hosts)\n+        if got_sums_status != ReturnCode.SUCCESS:\n+            return got_sums_status\n+\n+        gpg_retval, gpg_output, good, unknown, bad = check_multisig(SIGNATUREFILENAME, args)\n+    else:\n+        log.error(\"Version too old - single sig not supported. Use a previous \"\n+                  \"version of this script from the repo.\")\n+        return ReturnCode.BAD_VERSION\n+\n+    if gpg_retval not in gpg_allowed_codes:\n+        if gpg_retval == 1:\n+            log.critical(f\"Bad signature (code: {gpg_retval}).\")\n+        if gpg_retval == 2:\n+            log.critical(\n+                \"gpg error. Do you have the Bitcoin Core binary release \"\n+                \"signing key installed?\")",
      "path": "contrib/verifybinaries/verify.py",
      "position": 551,
      "original_position": 551,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like this is currently dead code, as the condition for `if` 3 lines above wouldn't be true if the retval is 2 (`gpg_allowed_codes` is set to contains 0 and 2 on line 469).",
      "created_at": "2023-02-26T17:05:55Z",
      "updated_at": "2023-02-26T17:16:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1118120078",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1118120078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": 485,
      "original_start_line": 485,
      "start_side": "RIGHT",
      "line": 488,
      "original_line": 488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1118122339",
      "pull_request_review_id": 1314703328,
      "id": 1118122339,
      "node_id": "PRRC_kwDOABII585CpTFj",
      "diff_hunk": "@@ -1,30 +1,77 @@\n ### Verify Binaries\n \n-#### Usage:\n+#### Preparation\n \n-This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n-It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin-core/guix.sigs/tree/main/builder-keys) and\n+decide which of these keys you would like to trust. For each key you want to trust, you\n+must obtain that key for your local GPG installation.\n \n-The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n+You can obtain these keys by\n+  - through a browser using a key server (e.g. keyserver.ubuntu.com),\n+  - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n+  - you can run the packaged `verifybinaries.py ... --import-keys` script to \n+    have it automatically retrieve unrecognized keys.\n \n+#### Usage\n \n+This script attempts to download the checksum file (`SHA256SUMS`) and corresponding\n+signature file `SHA256SUMS.asc` from https://bitcoincore.org and https://bitcoin.org.",
      "path": "contrib/verifybinaries/README.md",
      "position": 30,
      "original_position": 30,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "in_reply_to_id": 1117048617,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we decide to drop it, the `--require-all-hosts` option should probably also be reconsidered. Not saying that it should also be dropped (we could and probably _should_ have more than one host in the future), but at least the help text has to be adapted, which currently explicitly mentions both bitcoin.org and bitcoincore.org.",
      "created_at": "2023-02-26T17:21:52Z",
      "updated_at": "2023-02-26T17:21:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1118122339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1118122339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143891389",
      "pull_request_review_id": 1351239310,
      "id": 1143891389,
      "node_id": "PRRC_kwDOABII585ELmW9",
      "diff_hunk": "@@ -47,136 +172,441 @@ def parse_version_string(version_str):\n     return version_base, version_rc, version_os\n \n \n-def download_with_wget(remote_file, local_file=None):\n-    if local_file:\n-        wget_args = ['wget', '-O', local_file, remote_file]\n-    else:\n-        # use timestamping mechanism if local filename is not explicitly set\n-        wget_args = ['wget', '-N', remote_file]\n-\n-    result = subprocess.run(wget_args,\n+def download_with_wget(remote_file, local_file):\n+    result = subprocess.run(['wget', '-O', local_file, remote_file],\n                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> t.Tuple[bool, t.List[str]]:\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return (True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()])\n+    except urllib.request.HTTPError as e:\n+        log.warning(f\"HTTP request to {url} failed (HTTPError): {e}\")\n+    except Exception as e:\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    args = [\n+        'gpg', '--yes', '--decrypt', '--verify-options', 'show-primary-uid-only',\n+        '--output', output_filename if output_filename else '', signature_filename]",
      "path": "contrib/verifybinaries/verify.py",
      "position": 206,
      "original_position": 206,
      "commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "original_commit_id": "b42d8e523885fdb80d63e9a58bee674cb5045580",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "GPG's manpage suggests using `--status-fd` (or `--status-file`) to for unattended usage of gpg. This outputs machine parseable lines to the specified file descriptor (or file) that look like:\r\n\r\n```\r\n[GNUPG:] NEWSIG fanquake@gmail.com\r\n[GNUPG:] KEY_CONSIDERED E777299FC265DD04793070EB944D35F9AC3DB76A 0\r\n[GNUPG:] SIG_ID IpS4EHolPjGh7he2GCBYNha53aY 2022-11-17 1668711593\r\n[GNUPG:] KEY_CONSIDERED E777299FC265DD04793070EB944D35F9AC3DB76A 0\r\n[GNUPG:] GOODSIG 2EEB9F5CC09526C1 Michael Ford (bitcoin-otc) <fanquake@gmail.com>\r\n[GNUPG:] VALIDSIG CFB16E21C950F67FA95E558F2EEB9F5CC09526C1 2022-11-17 1668711593 0 4 0 1 8 00 E777299FC265DD04793070EB944D35F9AC3DB76A\r\n[GNUPG:] KEY_CONSIDERED E777299FC265DD04793070EB944D35F9AC3DB76A 0\r\n[GNUPG:] KEY_CONSIDERED E777299FC265DD04793070EB944D35F9AC3DB76A 0\r\n[GNUPG:] TRUST_UNDEFINED 0 pgp\r\n[GNUPG:] NEWSIG\r\n[GNUPG:] KEY_CONSIDERED 6B002C6EA3F91B1B0DF0C9BC8F617F1200A6D25C 0\r\n[GNUPG:] SIG_ID TVTce/SMh2FBof7NtPId5HC5MBo 2022-11-18 1668745859\r\n[GNUPG:] KEY_CONSIDERED 6B002C6EA3F91B1B0DF0C9BC8F617F1200A6D25C 0\r\n[GNUPG:] GOODSIG BA03F4DBE0C63FB4 Gloria Zhao <gloriazhao@berkeley.edu>\r\n[GNUPG:] VALIDSIG F19F5FF2B0589EC341220045BA03F4DBE0C63FB4 2022-11-18 1668745859 0 4 0 1 8 00 6B002C6EA3F91B1B0DF0C9BC8F617F1200A6D25C\r\n[GNUPG:] KEY_CONSIDERED 6B002C6EA3F91B1B0DF0C9BC8F617F1200A6D25C 0\r\n[GNUPG:] KEY_CONSIDERED 6B002C6EA3F91B1B0DF0C9BC8F617F1200A6D25C 0\r\n[GNUPG:] TRUST_UNDEFINED 0 pgp\r\n```\r\n\r\nThis should make the parsing done in `parse_gpg_output` simpler as the output should be consistently formatted for machine parsing.\r\n\r\nA description of this format can be found at https://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=blob;f=doc/DETAILS;h=e064c9d214506b4b9cea95448677afb2f885caee;hb=refs/heads/STABLE-BRANCH-2-2#l414\r\n\r\nThe docs also suggest using `--with-colons`, although it doesn't seem to make a difference in my testing.",
      "created_at": "2023-03-21T19:21:38Z",
      "updated_at": "2023-03-21T19:30:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23020#discussion_r1143891389",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143891389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23020"
        }
      },
      "start_line": 197,
      "original_start_line": 197,
      "start_side": "RIGHT",
      "line": 199,
      "original_line": 199,
      "side": "RIGHT"
    }
  ]
}