{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704",
    "id": 712827746,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NzEyODI3NzQ2",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22704",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/22704.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/22704.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
    "number": 22704,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "fuzz: Differential fuzzing to compare Bitcoin Core's and D. J. Bernstein's implementation of ChaCha20",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR compares Bitcoin Core's implementation of ChaCha20 with D. J. Bernstein's in order to find implementation discrepancies if any.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2021-08-14T19:28:18Z",
    "updated_at": "2022-12-24T10:04:28Z",
    "closed_at": "2021-12-17T15:56:40Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-12-17T15:56:39Z",
    "merge_commit_sha": "4ad59042b359f473d5888ecee0c9288dcf98f1c9",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "stratospher:diff-fuzz-chacha20",
      "ref": "diff-fuzz-chacha20",
      "sha": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 379929443,
        "node_id": "MDEwOlJlcG9zaXRvcnkzNzk5Mjk0NDM=",
        "name": "bitcoin",
        "full_name": "stratospher/bitcoin",
        "owner": {
          "login": "stratospher",
          "id": 44024636,
          "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
          "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stratospher",
          "html_url": "https://github.com/stratospher",
          "followers_url": "https://api.github.com/users/stratospher/followers",
          "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
          "organizations_url": "https://api.github.com/users/stratospher/orgs",
          "repos_url": "https://api.github.com/users/stratospher/repos",
          "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/stratospher/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/stratospher/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/stratospher/bitcoin",
        "archive_url": "https://api.github.com/repos/stratospher/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/stratospher/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/stratospher/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/stratospher/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/stratospher/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/stratospher/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/stratospher/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/stratospher/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/stratospher/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/stratospher/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/stratospher/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/stratospher/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/stratospher/bitcoin/events",
        "forks_url": "https://api.github.com/repos/stratospher/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/stratospher/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/stratospher/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/stratospher/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/stratospher/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/stratospher/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/stratospher/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/stratospher/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/stratospher/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/stratospher/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/stratospher/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/stratospher/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/stratospher/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/stratospher/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/stratospher/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/stratospher/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:stratospher/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/stratospher/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/stratospher/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/stratospher/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/stratospher/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/stratospher/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/stratospher/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/stratospher/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/stratospher/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/stratospher/bitcoin/hooks",
        "svn_url": "https://github.com/stratospher/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 225489,
        "default_branch": "master",
        "open_issues_count": 4,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-01T18:19:20Z",
        "created_at": "2021-06-24T13:12:06Z",
        "updated_at": "2022-01-06T18:58:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "50c502f54abd9eb15c8ddca013f0fdfae3d132a9",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 331,
    "deletions": 0,
    "changed_files": 2,
    "commits": 2,
    "review_comments": 19,
    "comments": 16
  },
  "events": [
    {
      "event": "commented",
      "id": 898950491,
      "node_id": "IC_kwDOABII5841lOVb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/898950491",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-14T19:38:48Z",
      "updated_at": "2021-08-14T19:38:48Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.\n\nWe have to implement crypto ourselves to keep the surface area small and avoid bringing in large dependencies. Differential fuzzing against a reference implementation is a great addition to testing the reference test vectors.\n\nThank you for your work, and welcome to Bitcoin Core!",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-898950491",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "subscribed",
      "id": 5159061655,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxNTkwNjE2NTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5159061655",
      "actor": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-14T20:08:16Z"
    },
    {
      "event": "labeled",
      "id": 5159101418,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDUxNTkxMDE0MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5159101418",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-14T21:11:12Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 5159296074,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NTE1OTI5NjA3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5159296074",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-15T03:26:37Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 5159296075,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDUxNTkyOTYwNzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5159296075",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-15T03:26:37Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "review_requested",
      "id": 5159296097,
      "node_id": "MDIwOlJldmlld1JlcXVlc3RlZEV2ZW50NTE1OTI5NjA5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5159296097",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-15T03:26:40Z",
      "requested_reviewer": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 898989809,
      "node_id": "IC_kwDOABII5841lX7x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/898989809",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-15T03:28:16Z",
      "updated_at": "2021-08-15T03:28:16Z",
      "author_association": "MEMBER",
      "body": "@agroce / @guidovranken this may also interest you.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-898989809",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "mentioned",
      "id": 5159296759,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE1OTI5Njc1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5159296759",
      "actor": {
        "login": "agroce",
        "id": 967816,
        "node_id": "MDQ6VXNlcjk2NzgxNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/967816?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/agroce",
        "html_url": "https://github.com/agroce",
        "followers_url": "https://api.github.com/users/agroce/followers",
        "following_url": "https://api.github.com/users/agroce/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/agroce/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/agroce/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/agroce/subscriptions",
        "organizations_url": "https://api.github.com/users/agroce/orgs",
        "repos_url": "https://api.github.com/users/agroce/repos",
        "events_url": "https://api.github.com/users/agroce/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/agroce/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-15T03:28:16Z"
    },
    {
      "event": "subscribed",
      "id": 5159296760,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxNTkyOTY3NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5159296760",
      "actor": {
        "login": "agroce",
        "id": 967816,
        "node_id": "MDQ6VXNlcjk2NzgxNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/967816?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/agroce",
        "html_url": "https://github.com/agroce",
        "followers_url": "https://api.github.com/users/agroce/followers",
        "following_url": "https://api.github.com/users/agroce/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/agroce/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/agroce/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/agroce/subscriptions",
        "organizations_url": "https://api.github.com/users/agroce/orgs",
        "repos_url": "https://api.github.com/users/agroce/repos",
        "events_url": "https://api.github.com/users/agroce/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/agroce/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-15T03:28:16Z"
    },
    {
      "event": "mentioned",
      "id": 5159296761,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE1OTI5Njc2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5159296761",
      "actor": {
        "login": "guidovranken",
        "id": 6846644,
        "node_id": "MDQ6VXNlcjY4NDY2NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6846644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guidovranken",
        "html_url": "https://github.com/guidovranken",
        "followers_url": "https://api.github.com/users/guidovranken/followers",
        "following_url": "https://api.github.com/users/guidovranken/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/guidovranken/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/guidovranken/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/guidovranken/subscriptions",
        "organizations_url": "https://api.github.com/users/guidovranken/orgs",
        "repos_url": "https://api.github.com/users/guidovranken/repos",
        "events_url": "https://api.github.com/users/guidovranken/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/guidovranken/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-15T03:28:16Z"
    },
    {
      "event": "subscribed",
      "id": 5159296763,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxNTkyOTY3NjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5159296763",
      "actor": {
        "login": "guidovranken",
        "id": 6846644,
        "node_id": "MDQ6VXNlcjY4NDY2NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6846644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guidovranken",
        "html_url": "https://github.com/guidovranken",
        "followers_url": "https://api.github.com/users/guidovranken/followers",
        "following_url": "https://api.github.com/users/guidovranken/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/guidovranken/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/guidovranken/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/guidovranken/subscriptions",
        "organizations_url": "https://api.github.com/users/guidovranken/orgs",
        "repos_url": "https://api.github.com/users/guidovranken/repos",
        "events_url": "https://api.github.com/users/guidovranken/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/guidovranken/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-15T03:28:16Z"
    },
    {
      "event": "commented",
      "id": 898991078,
      "node_id": "IC_kwDOABII5841lYPm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/898991078",
      "actor": {
        "login": "guidovranken",
        "id": 6846644,
        "node_id": "MDQ6VXNlcjY4NDY2NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6846644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guidovranken",
        "html_url": "https://github.com/guidovranken",
        "followers_url": "https://api.github.com/users/guidovranken/followers",
        "following_url": "https://api.github.com/users/guidovranken/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/guidovranken/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/guidovranken/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/guidovranken/subscriptions",
        "organizations_url": "https://api.github.com/users/guidovranken/orgs",
        "repos_url": "https://api.github.com/users/guidovranken/repos",
        "events_url": "https://api.github.com/users/guidovranken/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/guidovranken/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-15T03:48:35Z",
      "updated_at": "2021-08-15T03:48:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Essentially this is already done by Cryptofuzz which compares it against the Botan implementation, and is running on OSS-Fuzz in the bitcoin-core project\r\n\r\nhttps://github.com/guidovranken/cryptofuzz/blob/6dddb6bb97a2cd8d7bf915bca00d0411ccf5e1c0/modules/bitcoin/module.cpp#L417-L420",
      "user": {
        "login": "guidovranken",
        "id": 6846644,
        "node_id": "MDQ6VXNlcjY4NDY2NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6846644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guidovranken",
        "html_url": "https://github.com/guidovranken",
        "followers_url": "https://api.github.com/users/guidovranken/followers",
        "following_url": "https://api.github.com/users/guidovranken/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/guidovranken/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/guidovranken/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/guidovranken/subscriptions",
        "organizations_url": "https://api.github.com/users/guidovranken/orgs",
        "repos_url": "https://api.github.com/users/guidovranken/repos",
        "events_url": "https://api.github.com/users/guidovranken/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/guidovranken/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-898991078",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "commented",
      "id": 902156184,
      "node_id": "IC_kwDOABII5841xc-Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902156184",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T18:48:32Z",
      "updated_at": "2021-08-19T18:48:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Oh..I wasn't aware of the differential fuzzing for Bitcoin Core cryptographic libraries being done in Cryptofuzz. Crypofuzz is an incredible project! Could you please elaborate more on where the comparison with Botan implementation is happening?\r\n\r\nWould there be incremental value in fuzzing against D.J. Bernstein's reference implementation? And including the Keystream() function too in the Bitcoin Core/Cryptofuzz diferential fuzz tests?",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-902156184",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "reviewed",
      "id": 734359834,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM0MzU5ODM0",
      "url": null,
      "actor": null,
      "commit_id": "a63773439302f2cdef81e36c705bfd59046f6fa0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "See also #19920",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#pullrequestreview-734359834",
      "submitted_at": "2021-08-19T19:00:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
    },
    {
      "event": "commented",
      "id": 902164938,
      "node_id": "IC_kwDOABII5841xfHK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902164938",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T19:02:11Z",
      "updated_at": "2021-08-19T19:02:11Z",
      "author_association": "MEMBER",
      "body": "btw, I don't mind adding the fuzz test here, even if it is redundant with oss-fuzz. Oss-fuzz is just one fuzzing providre, but I also run my own fuzzing servers to not put all eggs into one basket. I am sure others are running the Bitcoin Core fuzz target, too.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-902164938",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "commented",
      "id": 902167984,
      "node_id": "IC_kwDOABII5841xf2w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902167984",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T19:06:03Z",
      "updated_at": "2021-08-19T19:06:03Z",
      "author_association": "MEMBER",
      "body": "+1 for what @MarcoFalke said. It'd be nice to be able to run this along with other fuzz targets on personal machines.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-902167984",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "mentioned",
      "id": 5183076336,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE4MzA3NjMzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5183076336",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T19:06:04Z"
    },
    {
      "event": "subscribed",
      "id": 5183076343,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxODMwNzYzNDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5183076343",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T19:06:04Z"
    },
    {
      "event": "commented",
      "id": 902254545,
      "node_id": "IC_kwDOABII5841x0_R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902254545",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T21:18:17Z",
      "updated_at": "2021-08-19T21:18:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK for the reasons @MarcoFalke mentioned",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-902254545",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "mentioned",
      "id": 5183643251,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE4MzY0MzI1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5183643251",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T21:18:17Z"
    },
    {
      "event": "subscribed",
      "id": 5183643253,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxODM2NDMyNTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5183643253",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T21:18:17Z"
    },
    {
      "event": "commented",
      "id": 902296051,
      "node_id": "IC_kwDOABII5841x_Hz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902296051",
      "actor": {
        "login": "agroce",
        "id": 967816,
        "node_id": "MDQ6VXNlcjk2NzgxNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/967816?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/agroce",
        "html_url": "https://github.com/agroce",
        "followers_url": "https://api.github.com/users/agroce/followers",
        "following_url": "https://api.github.com/users/agroce/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/agroce/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/agroce/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/agroce/subscriptions",
        "organizations_url": "https://api.github.com/users/agroce/orgs",
        "repos_url": "https://api.github.com/users/agroce/repos",
        "events_url": "https://api.github.com/users/agroce/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/agroce/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T22:34:39Z",
      "updated_at": "2021-08-19T22:34:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "There are fuzzers (e.g. https://github.com/bitcoin/bitcoin/pull/22585) not available via OSS-Fuzz, also.",
      "user": {
        "login": "agroce",
        "id": 967816,
        "node_id": "MDQ6VXNlcjk2NzgxNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/967816?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/agroce",
        "html_url": "https://github.com/agroce",
        "followers_url": "https://api.github.com/users/agroce/followers",
        "following_url": "https://api.github.com/users/agroce/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/agroce/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/agroce/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/agroce/subscriptions",
        "organizations_url": "https://api.github.com/users/agroce/orgs",
        "repos_url": "https://api.github.com/users/agroce/repos",
        "events_url": "https://api.github.com/users/agroce/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/agroce/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-902296051",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5185092130,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTE4NTA5MjEzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5185092130",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-20T06:46:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5188717302,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTE4ODcxNzMwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5188717302",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-20T20:59:46Z"
    },
    {
      "event": "commented",
      "id": 942945385,
      "node_id": "IC_kwDOABII5844NDRp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/942945385",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-14T04:52:49Z",
      "updated_at": "2021-10-14T04:52:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Added `LIMITED_WHILE` and updated `ConsumeIntegralInRange()` to `ConsumeBool()` as per discussion in [comments](https://github.com/bitcoin/bitcoin/pull/22704#discussion_r692403396).\r\nReady for further review.",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-942945385",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "commented",
      "id": 948773721,
      "node_id": "IC_kwDOABII5844jSNZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/948773721",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-21T16:20:31Z",
      "updated_at": "2021-11-06T00:58:05Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23441](https://github.com/bitcoin/bitcoin/pull/23441) (fuzz: Differential fuzzing for ChaCha20Forward4064-Poly1305@bitcoin cipher suite by stratospher)\n* [#23322](https://github.com/bitcoin/bitcoin/pull/23322) ([Fuzz] Poly1305 differential fuzzing against Floodyberry's implementation by prakash1512)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-948773721",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "reviewed",
      "id": 817158428,
      "node_id": "PRR_kwDOABII584wtNkc",
      "url": null,
      "actor": null,
      "commit_id": "258d751c1c0363a880889275b4c567118b779ba1",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "utACK 258d751. I compared this code change against [DJ Bernstein's chacha20](https://cr.yp.to/streamciphers/timings/estreambench/submissions/salsa20/chacha8/merged/chacha.c) implementation. The changes look good!\r\n\r\nI am yet to test the changes on my local machine. Feel free to ignore the nits that I suggested :)",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#pullrequestreview-817158428",
      "submitted_at": "2021-11-27T22:28:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
    },
    {
      "event": "reviewed",
      "id": 817159772,
      "node_id": "PRR_kwDOABII584wtN5c",
      "url": null,
      "actor": null,
      "commit_id": "258d751c1c0363a880889275b4c567118b779ba1",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "utACK 258d751. I compared this code change against DJ Bernstein's chacha20 implementation. The changes look good!\r\n\r\nI am yet to test the changes on my local machine. Feel free to ignore the nits that I suggested :)",
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#pullrequestreview-817159772",
      "submitted_at": "2021-11-27T22:28:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5715317057,
      "node_id": "HRFPE_lADOABII58453_uIzwAAAAFUqNFB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5715317057",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-04T06:12:33Z"
    },
    {
      "event": "commented",
      "id": 985977476,
      "node_id": "IC_kwDOABII5846xNKE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/985977476",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-04T06:20:42Z",
      "updated_at": "2021-12-04T06:20:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Addressed [#22704(comment)](https://github.com/bitcoin/bitcoin/pull/22704#discussion_r757818918). (Thanks @siv2r!) Ready for further review.",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-985977476",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "mentioned",
      "id": 5715322659,
      "node_id": "MEE_lADOABII58453_uIzwAAAAFUqOcj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5715322659",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-04T06:20:42Z"
    },
    {
      "event": "subscribed",
      "id": 5715322660,
      "node_id": "SE_lADOABII58453_uIzwAAAAFUqOck",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5715322660",
      "actor": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-04T06:20:42Z"
    },
    {
      "event": "commented",
      "id": 991308926,
      "node_id": "IC_kwDOABII5847Fix-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/991308926",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-10T21:32:03Z",
      "updated_at": "2021-12-10T21:32:03Z",
      "author_association": "MEMBER",
      "body": "You might want to set a different author name for your commits than \"root\" if you want to be credited properly in the release notes.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-991308926",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY1ZWY5MzIwM2NjNmE5NzdjOGU5NmYwN2NiOTE1NWY0NmZhZjUwMDQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65ef93203cc6a977c8e96f07cb9155f46faf5004",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/65ef93203cc6a977c8e96f07cb9155f46faf5004",
      "tree": {
        "sha": "74713958b021e80860a8328d5657f893205fc812",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74713958b021e80860a8328d5657f893205fc812"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/927a9b07776881d99340259f214c577537dbc77f",
          "sha": "927a9b07776881d99340259f214c577537dbc77f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/927a9b07776881d99340259f214c577537dbc77f"
        }
      ],
      "message": "[fuzz] Add D. J. Bernstein's implementation of ChaCha20\n\nCo-authored-by: Prakash Choudhary <44579179+prakash1512@users.noreply.github.com>",
      "committer": {
        "name": "stratospher",
        "email": "ruhiasap@gmail.com",
        "date": "2021-12-11T02:59:34Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2021-08-07T10:51:34Z"
      },
      "sha": "65ef93203cc6a977c8e96f07cb9155f46faf5004"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRkMGFjNzJmM2FlNzhlM2M2YTBkNWRjNGY3ZTgwOTU4M2FiZDA1NDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "tree": {
        "sha": "779ad16c51b2986d070a1bd80658f662f386dd7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/779ad16c51b2986d070a1bd80658f662f386dd7b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65ef93203cc6a977c8e96f07cb9155f46faf5004",
          "sha": "65ef93203cc6a977c8e96f07cb9155f46faf5004",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/65ef93203cc6a977c8e96f07cb9155f46faf5004"
        }
      ],
      "message": "[fuzz] Add fuzzing harness to compare both implementations of ChaCha20\n\nCo-authored-by: Prakash Choudhary <44579179+prakash1512@users.noreply.github.com>",
      "committer": {
        "name": "stratospher",
        "email": "ruhiasap@gmail.com",
        "date": "2021-12-11T02:59:34Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2021-08-07T10:55:33Z"
      },
      "sha": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5750895527,
      "node_id": "HRFPE_lADOABII58453_uIzwAAAAFWx7On",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5750895527",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-11T03:01:56Z"
    },
    {
      "event": "commented",
      "id": 991426211,
      "node_id": "IC_kwDOABII5847F_aj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/991426211",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-11T03:12:00Z",
      "updated_at": "2021-12-11T03:13:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "> You might want to set a different author name for your commits than \"root\" if you want to be credited properly in the release notes.\r\n\r\nThank you for letting me know! I've updated the author name.",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-991426211",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "commented",
      "id": 996829640,
      "node_id": "IC_kwDOABII5847amnI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/996829640",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-17T15:53:49Z",
      "updated_at": "2021-12-17T15:53:49Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-996829640",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "merged",
      "id": 5785487578,
      "node_id": "ME_lADOABII58453_uIzwAAAAFY14ja",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5785487578",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4ad59042b359f473d5888ecee0c9288dcf98f1c9",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ad59042b359f473d5888ecee0c9288dcf98f1c9",
      "created_at": "2021-12-17T15:56:39Z"
    },
    {
      "event": "closed",
      "id": 5785487589,
      "node_id": "CE_lADOABII58453_uIzwAAAAFY14jl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5785487589",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-17T15:56:40Z"
    },
    {
      "event": "reviewed",
      "id": 835398234,
      "node_id": "PRR_kwDOABII584xyypa",
      "url": null,
      "actor": null,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#pullrequestreview-835398234",
      "submitted_at": "2021-12-17T16:04:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
    },
    {
      "event": "commented",
      "id": 996912422,
      "node_id": "IC_kwDOABII5847a60m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/996912422",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-17T17:56:48Z",
      "updated_at": "2021-12-17T17:56:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the review @MarcoFalke. I've opened #23806 to address your comments.",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-996912422",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "mentioned",
      "id": 5786091632,
      "node_id": "MEE_lADOABII58453_uIzwAAAAFY4MBw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5786091632",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-17T17:56:48Z"
    },
    {
      "event": "subscribed",
      "id": 5786091640,
      "node_id": "SE_lADOABII58453_uIzwAAAAFY4MB4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5786091640",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-17T17:56:48Z"
    },
    {
      "event": "referenced",
      "id": 5787680311,
      "node_id": "REFE_lADOABII58453_uIzwAAAAFY-P43",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5787680311",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "61a96146451740dd0529952cfd4daf12b3cbf359",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/61a96146451740dd0529952cfd4daf12b3cbf359",
      "created_at": "2021-12-18T05:34:00Z"
    },
    {
      "event": "referenced",
      "id": 5787828251,
      "node_id": "REFE_lADOABII58453_uIzwAAAAFY-0Ab",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5787828251",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "98a2ddcd6ed01a38cd0dad7c1abc7023a60d3fd0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98a2ddcd6ed01a38cd0dad7c1abc7023a60d3fd0",
      "created_at": "2021-12-18T09:10:11Z"
    },
    {
      "event": "referenced",
      "id": 5788415537,
      "node_id": "REFE_lADOABII58453_uIzwAAAAFZBDYx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5788415537",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "946b51d2086847caa559e5e68c731bdd14527dbc",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/946b51d2086847caa559e5e68c731bdd14527dbc",
      "created_at": "2021-12-18T19:42:09Z"
    },
    {
      "event": "commented",
      "id": 1000804547,
      "node_id": "IC_kwDOABII5847pxDD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1000804547",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-24T11:37:39Z",
      "updated_at": "2021-12-24T11:37:39Z",
      "author_association": "MEMBER",
      "body": "```\r\n# FUZZ=crypto_diff_fuzz_chacha20 /root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz ./scratch/fuzz_gen/code/crash-03f91945a7518033b0df73bf35c2caa452126610 \r\nINFO: Running with entropic power schedule (0xFF, 100).\r\nINFO: Seed: 3283247107\r\nINFO: Loaded 1 modules   (306045 inline 8-bit counters): 306045 [0x55c5b9987bc0, 0x55c5b99d273d), \r\nINFO: Loaded 1 PC tables (306045 PCs): 306045 [0x55c5b99d2740,0x55c5b9e7df10), \r\n/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz: Running 1 inputs 1 time(s) each.\r\nRunning: ./scratch/fuzz_gen/code/crash-03f91945a7518033b0df73bf35c2caa452126610\r\ntest/fuzz/crypto_diff_fuzz_chacha20.cpp:179:13: runtime error: left shift of 268500992 by 8 places cannot be represented in type 'unsigned int'\r\n    #0 0x55c5b722ff9b in ECRYPT_encrypt_bytes(ECRYPT_ctx*, unsigned char const*, unsigned char*, unsigned int) src/test/fuzz/crypto_diff_fuzz_chacha20.cpp:179:13\r\n    #1 0x55c5b723a342 in ECRYPT_keystream_bytes(ECRYPT_ctx*, unsigned char*, unsigned int) src/test/fuzz/crypto_diff_fuzz_chacha20.cpp:265:5\r\n    #2 0x55c5b723a342 in crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_3::operator()() const src/test/fuzz/crypto_diff_fuzz_chacha20.cpp:316:17\r\n    #3 0x55c5b723a342 in unsigned long CallOneOf<crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_0, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_1, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_2, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_3, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_4>(FuzzedDataProvider&, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_0, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_1, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_2, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_3, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_4) src/./test/fuzz/util.h:49:27\r\n    #4 0x55c5b72393d5 in crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>) src/test/fuzz/crypto_diff_fuzz_chacha20.cpp:289:9\r\n    #5 0x55c5b7167628 in std::_Function_handler<void (Span<unsigned char const>), void (*)(Span<unsigned char const>)>::_M_invoke(std::_Any_data const&, Span<unsigned char const>&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:300:2\r\n    #6 0x55c5b80f997d in std::function<void (Span<unsigned char const>)>::operator()(Span<unsigned char const>) const /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:688:14\r\n    #7 0x55c5b80f9628 in LLVMFuzzerTestOneInput src/test/fuzz/fuzz.cpp:91:5\r\n    #8 0x55c5b7076fb3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x1461fb3)\r\n    #9 0x55c5b706037f in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x144b37f)\r\n    #10 0x55c5b706615c in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x145115c)\r\n    #11 0x55c5b7090d72 in main (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x147bd72)\r\n    #12 0x7f395fca90b2 in __libc_start_main /build/glibc-eX1tMB/glibc-2.31/csu/../csu/libc-start.c:308:16\r\n    #13 0x55c5b705ab0d in _start (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x1445b0d)\r\n\r\nSUMMARY: UndefinedBehaviorSanitizer: invalid-shift-base test/fuzz/crypto_diff_fuzz_chacha20.cpp:179:13 in \r\n```\r\n\r\n```\r\n# base64 ./scratch/fuzz_gen/code/crash-03f91945a7518033b0df73bf35c2caa452126610 \r\n9tXRyA==\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-1000804547",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22704"
    },
    {
      "event": "reviewed",
      "id": 839888777,
      "node_id": "PRR_kwDOABII584yD6-J",
      "url": null,
      "actor": null,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#pullrequestreview-839888777",
      "submitted_at": "2021-12-24T11:43:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
    },
    {
      "event": "added_to_project",
      "id": 6310114943,
      "node_id": "ATPE_lADOABII58453_uIzwAAAAF4HLZ_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6310114943",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-25T21:23:56Z",
      "project_card": {
        "id": 79693924,
        "url": "https://api.github.com/projects/columns/cards/79693924",
        "project_id": 13452186,
        "project_url": "https://api.github.com/projects/13452186",
        "column_name": "Done"
      }
    },
    {
      "event": "locked",
      "id": 8107054305,
      "node_id": "LOE_lADOABII58453_uIzwAAAAHjN9Th",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8107054305",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-24T10:04:28Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692403396",
      "pull_request_review_id": 734359834,
      "id": 692403396,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjQwMzM5Ng==",
      "diff_hunk": "@@ -0,0 +1,334 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void ECRYPT_keysetup(ECRYPT_ctx* x, const u8* k, u32 kbits, u32 ivbits)\n+{\n+    const char* constants;\n+\n+    x->input[4] = U8TO32_LITTLE(k + 0);\n+    x->input[5] = U8TO32_LITTLE(k + 4);\n+    x->input[6] = U8TO32_LITTLE(k + 8);\n+    x->input[7] = U8TO32_LITTLE(k + 12);\n+    if (kbits == 256) { /* recommended */\n+        k += 16;\n+        constants = sigma;\n+    } else { /* kbits == 128 */\n+        constants = tau;\n+    }\n+    x->input[8] = U8TO32_LITTLE(k + 0);\n+    x->input[9] = U8TO32_LITTLE(k + 4);\n+    x->input[10] = U8TO32_LITTLE(k + 8);\n+    x->input[11] = U8TO32_LITTLE(k + 12);\n+    x->input[0] = U8TO32_LITTLE(constants + 0);\n+    x->input[1] = U8TO32_LITTLE(constants + 4);\n+    x->input[2] = U8TO32_LITTLE(constants + 8);\n+    x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void ECRYPT_ivsetup(ECRYPT_ctx* x, const u8* iv)\n+{\n+    x->input[12] = 0;\n+    x->input[13] = 0;\n+    x->input[14] = U8TO32_LITTLE(iv + 0);\n+    x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx* x, const u8* m, u8* c, u32 bytes)\n+{\n+    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+    u8* ctarget = NULL;\n+    u8 tmp[64];\n+    uint32_t i;\n+\n+    if (!bytes) return;\n+\n+    j0 = x->input[0];\n+    j1 = x->input[1];\n+    j2 = x->input[2];\n+    j3 = x->input[3];\n+    j4 = x->input[4];\n+    j5 = x->input[5];\n+    j6 = x->input[6];\n+    j7 = x->input[7];\n+    j8 = x->input[8];\n+    j9 = x->input[9];\n+    j10 = x->input[10];\n+    j11 = x->input[11];\n+    j12 = x->input[12];\n+    j13 = x->input[13];\n+    j14 = x->input[14];\n+    j15 = x->input[15];\n+\n+    for (;;) {\n+        if (bytes < 64) {\n+            for (i = 0; i < bytes; ++i)\n+                tmp[i] = m[i];\n+            m = tmp;\n+            ctarget = c;\n+            c = tmp;\n+        }\n+        x0 = j0;\n+        x1 = j1;\n+        x2 = j2;\n+        x3 = j3;\n+        x4 = j4;\n+        x5 = j5;\n+        x6 = j6;\n+        x7 = j7;\n+        x8 = j8;\n+        x9 = j9;\n+        x10 = j10;\n+        x11 = j11;\n+        x12 = j12;\n+        x13 = j13;\n+        x14 = j14;\n+        x15 = j15;\n+        for (i = 20; i > 0; i -= 2) {\n+            QUARTERROUND(x0, x4, x8, x12)\n+            QUARTERROUND(x1, x5, x9, x13)\n+            QUARTERROUND(x2, x6, x10, x14)\n+            QUARTERROUND(x3, x7, x11, x15)\n+            QUARTERROUND(x0, x5, x10, x15)\n+            QUARTERROUND(x1, x6, x11, x12)\n+            QUARTERROUND(x2, x7, x8, x13)\n+            QUARTERROUND(x3, x4, x9, x14)\n+        }\n+        x0 = PLUS(x0, j0);\n+        x1 = PLUS(x1, j1);\n+        x2 = PLUS(x2, j2);\n+        x3 = PLUS(x3, j3);\n+        x4 = PLUS(x4, j4);\n+        x5 = PLUS(x5, j5);\n+        x6 = PLUS(x6, j6);\n+        x7 = PLUS(x7, j7);\n+        x8 = PLUS(x8, j8);\n+        x9 = PLUS(x9, j9);\n+        x10 = PLUS(x10, j10);\n+        x11 = PLUS(x11, j11);\n+        x12 = PLUS(x12, j12);\n+        x13 = PLUS(x13, j13);\n+        x14 = PLUS(x14, j14);\n+        x15 = PLUS(x15, j15);\n+\n+        x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+        x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+        x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+        x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+        x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+        x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+        x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+        x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+        x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+        x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+        x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+        x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+        x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+        x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+        x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+        x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+        j12 = PLUSONE(j12);\n+        if (!j12) {\n+            j13 = PLUSONE(j13);\n+            /* stopping at 2^70 bytes per nonce is user's responsibility */\n+        }\n+\n+        U32TO8_LITTLE(c + 0, x0);\n+        U32TO8_LITTLE(c + 4, x1);\n+        U32TO8_LITTLE(c + 8, x2);\n+        U32TO8_LITTLE(c + 12, x3);\n+        U32TO8_LITTLE(c + 16, x4);\n+        U32TO8_LITTLE(c + 20, x5);\n+        U32TO8_LITTLE(c + 24, x6);\n+        U32TO8_LITTLE(c + 28, x7);\n+        U32TO8_LITTLE(c + 32, x8);\n+        U32TO8_LITTLE(c + 36, x9);\n+        U32TO8_LITTLE(c + 40, x10);\n+        U32TO8_LITTLE(c + 44, x11);\n+        U32TO8_LITTLE(c + 48, x12);\n+        U32TO8_LITTLE(c + 52, x13);\n+        U32TO8_LITTLE(c + 56, x14);\n+        U32TO8_LITTLE(c + 60, x15);\n+\n+        if (bytes <= 64) {\n+            if (bytes < 64) {\n+                for (i = 0; i < bytes; ++i)\n+                    ctarget[i] = c[i];\n+            }\n+            x->input[12] = j12;\n+            x->input[13] = j13;\n+            return;\n+        }\n+        bytes -= 64;\n+        c += 64;\n+        m += 64;\n+    }\n+}\n+\n+void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n+{\n+    u32 i;\n+    for (i = 0; i < bytes; ++i)\n+        stream[i] = 0;\n+    ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n+}\n+\n+FUZZ_TARGET(crypto_diff_fuzz_chacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    ChaCha20 chacha20;\n+    ECRYPT_ctx ctx;\n+    // D. J. Bernstein doesn't initialise ctx to 0 while Bitcoin Core initialises chacha20 to 0 in the constructor\n+    for (int i = 0; i < 16; i++) {\n+        ctx.input[i] = 0;\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+        chacha20 = ChaCha20{key.data(), key.size()};\n+        ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+        // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+        uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+        ECRYPT_ivsetup(&ctx, iv);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, 100) >= 10) {",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": null,
      "original_position": 292,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "a63773439302f2cdef81e36c705bfd59046f6fa0",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "how is this different from\r\n\r\n```suggestion\r\n    while (fuzzed_data_provider.ConsumeBool()) {\r\n```\r\n\r\nAlso, could use `LIMITED_WHILE` to avoid unlimited runtime.",
      "created_at": "2021-08-19T18:59:42Z",
      "updated_at": "2021-08-19T19:00:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r692403396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692403396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692702350",
      "pull_request_review_id": 734714644,
      "id": 692702350,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjcwMjM1MA==",
      "diff_hunk": "@@ -0,0 +1,334 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void ECRYPT_keysetup(ECRYPT_ctx* x, const u8* k, u32 kbits, u32 ivbits)\n+{\n+    const char* constants;\n+\n+    x->input[4] = U8TO32_LITTLE(k + 0);\n+    x->input[5] = U8TO32_LITTLE(k + 4);\n+    x->input[6] = U8TO32_LITTLE(k + 8);\n+    x->input[7] = U8TO32_LITTLE(k + 12);\n+    if (kbits == 256) { /* recommended */\n+        k += 16;\n+        constants = sigma;\n+    } else { /* kbits == 128 */\n+        constants = tau;\n+    }\n+    x->input[8] = U8TO32_LITTLE(k + 0);\n+    x->input[9] = U8TO32_LITTLE(k + 4);\n+    x->input[10] = U8TO32_LITTLE(k + 8);\n+    x->input[11] = U8TO32_LITTLE(k + 12);\n+    x->input[0] = U8TO32_LITTLE(constants + 0);\n+    x->input[1] = U8TO32_LITTLE(constants + 4);\n+    x->input[2] = U8TO32_LITTLE(constants + 8);\n+    x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void ECRYPT_ivsetup(ECRYPT_ctx* x, const u8* iv)\n+{\n+    x->input[12] = 0;\n+    x->input[13] = 0;\n+    x->input[14] = U8TO32_LITTLE(iv + 0);\n+    x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx* x, const u8* m, u8* c, u32 bytes)\n+{\n+    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+    u8* ctarget = NULL;\n+    u8 tmp[64];\n+    uint32_t i;\n+\n+    if (!bytes) return;\n+\n+    j0 = x->input[0];\n+    j1 = x->input[1];\n+    j2 = x->input[2];\n+    j3 = x->input[3];\n+    j4 = x->input[4];\n+    j5 = x->input[5];\n+    j6 = x->input[6];\n+    j7 = x->input[7];\n+    j8 = x->input[8];\n+    j9 = x->input[9];\n+    j10 = x->input[10];\n+    j11 = x->input[11];\n+    j12 = x->input[12];\n+    j13 = x->input[13];\n+    j14 = x->input[14];\n+    j15 = x->input[15];\n+\n+    for (;;) {\n+        if (bytes < 64) {\n+            for (i = 0; i < bytes; ++i)\n+                tmp[i] = m[i];\n+            m = tmp;\n+            ctarget = c;\n+            c = tmp;\n+        }\n+        x0 = j0;\n+        x1 = j1;\n+        x2 = j2;\n+        x3 = j3;\n+        x4 = j4;\n+        x5 = j5;\n+        x6 = j6;\n+        x7 = j7;\n+        x8 = j8;\n+        x9 = j9;\n+        x10 = j10;\n+        x11 = j11;\n+        x12 = j12;\n+        x13 = j13;\n+        x14 = j14;\n+        x15 = j15;\n+        for (i = 20; i > 0; i -= 2) {\n+            QUARTERROUND(x0, x4, x8, x12)\n+            QUARTERROUND(x1, x5, x9, x13)\n+            QUARTERROUND(x2, x6, x10, x14)\n+            QUARTERROUND(x3, x7, x11, x15)\n+            QUARTERROUND(x0, x5, x10, x15)\n+            QUARTERROUND(x1, x6, x11, x12)\n+            QUARTERROUND(x2, x7, x8, x13)\n+            QUARTERROUND(x3, x4, x9, x14)\n+        }\n+        x0 = PLUS(x0, j0);\n+        x1 = PLUS(x1, j1);\n+        x2 = PLUS(x2, j2);\n+        x3 = PLUS(x3, j3);\n+        x4 = PLUS(x4, j4);\n+        x5 = PLUS(x5, j5);\n+        x6 = PLUS(x6, j6);\n+        x7 = PLUS(x7, j7);\n+        x8 = PLUS(x8, j8);\n+        x9 = PLUS(x9, j9);\n+        x10 = PLUS(x10, j10);\n+        x11 = PLUS(x11, j11);\n+        x12 = PLUS(x12, j12);\n+        x13 = PLUS(x13, j13);\n+        x14 = PLUS(x14, j14);\n+        x15 = PLUS(x15, j15);\n+\n+        x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+        x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+        x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+        x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+        x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+        x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+        x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+        x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+        x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+        x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+        x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+        x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+        x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+        x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+        x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+        x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+        j12 = PLUSONE(j12);\n+        if (!j12) {\n+            j13 = PLUSONE(j13);\n+            /* stopping at 2^70 bytes per nonce is user's responsibility */\n+        }\n+\n+        U32TO8_LITTLE(c + 0, x0);\n+        U32TO8_LITTLE(c + 4, x1);\n+        U32TO8_LITTLE(c + 8, x2);\n+        U32TO8_LITTLE(c + 12, x3);\n+        U32TO8_LITTLE(c + 16, x4);\n+        U32TO8_LITTLE(c + 20, x5);\n+        U32TO8_LITTLE(c + 24, x6);\n+        U32TO8_LITTLE(c + 28, x7);\n+        U32TO8_LITTLE(c + 32, x8);\n+        U32TO8_LITTLE(c + 36, x9);\n+        U32TO8_LITTLE(c + 40, x10);\n+        U32TO8_LITTLE(c + 44, x11);\n+        U32TO8_LITTLE(c + 48, x12);\n+        U32TO8_LITTLE(c + 52, x13);\n+        U32TO8_LITTLE(c + 56, x14);\n+        U32TO8_LITTLE(c + 60, x15);\n+\n+        if (bytes <= 64) {\n+            if (bytes < 64) {\n+                for (i = 0; i < bytes; ++i)\n+                    ctarget[i] = c[i];\n+            }\n+            x->input[12] = j12;\n+            x->input[13] = j13;\n+            return;\n+        }\n+        bytes -= 64;\n+        c += 64;\n+        m += 64;\n+    }\n+}\n+\n+void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n+{\n+    u32 i;\n+    for (i = 0; i < bytes; ++i)\n+        stream[i] = 0;\n+    ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n+}\n+\n+FUZZ_TARGET(crypto_diff_fuzz_chacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    ChaCha20 chacha20;\n+    ECRYPT_ctx ctx;\n+    // D. J. Bernstein doesn't initialise ctx to 0 while Bitcoin Core initialises chacha20 to 0 in the constructor\n+    for (int i = 0; i < 16; i++) {\n+        ctx.input[i] = 0;\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+        chacha20 = ChaCha20{key.data(), key.size()};\n+        ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+        // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+        uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+        ECRYPT_ivsetup(&ctx, iv);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, 100) >= 10) {",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": null,
      "original_position": 292,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "a63773439302f2cdef81e36c705bfd59046f6fa0",
      "in_reply_to_id": 692403396,
      "user": {
        "login": "prakash1512",
        "id": 44579179,
        "node_id": "MDQ6VXNlcjQ0NTc5MTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/44579179?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prakash1512",
        "html_url": "https://github.com/prakash1512",
        "followers_url": "https://api.github.com/users/prakash1512/followers",
        "following_url": "https://api.github.com/users/prakash1512/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prakash1512/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prakash1512/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prakash1512/subscriptions",
        "organizations_url": "https://api.github.com/users/prakash1512/orgs",
        "repos_url": "https://api.github.com/users/prakash1512/repos",
        "events_url": "https://api.github.com/users/prakash1512/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prakash1512/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> how is this different from\r\n\r\nIncreased the probability of entering the while loop as `ConsumeBool()` has only 50% chance of returning true while `ConsumeIntegralInRange<uint32_t>(0,100) >= 10` will have 90% chance of returning true.\r\nEssentially we’re trying to get the test running longer for each fuzz seed so multiple functions are exercised per seed, especially since `ChaCha20` maintains an internal state for each seed.",
      "created_at": "2021-08-20T06:37:07Z",
      "updated_at": "2021-08-20T06:37:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r692702350",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692702350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692712329",
      "pull_request_review_id": 734726510,
      "id": 692712329,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjcxMjMyOQ==",
      "diff_hunk": "@@ -0,0 +1,334 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void ECRYPT_keysetup(ECRYPT_ctx* x, const u8* k, u32 kbits, u32 ivbits)\n+{\n+    const char* constants;\n+\n+    x->input[4] = U8TO32_LITTLE(k + 0);\n+    x->input[5] = U8TO32_LITTLE(k + 4);\n+    x->input[6] = U8TO32_LITTLE(k + 8);\n+    x->input[7] = U8TO32_LITTLE(k + 12);\n+    if (kbits == 256) { /* recommended */\n+        k += 16;\n+        constants = sigma;\n+    } else { /* kbits == 128 */\n+        constants = tau;\n+    }\n+    x->input[8] = U8TO32_LITTLE(k + 0);\n+    x->input[9] = U8TO32_LITTLE(k + 4);\n+    x->input[10] = U8TO32_LITTLE(k + 8);\n+    x->input[11] = U8TO32_LITTLE(k + 12);\n+    x->input[0] = U8TO32_LITTLE(constants + 0);\n+    x->input[1] = U8TO32_LITTLE(constants + 4);\n+    x->input[2] = U8TO32_LITTLE(constants + 8);\n+    x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void ECRYPT_ivsetup(ECRYPT_ctx* x, const u8* iv)\n+{\n+    x->input[12] = 0;\n+    x->input[13] = 0;\n+    x->input[14] = U8TO32_LITTLE(iv + 0);\n+    x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx* x, const u8* m, u8* c, u32 bytes)\n+{\n+    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+    u8* ctarget = NULL;\n+    u8 tmp[64];\n+    uint32_t i;\n+\n+    if (!bytes) return;\n+\n+    j0 = x->input[0];\n+    j1 = x->input[1];\n+    j2 = x->input[2];\n+    j3 = x->input[3];\n+    j4 = x->input[4];\n+    j5 = x->input[5];\n+    j6 = x->input[6];\n+    j7 = x->input[7];\n+    j8 = x->input[8];\n+    j9 = x->input[9];\n+    j10 = x->input[10];\n+    j11 = x->input[11];\n+    j12 = x->input[12];\n+    j13 = x->input[13];\n+    j14 = x->input[14];\n+    j15 = x->input[15];\n+\n+    for (;;) {\n+        if (bytes < 64) {\n+            for (i = 0; i < bytes; ++i)\n+                tmp[i] = m[i];\n+            m = tmp;\n+            ctarget = c;\n+            c = tmp;\n+        }\n+        x0 = j0;\n+        x1 = j1;\n+        x2 = j2;\n+        x3 = j3;\n+        x4 = j4;\n+        x5 = j5;\n+        x6 = j6;\n+        x7 = j7;\n+        x8 = j8;\n+        x9 = j9;\n+        x10 = j10;\n+        x11 = j11;\n+        x12 = j12;\n+        x13 = j13;\n+        x14 = j14;\n+        x15 = j15;\n+        for (i = 20; i > 0; i -= 2) {\n+            QUARTERROUND(x0, x4, x8, x12)\n+            QUARTERROUND(x1, x5, x9, x13)\n+            QUARTERROUND(x2, x6, x10, x14)\n+            QUARTERROUND(x3, x7, x11, x15)\n+            QUARTERROUND(x0, x5, x10, x15)\n+            QUARTERROUND(x1, x6, x11, x12)\n+            QUARTERROUND(x2, x7, x8, x13)\n+            QUARTERROUND(x3, x4, x9, x14)\n+        }\n+        x0 = PLUS(x0, j0);\n+        x1 = PLUS(x1, j1);\n+        x2 = PLUS(x2, j2);\n+        x3 = PLUS(x3, j3);\n+        x4 = PLUS(x4, j4);\n+        x5 = PLUS(x5, j5);\n+        x6 = PLUS(x6, j6);\n+        x7 = PLUS(x7, j7);\n+        x8 = PLUS(x8, j8);\n+        x9 = PLUS(x9, j9);\n+        x10 = PLUS(x10, j10);\n+        x11 = PLUS(x11, j11);\n+        x12 = PLUS(x12, j12);\n+        x13 = PLUS(x13, j13);\n+        x14 = PLUS(x14, j14);\n+        x15 = PLUS(x15, j15);\n+\n+        x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+        x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+        x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+        x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+        x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+        x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+        x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+        x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+        x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+        x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+        x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+        x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+        x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+        x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+        x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+        x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+        j12 = PLUSONE(j12);\n+        if (!j12) {\n+            j13 = PLUSONE(j13);\n+            /* stopping at 2^70 bytes per nonce is user's responsibility */\n+        }\n+\n+        U32TO8_LITTLE(c + 0, x0);\n+        U32TO8_LITTLE(c + 4, x1);\n+        U32TO8_LITTLE(c + 8, x2);\n+        U32TO8_LITTLE(c + 12, x3);\n+        U32TO8_LITTLE(c + 16, x4);\n+        U32TO8_LITTLE(c + 20, x5);\n+        U32TO8_LITTLE(c + 24, x6);\n+        U32TO8_LITTLE(c + 28, x7);\n+        U32TO8_LITTLE(c + 32, x8);\n+        U32TO8_LITTLE(c + 36, x9);\n+        U32TO8_LITTLE(c + 40, x10);\n+        U32TO8_LITTLE(c + 44, x11);\n+        U32TO8_LITTLE(c + 48, x12);\n+        U32TO8_LITTLE(c + 52, x13);\n+        U32TO8_LITTLE(c + 56, x14);\n+        U32TO8_LITTLE(c + 60, x15);\n+\n+        if (bytes <= 64) {\n+            if (bytes < 64) {\n+                for (i = 0; i < bytes; ++i)\n+                    ctarget[i] = c[i];\n+            }\n+            x->input[12] = j12;\n+            x->input[13] = j13;\n+            return;\n+        }\n+        bytes -= 64;\n+        c += 64;\n+        m += 64;\n+    }\n+}\n+\n+void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n+{\n+    u32 i;\n+    for (i = 0; i < bytes; ++i)\n+        stream[i] = 0;\n+    ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n+}\n+\n+FUZZ_TARGET(crypto_diff_fuzz_chacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    ChaCha20 chacha20;\n+    ECRYPT_ctx ctx;\n+    // D. J. Bernstein doesn't initialise ctx to 0 while Bitcoin Core initialises chacha20 to 0 in the constructor\n+    for (int i = 0; i < 16; i++) {\n+        ctx.input[i] = 0;\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+        chacha20 = ChaCha20{key.data(), key.size()};\n+        ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+        // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+        uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+        ECRYPT_ivsetup(&ctx, iv);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, 100) >= 10) {",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": null,
      "original_position": 292,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "a63773439302f2cdef81e36c705bfd59046f6fa0",
      "in_reply_to_id": 692403396,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Also, could use `LIMITED_WHILE` to avoid unlimited runtime.\r\n\r\nGreat suggestion! Added `LIMITED_WHILE`.",
      "created_at": "2021-08-20T06:57:02Z",
      "updated_at": "2021-08-20T06:57:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r692712329",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692712329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692735180",
      "pull_request_review_id": 734755634,
      "id": 692735180,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjczNTE4MA==",
      "diff_hunk": "@@ -0,0 +1,334 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void ECRYPT_keysetup(ECRYPT_ctx* x, const u8* k, u32 kbits, u32 ivbits)\n+{\n+    const char* constants;\n+\n+    x->input[4] = U8TO32_LITTLE(k + 0);\n+    x->input[5] = U8TO32_LITTLE(k + 4);\n+    x->input[6] = U8TO32_LITTLE(k + 8);\n+    x->input[7] = U8TO32_LITTLE(k + 12);\n+    if (kbits == 256) { /* recommended */\n+        k += 16;\n+        constants = sigma;\n+    } else { /* kbits == 128 */\n+        constants = tau;\n+    }\n+    x->input[8] = U8TO32_LITTLE(k + 0);\n+    x->input[9] = U8TO32_LITTLE(k + 4);\n+    x->input[10] = U8TO32_LITTLE(k + 8);\n+    x->input[11] = U8TO32_LITTLE(k + 12);\n+    x->input[0] = U8TO32_LITTLE(constants + 0);\n+    x->input[1] = U8TO32_LITTLE(constants + 4);\n+    x->input[2] = U8TO32_LITTLE(constants + 8);\n+    x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void ECRYPT_ivsetup(ECRYPT_ctx* x, const u8* iv)\n+{\n+    x->input[12] = 0;\n+    x->input[13] = 0;\n+    x->input[14] = U8TO32_LITTLE(iv + 0);\n+    x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx* x, const u8* m, u8* c, u32 bytes)\n+{\n+    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+    u8* ctarget = NULL;\n+    u8 tmp[64];\n+    uint32_t i;\n+\n+    if (!bytes) return;\n+\n+    j0 = x->input[0];\n+    j1 = x->input[1];\n+    j2 = x->input[2];\n+    j3 = x->input[3];\n+    j4 = x->input[4];\n+    j5 = x->input[5];\n+    j6 = x->input[6];\n+    j7 = x->input[7];\n+    j8 = x->input[8];\n+    j9 = x->input[9];\n+    j10 = x->input[10];\n+    j11 = x->input[11];\n+    j12 = x->input[12];\n+    j13 = x->input[13];\n+    j14 = x->input[14];\n+    j15 = x->input[15];\n+\n+    for (;;) {\n+        if (bytes < 64) {\n+            for (i = 0; i < bytes; ++i)\n+                tmp[i] = m[i];\n+            m = tmp;\n+            ctarget = c;\n+            c = tmp;\n+        }\n+        x0 = j0;\n+        x1 = j1;\n+        x2 = j2;\n+        x3 = j3;\n+        x4 = j4;\n+        x5 = j5;\n+        x6 = j6;\n+        x7 = j7;\n+        x8 = j8;\n+        x9 = j9;\n+        x10 = j10;\n+        x11 = j11;\n+        x12 = j12;\n+        x13 = j13;\n+        x14 = j14;\n+        x15 = j15;\n+        for (i = 20; i > 0; i -= 2) {\n+            QUARTERROUND(x0, x4, x8, x12)\n+            QUARTERROUND(x1, x5, x9, x13)\n+            QUARTERROUND(x2, x6, x10, x14)\n+            QUARTERROUND(x3, x7, x11, x15)\n+            QUARTERROUND(x0, x5, x10, x15)\n+            QUARTERROUND(x1, x6, x11, x12)\n+            QUARTERROUND(x2, x7, x8, x13)\n+            QUARTERROUND(x3, x4, x9, x14)\n+        }\n+        x0 = PLUS(x0, j0);\n+        x1 = PLUS(x1, j1);\n+        x2 = PLUS(x2, j2);\n+        x3 = PLUS(x3, j3);\n+        x4 = PLUS(x4, j4);\n+        x5 = PLUS(x5, j5);\n+        x6 = PLUS(x6, j6);\n+        x7 = PLUS(x7, j7);\n+        x8 = PLUS(x8, j8);\n+        x9 = PLUS(x9, j9);\n+        x10 = PLUS(x10, j10);\n+        x11 = PLUS(x11, j11);\n+        x12 = PLUS(x12, j12);\n+        x13 = PLUS(x13, j13);\n+        x14 = PLUS(x14, j14);\n+        x15 = PLUS(x15, j15);\n+\n+        x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+        x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+        x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+        x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+        x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+        x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+        x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+        x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+        x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+        x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+        x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+        x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+        x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+        x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+        x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+        x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+        j12 = PLUSONE(j12);\n+        if (!j12) {\n+            j13 = PLUSONE(j13);\n+            /* stopping at 2^70 bytes per nonce is user's responsibility */\n+        }\n+\n+        U32TO8_LITTLE(c + 0, x0);\n+        U32TO8_LITTLE(c + 4, x1);\n+        U32TO8_LITTLE(c + 8, x2);\n+        U32TO8_LITTLE(c + 12, x3);\n+        U32TO8_LITTLE(c + 16, x4);\n+        U32TO8_LITTLE(c + 20, x5);\n+        U32TO8_LITTLE(c + 24, x6);\n+        U32TO8_LITTLE(c + 28, x7);\n+        U32TO8_LITTLE(c + 32, x8);\n+        U32TO8_LITTLE(c + 36, x9);\n+        U32TO8_LITTLE(c + 40, x10);\n+        U32TO8_LITTLE(c + 44, x11);\n+        U32TO8_LITTLE(c + 48, x12);\n+        U32TO8_LITTLE(c + 52, x13);\n+        U32TO8_LITTLE(c + 56, x14);\n+        U32TO8_LITTLE(c + 60, x15);\n+\n+        if (bytes <= 64) {\n+            if (bytes < 64) {\n+                for (i = 0; i < bytes; ++i)\n+                    ctarget[i] = c[i];\n+            }\n+            x->input[12] = j12;\n+            x->input[13] = j13;\n+            return;\n+        }\n+        bytes -= 64;\n+        c += 64;\n+        m += 64;\n+    }\n+}\n+\n+void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n+{\n+    u32 i;\n+    for (i = 0; i < bytes; ++i)\n+        stream[i] = 0;\n+    ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n+}\n+\n+FUZZ_TARGET(crypto_diff_fuzz_chacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    ChaCha20 chacha20;\n+    ECRYPT_ctx ctx;\n+    // D. J. Bernstein doesn't initialise ctx to 0 while Bitcoin Core initialises chacha20 to 0 in the constructor\n+    for (int i = 0; i < 16; i++) {\n+        ctx.input[i] = 0;\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+        chacha20 = ChaCha20{key.data(), key.size()};\n+        ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+        // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+        uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+        ECRYPT_ivsetup(&ctx, iv);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, 100) >= 10) {",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": null,
      "original_position": 292,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "a63773439302f2cdef81e36c705bfd59046f6fa0",
      "in_reply_to_id": 692403396,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Essentially we’re trying to get the test running longer\r\n\r\nDo you have data to support that claim? Fuzzing engines will store inputs that increase coverage data and once the data is stored, for replay it doesn't matter whether it was `ConsumeBool` or `ConsumeIntegralInRange` that evaluated to true.",
      "created_at": "2021-08-20T07:38:43Z",
      "updated_at": "2021-08-20T07:38:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r692735180",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692735180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693226653",
      "pull_request_review_id": 735396200,
      "id": 693226653,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzIyNjY1Mw==",
      "diff_hunk": "@@ -0,0 +1,334 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void ECRYPT_keysetup(ECRYPT_ctx* x, const u8* k, u32 kbits, u32 ivbits)\n+{\n+    const char* constants;\n+\n+    x->input[4] = U8TO32_LITTLE(k + 0);\n+    x->input[5] = U8TO32_LITTLE(k + 4);\n+    x->input[6] = U8TO32_LITTLE(k + 8);\n+    x->input[7] = U8TO32_LITTLE(k + 12);\n+    if (kbits == 256) { /* recommended */\n+        k += 16;\n+        constants = sigma;\n+    } else { /* kbits == 128 */\n+        constants = tau;\n+    }\n+    x->input[8] = U8TO32_LITTLE(k + 0);\n+    x->input[9] = U8TO32_LITTLE(k + 4);\n+    x->input[10] = U8TO32_LITTLE(k + 8);\n+    x->input[11] = U8TO32_LITTLE(k + 12);\n+    x->input[0] = U8TO32_LITTLE(constants + 0);\n+    x->input[1] = U8TO32_LITTLE(constants + 4);\n+    x->input[2] = U8TO32_LITTLE(constants + 8);\n+    x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void ECRYPT_ivsetup(ECRYPT_ctx* x, const u8* iv)\n+{\n+    x->input[12] = 0;\n+    x->input[13] = 0;\n+    x->input[14] = U8TO32_LITTLE(iv + 0);\n+    x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx* x, const u8* m, u8* c, u32 bytes)\n+{\n+    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+    u8* ctarget = NULL;\n+    u8 tmp[64];\n+    uint32_t i;\n+\n+    if (!bytes) return;\n+\n+    j0 = x->input[0];\n+    j1 = x->input[1];\n+    j2 = x->input[2];\n+    j3 = x->input[3];\n+    j4 = x->input[4];\n+    j5 = x->input[5];\n+    j6 = x->input[6];\n+    j7 = x->input[7];\n+    j8 = x->input[8];\n+    j9 = x->input[9];\n+    j10 = x->input[10];\n+    j11 = x->input[11];\n+    j12 = x->input[12];\n+    j13 = x->input[13];\n+    j14 = x->input[14];\n+    j15 = x->input[15];\n+\n+    for (;;) {\n+        if (bytes < 64) {\n+            for (i = 0; i < bytes; ++i)\n+                tmp[i] = m[i];\n+            m = tmp;\n+            ctarget = c;\n+            c = tmp;\n+        }\n+        x0 = j0;\n+        x1 = j1;\n+        x2 = j2;\n+        x3 = j3;\n+        x4 = j4;\n+        x5 = j5;\n+        x6 = j6;\n+        x7 = j7;\n+        x8 = j8;\n+        x9 = j9;\n+        x10 = j10;\n+        x11 = j11;\n+        x12 = j12;\n+        x13 = j13;\n+        x14 = j14;\n+        x15 = j15;\n+        for (i = 20; i > 0; i -= 2) {\n+            QUARTERROUND(x0, x4, x8, x12)\n+            QUARTERROUND(x1, x5, x9, x13)\n+            QUARTERROUND(x2, x6, x10, x14)\n+            QUARTERROUND(x3, x7, x11, x15)\n+            QUARTERROUND(x0, x5, x10, x15)\n+            QUARTERROUND(x1, x6, x11, x12)\n+            QUARTERROUND(x2, x7, x8, x13)\n+            QUARTERROUND(x3, x4, x9, x14)\n+        }\n+        x0 = PLUS(x0, j0);\n+        x1 = PLUS(x1, j1);\n+        x2 = PLUS(x2, j2);\n+        x3 = PLUS(x3, j3);\n+        x4 = PLUS(x4, j4);\n+        x5 = PLUS(x5, j5);\n+        x6 = PLUS(x6, j6);\n+        x7 = PLUS(x7, j7);\n+        x8 = PLUS(x8, j8);\n+        x9 = PLUS(x9, j9);\n+        x10 = PLUS(x10, j10);\n+        x11 = PLUS(x11, j11);\n+        x12 = PLUS(x12, j12);\n+        x13 = PLUS(x13, j13);\n+        x14 = PLUS(x14, j14);\n+        x15 = PLUS(x15, j15);\n+\n+        x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+        x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+        x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+        x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+        x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+        x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+        x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+        x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+        x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+        x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+        x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+        x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+        x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+        x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+        x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+        x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+        j12 = PLUSONE(j12);\n+        if (!j12) {\n+            j13 = PLUSONE(j13);\n+            /* stopping at 2^70 bytes per nonce is user's responsibility */\n+        }\n+\n+        U32TO8_LITTLE(c + 0, x0);\n+        U32TO8_LITTLE(c + 4, x1);\n+        U32TO8_LITTLE(c + 8, x2);\n+        U32TO8_LITTLE(c + 12, x3);\n+        U32TO8_LITTLE(c + 16, x4);\n+        U32TO8_LITTLE(c + 20, x5);\n+        U32TO8_LITTLE(c + 24, x6);\n+        U32TO8_LITTLE(c + 28, x7);\n+        U32TO8_LITTLE(c + 32, x8);\n+        U32TO8_LITTLE(c + 36, x9);\n+        U32TO8_LITTLE(c + 40, x10);\n+        U32TO8_LITTLE(c + 44, x11);\n+        U32TO8_LITTLE(c + 48, x12);\n+        U32TO8_LITTLE(c + 52, x13);\n+        U32TO8_LITTLE(c + 56, x14);\n+        U32TO8_LITTLE(c + 60, x15);\n+\n+        if (bytes <= 64) {\n+            if (bytes < 64) {\n+                for (i = 0; i < bytes; ++i)\n+                    ctarget[i] = c[i];\n+            }\n+            x->input[12] = j12;\n+            x->input[13] = j13;\n+            return;\n+        }\n+        bytes -= 64;\n+        c += 64;\n+        m += 64;\n+    }\n+}\n+\n+void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n+{\n+    u32 i;\n+    for (i = 0; i < bytes; ++i)\n+        stream[i] = 0;\n+    ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n+}\n+\n+FUZZ_TARGET(crypto_diff_fuzz_chacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    ChaCha20 chacha20;\n+    ECRYPT_ctx ctx;\n+    // D. J. Bernstein doesn't initialise ctx to 0 while Bitcoin Core initialises chacha20 to 0 in the constructor\n+    for (int i = 0; i < 16; i++) {\n+        ctx.input[i] = 0;\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+        chacha20 = ChaCha20{key.data(), key.size()};\n+        ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+        // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+        uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+        ECRYPT_ivsetup(&ctx, iv);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, 100) >= 10) {",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": null,
      "original_position": 292,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "a63773439302f2cdef81e36c705bfd59046f6fa0",
      "in_reply_to_id": 692403396,
      "user": {
        "login": "prakash1512",
        "id": 44579179,
        "node_id": "MDQ6VXNlcjQ0NTc5MTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/44579179?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prakash1512",
        "html_url": "https://github.com/prakash1512",
        "followers_url": "https://api.github.com/users/prakash1512/followers",
        "following_url": "https://api.github.com/users/prakash1512/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prakash1512/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prakash1512/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prakash1512/subscriptions",
        "organizations_url": "https://api.github.com/users/prakash1512/orgs",
        "repos_url": "https://api.github.com/users/prakash1512/repos",
        "events_url": "https://api.github.com/users/prakash1512/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prakash1512/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Do you have data to support that claim?\r\n\r\nBacking the claim with data was indeed a great suggestion, so we generated the data and plots to verify it.\r\nNow we have results to dismiss that claim :)\r\nSharing our findings here:\r\n\r\n<img src=\"https://cdn.discordapp.com/attachments/863100385152335883/878387475096170607/unknown.png\"\r\n\ttitle=\"Plot\" width=\"500\" height=\"300\" />\r\n`x-axis denotes no of iterations`\r\n`y-axis denotes frequency of each iteration`",
      "created_at": "2021-08-20T21:25:22Z",
      "updated_at": "2021-08-20T21:25:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r693226653",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693226653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757817842",
      "pull_request_review_id": 817158428,
      "id": 757817842,
      "node_id": "PRRC_kwDOABII584tK2Hy",
      "diff_hunk": "@@ -0,0 +1,334 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": 45,
      "original_position": 45,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "258d751c1c0363a880889275b4c567118b779ba1",
      "in_reply_to_id": null,
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: it might be useful to add the definition of `ENCRYPT_ctx` in the comments.\r\n```\r\n/* \r\n * ECRYPT_ctx is the structure containing the representation of the\r\n * internal state of your cipher. \r\n */\r\n```",
      "created_at": "2021-11-27T20:34:03Z",
      "updated_at": "2021-11-27T22:28:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r757817842",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757817842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757818204",
      "pull_request_review_id": 817158428,
      "id": 757818204,
      "node_id": "PRRC_kwDOABII584tK2Nc",
      "diff_hunk": "@@ -0,0 +1,334 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": 93,
      "original_position": 97,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "258d751c1c0363a880889275b4c567118b779ba1",
      "in_reply_to_id": null,
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nstatic const char sigma[16] = \"expand 32-byte k\";\r\nstatic const char tau[16] = \"expand 16-byte k\";\r\n```",
      "created_at": "2021-11-27T20:50:53Z",
      "updated_at": "2021-11-27T22:28:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r757818204",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757818204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": 92,
      "original_start_line": 96,
      "start_side": "RIGHT",
      "line": 93,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757818918",
      "pull_request_review_id": 817158428,
      "id": 757818918,
      "node_id": "PRRC_kwDOABII584tK2Ym",
      "diff_hunk": "@@ -0,0 +1,334 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 7);",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "258d751c1c0363a880889275b4c567118b779ba1",
      "in_reply_to_id": null,
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    a = PLUS(a, b); d = ROTATE(XOR(d, a), 16);   \\\r\n    c = PLUS(c, d); b = ROTATE(XOR(b, c), 12);   \\\r\n    a = PLUS(a, b); d = ROTATE(XOR(d, a), 8);    \\\r\n    c = PLUS(c, d); b = ROTATE(XOR(b, c), 7);\r\n```\r\nnit: this pattern of defining the `QUATERROUND` macro is following in many places ([chacha20.cpp](https://github.com/bitcoin/bitcoin/blob/master/src/crypto/chacha20.cpp#L15)).",
      "created_at": "2021-11-27T22:20:17Z",
      "updated_at": "2021-11-27T22:28:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r757818918",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757818918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": 87,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762392225",
      "pull_request_review_id": 823242514,
      "id": 762392225,
      "node_id": "PRRC_kwDOABII584tcS6h",
      "diff_hunk": "@@ -0,0 +1,334 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": 45,
      "original_position": 45,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "258d751c1c0363a880889275b4c567118b779ba1",
      "in_reply_to_id": 757817842,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd like to keep D. J. Bernstein's reference implementation of ChaCha20 as such.",
      "created_at": "2021-12-04T06:19:19Z",
      "updated_at": "2021-12-04T06:19:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r762392225",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762392225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762392237",
      "pull_request_review_id": 823242527,
      "id": 762392237,
      "node_id": "PRRC_kwDOABII584tcS6t",
      "diff_hunk": "@@ -0,0 +1,334 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": 93,
      "original_position": 97,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "258d751c1c0363a880889275b4c567118b779ba1",
      "in_reply_to_id": 757818204,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since this is actually 16 characters + '\\0', we'd have to put a number ≥17. There's a discussion [here](https://groups.google.com/g/sci.crypt/c/mWjGx8HLVCE) which talks about the change needed in the reference implementation. This is the only place where such a change was made.",
      "created_at": "2021-12-04T06:19:30Z",
      "updated_at": "2021-12-04T06:19:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r762392237",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762392237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": 92,
      "original_start_line": 96,
      "start_side": "RIGHT",
      "line": 93,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762392241",
      "pull_request_review_id": 823242537,
      "id": 762392241,
      "node_id": "PRRC_kwDOABII584tcS6x",
      "diff_hunk": "@@ -0,0 +1,334 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 7);",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "258d751c1c0363a880889275b4c567118b779ba1",
      "in_reply_to_id": 757818918,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! I've made the changes.",
      "created_at": "2021-12-04T06:19:36Z",
      "updated_at": "2021-12-04T06:19:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r762392241",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762392241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": 87,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762436249",
      "pull_request_review_id": 823277086,
      "id": 762436249,
      "node_id": "PRRC_kwDOABII584tcdqZ",
      "diff_hunk": "@@ -0,0 +1,334 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": 93,
      "original_position": 97,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "258d751c1c0363a880889275b4c567118b779ba1",
      "in_reply_to_id": 757818204,
      "user": {
        "login": "siv2r",
        "id": 56887198,
        "node_id": "MDQ6VXNlcjU2ODg3MTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/siv2r",
        "html_url": "https://github.com/siv2r",
        "followers_url": "https://api.github.com/users/siv2r/followers",
        "following_url": "https://api.github.com/users/siv2r/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/siv2r/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/siv2r/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
        "organizations_url": "https://api.github.com/users/siv2r/orgs",
        "repos_url": "https://api.github.com/users/siv2r/repos",
        "events_url": "https://api.github.com/users/siv2r/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/siv2r/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, I see. Thanks!",
      "created_at": "2021-12-04T15:19:02Z",
      "updated_at": "2021-12-04T15:19:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r762436249",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762436249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": 92,
      "original_start_line": 96,
      "start_side": "RIGHT",
      "line": 93,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771510067",
      "pull_request_review_id": 835398234,
      "id": 771510067,
      "node_id": "PRRC_kwDOABII584t_E8z",
      "diff_hunk": "@@ -0,0 +1,330 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void ECRYPT_keysetup(ECRYPT_ctx* x, const u8* k, u32 kbits, u32 ivbits)\n+{\n+    const char* constants;\n+\n+    x->input[4] = U8TO32_LITTLE(k + 0);\n+    x->input[5] = U8TO32_LITTLE(k + 4);\n+    x->input[6] = U8TO32_LITTLE(k + 8);\n+    x->input[7] = U8TO32_LITTLE(k + 12);\n+    if (kbits == 256) { /* recommended */\n+        k += 16;\n+        constants = sigma;\n+    } else { /* kbits == 128 */\n+        constants = tau;\n+    }\n+    x->input[8] = U8TO32_LITTLE(k + 0);\n+    x->input[9] = U8TO32_LITTLE(k + 4);\n+    x->input[10] = U8TO32_LITTLE(k + 8);\n+    x->input[11] = U8TO32_LITTLE(k + 12);\n+    x->input[0] = U8TO32_LITTLE(constants + 0);\n+    x->input[1] = U8TO32_LITTLE(constants + 4);\n+    x->input[2] = U8TO32_LITTLE(constants + 8);\n+    x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void ECRYPT_ivsetup(ECRYPT_ctx* x, const u8* iv)\n+{\n+    x->input[12] = 0;\n+    x->input[13] = 0;\n+    x->input[14] = U8TO32_LITTLE(iv + 0);\n+    x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx* x, const u8* m, u8* c, u32 bytes)\n+{\n+    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+    u8* ctarget = NULL;\n+    u8 tmp[64];\n+    uint32_t i;\n+\n+    if (!bytes) return;\n+\n+    j0 = x->input[0];\n+    j1 = x->input[1];\n+    j2 = x->input[2];\n+    j3 = x->input[3];\n+    j4 = x->input[4];\n+    j5 = x->input[5];\n+    j6 = x->input[6];\n+    j7 = x->input[7];\n+    j8 = x->input[8];\n+    j9 = x->input[9];\n+    j10 = x->input[10];\n+    j11 = x->input[11];\n+    j12 = x->input[12];\n+    j13 = x->input[13];\n+    j14 = x->input[14];\n+    j15 = x->input[15];\n+\n+    for (;;) {\n+        if (bytes < 64) {\n+            for (i = 0; i < bytes; ++i)\n+                tmp[i] = m[i];\n+            m = tmp;\n+            ctarget = c;\n+            c = tmp;\n+        }\n+        x0 = j0;\n+        x1 = j1;\n+        x2 = j2;\n+        x3 = j3;\n+        x4 = j4;\n+        x5 = j5;\n+        x6 = j6;\n+        x7 = j7;\n+        x8 = j8;\n+        x9 = j9;\n+        x10 = j10;\n+        x11 = j11;\n+        x12 = j12;\n+        x13 = j13;\n+        x14 = j14;\n+        x15 = j15;\n+        for (i = 20; i > 0; i -= 2) {\n+            QUARTERROUND(x0, x4, x8, x12)\n+            QUARTERROUND(x1, x5, x9, x13)\n+            QUARTERROUND(x2, x6, x10, x14)\n+            QUARTERROUND(x3, x7, x11, x15)\n+            QUARTERROUND(x0, x5, x10, x15)\n+            QUARTERROUND(x1, x6, x11, x12)\n+            QUARTERROUND(x2, x7, x8, x13)\n+            QUARTERROUND(x3, x4, x9, x14)\n+        }\n+        x0 = PLUS(x0, j0);\n+        x1 = PLUS(x1, j1);\n+        x2 = PLUS(x2, j2);\n+        x3 = PLUS(x3, j3);\n+        x4 = PLUS(x4, j4);\n+        x5 = PLUS(x5, j5);\n+        x6 = PLUS(x6, j6);\n+        x7 = PLUS(x7, j7);\n+        x8 = PLUS(x8, j8);\n+        x9 = PLUS(x9, j9);\n+        x10 = PLUS(x10, j10);\n+        x11 = PLUS(x11, j11);\n+        x12 = PLUS(x12, j12);\n+        x13 = PLUS(x13, j13);\n+        x14 = PLUS(x14, j14);\n+        x15 = PLUS(x15, j15);\n+\n+        x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+        x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+        x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+        x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+        x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+        x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+        x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+        x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+        x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+        x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+        x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+        x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+        x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+        x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+        x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+        x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+        j12 = PLUSONE(j12);\n+        if (!j12) {\n+            j13 = PLUSONE(j13);\n+            /* stopping at 2^70 bytes per nonce is user's responsibility */\n+        }\n+\n+        U32TO8_LITTLE(c + 0, x0);\n+        U32TO8_LITTLE(c + 4, x1);\n+        U32TO8_LITTLE(c + 8, x2);\n+        U32TO8_LITTLE(c + 12, x3);\n+        U32TO8_LITTLE(c + 16, x4);\n+        U32TO8_LITTLE(c + 20, x5);\n+        U32TO8_LITTLE(c + 24, x6);\n+        U32TO8_LITTLE(c + 28, x7);\n+        U32TO8_LITTLE(c + 32, x8);\n+        U32TO8_LITTLE(c + 36, x9);\n+        U32TO8_LITTLE(c + 40, x10);\n+        U32TO8_LITTLE(c + 44, x11);\n+        U32TO8_LITTLE(c + 48, x12);\n+        U32TO8_LITTLE(c + 52, x13);\n+        U32TO8_LITTLE(c + 56, x14);\n+        U32TO8_LITTLE(c + 60, x15);\n+\n+        if (bytes <= 64) {\n+            if (bytes < 64) {\n+                for (i = 0; i < bytes; ++i)\n+                    ctarget[i] = c[i];\n+            }\n+            x->input[12] = j12;\n+            x->input[13] = j13;\n+            return;\n+        }\n+        bytes -= 64;\n+        c += 64;\n+        m += 64;\n+    }\n+}\n+\n+void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n+{\n+    u32 i;\n+    for (i = 0; i < bytes; ++i)\n+        stream[i] = 0;\n+    ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n+}\n+\n+FUZZ_TARGET(crypto_diff_fuzz_chacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    ChaCha20 chacha20;\n+    ECRYPT_ctx ctx;\n+    // D. J. Bernstein doesn't initialise ctx to 0 while Bitcoin Core initialises chacha20 to 0 in the constructor\n+    for (int i = 0; i < 16; i++) {\n+        ctx.input[i] = 0;\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+        chacha20 = ChaCha20{key.data(), key.size()};\n+        ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+        // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+        uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+        ECRYPT_ivsetup(&ctx, iv);\n+    }\n+\n+    LIMITED_WHILE (fuzzed_data_provider.ConsumeBool(), 3000) {\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+                chacha20.SetKey(key.data(), key.size());\n+                ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+                // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+                uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+                ECRYPT_ivsetup(&ctx, iv);\n+            },\n+            [&] {\n+                uint64_t iv = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.SetIV(iv);\n+                ctx.input[14] = iv;\n+                ctx.input[15] = iv >> 32;\n+            },\n+            [&] {\n+                uint64_t counter = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.Seek(counter);\n+                ctx.input[12] = counter;\n+                ctx.input[13] = counter >> 32;\n+            },\n+            [&] {\n+                uint32_t integralInRange = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+                std::vector<uint8_t> output(integralInRange);\n+                chacha20.Keystream(output.data(), output.size());\n+                std::vector<uint8_t> djb_output(integralInRange);\n+                ECRYPT_keystream_bytes(&ctx, djb_output.data(), djb_output.size());\n+                if (output.data() != NULL && djb_output.data() != NULL) {\n+                    assert(memcmp(output.data(), djb_output.data(), integralInRange) == 0);",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": 318,
      "original_position": 318,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "any reason to use a low level function, when https://en.cppreference.com/w/cpp/container/vector/operator_cmp could be used?",
      "created_at": "2021-12-17T16:02:53Z",
      "updated_at": "2021-12-17T16:04:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r771510067",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771510067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 318,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771510786",
      "pull_request_review_id": 835398234,
      "id": 771510786,
      "node_id": "PRRC_kwDOABII584t_FIC",
      "diff_hunk": "@@ -0,0 +1,330 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void ECRYPT_keysetup(ECRYPT_ctx* x, const u8* k, u32 kbits, u32 ivbits)\n+{\n+    const char* constants;\n+\n+    x->input[4] = U8TO32_LITTLE(k + 0);\n+    x->input[5] = U8TO32_LITTLE(k + 4);\n+    x->input[6] = U8TO32_LITTLE(k + 8);\n+    x->input[7] = U8TO32_LITTLE(k + 12);\n+    if (kbits == 256) { /* recommended */\n+        k += 16;\n+        constants = sigma;\n+    } else { /* kbits == 128 */\n+        constants = tau;\n+    }\n+    x->input[8] = U8TO32_LITTLE(k + 0);\n+    x->input[9] = U8TO32_LITTLE(k + 4);\n+    x->input[10] = U8TO32_LITTLE(k + 8);\n+    x->input[11] = U8TO32_LITTLE(k + 12);\n+    x->input[0] = U8TO32_LITTLE(constants + 0);\n+    x->input[1] = U8TO32_LITTLE(constants + 4);\n+    x->input[2] = U8TO32_LITTLE(constants + 8);\n+    x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void ECRYPT_ivsetup(ECRYPT_ctx* x, const u8* iv)\n+{\n+    x->input[12] = 0;\n+    x->input[13] = 0;\n+    x->input[14] = U8TO32_LITTLE(iv + 0);\n+    x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx* x, const u8* m, u8* c, u32 bytes)\n+{\n+    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+    u8* ctarget = NULL;\n+    u8 tmp[64];\n+    uint32_t i;\n+\n+    if (!bytes) return;\n+\n+    j0 = x->input[0];\n+    j1 = x->input[1];\n+    j2 = x->input[2];\n+    j3 = x->input[3];\n+    j4 = x->input[4];\n+    j5 = x->input[5];\n+    j6 = x->input[6];\n+    j7 = x->input[7];\n+    j8 = x->input[8];\n+    j9 = x->input[9];\n+    j10 = x->input[10];\n+    j11 = x->input[11];\n+    j12 = x->input[12];\n+    j13 = x->input[13];\n+    j14 = x->input[14];\n+    j15 = x->input[15];\n+\n+    for (;;) {\n+        if (bytes < 64) {\n+            for (i = 0; i < bytes; ++i)\n+                tmp[i] = m[i];\n+            m = tmp;\n+            ctarget = c;\n+            c = tmp;\n+        }\n+        x0 = j0;\n+        x1 = j1;\n+        x2 = j2;\n+        x3 = j3;\n+        x4 = j4;\n+        x5 = j5;\n+        x6 = j6;\n+        x7 = j7;\n+        x8 = j8;\n+        x9 = j9;\n+        x10 = j10;\n+        x11 = j11;\n+        x12 = j12;\n+        x13 = j13;\n+        x14 = j14;\n+        x15 = j15;\n+        for (i = 20; i > 0; i -= 2) {\n+            QUARTERROUND(x0, x4, x8, x12)\n+            QUARTERROUND(x1, x5, x9, x13)\n+            QUARTERROUND(x2, x6, x10, x14)\n+            QUARTERROUND(x3, x7, x11, x15)\n+            QUARTERROUND(x0, x5, x10, x15)\n+            QUARTERROUND(x1, x6, x11, x12)\n+            QUARTERROUND(x2, x7, x8, x13)\n+            QUARTERROUND(x3, x4, x9, x14)\n+        }\n+        x0 = PLUS(x0, j0);\n+        x1 = PLUS(x1, j1);\n+        x2 = PLUS(x2, j2);\n+        x3 = PLUS(x3, j3);\n+        x4 = PLUS(x4, j4);\n+        x5 = PLUS(x5, j5);\n+        x6 = PLUS(x6, j6);\n+        x7 = PLUS(x7, j7);\n+        x8 = PLUS(x8, j8);\n+        x9 = PLUS(x9, j9);\n+        x10 = PLUS(x10, j10);\n+        x11 = PLUS(x11, j11);\n+        x12 = PLUS(x12, j12);\n+        x13 = PLUS(x13, j13);\n+        x14 = PLUS(x14, j14);\n+        x15 = PLUS(x15, j15);\n+\n+        x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+        x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+        x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+        x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+        x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+        x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+        x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+        x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+        x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+        x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+        x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+        x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+        x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+        x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+        x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+        x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+        j12 = PLUSONE(j12);\n+        if (!j12) {\n+            j13 = PLUSONE(j13);\n+            /* stopping at 2^70 bytes per nonce is user's responsibility */\n+        }\n+\n+        U32TO8_LITTLE(c + 0, x0);\n+        U32TO8_LITTLE(c + 4, x1);\n+        U32TO8_LITTLE(c + 8, x2);\n+        U32TO8_LITTLE(c + 12, x3);\n+        U32TO8_LITTLE(c + 16, x4);\n+        U32TO8_LITTLE(c + 20, x5);\n+        U32TO8_LITTLE(c + 24, x6);\n+        U32TO8_LITTLE(c + 28, x7);\n+        U32TO8_LITTLE(c + 32, x8);\n+        U32TO8_LITTLE(c + 36, x9);\n+        U32TO8_LITTLE(c + 40, x10);\n+        U32TO8_LITTLE(c + 44, x11);\n+        U32TO8_LITTLE(c + 48, x12);\n+        U32TO8_LITTLE(c + 52, x13);\n+        U32TO8_LITTLE(c + 56, x14);\n+        U32TO8_LITTLE(c + 60, x15);\n+\n+        if (bytes <= 64) {\n+            if (bytes < 64) {\n+                for (i = 0; i < bytes; ++i)\n+                    ctarget[i] = c[i];\n+            }\n+            x->input[12] = j12;\n+            x->input[13] = j13;\n+            return;\n+        }\n+        bytes -= 64;\n+        c += 64;\n+        m += 64;\n+    }\n+}\n+\n+void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n+{\n+    u32 i;\n+    for (i = 0; i < bytes; ++i)\n+        stream[i] = 0;\n+    ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n+}\n+\n+FUZZ_TARGET(crypto_diff_fuzz_chacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    ChaCha20 chacha20;\n+    ECRYPT_ctx ctx;\n+    // D. J. Bernstein doesn't initialise ctx to 0 while Bitcoin Core initialises chacha20 to 0 in the constructor\n+    for (int i = 0; i < 16; i++) {\n+        ctx.input[i] = 0;\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+        chacha20 = ChaCha20{key.data(), key.size()};\n+        ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+        // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+        uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+        ECRYPT_ivsetup(&ctx, iv);\n+    }\n+\n+    LIMITED_WHILE (fuzzed_data_provider.ConsumeBool(), 3000) {\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+                chacha20.SetKey(key.data(), key.size());\n+                ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+                // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+                uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+                ECRYPT_ivsetup(&ctx, iv);\n+            },\n+            [&] {\n+                uint64_t iv = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.SetIV(iv);\n+                ctx.input[14] = iv;\n+                ctx.input[15] = iv >> 32;\n+            },\n+            [&] {\n+                uint64_t counter = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.Seek(counter);\n+                ctx.input[12] = counter;\n+                ctx.input[13] = counter >> 32;\n+            },\n+            [&] {\n+                uint32_t integralInRange = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+                std::vector<uint8_t> output(integralInRange);\n+                chacha20.Keystream(output.data(), output.size());\n+                std::vector<uint8_t> djb_output(integralInRange);\n+                ECRYPT_keystream_bytes(&ctx, djb_output.data(), djb_output.size());\n+                if (output.data() != NULL && djb_output.data() != NULL) {",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": 317,
      "original_position": 317,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "when would this fail?",
      "created_at": "2021-12-17T16:03:57Z",
      "updated_at": "2021-12-17T16:04:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r771510786",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771510786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 317,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771510963",
      "pull_request_review_id": 835398234,
      "id": 771510963,
      "node_id": "PRRC_kwDOABII584t_FKz",
      "diff_hunk": "@@ -0,0 +1,330 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void ECRYPT_keysetup(ECRYPT_ctx* x, const u8* k, u32 kbits, u32 ivbits)\n+{\n+    const char* constants;\n+\n+    x->input[4] = U8TO32_LITTLE(k + 0);\n+    x->input[5] = U8TO32_LITTLE(k + 4);\n+    x->input[6] = U8TO32_LITTLE(k + 8);\n+    x->input[7] = U8TO32_LITTLE(k + 12);\n+    if (kbits == 256) { /* recommended */\n+        k += 16;\n+        constants = sigma;\n+    } else { /* kbits == 128 */\n+        constants = tau;\n+    }\n+    x->input[8] = U8TO32_LITTLE(k + 0);\n+    x->input[9] = U8TO32_LITTLE(k + 4);\n+    x->input[10] = U8TO32_LITTLE(k + 8);\n+    x->input[11] = U8TO32_LITTLE(k + 12);\n+    x->input[0] = U8TO32_LITTLE(constants + 0);\n+    x->input[1] = U8TO32_LITTLE(constants + 4);\n+    x->input[2] = U8TO32_LITTLE(constants + 8);\n+    x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void ECRYPT_ivsetup(ECRYPT_ctx* x, const u8* iv)\n+{\n+    x->input[12] = 0;\n+    x->input[13] = 0;\n+    x->input[14] = U8TO32_LITTLE(iv + 0);\n+    x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx* x, const u8* m, u8* c, u32 bytes)\n+{\n+    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+    u8* ctarget = NULL;\n+    u8 tmp[64];\n+    uint32_t i;\n+\n+    if (!bytes) return;\n+\n+    j0 = x->input[0];\n+    j1 = x->input[1];\n+    j2 = x->input[2];\n+    j3 = x->input[3];\n+    j4 = x->input[4];\n+    j5 = x->input[5];\n+    j6 = x->input[6];\n+    j7 = x->input[7];\n+    j8 = x->input[8];\n+    j9 = x->input[9];\n+    j10 = x->input[10];\n+    j11 = x->input[11];\n+    j12 = x->input[12];\n+    j13 = x->input[13];\n+    j14 = x->input[14];\n+    j15 = x->input[15];\n+\n+    for (;;) {\n+        if (bytes < 64) {\n+            for (i = 0; i < bytes; ++i)\n+                tmp[i] = m[i];\n+            m = tmp;\n+            ctarget = c;\n+            c = tmp;\n+        }\n+        x0 = j0;\n+        x1 = j1;\n+        x2 = j2;\n+        x3 = j3;\n+        x4 = j4;\n+        x5 = j5;\n+        x6 = j6;\n+        x7 = j7;\n+        x8 = j8;\n+        x9 = j9;\n+        x10 = j10;\n+        x11 = j11;\n+        x12 = j12;\n+        x13 = j13;\n+        x14 = j14;\n+        x15 = j15;\n+        for (i = 20; i > 0; i -= 2) {\n+            QUARTERROUND(x0, x4, x8, x12)\n+            QUARTERROUND(x1, x5, x9, x13)\n+            QUARTERROUND(x2, x6, x10, x14)\n+            QUARTERROUND(x3, x7, x11, x15)\n+            QUARTERROUND(x0, x5, x10, x15)\n+            QUARTERROUND(x1, x6, x11, x12)\n+            QUARTERROUND(x2, x7, x8, x13)\n+            QUARTERROUND(x3, x4, x9, x14)\n+        }\n+        x0 = PLUS(x0, j0);\n+        x1 = PLUS(x1, j1);\n+        x2 = PLUS(x2, j2);\n+        x3 = PLUS(x3, j3);\n+        x4 = PLUS(x4, j4);\n+        x5 = PLUS(x5, j5);\n+        x6 = PLUS(x6, j6);\n+        x7 = PLUS(x7, j7);\n+        x8 = PLUS(x8, j8);\n+        x9 = PLUS(x9, j9);\n+        x10 = PLUS(x10, j10);\n+        x11 = PLUS(x11, j11);\n+        x12 = PLUS(x12, j12);\n+        x13 = PLUS(x13, j13);\n+        x14 = PLUS(x14, j14);\n+        x15 = PLUS(x15, j15);\n+\n+        x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+        x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+        x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+        x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+        x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+        x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+        x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+        x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+        x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+        x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+        x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+        x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+        x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+        x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+        x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+        x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+        j12 = PLUSONE(j12);\n+        if (!j12) {\n+            j13 = PLUSONE(j13);\n+            /* stopping at 2^70 bytes per nonce is user's responsibility */\n+        }\n+\n+        U32TO8_LITTLE(c + 0, x0);\n+        U32TO8_LITTLE(c + 4, x1);\n+        U32TO8_LITTLE(c + 8, x2);\n+        U32TO8_LITTLE(c + 12, x3);\n+        U32TO8_LITTLE(c + 16, x4);\n+        U32TO8_LITTLE(c + 20, x5);\n+        U32TO8_LITTLE(c + 24, x6);\n+        U32TO8_LITTLE(c + 28, x7);\n+        U32TO8_LITTLE(c + 32, x8);\n+        U32TO8_LITTLE(c + 36, x9);\n+        U32TO8_LITTLE(c + 40, x10);\n+        U32TO8_LITTLE(c + 44, x11);\n+        U32TO8_LITTLE(c + 48, x12);\n+        U32TO8_LITTLE(c + 52, x13);\n+        U32TO8_LITTLE(c + 56, x14);\n+        U32TO8_LITTLE(c + 60, x15);\n+\n+        if (bytes <= 64) {\n+            if (bytes < 64) {\n+                for (i = 0; i < bytes; ++i)\n+                    ctarget[i] = c[i];\n+            }\n+            x->input[12] = j12;\n+            x->input[13] = j13;\n+            return;\n+        }\n+        bytes -= 64;\n+        c += 64;\n+        m += 64;\n+    }\n+}\n+\n+void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n+{\n+    u32 i;\n+    for (i = 0; i < bytes; ++i)\n+        stream[i] = 0;\n+    ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n+}\n+\n+FUZZ_TARGET(crypto_diff_fuzz_chacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    ChaCha20 chacha20;\n+    ECRYPT_ctx ctx;\n+    // D. J. Bernstein doesn't initialise ctx to 0 while Bitcoin Core initialises chacha20 to 0 in the constructor\n+    for (int i = 0; i < 16; i++) {\n+        ctx.input[i] = 0;\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+        chacha20 = ChaCha20{key.data(), key.size()};\n+        ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+        // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+        uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+        ECRYPT_ivsetup(&ctx, iv);\n+    }\n+\n+    LIMITED_WHILE (fuzzed_data_provider.ConsumeBool(), 3000) {\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+                chacha20.SetKey(key.data(), key.size());\n+                ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+                // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+                uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+                ECRYPT_ivsetup(&ctx, iv);\n+            },\n+            [&] {\n+                uint64_t iv = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.SetIV(iv);\n+                ctx.input[14] = iv;\n+                ctx.input[15] = iv >> 32;\n+            },\n+            [&] {\n+                uint64_t counter = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.Seek(counter);\n+                ctx.input[12] = counter;\n+                ctx.input[13] = counter >> 32;\n+            },\n+            [&] {\n+                uint32_t integralInRange = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+                std::vector<uint8_t> output(integralInRange);\n+                chacha20.Keystream(output.data(), output.size());\n+                std::vector<uint8_t> djb_output(integralInRange);\n+                ECRYPT_keystream_bytes(&ctx, djb_output.data(), djb_output.size());\n+                if (output.data() != NULL && djb_output.data() != NULL) {\n+                    assert(memcmp(output.data(), djb_output.data(), integralInRange) == 0);\n+                }\n+            },\n+            [&] {\n+                uint32_t integralInRange = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+                std::vector<uint8_t> output(integralInRange);\n+                const std::vector<uint8_t> input = ConsumeFixedLengthByteVector(fuzzed_data_provider, output.size());\n+                chacha20.Crypt(input.data(), output.data(), input.size());\n+                std::vector<uint8_t> djb_output(integralInRange);\n+                ECRYPT_encrypt_bytes(&ctx, input.data(), djb_output.data(), input.size());",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": 327,
      "original_position": 327,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "missing https://en.cppreference.com/w/cpp/container/vector/operator_cmp ?",
      "created_at": "2021-12-17T16:04:12Z",
      "updated_at": "2021-12-17T16:04:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r771510963",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771510963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 327,
      "original_line": 327,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771578243",
      "pull_request_review_id": 835494505,
      "id": 771578243,
      "node_id": "PRRC_kwDOABII584t_VmD",
      "diff_hunk": "@@ -0,0 +1,330 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void ECRYPT_keysetup(ECRYPT_ctx* x, const u8* k, u32 kbits, u32 ivbits)\n+{\n+    const char* constants;\n+\n+    x->input[4] = U8TO32_LITTLE(k + 0);\n+    x->input[5] = U8TO32_LITTLE(k + 4);\n+    x->input[6] = U8TO32_LITTLE(k + 8);\n+    x->input[7] = U8TO32_LITTLE(k + 12);\n+    if (kbits == 256) { /* recommended */\n+        k += 16;\n+        constants = sigma;\n+    } else { /* kbits == 128 */\n+        constants = tau;\n+    }\n+    x->input[8] = U8TO32_LITTLE(k + 0);\n+    x->input[9] = U8TO32_LITTLE(k + 4);\n+    x->input[10] = U8TO32_LITTLE(k + 8);\n+    x->input[11] = U8TO32_LITTLE(k + 12);\n+    x->input[0] = U8TO32_LITTLE(constants + 0);\n+    x->input[1] = U8TO32_LITTLE(constants + 4);\n+    x->input[2] = U8TO32_LITTLE(constants + 8);\n+    x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void ECRYPT_ivsetup(ECRYPT_ctx* x, const u8* iv)\n+{\n+    x->input[12] = 0;\n+    x->input[13] = 0;\n+    x->input[14] = U8TO32_LITTLE(iv + 0);\n+    x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx* x, const u8* m, u8* c, u32 bytes)\n+{\n+    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+    u8* ctarget = NULL;\n+    u8 tmp[64];\n+    uint32_t i;\n+\n+    if (!bytes) return;\n+\n+    j0 = x->input[0];\n+    j1 = x->input[1];\n+    j2 = x->input[2];\n+    j3 = x->input[3];\n+    j4 = x->input[4];\n+    j5 = x->input[5];\n+    j6 = x->input[6];\n+    j7 = x->input[7];\n+    j8 = x->input[8];\n+    j9 = x->input[9];\n+    j10 = x->input[10];\n+    j11 = x->input[11];\n+    j12 = x->input[12];\n+    j13 = x->input[13];\n+    j14 = x->input[14];\n+    j15 = x->input[15];\n+\n+    for (;;) {\n+        if (bytes < 64) {\n+            for (i = 0; i < bytes; ++i)\n+                tmp[i] = m[i];\n+            m = tmp;\n+            ctarget = c;\n+            c = tmp;\n+        }\n+        x0 = j0;\n+        x1 = j1;\n+        x2 = j2;\n+        x3 = j3;\n+        x4 = j4;\n+        x5 = j5;\n+        x6 = j6;\n+        x7 = j7;\n+        x8 = j8;\n+        x9 = j9;\n+        x10 = j10;\n+        x11 = j11;\n+        x12 = j12;\n+        x13 = j13;\n+        x14 = j14;\n+        x15 = j15;\n+        for (i = 20; i > 0; i -= 2) {\n+            QUARTERROUND(x0, x4, x8, x12)\n+            QUARTERROUND(x1, x5, x9, x13)\n+            QUARTERROUND(x2, x6, x10, x14)\n+            QUARTERROUND(x3, x7, x11, x15)\n+            QUARTERROUND(x0, x5, x10, x15)\n+            QUARTERROUND(x1, x6, x11, x12)\n+            QUARTERROUND(x2, x7, x8, x13)\n+            QUARTERROUND(x3, x4, x9, x14)\n+        }\n+        x0 = PLUS(x0, j0);\n+        x1 = PLUS(x1, j1);\n+        x2 = PLUS(x2, j2);\n+        x3 = PLUS(x3, j3);\n+        x4 = PLUS(x4, j4);\n+        x5 = PLUS(x5, j5);\n+        x6 = PLUS(x6, j6);\n+        x7 = PLUS(x7, j7);\n+        x8 = PLUS(x8, j8);\n+        x9 = PLUS(x9, j9);\n+        x10 = PLUS(x10, j10);\n+        x11 = PLUS(x11, j11);\n+        x12 = PLUS(x12, j12);\n+        x13 = PLUS(x13, j13);\n+        x14 = PLUS(x14, j14);\n+        x15 = PLUS(x15, j15);\n+\n+        x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+        x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+        x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+        x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+        x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+        x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+        x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+        x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+        x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+        x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+        x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+        x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+        x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+        x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+        x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+        x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+        j12 = PLUSONE(j12);\n+        if (!j12) {\n+            j13 = PLUSONE(j13);\n+            /* stopping at 2^70 bytes per nonce is user's responsibility */\n+        }\n+\n+        U32TO8_LITTLE(c + 0, x0);\n+        U32TO8_LITTLE(c + 4, x1);\n+        U32TO8_LITTLE(c + 8, x2);\n+        U32TO8_LITTLE(c + 12, x3);\n+        U32TO8_LITTLE(c + 16, x4);\n+        U32TO8_LITTLE(c + 20, x5);\n+        U32TO8_LITTLE(c + 24, x6);\n+        U32TO8_LITTLE(c + 28, x7);\n+        U32TO8_LITTLE(c + 32, x8);\n+        U32TO8_LITTLE(c + 36, x9);\n+        U32TO8_LITTLE(c + 40, x10);\n+        U32TO8_LITTLE(c + 44, x11);\n+        U32TO8_LITTLE(c + 48, x12);\n+        U32TO8_LITTLE(c + 52, x13);\n+        U32TO8_LITTLE(c + 56, x14);\n+        U32TO8_LITTLE(c + 60, x15);\n+\n+        if (bytes <= 64) {\n+            if (bytes < 64) {\n+                for (i = 0; i < bytes; ++i)\n+                    ctarget[i] = c[i];\n+            }\n+            x->input[12] = j12;\n+            x->input[13] = j13;\n+            return;\n+        }\n+        bytes -= 64;\n+        c += 64;\n+        m += 64;\n+    }\n+}\n+\n+void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n+{\n+    u32 i;\n+    for (i = 0; i < bytes; ++i)\n+        stream[i] = 0;\n+    ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n+}\n+\n+FUZZ_TARGET(crypto_diff_fuzz_chacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    ChaCha20 chacha20;\n+    ECRYPT_ctx ctx;\n+    // D. J. Bernstein doesn't initialise ctx to 0 while Bitcoin Core initialises chacha20 to 0 in the constructor\n+    for (int i = 0; i < 16; i++) {\n+        ctx.input[i] = 0;\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+        chacha20 = ChaCha20{key.data(), key.size()};\n+        ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+        // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+        uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+        ECRYPT_ivsetup(&ctx, iv);\n+    }\n+\n+    LIMITED_WHILE (fuzzed_data_provider.ConsumeBool(), 3000) {\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+                chacha20.SetKey(key.data(), key.size());\n+                ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+                // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+                uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+                ECRYPT_ivsetup(&ctx, iv);\n+            },\n+            [&] {\n+                uint64_t iv = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.SetIV(iv);\n+                ctx.input[14] = iv;\n+                ctx.input[15] = iv >> 32;\n+            },\n+            [&] {\n+                uint64_t counter = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.Seek(counter);\n+                ctx.input[12] = counter;\n+                ctx.input[13] = counter >> 32;\n+            },\n+            [&] {\n+                uint32_t integralInRange = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+                std::vector<uint8_t> output(integralInRange);\n+                chacha20.Keystream(output.data(), output.size());\n+                std::vector<uint8_t> djb_output(integralInRange);\n+                ECRYPT_keystream_bytes(&ctx, djb_output.data(), djb_output.size());\n+                if (output.data() != NULL && djb_output.data() != NULL) {\n+                    assert(memcmp(output.data(), djb_output.data(), integralInRange) == 0);",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": 318,
      "original_position": 318,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "in_reply_to_id": 771510067,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I went with this because [some of the crypto unit tests](https://github.com/bitcoin/bitcoin/blob/4ad59042b359f473d5888ecee0c9288dcf98f1c9/src/test/crypto_tests.cpp#L636) used memcmp. I feel you're right though and memcmp doesn't really provide any added advantage.",
      "created_at": "2021-12-17T17:47:32Z",
      "updated_at": "2021-12-17T17:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r771578243",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771578243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 318,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771578344",
      "pull_request_review_id": 835494640,
      "id": 771578344,
      "node_id": "PRRC_kwDOABII584t_Vno",
      "diff_hunk": "@@ -0,0 +1,330 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void ECRYPT_keysetup(ECRYPT_ctx* x, const u8* k, u32 kbits, u32 ivbits)\n+{\n+    const char* constants;\n+\n+    x->input[4] = U8TO32_LITTLE(k + 0);\n+    x->input[5] = U8TO32_LITTLE(k + 4);\n+    x->input[6] = U8TO32_LITTLE(k + 8);\n+    x->input[7] = U8TO32_LITTLE(k + 12);\n+    if (kbits == 256) { /* recommended */\n+        k += 16;\n+        constants = sigma;\n+    } else { /* kbits == 128 */\n+        constants = tau;\n+    }\n+    x->input[8] = U8TO32_LITTLE(k + 0);\n+    x->input[9] = U8TO32_LITTLE(k + 4);\n+    x->input[10] = U8TO32_LITTLE(k + 8);\n+    x->input[11] = U8TO32_LITTLE(k + 12);\n+    x->input[0] = U8TO32_LITTLE(constants + 0);\n+    x->input[1] = U8TO32_LITTLE(constants + 4);\n+    x->input[2] = U8TO32_LITTLE(constants + 8);\n+    x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void ECRYPT_ivsetup(ECRYPT_ctx* x, const u8* iv)\n+{\n+    x->input[12] = 0;\n+    x->input[13] = 0;\n+    x->input[14] = U8TO32_LITTLE(iv + 0);\n+    x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx* x, const u8* m, u8* c, u32 bytes)\n+{\n+    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+    u8* ctarget = NULL;\n+    u8 tmp[64];\n+    uint32_t i;\n+\n+    if (!bytes) return;\n+\n+    j0 = x->input[0];\n+    j1 = x->input[1];\n+    j2 = x->input[2];\n+    j3 = x->input[3];\n+    j4 = x->input[4];\n+    j5 = x->input[5];\n+    j6 = x->input[6];\n+    j7 = x->input[7];\n+    j8 = x->input[8];\n+    j9 = x->input[9];\n+    j10 = x->input[10];\n+    j11 = x->input[11];\n+    j12 = x->input[12];\n+    j13 = x->input[13];\n+    j14 = x->input[14];\n+    j15 = x->input[15];\n+\n+    for (;;) {\n+        if (bytes < 64) {\n+            for (i = 0; i < bytes; ++i)\n+                tmp[i] = m[i];\n+            m = tmp;\n+            ctarget = c;\n+            c = tmp;\n+        }\n+        x0 = j0;\n+        x1 = j1;\n+        x2 = j2;\n+        x3 = j3;\n+        x4 = j4;\n+        x5 = j5;\n+        x6 = j6;\n+        x7 = j7;\n+        x8 = j8;\n+        x9 = j9;\n+        x10 = j10;\n+        x11 = j11;\n+        x12 = j12;\n+        x13 = j13;\n+        x14 = j14;\n+        x15 = j15;\n+        for (i = 20; i > 0; i -= 2) {\n+            QUARTERROUND(x0, x4, x8, x12)\n+            QUARTERROUND(x1, x5, x9, x13)\n+            QUARTERROUND(x2, x6, x10, x14)\n+            QUARTERROUND(x3, x7, x11, x15)\n+            QUARTERROUND(x0, x5, x10, x15)\n+            QUARTERROUND(x1, x6, x11, x12)\n+            QUARTERROUND(x2, x7, x8, x13)\n+            QUARTERROUND(x3, x4, x9, x14)\n+        }\n+        x0 = PLUS(x0, j0);\n+        x1 = PLUS(x1, j1);\n+        x2 = PLUS(x2, j2);\n+        x3 = PLUS(x3, j3);\n+        x4 = PLUS(x4, j4);\n+        x5 = PLUS(x5, j5);\n+        x6 = PLUS(x6, j6);\n+        x7 = PLUS(x7, j7);\n+        x8 = PLUS(x8, j8);\n+        x9 = PLUS(x9, j9);\n+        x10 = PLUS(x10, j10);\n+        x11 = PLUS(x11, j11);\n+        x12 = PLUS(x12, j12);\n+        x13 = PLUS(x13, j13);\n+        x14 = PLUS(x14, j14);\n+        x15 = PLUS(x15, j15);\n+\n+        x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+        x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+        x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+        x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+        x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+        x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+        x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+        x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+        x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+        x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+        x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+        x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+        x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+        x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+        x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+        x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+        j12 = PLUSONE(j12);\n+        if (!j12) {\n+            j13 = PLUSONE(j13);\n+            /* stopping at 2^70 bytes per nonce is user's responsibility */\n+        }\n+\n+        U32TO8_LITTLE(c + 0, x0);\n+        U32TO8_LITTLE(c + 4, x1);\n+        U32TO8_LITTLE(c + 8, x2);\n+        U32TO8_LITTLE(c + 12, x3);\n+        U32TO8_LITTLE(c + 16, x4);\n+        U32TO8_LITTLE(c + 20, x5);\n+        U32TO8_LITTLE(c + 24, x6);\n+        U32TO8_LITTLE(c + 28, x7);\n+        U32TO8_LITTLE(c + 32, x8);\n+        U32TO8_LITTLE(c + 36, x9);\n+        U32TO8_LITTLE(c + 40, x10);\n+        U32TO8_LITTLE(c + 44, x11);\n+        U32TO8_LITTLE(c + 48, x12);\n+        U32TO8_LITTLE(c + 52, x13);\n+        U32TO8_LITTLE(c + 56, x14);\n+        U32TO8_LITTLE(c + 60, x15);\n+\n+        if (bytes <= 64) {\n+            if (bytes < 64) {\n+                for (i = 0; i < bytes; ++i)\n+                    ctarget[i] = c[i];\n+            }\n+            x->input[12] = j12;\n+            x->input[13] = j13;\n+            return;\n+        }\n+        bytes -= 64;\n+        c += 64;\n+        m += 64;\n+    }\n+}\n+\n+void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n+{\n+    u32 i;\n+    for (i = 0; i < bytes; ++i)\n+        stream[i] = 0;\n+    ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n+}\n+\n+FUZZ_TARGET(crypto_diff_fuzz_chacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    ChaCha20 chacha20;\n+    ECRYPT_ctx ctx;\n+    // D. J. Bernstein doesn't initialise ctx to 0 while Bitcoin Core initialises chacha20 to 0 in the constructor\n+    for (int i = 0; i < 16; i++) {\n+        ctx.input[i] = 0;\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+        chacha20 = ChaCha20{key.data(), key.size()};\n+        ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+        // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+        uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+        ECRYPT_ivsetup(&ctx, iv);\n+    }\n+\n+    LIMITED_WHILE (fuzzed_data_provider.ConsumeBool(), 3000) {\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+                chacha20.SetKey(key.data(), key.size());\n+                ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+                // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+                uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+                ECRYPT_ivsetup(&ctx, iv);\n+            },\n+            [&] {\n+                uint64_t iv = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.SetIV(iv);\n+                ctx.input[14] = iv;\n+                ctx.input[15] = iv >> 32;\n+            },\n+            [&] {\n+                uint64_t counter = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.Seek(counter);\n+                ctx.input[12] = counter;\n+                ctx.input[13] = counter >> 32;\n+            },\n+            [&] {\n+                uint32_t integralInRange = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+                std::vector<uint8_t> output(integralInRange);\n+                chacha20.Keystream(output.data(), output.size());\n+                std::vector<uint8_t> djb_output(integralInRange);\n+                ECRYPT_keystream_bytes(&ctx, djb_output.data(), djb_output.size());\n+                if (output.data() != NULL && djb_output.data() != NULL) {",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": 317,
      "original_position": 317,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "in_reply_to_id": 771510786,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I meant this as a check to not pass a null pointer(In a situation where `integralInRange` is 0) to memcmp since it would exhibit undefined behaviour. This can be removed if memcmp is removed.",
      "created_at": "2021-12-17T17:47:40Z",
      "updated_at": "2021-12-17T17:47:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r771578344",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771578344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 317,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771578420",
      "pull_request_review_id": 835494739,
      "id": 771578420,
      "node_id": "PRRC_kwDOABII584t_Vo0",
      "diff_hunk": "@@ -0,0 +1,330 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void ECRYPT_keysetup(ECRYPT_ctx* x, const u8* k, u32 kbits, u32 ivbits)\n+{\n+    const char* constants;\n+\n+    x->input[4] = U8TO32_LITTLE(k + 0);\n+    x->input[5] = U8TO32_LITTLE(k + 4);\n+    x->input[6] = U8TO32_LITTLE(k + 8);\n+    x->input[7] = U8TO32_LITTLE(k + 12);\n+    if (kbits == 256) { /* recommended */\n+        k += 16;\n+        constants = sigma;\n+    } else { /* kbits == 128 */\n+        constants = tau;\n+    }\n+    x->input[8] = U8TO32_LITTLE(k + 0);\n+    x->input[9] = U8TO32_LITTLE(k + 4);\n+    x->input[10] = U8TO32_LITTLE(k + 8);\n+    x->input[11] = U8TO32_LITTLE(k + 12);\n+    x->input[0] = U8TO32_LITTLE(constants + 0);\n+    x->input[1] = U8TO32_LITTLE(constants + 4);\n+    x->input[2] = U8TO32_LITTLE(constants + 8);\n+    x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void ECRYPT_ivsetup(ECRYPT_ctx* x, const u8* iv)\n+{\n+    x->input[12] = 0;\n+    x->input[13] = 0;\n+    x->input[14] = U8TO32_LITTLE(iv + 0);\n+    x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx* x, const u8* m, u8* c, u32 bytes)\n+{\n+    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+    u8* ctarget = NULL;\n+    u8 tmp[64];\n+    uint32_t i;\n+\n+    if (!bytes) return;\n+\n+    j0 = x->input[0];\n+    j1 = x->input[1];\n+    j2 = x->input[2];\n+    j3 = x->input[3];\n+    j4 = x->input[4];\n+    j5 = x->input[5];\n+    j6 = x->input[6];\n+    j7 = x->input[7];\n+    j8 = x->input[8];\n+    j9 = x->input[9];\n+    j10 = x->input[10];\n+    j11 = x->input[11];\n+    j12 = x->input[12];\n+    j13 = x->input[13];\n+    j14 = x->input[14];\n+    j15 = x->input[15];\n+\n+    for (;;) {\n+        if (bytes < 64) {\n+            for (i = 0; i < bytes; ++i)\n+                tmp[i] = m[i];\n+            m = tmp;\n+            ctarget = c;\n+            c = tmp;\n+        }\n+        x0 = j0;\n+        x1 = j1;\n+        x2 = j2;\n+        x3 = j3;\n+        x4 = j4;\n+        x5 = j5;\n+        x6 = j6;\n+        x7 = j7;\n+        x8 = j8;\n+        x9 = j9;\n+        x10 = j10;\n+        x11 = j11;\n+        x12 = j12;\n+        x13 = j13;\n+        x14 = j14;\n+        x15 = j15;\n+        for (i = 20; i > 0; i -= 2) {\n+            QUARTERROUND(x0, x4, x8, x12)\n+            QUARTERROUND(x1, x5, x9, x13)\n+            QUARTERROUND(x2, x6, x10, x14)\n+            QUARTERROUND(x3, x7, x11, x15)\n+            QUARTERROUND(x0, x5, x10, x15)\n+            QUARTERROUND(x1, x6, x11, x12)\n+            QUARTERROUND(x2, x7, x8, x13)\n+            QUARTERROUND(x3, x4, x9, x14)\n+        }\n+        x0 = PLUS(x0, j0);\n+        x1 = PLUS(x1, j1);\n+        x2 = PLUS(x2, j2);\n+        x3 = PLUS(x3, j3);\n+        x4 = PLUS(x4, j4);\n+        x5 = PLUS(x5, j5);\n+        x6 = PLUS(x6, j6);\n+        x7 = PLUS(x7, j7);\n+        x8 = PLUS(x8, j8);\n+        x9 = PLUS(x9, j9);\n+        x10 = PLUS(x10, j10);\n+        x11 = PLUS(x11, j11);\n+        x12 = PLUS(x12, j12);\n+        x13 = PLUS(x13, j13);\n+        x14 = PLUS(x14, j14);\n+        x15 = PLUS(x15, j15);\n+\n+        x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+        x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+        x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+        x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+        x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+        x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+        x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+        x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+        x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+        x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+        x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+        x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+        x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+        x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+        x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+        x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+        j12 = PLUSONE(j12);\n+        if (!j12) {\n+            j13 = PLUSONE(j13);\n+            /* stopping at 2^70 bytes per nonce is user's responsibility */\n+        }\n+\n+        U32TO8_LITTLE(c + 0, x0);\n+        U32TO8_LITTLE(c + 4, x1);\n+        U32TO8_LITTLE(c + 8, x2);\n+        U32TO8_LITTLE(c + 12, x3);\n+        U32TO8_LITTLE(c + 16, x4);\n+        U32TO8_LITTLE(c + 20, x5);\n+        U32TO8_LITTLE(c + 24, x6);\n+        U32TO8_LITTLE(c + 28, x7);\n+        U32TO8_LITTLE(c + 32, x8);\n+        U32TO8_LITTLE(c + 36, x9);\n+        U32TO8_LITTLE(c + 40, x10);\n+        U32TO8_LITTLE(c + 44, x11);\n+        U32TO8_LITTLE(c + 48, x12);\n+        U32TO8_LITTLE(c + 52, x13);\n+        U32TO8_LITTLE(c + 56, x14);\n+        U32TO8_LITTLE(c + 60, x15);\n+\n+        if (bytes <= 64) {\n+            if (bytes < 64) {\n+                for (i = 0; i < bytes; ++i)\n+                    ctarget[i] = c[i];\n+            }\n+            x->input[12] = j12;\n+            x->input[13] = j13;\n+            return;\n+        }\n+        bytes -= 64;\n+        c += 64;\n+        m += 64;\n+    }\n+}\n+\n+void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n+{\n+    u32 i;\n+    for (i = 0; i < bytes; ++i)\n+        stream[i] = 0;\n+    ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n+}\n+\n+FUZZ_TARGET(crypto_diff_fuzz_chacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    ChaCha20 chacha20;\n+    ECRYPT_ctx ctx;\n+    // D. J. Bernstein doesn't initialise ctx to 0 while Bitcoin Core initialises chacha20 to 0 in the constructor\n+    for (int i = 0; i < 16; i++) {\n+        ctx.input[i] = 0;\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+        chacha20 = ChaCha20{key.data(), key.size()};\n+        ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+        // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+        uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+        ECRYPT_ivsetup(&ctx, iv);\n+    }\n+\n+    LIMITED_WHILE (fuzzed_data_provider.ConsumeBool(), 3000) {\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+                chacha20.SetKey(key.data(), key.size());\n+                ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+                // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+                uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+                ECRYPT_ivsetup(&ctx, iv);\n+            },\n+            [&] {\n+                uint64_t iv = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.SetIV(iv);\n+                ctx.input[14] = iv;\n+                ctx.input[15] = iv >> 32;\n+            },\n+            [&] {\n+                uint64_t counter = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.Seek(counter);\n+                ctx.input[12] = counter;\n+                ctx.input[13] = counter >> 32;\n+            },\n+            [&] {\n+                uint32_t integralInRange = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+                std::vector<uint8_t> output(integralInRange);\n+                chacha20.Keystream(output.data(), output.size());\n+                std::vector<uint8_t> djb_output(integralInRange);\n+                ECRYPT_keystream_bytes(&ctx, djb_output.data(), djb_output.size());\n+                if (output.data() != NULL && djb_output.data() != NULL) {\n+                    assert(memcmp(output.data(), djb_output.data(), integralInRange) == 0);\n+                }\n+            },\n+            [&] {\n+                uint32_t integralInRange = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+                std::vector<uint8_t> output(integralInRange);\n+                const std::vector<uint8_t> input = ConsumeFixedLengthByteVector(fuzzed_data_provider, output.size());\n+                chacha20.Crypt(input.data(), output.data(), input.size());\n+                std::vector<uint8_t> djb_output(integralInRange);\n+                ECRYPT_encrypt_bytes(&ctx, input.data(), djb_output.data(), input.size());",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": 327,
      "original_position": 327,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "in_reply_to_id": 771510963,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice catch. Thanks!\r\nI can open a follow up PR to include these suggestions.",
      "created_at": "2021-12-17T17:47:47Z",
      "updated_at": "2021-12-17T17:47:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r771578420",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771578420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 327,
      "original_line": 327,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774989422",
      "pull_request_review_id": 839888777,
      "id": 774989422,
      "node_id": "PRRC_kwDOABII584uMWZu",
      "diff_hunk": "@@ -0,0 +1,330 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b); d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d); b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void ECRYPT_keysetup(ECRYPT_ctx* x, const u8* k, u32 kbits, u32 ivbits)\n+{\n+    const char* constants;\n+\n+    x->input[4] = U8TO32_LITTLE(k + 0);\n+    x->input[5] = U8TO32_LITTLE(k + 4);\n+    x->input[6] = U8TO32_LITTLE(k + 8);\n+    x->input[7] = U8TO32_LITTLE(k + 12);\n+    if (kbits == 256) { /* recommended */\n+        k += 16;\n+        constants = sigma;\n+    } else { /* kbits == 128 */\n+        constants = tau;\n+    }\n+    x->input[8] = U8TO32_LITTLE(k + 0);\n+    x->input[9] = U8TO32_LITTLE(k + 4);\n+    x->input[10] = U8TO32_LITTLE(k + 8);\n+    x->input[11] = U8TO32_LITTLE(k + 12);\n+    x->input[0] = U8TO32_LITTLE(constants + 0);\n+    x->input[1] = U8TO32_LITTLE(constants + 4);\n+    x->input[2] = U8TO32_LITTLE(constants + 8);\n+    x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void ECRYPT_ivsetup(ECRYPT_ctx* x, const u8* iv)\n+{\n+    x->input[12] = 0;\n+    x->input[13] = 0;\n+    x->input[14] = U8TO32_LITTLE(iv + 0);\n+    x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx* x, const u8* m, u8* c, u32 bytes)\n+{\n+    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+    u8* ctarget = NULL;\n+    u8 tmp[64];\n+    uint32_t i;\n+\n+    if (!bytes) return;\n+\n+    j0 = x->input[0];\n+    j1 = x->input[1];\n+    j2 = x->input[2];\n+    j3 = x->input[3];\n+    j4 = x->input[4];\n+    j5 = x->input[5];\n+    j6 = x->input[6];\n+    j7 = x->input[7];\n+    j8 = x->input[8];\n+    j9 = x->input[9];\n+    j10 = x->input[10];\n+    j11 = x->input[11];\n+    j12 = x->input[12];\n+    j13 = x->input[13];\n+    j14 = x->input[14];\n+    j15 = x->input[15];\n+\n+    for (;;) {\n+        if (bytes < 64) {\n+            for (i = 0; i < bytes; ++i)\n+                tmp[i] = m[i];\n+            m = tmp;\n+            ctarget = c;\n+            c = tmp;\n+        }\n+        x0 = j0;\n+        x1 = j1;\n+        x2 = j2;\n+        x3 = j3;\n+        x4 = j4;\n+        x5 = j5;\n+        x6 = j6;\n+        x7 = j7;\n+        x8 = j8;\n+        x9 = j9;\n+        x10 = j10;\n+        x11 = j11;\n+        x12 = j12;\n+        x13 = j13;\n+        x14 = j14;\n+        x15 = j15;\n+        for (i = 20; i > 0; i -= 2) {\n+            QUARTERROUND(x0, x4, x8, x12)\n+            QUARTERROUND(x1, x5, x9, x13)\n+            QUARTERROUND(x2, x6, x10, x14)\n+            QUARTERROUND(x3, x7, x11, x15)\n+            QUARTERROUND(x0, x5, x10, x15)\n+            QUARTERROUND(x1, x6, x11, x12)\n+            QUARTERROUND(x2, x7, x8, x13)\n+            QUARTERROUND(x3, x4, x9, x14)\n+        }\n+        x0 = PLUS(x0, j0);\n+        x1 = PLUS(x1, j1);\n+        x2 = PLUS(x2, j2);\n+        x3 = PLUS(x3, j3);\n+        x4 = PLUS(x4, j4);\n+        x5 = PLUS(x5, j5);\n+        x6 = PLUS(x6, j6);\n+        x7 = PLUS(x7, j7);\n+        x8 = PLUS(x8, j8);\n+        x9 = PLUS(x9, j9);\n+        x10 = PLUS(x10, j10);\n+        x11 = PLUS(x11, j11);\n+        x12 = PLUS(x12, j12);\n+        x13 = PLUS(x13, j13);\n+        x14 = PLUS(x14, j14);\n+        x15 = PLUS(x15, j15);\n+\n+        x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+        x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+        x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+        x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+        x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+        x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+        x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+        x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+        x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+        x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+        x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+        x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+        x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+        x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+        x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+        x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+        j12 = PLUSONE(j12);\n+        if (!j12) {\n+            j13 = PLUSONE(j13);\n+            /* stopping at 2^70 bytes per nonce is user's responsibility */\n+        }\n+\n+        U32TO8_LITTLE(c + 0, x0);\n+        U32TO8_LITTLE(c + 4, x1);\n+        U32TO8_LITTLE(c + 8, x2);\n+        U32TO8_LITTLE(c + 12, x3);\n+        U32TO8_LITTLE(c + 16, x4);\n+        U32TO8_LITTLE(c + 20, x5);\n+        U32TO8_LITTLE(c + 24, x6);\n+        U32TO8_LITTLE(c + 28, x7);\n+        U32TO8_LITTLE(c + 32, x8);\n+        U32TO8_LITTLE(c + 36, x9);\n+        U32TO8_LITTLE(c + 40, x10);\n+        U32TO8_LITTLE(c + 44, x11);\n+        U32TO8_LITTLE(c + 48, x12);\n+        U32TO8_LITTLE(c + 52, x13);\n+        U32TO8_LITTLE(c + 56, x14);\n+        U32TO8_LITTLE(c + 60, x15);\n+\n+        if (bytes <= 64) {\n+            if (bytes < 64) {\n+                for (i = 0; i < bytes; ++i)\n+                    ctarget[i] = c[i];\n+            }\n+            x->input[12] = j12;\n+            x->input[13] = j13;\n+            return;\n+        }\n+        bytes -= 64;\n+        c += 64;\n+        m += 64;\n+    }\n+}\n+\n+void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n+{\n+    u32 i;\n+    for (i = 0; i < bytes; ++i)\n+        stream[i] = 0;\n+    ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n+}\n+\n+FUZZ_TARGET(crypto_diff_fuzz_chacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    ChaCha20 chacha20;\n+    ECRYPT_ctx ctx;\n+    // D. J. Bernstein doesn't initialise ctx to 0 while Bitcoin Core initialises chacha20 to 0 in the constructor\n+    for (int i = 0; i < 16; i++) {\n+        ctx.input[i] = 0;\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+        chacha20 = ChaCha20{key.data(), key.size()};\n+        ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+        // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+        uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+        ECRYPT_ivsetup(&ctx, iv);\n+    }\n+\n+    LIMITED_WHILE (fuzzed_data_provider.ConsumeBool(), 3000) {\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+                chacha20.SetKey(key.data(), key.size());\n+                ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+                // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+                uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+                ECRYPT_ivsetup(&ctx, iv);\n+            },\n+            [&] {\n+                uint64_t iv = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.SetIV(iv);\n+                ctx.input[14] = iv;",
      "path": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
      "position": 302,
      "original_position": 302,
      "commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "original_commit_id": "4d0ac72f3ae78e3c6a0d5dc4f7e809583abd0546",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\ntest/fuzz/crypto_diff_fuzz_chacha20.cpp:302:33: runtime error: implicit conversion from type 'uint64_t' (aka 'unsigned long') of value 270751369970 (64-bit, unsigned) to type 'u32' (aka 'unsigned int') changed the value to 168430322 (32-bit, unsigned)\r\n    #0 0x55b2974ba838 in crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_1::operator()() const src/test/fuzz/crypto_diff_fuzz_chacha20.cpp:302:33\r\n    #1 0x55b2974ba838 in unsigned long CallOneOf<crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_0, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_1, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_2, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_3, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_4>(FuzzedDataProvider&, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_0, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_1, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_2, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_3, crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>)::$_4) src/./test/fuzz/util.h:49:27\r\n    #2 0x55b2974b93d5 in crypto_diff_fuzz_chacha20_fuzz_target(Span<unsigned char const>) src/test/fuzz/crypto_diff_fuzz_chacha20.cpp:289:9\r\n    #3 0x55b2973e7628 in std::_Function_handler<void (Span<unsigned char const>), void (*)(Span<unsigned char const>)>::_M_invoke(std::_Any_data const&, Span<unsigned char const>&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:300:2\r\n    #4 0x55b29837997d in std::function<void (Span<unsigned char const>)>::operator()(Span<unsigned char const>) const /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:688:14\r\n    #5 0x55b298379628 in LLVMFuzzerTestOneInput src/test/fuzz/fuzz.cpp:91:5\r\n    #6 0x55b2972f6fb3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x1461fb3)\r\n    #7 0x55b2972f6709 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x1461709)\r\n    #8 0x55b2972f7ef9 in fuzzer::Fuzzer::MutateAndTestOne() (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x1462ef9)\r\n    #9 0x55b2972f8a75 in fuzzer::Fuzzer::Loop(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile> >&) (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x1463a75)\r\n    #10 0x55b2972e6288 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x1451288)\r\n    #11 0x55b297310d72 in main (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x147bd72)\r\n    #12 0x7fcb06fc90b2 in __libc_start_main /build/glibc-eX1tMB/glibc-2.31/csu/../csu/libc-start.c:308:16\r\n    #13 0x55b2972dab0d in _start (/root/fuzz_dir/scratch/fuzz_gen/code/src/test/fuzz/fuzz+0x1445b0d)\r\n\r\nSUMMARY: UndefinedBehaviorSanitizer: implicit-unsigned-integer-truncation test/fuzz/crypto_diff_fuzz_chacha20.cpp:302:33 in \r\nMS: 4 ShuffleBytes-CrossOver-ChangeBinInt-CopyPart-; base unit: 47966b9379790c601d5e098f1ba5ccae76f25861\r\n0xf2,0xa,0xa,0xa,0x3f,0x38,0x1b,0xf4,\r\n\\362\\012\\012\\012?8\\033\\364\r\nartifact_prefix='./'; Test unit written to ./crash-ce471b8e19b31491ff5f4a3669aefa84b1848f06\r\nBase64: 8goKCj84G/Q=\r\n",
      "created_at": "2021-12-24T11:43:01Z",
      "updated_at": "2021-12-24T11:43:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22704#discussion_r774989422",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774989422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22704"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 302,
      "original_line": 302,
      "side": "RIGHT"
    }
  ]
}