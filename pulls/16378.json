{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
    "id": 297082693,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk3MDgyNjkz",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16378",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/16378.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/16378.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/92326d89766155a792254d30a9962251b8fc7799",
    "number": 16378,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "The ultimate send RPC",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`walletcreatefundedpsbt` has some interesting features that `sendtoaddress` and `sendmany` don't have:\r\n* manual coin selection\r\n* outputting a PSBT (it was controversial to add this, see #18201)\r\n* create a transaction without adding to wallet (which leads to broadcasting, unless `-walletbroadcast=0`)\r\n\r\nAt the same time `walletcreatefundedpsbt` can't broadcast a transaction, which is inconvenient for simple use cases.\r\n\r\nThis PR introduces a new `send` RPC method which creates a PSBT, signs it if possible and adds it to the wallet by default. If it can't sign all inputs, it outputs a PSBT. If `add_to_wallet` is set to `false` it will return the transaction in both PSBT and hex format.\r\n\r\nBecause it uses a PSBT internally, it will much easier to add hardware wallet support to this method (see #16546).\r\n\r\nFor `bitcoin-cli` users, it tries to keep the simplest use case easy to use:\r\n\r\n```sh\r\nbitcoin-cli -regtest send '{\"ADDRESS\": 0.1}' 1 sat/b\r\n```\r\n\r\nThis paves the way for deprecating `sendtoaddress` and `sendmany` though there's no rush. The only missing feature compared to these older methods is adding labels to a destination address.\r\n\r\nDepends on:\r\n- [x] #16377 (`[rpc] don't automatically append inputs in walletcreatefundedpsbt`)\r\n- [x] #11413 (`[wallet] [rpc] sendtoaddress/sendmany: Add explicit feerate option`)\r\n- [x] #18244 (`[rpc] have lockUnspents also lock manually selected coins`)",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2019-07-12T13:56:59Z",
    "updated_at": "2022-02-15T10:47:39Z",
    "closed_at": "2020-09-15T02:51:54Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-09-15T02:51:54Z",
    "merge_commit_sha": "ffaac6e6142a1cf61e8e12d7fc406fcb02300144",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "Sjors:2019/07/send",
      "ref": "2019/07/send",
      "sha": "92326d89766155a792254d30a9962251b8fc7799",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 92390696,
        "node_id": "MDEwOlJlcG9zaXRvcnk5MjM5MDY5Ng==",
        "name": "bitcoin",
        "full_name": "Sjors/bitcoin",
        "owner": {
          "login": "Sjors",
          "id": 10217,
          "node_id": "MDQ6VXNlcjEwMjE3",
          "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Sjors",
          "html_url": "https://github.com/Sjors",
          "followers_url": "https://api.github.com/users/Sjors/followers",
          "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
          "organizations_url": "https://api.github.com/users/Sjors/orgs",
          "repos_url": "https://api.github.com/users/Sjors/repos",
          "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Sjors/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/Sjors/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Sjors/bitcoin",
        "archive_url": "https://api.github.com/repos/Sjors/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Sjors/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Sjors/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Sjors/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Sjors/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Sjors/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Sjors/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Sjors/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Sjors/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Sjors/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Sjors/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Sjors/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Sjors/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Sjors/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Sjors/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Sjors/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Sjors/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Sjors/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Sjors/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Sjors/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Sjors/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Sjors/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Sjors/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Sjors/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Sjors/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Sjors/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Sjors/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Sjors/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Sjors/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Sjors/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Sjors/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Sjors/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Sjors/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Sjors/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Sjors/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Sjors/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Sjors/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Sjors/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Sjors/bitcoin/hooks",
        "svn_url": "https://github.com/Sjors/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 4,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 221761,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-05T13:46:28Z",
        "created_at": "2017-05-25T10:05:54Z",
        "updated_at": "2023-03-31T09:52:58Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "564e1ab0f3dc573bd3ea60a80f6649c361243df9",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 568,
    "deletions": 18,
    "changed_files": 8,
    "commits": 3,
    "review_comments": 54,
    "comments": 13
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 2479133642,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ3OTEzMzY0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2479133642",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T13:57:18Z"
    },
    {
      "event": "labeled",
      "id": 2479135281,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0NzkxMzUyODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2479135281",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T13:57:52Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "reviewed",
      "id": 261283429,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYxMjgzNDI5",
      "url": null,
      "actor": null,
      "commit_id": "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#pullrequestreview-261283429",
      "submitted_at": "2019-07-12T14:15:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
    },
    {
      "event": "commented",
      "id": 510946416,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDk0NjQxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510946416",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T16:18:07Z",
      "updated_at": "2020-09-03T23:14:48Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18788 (tests: Update more tests to work with descriptor wallets by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-510946416",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378"
    },
    {
      "event": "labeled",
      "id": 2483664100,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0ODM2NjQxMDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2483664100",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-15T17:26:22Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "labeled",
      "id": 2529644474,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1Mjk2NDQ0NzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2529644474",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T13:20:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2530197576,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzMDE5NzU3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2530197576",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T16:34:14Z"
    },
    {
      "event": "unlabeled",
      "id": 2530374174,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjUzMDM3NDE3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2530374174",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T17:51:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 522799652,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjc5OTY1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522799652",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-20T00:05:04Z",
      "updated_at": "2019-08-20T00:05:04Z",
      "author_association": "MEMBER",
      "body": "Suggest moving \"inputs\" to a field on \"options\", and removing PSBT output from `send` (there is already a RPC for it, as you note).",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-522799652",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378"
    },
    {
      "event": "commented",
      "id": 523364668,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzM2NDY2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/523364668",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-21T08:56:06Z",
      "updated_at": "2019-08-21T08:56:06Z",
      "author_association": "MEMBER",
      "body": "@luke-jr agree about moving the inputs. That also makes it easier to rebase on #11413 (explicit fee rate) and have a syntax like `send 0.001 BTC bc1... 1 sat/B`.\r\n\r\nThe reason I added PSBT output is to make multisig easier. When used with a descriptor wallet #15764 you simply call `send` and it will sign its own part and give you a PSBT to give to the other party (haven't tested this yet though). With the existing psbt methods that's more tedious.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-523364668",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378"
    },
    {
      "event": "mentioned",
      "id": 2572297993,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjU3MjI5Nzk5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2572297993",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-21T08:56:06Z"
    },
    {
      "event": "subscribed",
      "id": 2572297995,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1NzIyOTc5OTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2572297995",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-21T08:56:06Z"
    },
    {
      "event": "commented",
      "id": 524810407,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDgxMDQwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524810407",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-26T10:34:14Z",
      "updated_at": "2019-08-26T10:34:14Z",
      "author_association": "MEMBER",
      "body": "Closing in favor of tweaking `sendmany` / `sendtoaddress`:\r\n* #11413 adds fee rate support (`1 sat/b`) without the need for an options JSON\r\n* @luke-jr suggested moving coin selection into an options JSON (it's a more advanced feature than fee selection, so that's fine by me)\r\n* PSBT output can be added when we need it, same for the option to avoid committing transaction to wallet",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-524810407",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378"
    },
    {
      "event": "closed",
      "id": 2583257534,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjU4MzI1NzUzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2583257534",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-26T10:34:14Z"
    },
    {
      "event": "mentioned",
      "id": 2583257539,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjU4MzI1NzUzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2583257539",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-26T10:34:14Z"
    },
    {
      "event": "subscribed",
      "id": 2583257540,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1ODMyNTc1NDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2583257540",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-26T10:34:14Z"
    },
    {
      "event": "reopened",
      "id": 3067055064,
      "node_id": "MDEzOlJlb3BlbmVkRXZlbnQzMDY3MDU1MDY0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3067055064",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-24T21:22:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3067055734,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA2NzA1NTczNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3067055734",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-24T21:22:57Z"
    },
    {
      "event": "commented",
      "id": 590557710,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDU1NzcxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/590557710",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-24T21:28:48Z",
      "updated_at": "2020-02-24T21:30:34Z",
      "author_association": "MEMBER",
      "body": "And we're back! I tried to make the simplest use case, sending coins to a single address with a manual fee in satoshi per byte, easy for `bitcoin-cli` users. This means you can set `conf_target` and `estimate_mode` either in the options dictionary or as a positional argument.\r\n\r\n```\r\nbitcoin-cli -regtest send '{\"ADDRESS\": 0.1}' 1 sat/b\r\n```\r\n\r\nIdeally I'd also get rid of the JSON encoding, but at least this RPC example is easy enough for a new `bitcoin-cli` user to copy-paste and tweak. And meanwhile GUI PSBT support has made enough progress.\r\n\r\nThis needs some cleanup, but I suggest focussing initial review on:\r\n1. the dependencies: #16377 and #11413 (I'll have to adjust some things depending on those)\r\n2. concept ACKs and/or suggestions for the RPC interface\r\n\r\n@luke-jr suggested:\r\n\r\n> Suggest moving \"inputs\" to a field on \"options\"\r\n\r\nDone",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-590557710",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378"
    },
    {
      "event": "mentioned",
      "id": 3067073831,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzA2NzA3MzgzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3067073831",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-24T21:28:49Z"
    },
    {
      "event": "subscribed",
      "id": 3067073835,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMwNjcwNzM4MzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3067073835",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-24T21:28:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3070218827,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA3MDIxODgyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3070218827",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-25T16:55:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3070230113,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA3MDIzMDExMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3070230113",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-25T16:57:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3070258262,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA3MDI1ODI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3070258262",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-25T17:05:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3070493594,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA3MDQ5MzU5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3070493594",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-25T18:29:14Z"
    },
    {
      "event": "referenced",
      "id": 3070791357,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwNzA3OTEzNTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3070791357",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "aee8d8137808d6ad60dc68ca88b3e3bc4cd053c9",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/aee8d8137808d6ad60dc68ca88b3e3bc4cd053c9",
      "created_at": "2020-02-25T19:57:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3087493041,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA4NzQ5MzA0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3087493041",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-02T11:11:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3087643101,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA4NzY0MzEwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3087643101",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-02T11:58:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3088858330,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA4ODg1ODMzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3088858330",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-02T17:11:26Z"
    },
    {
      "event": "renamed",
      "id": 3088942006,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MzA4ODk0MjAwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3088942006",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-02T17:34:26Z",
      "rename": {
        "from": "[WIP] The ultimate send RPC",
        "to": "The ultimate send RPC"
      }
    },
    {
      "event": "commented",
      "id": 593523577,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5MzUyMzU3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593523577",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-02T17:37:53Z",
      "updated_at": "2020-03-02T17:37:53Z",
      "author_association": "MEMBER",
      "body": "This now has enough test coverage that I consider it review worthy, but note that it depends on 3 other pull requests.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-593523577",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3095811983,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA5NTgxMTk4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3095811983",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-04T10:11:59Z"
    },
    {
      "event": "labeled",
      "id": 3107313158,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMxMDczMTMxNTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3107313158",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-07T01:02:20Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 599222476,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTIyMjQ3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/599222476",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-15T15:07:30Z",
      "updated_at": "2020-03-15T15:07:30Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-599222476",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378"
    },
    {
      "event": "referenced",
      "id": 3156835398,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMxNTY4MzUzOTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3156835398",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "24cba79301575305936c8ae6d0e896679359fcdd",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/24cba79301575305936c8ae6d0e896679359fcdd",
      "created_at": "2020-03-23T19:47:45Z"
    },
    {
      "event": "referenced",
      "id": 3172579123,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMxNzI1NzkxMjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3172579123",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f3450a01863c15101c9dbf2e6ab2b20e734a8149",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/f3450a01863c15101c9dbf2e6ab2b20e734a8149",
      "created_at": "2020-03-27T14:13:38Z"
    },
    {
      "event": "referenced",
      "id": 3188485420,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMxODg0ODU0MjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3188485420",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "76694052347bd5510eabc4fac00e1778440b2dc2",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/76694052347bd5510eabc4fac00e1778440b2dc2",
      "created_at": "2020-04-01T15:33:56Z"
    },
    {
      "event": "referenced",
      "id": 3262264242,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNjIyNjQyNDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3262264242",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0ec75f1b32e96af0bb88eb4583c671a1b87b8a7a",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/0ec75f1b32e96af0bb88eb4583c671a1b87b8a7a",
      "created_at": "2020-04-22T20:11:58Z"
    },
    {
      "event": "referenced",
      "id": 3262570458,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNjI1NzA0NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3262570458",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "192d1203f85a7d04dfa847e0f89b9c10cf7f6488",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/192d1203f85a7d04dfa847e0f89b9c10cf7f6488",
      "created_at": "2020-04-22T21:45:43Z"
    },
    {
      "event": "referenced",
      "id": 3266425324,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNjY0MjUzMjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3266425324",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "45839a57e51e5fcebb80f7fd5918750c23930a8c",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/45839a57e51e5fcebb80f7fd5918750c23930a8c",
      "created_at": "2020-04-23T18:58:38Z"
    },
    {
      "event": "referenced",
      "id": 3275710139,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNzU3MTAxMzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3275710139",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2313f9ab0915d2febd4593c302bb6a9f2a3a6896",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/2313f9ab0915d2febd4593c302bb6a9f2a3a6896",
      "created_at": "2020-04-27T13:14:41Z"
    },
    {
      "event": "referenced",
      "id": 3275731503,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNzU3MzE1MDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3275731503",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f94e94c37c1cd173758ad8618999b745335216c9",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/f94e94c37c1cd173758ad8618999b745335216c9",
      "created_at": "2020-04-27T13:19:27Z"
    },
    {
      "event": "referenced",
      "id": 3275936749,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNzU5MzY3NDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3275936749",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "372eef41f08ba7ae32448a8cc2e22fc38d0ffd0e",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/372eef41f08ba7ae32448a8cc2e22fc38d0ffd0e",
      "created_at": "2020-04-27T14:03:15Z"
    },
    {
      "event": "referenced",
      "id": 3277286085,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNzcyODYwODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3277286085",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "09d61da0fc5a73b371efd0606a646ba048a66386",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/09d61da0fc5a73b371efd0606a646ba048a66386",
      "created_at": "2020-04-27T19:31:04Z"
    },
    {
      "event": "referenced",
      "id": 3314292949,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMTQyOTI5NDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3314292949",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2988c2fda117ab535e3e303b2b9faf856b7cc0d2",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/2988c2fda117ab535e3e303b2b9faf856b7cc0d2",
      "created_at": "2020-05-07T19:13:24Z"
    },
    {
      "event": "referenced",
      "id": 3347065266,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNDcwNjUyNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3347065266",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e8fc838858a164ea93d0608b2bf6376d17644699",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/e8fc838858a164ea93d0608b2bf6376d17644699",
      "created_at": "2020-05-18T12:26:05Z"
    },
    {
      "event": "referenced",
      "id": 3363842019,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjM4NDIwMTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3363842019",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "87a29a1e68be930dc99393f86b8c7b2231170299",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/87a29a1e68be930dc99393f86b8c7b2231170299",
      "created_at": "2020-05-22T08:47:37Z"
    },
    {
      "event": "referenced",
      "id": 3430207666,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MzAyMDc2NjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3430207666",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4b6fb767b23fdf959767d289462a02842b802a44",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/4b6fb767b23fdf959767d289462a02842b802a44",
      "created_at": "2020-06-10T15:25:18Z"
    },
    {
      "event": "referenced",
      "id": 3449733168,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NDk3MzMxNjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3449733168",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fc46eb2202961fcb1fe763bb6a7b82f9a47c79fb",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/fc46eb2202961fcb1fe763bb6a7b82f9a47c79fb",
      "created_at": "2020-06-16T15:59:21Z"
    },
    {
      "event": "referenced",
      "id": 3459412676,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NTk0MTI2NzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3459412676",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4bb5361ae70186efe8bbe68c8b718e8fe8f49a12",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/4bb5361ae70186efe8bbe68c8b718e8fe8f49a12",
      "created_at": "2020-06-18T17:52:13Z"
    },
    {
      "event": "referenced",
      "id": 3462956404,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NjI5NTY0MDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3462956404",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "29f6508c2896b54ac1c5c08f362577e6b7fe2b8d",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/29f6508c2896b54ac1c5c08f362577e6b7fe2b8d",
      "created_at": "2020-06-19T15:32:50Z"
    },
    {
      "event": "referenced",
      "id": 3463368935,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NjMzNjg5MzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3463368935",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "42cc844f658e52aa2336e63f16bff38d3550be24",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/42cc844f658e52aa2336e63f16bff38d3550be24",
      "created_at": "2020-06-19T17:37:19Z"
    },
    {
      "event": "added_to_project",
      "id": 3463666880,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQzNDYzNjY2ODgw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3463666880",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T19:32:17Z",
      "project_card": {
        "id": 40412562,
        "url": "https://api.github.com/projects/columns/cards/40412562",
        "project_id": 4755909,
        "project_url": "https://api.github.com/projects/4755909",
        "column_name": "PRs"
      }
    },
    {
      "event": "referenced",
      "id": 3483432956,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0ODM0MzI5NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3483432956",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b5e02cd2f302a4a2355de23594c79595bb339df5",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/b5e02cd2f302a4a2355de23594c79595bb339df5",
      "created_at": "2020-06-25T17:33:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3483730078,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ4MzczMDA3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3483730078",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-25T18:59:16Z"
    },
    {
      "event": "commented",
      "id": 649761160,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTc2MTE2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649761160",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-25T19:01:07Z",
      "updated_at": "2020-06-25T19:01:07Z",
      "author_association": "MEMBER",
      "body": "Rebased after #16377 and #11413, it should be easier to review now. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-649761160",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378"
    },
    {
      "event": "unlabeled",
      "id": 3484099840,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzQ4NDA5OTg0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3484099840",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-25T20:49:32Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 3493755119,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0OTM3NTUxMTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3493755119",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "53f13c8467ce3532f464bc1981a255480d194686",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/53f13c8467ce3532f464bc1981a255480d194686",
      "created_at": "2020-06-29T17:22:20Z"
    },
    {
      "event": "referenced",
      "id": 3508252847,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM1MDgyNTI4NDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3508252847",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4b024137334657e368bbee1fbfa59c03d2ba1ca4",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/4b024137334657e368bbee1fbfa59c03d2ba1ca4",
      "created_at": "2020-07-02T18:16:06Z"
    },
    {
      "event": "referenced",
      "id": 3515085087,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM1MTUwODUwODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3515085087",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6d7475cffa716946acfd263d15522956d58f0da1",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/6d7475cffa716946acfd263d15522956d58f0da1",
      "created_at": "2020-07-06T09:39:14Z"
    },
    {
      "event": "referenced",
      "id": 3545435955,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM1NDU0MzU5NTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3545435955",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9b8ddbcc1ca09a5d91ebe83a9399b373c45d0cf5",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/9b8ddbcc1ca09a5d91ebe83a9399b373c45d0cf5",
      "created_at": "2020-07-14T18:40:39Z"
    },
    {
      "event": "referenced",
      "id": 3560775303,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM1NjA3NzUzMDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3560775303",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bef5f38822f33710989fd5ad87152530e8230ab2",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/bef5f38822f33710989fd5ad87152530e8230ab2",
      "created_at": "2020-07-18T08:02:02Z"
    },
    {
      "event": "referenced",
      "id": 3603329872,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2MDMzMjk4NzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3603329872",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "70b728651d01c1f7dc8b9d3a7abd55b82725cf56",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/70b728651d01c1f7dc8b9d3a7abd55b82725cf56",
      "created_at": "2020-07-30T11:15:24Z"
    },
    {
      "event": "referenced",
      "id": 3608158022,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2MDgxNTgwMjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3608158022",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7ec42c1748515aa3c05e3cc8d206fa33de638da5",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/7ec42c1748515aa3c05e3cc8d206fa33de638da5",
      "created_at": "2020-07-31T11:47:13Z"
    },
    {
      "event": "referenced",
      "id": 3630671918,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2MzA2NzE5MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3630671918",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f324534295ce169585d6b9c46103783417c16d3b",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/f324534295ce169585d6b9c46103783417c16d3b",
      "created_at": "2020-08-06T20:13:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3633058786,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYzMzA1ODc4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3633058786",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-07T12:32:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3633384740,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYzMzM4NDc0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3633384740",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-07T14:04:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3633506324,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYzMzUwNjMyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3633506324",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-07T14:35:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3633542345,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYzMzU0MjM0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3633542345",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-07T14:44:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3633738512,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYzMzczODUxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3633738512",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-07T15:37:05Z"
    },
    {
      "event": "commented",
      "id": 670577529,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDU3NzUyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/670577529",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-07T15:37:06Z",
      "updated_at": "2020-08-07T15:37:06Z",
      "author_association": "MEMBER",
      "body": "Rebased and tests should pass now. Some things that I think are worth discussing:\r\n\r\n1. `CommitTransaction()` happily accepts transactions with `nLockTime` in the future. It's not clear to me if those eventually get broadcast; in the functional test I had to re-submit it manually. This could be tackled in another PR though.\r\n2. We return a transaction hash or a PSBT, in part depending on magic. You can opt out of this magic by setting the `psbt` option to `true` (which implies `add_to_wallet=false`, but in addition to the serialised hex it returns a PSBT even for a fully signed transaction)\r\n3. A hex serialized transaction is only returned when setting `add_to_wallet` to `false`, so there's no magic there. But depending on how (1) is handled, this could change, e.g. it could return a hex for transaction with (far) future `nLockTime` (not my preference though).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-670577529",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378"
    },
    {
      "event": "reviewed",
      "id": 467531019,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NTMxMDE5",
      "url": null,
      "actor": null,
      "commit_id": "15ba29aafe9a448c4cbf5f1550fa633e3ebd998a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "some style-nits to consider next time you rebase",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#pullrequestreview-467531019",
      "submitted_at": "2020-08-14T12:23:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3704639780,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcwNDYzOTc4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3704639780",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-28T16:18:41Z"
    },
    {
      "event": "referenced",
      "id": 3705229025,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM3MDUyMjkwMjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3705229025",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5dbd6d683bc50ee7c258aaec681917d32b46faaa",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/5dbd6d683bc50ee7c258aaec681917d32b46faaa",
      "created_at": "2020-08-28T18:43:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3709527969,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcwOTUyNzk2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3709527969",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-31T11:56:05Z"
    },
    {
      "event": "commented",
      "id": 683733694,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzczMzY5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683733694",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-31T11:56:06Z",
      "updated_at": "2020-08-31T11:56:06Z",
      "author_association": "MEMBER",
      "body": "Rebased after #18244 landed.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-683733694",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378"
    },
    {
      "event": "reviewed",
      "id": 483188381,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTg4Mzgx",
      "url": null,
      "actor": null,
      "commit_id": "27c07f08662a8044c729d0adead0511984c40cef",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "utACK 27c07f08662a8044c729d0adead0511984c40cef\r\n\r\nOnly lightly read through the test. Ran the functional tests. LGTM. Just a couple of helptext comments inline. Thanks Sjors!",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#pullrequestreview-483188381",
      "submitted_at": "2020-09-07T00:52:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
    },
    {
      "event": "referenced",
      "id": 3738136955,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM3MzgxMzY5NTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3738136955",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "867727da91eb982c4f2baf1a5a83695ab402374f",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/867727da91eb982c4f2baf1a5a83695ab402374f",
      "created_at": "2020-09-07T18:29:20Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmM4ZDBmZDU5MDZiYzk2MzdkNTEzY2QxOTNhMWY0N2FkOTRkYTI4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
      "tree": {
        "sha": "be9216ebdda7218dc910d5279b291434bf308cad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be9216ebdda7218dc910d5279b291434bf308cad"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree be9216ebdda7218dc910d5279b291434bf308cad\nparent 25839661305ec9fe8c25d171e31270d95311a4e4\nauthor Sjors Provoost <sjors@sprovoost.nl> 1562867445 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1599503596 +0200\n\n[rpc] walletcreatefundedpsbt: allow inputs to be null\n\nThis is of neglible use here, but it allows new RPC methods to take outputs as their first argument and make inputs optional.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl9WfOwACgkQV/+b28ww\nEAk37A//QKRB4HOTVeXh64Bpoqu56i+aj/YMA/8XCz6+VP3SE2Lm6VboXAmSx/8E\n0LGOz5gJJW51RuJQDtyuRTxlW4UwwgVj1lot3/j1w6PpOmN8uAX/Sm8EwrUeOb5W\naCguoqWqY/0e0PI7xLx5TChmroTC9gz0rpamk6uCaKl6RP3v09uSz/chY9YZh4Ch\nIYRmWIoiTPaFNC6Um7psNshbgdpX78ZXUQKW8i6W0AZPQM6bsTwHb/pUCjCLSdxe\ny1MPdOdq5LuVVCa5eREUFQCzCAJ47bXBgQmjAdD4R9QaXZ/Hbkoh8RdvTUKsXp0+\nxFKrMcyLPwa2YDTlwpNMOzUkvp37lX/Lxln1RaxKEefiV/ypmCHDnfWy6PANfDDz\nqW300fMXKMEur8YY5Azq+ko5s7ynCnVvFFjHazOuHds5iZAf6353H51IDQ+mXkAr\nuu/vpYBK9gIEG1vyEvQreeQyJc8JPo7198sCtmLicVTmSSu6BDrVlNXEZeFFZSD+\n368iW83mG4+g4icGu+XLQSQYD+81cVOM3x7c1vwxAfH+Aukd+s80P12W7AReaZeV\n1Nbf29saWg6k12sYcrwkb7lQfeJ1gdk0XgKLf1f/L4S66V8P2qM5MYLuhgGJlj4T\nB5uZMmOZBMUq1Bk+G7ylE8WEJaXwDbUyOEQjFuUqN3WZ+OYcWDY=\n=nrk5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25839661305ec9fe8c25d171e31270d95311a4e4",
          "sha": "25839661305ec9fe8c25d171e31270d95311a4e4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/25839661305ec9fe8c25d171e31270d95311a4e4"
        }
      ],
      "message": "[rpc] walletcreatefundedpsbt: allow inputs to be null\n\nThis is of neglible use here, but it allows new RPC methods to take outputs as their first argument and make inputs optional.",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-09-07T18:33:16Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-07-11T17:50:45Z"
      },
      "sha": "1bc8d0fd5906bc9637d513cd193a1f47ad94da28"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzJhMTQ0NWRjOWQyMmM5ZDcyOWI4MzAxYzhiM2Y1NDE5NWJjZmNm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
      "tree": {
        "sha": "43eb5be1df5292b04e738cdd0c131efaf40fcad7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43eb5be1df5292b04e738cdd0c131efaf40fcad7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 43eb5be1df5292b04e738cdd0c131efaf40fcad7\nparent 1bc8d0fd5906bc9637d513cd193a1f47ad94da28\nauthor Sjors Provoost <sjors@sprovoost.nl> 1583154087 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1599503596 +0200\n\n[rpc] add snake case aliases for transaction methods\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl9WfOwACgkQV/+b28ww\nEAmGtw//crkcSmgGSbfl/HRS3AZu+iZcOqCD53nNpptTHuvpbdw+Imal8Dqk6Bxc\nWbT8/B+RmpvE0JfNqmMfwqIbOgizTXT2hwS5TvLrl2HU/9dS18I3IZGSOFSlObcI\nMSLzO2JkijLG+G055f+7OeynvhsrBfPRu/MNZ6crNtR5wB92htFM+uVgKzvQLHkz\nIMI0cu1dSW8CdLx3SKnPcc1hR6/pDQTUaEy6PxiEOwyJgJuSWRVBEqptgBjvr1yt\nJwRtT45McYpWHnSB3BzxTsYJet+3Kj0OIxqC7zXApFh2A/a4e8Lv2FPIYOSO22Jr\nqWoUxQtKHFMUxIRk7SKhnmnvx/Um1YFGEi9NHt40T+1biBcWOf5c526tl+N/xIfX\nVf5+Am97/0Uqr8J46C3KPwUsXcl0mCN+J0U2RU8v+ApsHGxwMx9tUB1VTJOyUYni\n5VCXsxMDvHlNYbpdbuP/76LWidUeHKxBV9By1GXNzJeSQL9MK18r4/yP7oNQTYU6\npnzbIgDVYQHEQrZlzBIbcElpfD7TDUHCiHH4DaM1fVhEeuiFVG3Bu6c//DPwXpTr\nqbeLMGInx3HAPB6amZcz5z34YZVKGLvx1G6rcL5JhACrjI42mey1+i65ifGDm3f5\nIUTncEV2Vng/5cuDvbSLzHGxKsdTFkjHHBgY2V0yZGYoVoKrBdo=\n=hxQZ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
          "sha": "1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1bc8d0fd5906bc9637d513cd193a1f47ad94da28"
        }
      ],
      "message": "[rpc] add snake case aliases for transaction methods",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-09-07T18:33:16Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-03-02T13:01:27Z"
      },
      "sha": "2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3738190052,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzczODE5MDA1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3738190052",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-07T18:59:49Z"
    },
    {
      "event": "reviewed",
      "id": 485526785,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NTI2Nzg1",
      "url": null,
      "actor": null,
      "commit_id": "62d3523e2163e251f7a10aca8e538c7f13f258d8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#pullrequestreview-485526785",
      "submitted_at": "2020-09-10T02:41:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjMyNmQ4OTc2NjE1NWE3OTIyNTRkMzBhOTk2MjI1MWI4ZmM3Nzk5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92326d89766155a792254d30a9962251b8fc7799",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/92326d89766155a792254d30a9962251b8fc7799",
      "tree": {
        "sha": "5ecf9e916565ee452377c9db6082d09a340903b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ecf9e916565ee452377c9db6082d09a340903b4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5ecf9e916565ee452377c9db6082d09a340903b4\nparent 2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf\nauthor Sjors Provoost <sjors@sprovoost.nl> 1596814596 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1599738293 +0200\n\n[rpc] add send method\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl9aEbcACgkQV/+b28ww\nEAngfg//XwZi0NMl/Gw17yFn0+5ia9NJ55YrY1JmVvRs8CZtB1WLQfdBTMEF5kpu\n1gKCq0Zwq2Ad6Ku4obyLqRxZXymUGV74GdDM4cWLPSD1qFdA4R1UwxXAYcS4vUw4\ntsoNPjdD4knEdlkkDQLeD7Z6yJp7r+YaXn10OovhIqboQtbcZO2RInzbf1ehR32l\n1qbCXUqfzkLum2Drct4OXYY5bQwXta61OooFcgkje1IJSk68Yrsu0F9DPQt2qZ6z\nRcLdD2oZd7wVTzENOwVYWgkQ/LB0Ia0+Rh+PTs8cPeQ9IXFA+UYB0h3+12VxkcGi\nDAxnG10sxt9IrbDKn/VWvrXIwoXuiZ2Rux5P1xBY0CqOjl30ZhraL5Fas/oqnHZU\nUxqPwiE3OmWBvkiJhPUZlaN4J3hTyDCF2lsYmFF7BSYuCHlVAVfgZOYcJRpPRCDS\nQIIXrhzoPlzYgYWvEOs1K/LAsGvGWWs6c4AR2ED+rWEFWk32WJof4n/NOohB6Me5\nLfDnUAZRrHfCV88Dl/7m0u0Iz54OjB0rCXSjmHB8cPvnnFsCSrIPR/FJjhO1ZUri\nTpXSC5QMupIfPgKqzty28J5zq/MK9UeqB79WGwN15ICpEm3NdX66jMLnIZ9YKrgn\nTHZTS4jZPkBfOZUtrUhRTmhkhraMi21yoD7OaHZaOgqjUurqyDE=\n=VQ7i\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
          "sha": "2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf"
        }
      ],
      "message": "[rpc] add send method",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-09-10T11:44:53Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-08-07T15:36:36Z"
      },
      "sha": "92326d89766155a792254d30a9962251b8fc7799"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3750558702,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc1MDU1ODcwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3750558702",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T11:45:04Z"
    },
    {
      "event": "reviewed",
      "id": 485914977,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1OTE0OTc3",
      "url": null,
      "actor": null,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "ShaunApps",
        "id": 4433907,
        "node_id": "MDQ6VXNlcjQ0MzM5MDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4433907?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ShaunApps",
        "html_url": "https://github.com/ShaunApps",
        "followers_url": "https://api.github.com/users/ShaunApps/followers",
        "following_url": "https://api.github.com/users/ShaunApps/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ShaunApps/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ShaunApps/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ShaunApps/subscriptions",
        "organizations_url": "https://api.github.com/users/ShaunApps/orgs",
        "repos_url": "https://api.github.com/users/ShaunApps/repos",
        "events_url": "https://api.github.com/users/ShaunApps/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ShaunApps/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#pullrequestreview-485914977",
      "submitted_at": "2020-09-10T13:13:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
    },
    {
      "event": "commented",
      "id": 690279475,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5MDI3OTQ3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/690279475",
      "actor": {
        "login": "ShaunApps",
        "id": 4433907,
        "node_id": "MDQ6VXNlcjQ0MzM5MDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4433907?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ShaunApps",
        "html_url": "https://github.com/ShaunApps",
        "followers_url": "https://api.github.com/users/ShaunApps/followers",
        "following_url": "https://api.github.com/users/ShaunApps/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ShaunApps/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ShaunApps/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ShaunApps/subscriptions",
        "organizations_url": "https://api.github.com/users/ShaunApps/orgs",
        "repos_url": "https://api.github.com/users/ShaunApps/repos",
        "events_url": "https://api.github.com/users/ShaunApps/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ShaunApps/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T13:14:42Z",
      "updated_at": "2020-09-10T13:14:42Z",
      "author_association": "NONE",
      "body": "ACK.\r\n\r\nRan functional tests. Played w/ command in cli. Left a nit",
      "user": {
        "login": "ShaunApps",
        "id": 4433907,
        "node_id": "MDQ6VXNlcjQ0MzM5MDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4433907?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ShaunApps",
        "html_url": "https://github.com/ShaunApps",
        "followers_url": "https://api.github.com/users/ShaunApps/followers",
        "following_url": "https://api.github.com/users/ShaunApps/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ShaunApps/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ShaunApps/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ShaunApps/subscriptions",
        "organizations_url": "https://api.github.com/users/ShaunApps/orgs",
        "repos_url": "https://api.github.com/users/ShaunApps/repos",
        "events_url": "https://api.github.com/users/ShaunApps/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ShaunApps/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-690279475",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378"
    },
    {
      "event": "added_to_project",
      "id": 3752688450,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQzNzUyNjg4NDUw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3752688450",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T19:05:48Z",
      "project_card": {
        "id": 45258293,
        "url": "https://api.github.com/projects/columns/cards/45258293",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "reviewed",
      "id": 486400115,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NDAwMTE1",
      "url": null,
      "actor": null,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Light re-utACK 92326d89766155a792254d30a9962251b8fc7799\r\n\r\n(still haven't read the test carefully)",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#pullrequestreview-486400115",
      "submitted_at": "2020-09-11T00:40:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
    },
    {
      "event": "reviewed",
      "id": 488246913,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjQ2OTEz",
      "url": null,
      "actor": null,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 92326d89766155a792254d30a9962251b8fc7799 Reviewed code and test, ran tests.\r\n\r\nJust some nits and non-blocking comments.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#pullrequestreview-488246913",
      "submitted_at": "2020-09-15T01:33:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
    },
    {
      "event": "reviewed",
      "id": 488276068,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4Mjc2MDY4",
      "url": null,
      "actor": null,
      "commit_id": "1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 92326d89766155a792254d30a9962251b8fc7799",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#pullrequestreview-488276068",
      "submitted_at": "2020-09-15T02:47:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
    },
    {
      "event": "commented",
      "id": 692430345,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5MjQzMDM0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692430345",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-15T02:51:18Z",
      "updated_at": "2020-09-15T02:51:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Nits can be left for followup, let's get this in to move #16546 forward 🚀 ",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-692430345",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378"
    },
    {
      "event": "merged",
      "id": 3766152036,
      "node_id": "MDExOk1lcmdlZEV2ZW50Mzc2NjE1MjAzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3766152036",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ffaac6e6142a1cf61e8e12d7fc406fcb02300144",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffaac6e6142a1cf61e8e12d7fc406fcb02300144",
      "created_at": "2020-09-15T02:51:54Z"
    },
    {
      "event": "closed",
      "id": 3766152043,
      "node_id": "MDExOkNsb3NlZEV2ZW50Mzc2NjE1MjA0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3766152043",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-15T02:51:54Z"
    },
    {
      "event": "referenced",
      "id": 3766345034,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM3NjYzNDUwMzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3766345034",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2d9d86f6b8174945c9b6c7d9b2ad6b0ee84affab",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/2d9d86f6b8174945c9b6c7d9b2ad6b0ee84affab",
      "created_at": "2020-09-15T04:35:31Z"
    },
    {
      "event": "moved_columns_in_project",
      "id": 3766373541,
      "node_id": "MDI2Ok1vdmVkQ29sdW1uc0luUHJvamVjdEV2ZW50Mzc2NjM3MzU0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3766373541",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-15T04:48:41Z",
      "project_card": {
        "id": 40412562,
        "url": "https://api.github.com/projects/columns/cards/40412562",
        "project_id": 4755909,
        "project_url": "https://api.github.com/projects/4755909",
        "column_name": "Done",
        "previous_column_name": "PRs"
      }
    },
    {
      "event": "removed_from_project",
      "id": 3766375112,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50Mzc2NjM3NTExMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3766375112",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-15T04:49:06Z",
      "project_card": {
        "id": 45258293,
        "url": "https://api.github.com/projects/columns/cards/45258293",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "head_ref_deleted",
      "id": 3769029101,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQzNzY5MDI5MTAx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3769029101",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-15T15:38:31Z"
    },
    {
      "event": "reviewed",
      "id": 488713127,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NzEzMTI3",
      "url": null,
      "actor": null,
      "commit_id": "2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "post-merge Concept ACK\r\n\r\nFeel free to ignore my nits, even in a follow-up. But the `replaceable` issue needs to be addressed afaict.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#pullrequestreview-488713127",
      "submitted_at": "2020-09-15T16:03:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
    },
    {
      "event": "commented",
      "id": 694236447,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDIzNjQ0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694236447",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-17T13:31:41Z",
      "updated_at": "2020-09-17T13:31:41Z",
      "author_association": "MEMBER",
      "body": "Nits addressed in #19969, where I'm also declaring this RPC experimental.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-694236447",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16378"
    },
    {
      "event": "referenced",
      "id": 3817863205,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTc4NjMyMDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3817863205",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e36aa351a31cde0f95ce957b2ff593a97f91eb6d",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e36aa351a31cde0f95ce957b2ff593a97f91eb6d",
      "created_at": "2020-09-29T07:14:42Z"
    },
    {
      "event": "referenced",
      "id": 3819692771,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MTk2OTI3NzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3819692771",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4793d4ff1f6ff80d242e8f6eeadf76995435a94e",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/4793d4ff1f6ff80d242e8f6eeadf76995435a94e",
      "created_at": "2020-09-29T13:47:01Z"
    },
    {
      "event": "referenced",
      "id": 5428353341,
      "node_id": "REFE_lADOABII584b3GP-zwAAAAFDjhk9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5428353341",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "98047924103bb7fdd79fecad93d1dc72f5c6fc36",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/98047924103bb7fdd79fecad93d1dc72f5c6fc36",
      "created_at": "2021-10-07T12:59:57Z"
    },
    {
      "event": "referenced",
      "id": 5428353347,
      "node_id": "REFE_lADOABII584b3GP-zwAAAAFDjhlD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5428353347",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3ed98b036f03eef7a6fe3ec03858748ca8b11b01",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/3ed98b036f03eef7a6fe3ec03858748ca8b11b01",
      "created_at": "2021-10-07T12:59:57Z"
    },
    {
      "event": "referenced",
      "id": 5428353352,
      "node_id": "REFE_lADOABII584b3GP-zwAAAAFDjhlI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5428353352",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d044621ed44f1eb199494b7b8beb15b28d54ad86",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/d044621ed44f1eb199494b7b8beb15b28d54ad86",
      "created_at": "2021-10-07T12:59:57Z"
    },
    {
      "event": "locked",
      "id": 6073902206,
      "node_id": "LOE_lADOABII584b3GP-zwAAAAFqCGR-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6073902206",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T10:47:39Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303001240",
      "pull_request_review_id": 261283429,
      "id": 303001240,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzAwMTI0MA==",
      "diff_hunk": "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "as noted in my other PR, I think `broadcast` is the wrong word here. It's moreso that we do not commit it to the wallet, which also broadcasts it",
      "created_at": "2019-07-12T14:15:37Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303001240",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303001240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4345,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303007096",
      "pull_request_review_id": 261291199,
      "id": 303007096,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzAwNzA5Ng==",
      "diff_hunk": "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "in_reply_to_id": 303001240,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm open to other terms, maybe `commit`? But that seems less clear.\r\n\r\nThe background motivation here is that an RPC consumer may need certainty about whether the transaction failed or succeeded. For example this should even work if the RPC connection gets cut before the call returns.\r\n\r\nJust retrying is unsafe. So right now the only option is to check if the wallet contains transactions to the expected destination(s). With this flag, the RPC consumer gets full control and can for example commit the full transaction to some redundant database before broadcasting it.\r\n\r\n(and maybe in future we support wallet-less spend based on just a descriptor with private keys, where there's no way to know if a previous attempt failed, since you can't rely on the local mempool for that)",
      "created_at": "2019-07-12T14:28:18Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303007096",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303007096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4345,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303016671",
      "pull_request_review_id": 261303922,
      "id": 303016671,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzAxNjY3MQ==",
      "diff_hunk": "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "in_reply_to_id": 303001240,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"broadcast\" already has meaning to users unfortunately e.g., `walletbroadcast` startup arg",
      "created_at": "2019-07-12T14:49:10Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303016671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303016671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4345,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303209033",
      "pull_request_review_id": 261545538,
      "id": 303209033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzIwOTAzMw==",
      "diff_hunk": "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "in_reply_to_id": 303001240,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's a rather scary startup option imo; forget it once and everything gets broadcast?",
      "created_at": "2019-07-13T15:25:27Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303209033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303209033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4345,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/309679500",
      "pull_request_review_id": 269595979,
      "id": 309679500,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTY3OTUwMA==",
      "diff_hunk": "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "in_reply_to_id": 303001240,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> That's a rather scary startup option imo; forget it once and everything gets broadcast?\r\n\r\nThis is definitely an option, like the proxy configuration, one'd want to have in the `bitcoin.conf` and not on the command line!\r\n\r\nBut also, not necessarily: the idea is that when you have it enabled, you broadcast wallet transactions manually (e.g. by pasting them into the transaction broadcast of a  block explorer, or a script such as `bitcoin-submittx` over tor) so they end up in the mempool or block chain through some other route. There's no reason for the wallet to broadcast them then.",
      "created_at": "2019-08-01T12:51:53Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r309679500",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/309679500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4345,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/309802778",
      "pull_request_review_id": 269756507,
      "id": 309802778,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTgwMjc3OA==",
      "diff_hunk": "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "in_reply_to_id": 303001240,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The option I introduce here doesn't even add the transaction to the wallet; it only returns the hex. So it goes beyond `walletbroadcast=0` afaik.",
      "created_at": "2019-08-01T17:04:50Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r309802778",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/309802778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4345,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310209218",
      "pull_request_review_id": 270280098,
      "id": 310209218,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDIwOTIxOA==",
      "diff_hunk": "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "in_reply_to_id": 303001240,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I renamed `broadcast` to `add_to_wallet` and explained it a bit better in the docs. ",
      "created_at": "2019-08-02T16:34:34Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r310209218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310209218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4345,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470590536",
      "pull_request_review_id": 467531019,
      "id": 470590536,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5MDUzNg==",
      "diff_hunk": "@@ -3818,6 +3833,186 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue send(const JSONRPCRequest& request)",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 103,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "15ba29aafe9a448c4cbf5f1550fa633e3ebd998a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might use the non-deprecated constructor. E.g. #19528  ",
      "created_at": "2020-08-14T12:21:36Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r470590536",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470590536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3836,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470590770",
      "pull_request_review_id": 467531019,
      "id": 470590770,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5MDc3MA==",
      "diff_hunk": "@@ -3818,6 +3833,186 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 151,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "15ba29aafe9a448c4cbf5f1550fa633e3ebd998a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\r\n```\r\n\r\nNo need for the whitespace",
      "created_at": "2020-08-14T12:22:09Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r470590770",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470590770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3884,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470591098",
      "pull_request_review_id": 467531019,
      "id": 470591098,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5MTA5OA==",
      "diff_hunk": "@@ -3818,6 +3833,186 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                                                       \"the number of addresses.\\n\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        }\n+    }.Check(request);\n+\n+    RPCTypeCheck(request.params, {\n+        UniValueType(), // ARR or OBJ, checked later\n+        UniValue::VNUM,\n+        UniValue::VSTR,\n+        UniValue::VOBJ\n+        }, true\n+    );\n+\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 191,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "15ba29aafe9a448c4cbf5f1550fa633e3ebd998a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As the previous line already checks for nullptr, this can be a reference.\r\n```suggestion\r\n    CWallet& wallet = pwallet.get();\r\n```",
      "created_at": "2020-08-14T12:22:53Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r470591098",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470591098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3924,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479398807",
      "pull_request_review_id": 477851275,
      "id": 479398807,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5ODgwNw==",
      "diff_hunk": "@@ -3818,6 +3833,186 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                                                       \"the number of addresses.\\n\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        }\n+    }.Check(request);\n+\n+    RPCTypeCheck(request.params, {\n+        UniValueType(), // ARR or OBJ, checked later\n+        UniValue::VNUM,\n+        UniValue::VSTR,\n+        UniValue::VOBJ\n+        }, true\n+    );\n+\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 191,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "15ba29aafe9a448c4cbf5f1550fa633e3ebd998a",
      "in_reply_to_id": 470591098,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you mean `const CWallet& pwallet = wallet.get();` ? This creates a `const` mess when calling `FundTransaction` (which I'd rather not refactor in this PR).",
      "created_at": "2020-08-28T16:06:00Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r479398807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479398807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3924,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479406129",
      "pull_request_review_id": 477860841,
      "id": 479406129,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwNjEyOQ==",
      "diff_hunk": "@@ -3818,6 +3833,186 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue send(const JSONRPCRequest& request)",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 103,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "15ba29aafe9a448c4cbf5f1550fa633e3ebd998a",
      "in_reply_to_id": 470590536,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I switched to the fancy new thing.",
      "created_at": "2020-08-28T16:19:33Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r479406129",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479406129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3836,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484135309",
      "pull_request_review_id": 483188381,
      "id": 484135309,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEzNTMwOQ==",
      "diff_hunk": "@@ -3885,6 +3890,188 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "27c07f08662a8044c729d0adead0511984c40cef",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because these are Optional::OMITTED, the \"default\" is actually the description string, so the only output is:\r\n```\r\n2. conf_target                           (numeric) wallet default\r\n3. estimate_mode                         (string) unset\r\n```",
      "created_at": "2020-09-07T00:33:53Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r484135309",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484135309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": 3914,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3915,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484135676",
      "pull_request_review_id": 483188381,
      "id": 484135676,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEzNTY3Ng==",
      "diff_hunk": "@@ -3885,6 +3890,188 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                                                       \"the number of addresses.\\n\"},",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 99,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "27c07f08662a8044c729d0adead0511984c40cef",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: unnecessary newline",
      "created_at": "2020-09-07T00:36:46Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r484135676",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484135676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3958,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484545963",
      "pull_request_review_id": 483690076,
      "id": 484545963,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0NTk2Mw==",
      "diff_hunk": "@@ -3885,6 +3890,188 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "27c07f08662a8044c729d0adead0511984c40cef",
      "in_reply_to_id": 484135309,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I dropped the `Optional::OMITTED` bit, not super intuitive... (cc @MarcoFalke)\r\n\r\n```\r\n2. conf_target                           (numeric, optional, default=wallet default) Confirmation target (in blocks), or fee rate (for BTC/kB or sat/B estimate modes)\r\n3. estimate_mode                         (string, optional, default=unset) The fee estimate mode, must be one of (case insensitive):\r\n                                         \"unset\"\r\n                                         \"economical\"\r\n                                         \"conservative\"\r\n                                         \"BTC/kB\"\r\n                                         \"sat/B\"\r\n4. options                               (json object, optional)\r\n```",
      "created_at": "2020-09-07T18:57:07Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r484545963",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484545963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": 3914,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3915,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/486028808",
      "pull_request_review_id": 485526785,
      "id": 486028808,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAyODgwOA==",
      "diff_hunk": "@@ -3866,6 +3871,187 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // ARR or OBJ, checked later\n+                UniValue::VNUM,\n+                UniValue::VSTR,\n+                UniValue::VOBJ\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            UniValue options = request.params[3];\n+            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            const UniValue &replaceable_arg = options[\"replaceable\"];\n+            if (!replaceable_arg.isNull()) {\n+                RPCTypeCheckArgument(replaceable_arg, UniValue::VBOOL);\n+                rbf = replaceable_arg.isTrue();",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "62d3523e2163e251f7a10aca8e538c7f13f258d8",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this check so much more involved than just if exists() and get_bool() like you do with add_to_wallet below?",
      "created_at": "2020-09-10T02:41:18Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r486028808",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/486028808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3999,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/486271735",
      "pull_request_review_id": 485845648,
      "id": 486271735,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI3MTczNQ==",
      "diff_hunk": "@@ -3866,6 +3871,187 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // ARR or OBJ, checked later\n+                UniValue::VNUM,\n+                UniValue::VSTR,\n+                UniValue::VOBJ\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            UniValue options = request.params[3];\n+            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            const UniValue &replaceable_arg = options[\"replaceable\"];\n+            if (!replaceable_arg.isNull()) {\n+                RPCTypeCheckArgument(replaceable_arg, UniValue::VBOOL);\n+                rbf = replaceable_arg.isTrue();",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "62d3523e2163e251f7a10aca8e538c7f13f258d8",
      "in_reply_to_id": 486028808,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because I blindly copied it from `walletcreatefundedpsbt` :-)\r\n\r\nReplaced with simpler version.",
      "created_at": "2020-09-10T11:44:47Z",
      "updated_at": "2020-09-10T11:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r486271735",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/486271735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3999,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/486325092",
      "pull_request_review_id": 485914977,
      "id": 486325092,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyNTA5Mg==",
      "diff_hunk": "@@ -3857,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 167,
      "original_position": 167,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "ShaunApps",
        "id": 4433907,
        "node_id": "MDQ6VXNlcjQ0MzM5MDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4433907?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ShaunApps",
        "html_url": "https://github.com/ShaunApps",
        "followers_url": "https://api.github.com/users/ShaunApps/followers",
        "following_url": "https://api.github.com/users/ShaunApps/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ShaunApps/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ShaunApps/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ShaunApps/subscriptions",
        "organizations_url": "https://api.github.com/users/ShaunApps/orgs",
        "repos_url": "https://api.github.com/users/ShaunApps/repos",
        "events_url": "https://api.github.com/users/ShaunApps/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ShaunApps/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: parenthesis ')' in wrong place, enclosing HelpExampleCli and next example string",
      "created_at": "2020-09-10T13:13:44Z",
      "updated_at": "2020-09-10T13:13:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r486325092",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/486325092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3946,
      "original_line": 3946,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488315345",
      "pull_request_review_id": 488246913,
      "id": 488315345,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNTM0NQ==",
      "diff_hunk": "@@ -2955,16 +2956,20 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n         RPCTypeCheckObj(options,\n             {\n                 {\"add_inputs\", UniValueType(UniValue::VBOOL)},\n+                {\"add_to_wallet\", UniValueType(UniValue::VBOOL)},\n                 {\"changeAddress\", UniValueType(UniValue::VSTR)},\n                 {\"change_address\", UniValueType(UniValue::VSTR)},\n                 {\"changePosition\", UniValueType(UniValue::VNUM)},\n                 {\"change_position\", UniValueType(UniValue::VNUM)},\n                 {\"change_type\", UniValueType(UniValue::VSTR)},\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"include_watching\", UniValueType(UniValue::VBOOL)},\n+                {\"inputs\", UniValueType(UniValue::VARR)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n                 {\"lock_unspents\", UniValueType(UniValue::VBOOL)},\n-                {\"feeRate\", UniValueType()}, // will be checked below\n+                {\"locktime\", UniValueType(UniValue::VNUM)},\n+                {\"feeRate\", UniValueType()}, // will be checked below,",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Extra trailing comma",
      "created_at": "2020-09-15T00:44:30Z",
      "updated_at": "2020-09-15T01:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488315345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488315345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2971,
      "original_line": 2971,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488321814",
      "pull_request_review_id": 488246913,
      "id": 488321814,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMTgxNA==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // ARR or OBJ, checked later\n+                UniValue::VNUM,\n+                UniValue::VSTR,\n+                UniValue::VOBJ\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            UniValue options = request.params[3];\n+            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"add_to_wallet\"].get_bool();\n+            }\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+            CCoinControl coin_control;\n+            // Automatically select coins, unless at least one is manually selected. Can\n+            // be overriden by options.add_inputs.\n+            coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+            FundTransaction(pwallet, rawTx, fee, change_position, options, coin_control);\n+\n+            bool add_to_wallet = true;\n+            if (options.exists(\"add_to_wallet\")) {\n+                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            }\n+\n+            // Make a blank psbt\n+            PartiallySignedTransaction psbtx(rawTx);\n+\n+            // Fill transaction with out data and sign",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 235,
      "original_position": 174,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/out/our",
      "created_at": "2020-09-15T01:06:56Z",
      "updated_at": "2020-09-15T01:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488321814",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488321814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4014,
      "original_line": 4014,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488322349",
      "pull_request_review_id": 488246913,
      "id": 488322349,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMjM0OQ==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // ARR or OBJ, checked later\n+                UniValue::VNUM,\n+                UniValue::VSTR,\n+                UniValue::VOBJ\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            UniValue options = request.params[3];\n+            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"add_to_wallet\"].get_bool();\n+            }\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+            CCoinControl coin_control;\n+            // Automatically select coins, unless at least one is manually selected. Can\n+            // be overriden by options.add_inputs.\n+            coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+            FundTransaction(pwallet, rawTx, fee, change_position, options, coin_control);\n+\n+            bool add_to_wallet = true;\n+            if (options.exists(\"add_to_wallet\")) {\n+                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            }\n+\n+            // Make a blank psbt\n+            PartiallySignedTransaction psbtx(rawTx);\n+\n+            // Fill transaction with out data and sign\n+            bool complete = true;\n+            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_ALL, true, false);\n+            if (err != TransactionError::OK) {\n+                throw JSONRPCTransactionError(err);\n+            }\n+\n+            CMutableTransaction mtx;\n+            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+            UniValue result(UniValue::VOBJ);\n+\n+            // Serialize the PSBT\n+            CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 248,
      "original_position": 187,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like this serialization should only occur if we are actually going to return the psbt, so move it inside the next if block?",
      "created_at": "2020-09-15T01:08:59Z",
      "updated_at": "2020-09-15T01:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488322349",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488322349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4027,
      "original_line": 4027,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488322773",
      "pull_request_review_id": 488246913,
      "id": 488322773,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMjc3Mw==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the send RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_fee_amount,\n+    assert_greater_than,\n+    assert_raises_rpc_error\n+)\n+\n+class WalletSendTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        # whitelist all peers to speed up tx relay / mempool sync\n+        self.extra_args = [\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+        ]\n+        getcontext().prec = 8 # Satoshi precision for Decimal\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n+                  arg_conf_target=None, arg_estimate_mode=None,\n+                  conf_target=None, estimate_mode=None, add_to_wallet=None,psbt=None,\n+                  inputs=None,add_inputs=None,change_address=None,change_position=None,change_type=None,",
      "path": "test/functional/wallet_send.py",
      "position": 33,
      "original_position": 33,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: spaces after each arg, here and below",
      "created_at": "2020-09-15T01:10:34Z",
      "updated_at": "2020-09-15T01:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488322773",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488322773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488323964",
      "pull_request_review_id": 488246913,
      "id": 488323964,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMzk2NA==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 122,
      "original_position": 61,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like it would be better to call this `broadcast` rather than `add_to_wallet`.",
      "created_at": "2020-09-15T01:15:11Z",
      "updated_at": "2020-09-15T01:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488323964",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488323964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3901,
      "original_line": 3901,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488325666",
      "pull_request_review_id": 488246913,
      "id": 488325666,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyNTY2Ng==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the send RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_fee_amount,\n+    assert_greater_than,\n+    assert_raises_rpc_error\n+)\n+\n+class WalletSendTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        # whitelist all peers to speed up tx relay / mempool sync\n+        self.extra_args = [\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+        ]\n+        getcontext().prec = 8 # Satoshi precision for Decimal\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n+                  arg_conf_target=None, arg_estimate_mode=None,\n+                  conf_target=None, estimate_mode=None, add_to_wallet=None,psbt=None,\n+                  inputs=None,add_inputs=None,change_address=None,change_position=None,change_type=None,\n+                  include_watching=None,locktime=None,lock_unspents=None,replaceable=None,subtract_fee_from_outputs=None,\n+                  expect_error=None):\n+        assert (amount is None) != (data is None)\n+\n+        from_balance_before = from_wallet.getbalance()\n+        if to_wallet is None:\n+            assert amount is None\n+        else:\n+            to_untrusted_pending_before = to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"]\n+\n+        if amount:\n+            dest = to_wallet.getnewaddress()\n+            outputs = {dest: amount}\n+        else:\n+            outputs = {\"data\": data}\n+\n+        # Construct options dictionary\n+        options = {}\n+        if add_to_wallet is not None:\n+            options[\"add_to_wallet\"] = add_to_wallet\n+        else:\n+            if psbt:\n+                add_to_wallet = False\n+            else:\n+                add_to_wallet = from_wallet.getwalletinfo()[\"private_keys_enabled\"] # Default value\n+        if psbt is not None:\n+            options[\"psbt\"] = psbt\n+        if conf_target is not None:\n+            options[\"conf_target\"] = conf_target\n+        if estimate_mode is not None:\n+            options[\"estimate_mode\"] = estimate_mode\n+        if inputs is not None:\n+            options[\"inputs\"] = inputs\n+        if add_inputs is not None:\n+            options[\"add_inputs\"] = add_inputs\n+        if change_address is not None:\n+            options[\"change_address\"] = change_address\n+        if change_position is not None:\n+            options[\"change_position\"] = change_position\n+        if change_type is not None:\n+            options[\"change_type\"] = change_type\n+        if include_watching is not None:\n+            options[\"include_watching\"] = include_watching\n+        if locktime is not None:\n+            options[\"locktime\"] = locktime\n+        if lock_unspents is not None:\n+            options[\"lock_unspents\"] = lock_unspents\n+        if replaceable is None:\n+            replaceable = True # default\n+        else:\n+            options[\"replaceable\"] = replaceable\n+        if subtract_fee_from_outputs is not None:\n+            options[\"subtract_fee_from_outputs\"] = subtract_fee_from_outputs\n+\n+        if len(options.keys()) == 0:\n+            options = None\n+\n+        if expect_error is None:\n+            res = from_wallet.send(outputs=outputs, conf_target=arg_conf_target, estimate_mode=arg_estimate_mode, options=options)\n+        else:\n+            try:\n+                assert_raises_rpc_error(expect_error[0],expect_error[1],from_wallet.send,\n+                                        outputs=outputs,conf_target=arg_conf_target,estimate_mode=arg_estimate_mode,options=options)\n+            except AssertionError:\n+                # Provide debug info if the test fails\n+                self.log.error(\"Unexpected successful result:\")\n+                self.log.error(options)\n+                res = from_wallet.send(outputs=outputs,conf_target=arg_conf_target,estimate_mode=arg_estimate_mode,options=options)\n+                self.log.error(res)\n+                if \"txid\" in res and add_to_wallet:\n+                    self.log.error(\"Transaction details:\")\n+                    try:\n+                        tx = from_wallet.gettransaction(res[\"txid\"])\n+                        self.log.error(tx)\n+                        self.log.error(\"testmempoolaccept (transaction may already be in mempool):\")\n+                        self.log.error(from_wallet.testmempoolaccept([tx[\"hex\"]]))\n+                    except JSONRPCException as exc:\n+                        self.log.error(exc)\n+\n+                raise\n+\n+            return\n+\n+        if locktime:\n+            return res\n+\n+        if from_wallet.getwalletinfo()[\"private_keys_enabled\"] and not include_watching:\n+            assert_equal(res[\"complete\"], True)\n+            assert \"txid\" in res\n+        else:\n+            assert_equal(res[\"complete\"], False)\n+            assert not \"txid\" in res\n+            assert \"psbt\" in res\n+\n+        if add_to_wallet and not include_watching:\n+            # Ensure transaction exists in the wallet:\n+            tx = from_wallet.gettransaction(res[\"txid\"])\n+            assert tx\n+            assert_equal(tx[\"bip125-replaceable\"], \"yes\" if replaceable else \"no\")\n+            # Ensure transaction exists in the mempool:\n+            tx = from_wallet.getrawtransaction(res[\"txid\"],True)\n+            assert tx\n+            if amount:\n+                if subtract_fee_from_outputs:\n+                    assert_equal(from_balance_before - from_wallet.getbalance(), amount)\n+                else:\n+                    assert_greater_than(from_balance_before - from_wallet.getbalance(), amount)\n+            else:\n+                assert next((out for out in tx[\"vout\"] if out[\"scriptPubKey\"][\"asm\"] == \"OP_RETURN 35\"), None)\n+        else:\n+            assert_equal(from_balance_before, from_wallet.getbalance())\n+\n+        if to_wallet:\n+            self.sync_mempools()\n+            if add_to_wallet:\n+                if not subtract_fee_from_outputs:\n+                    assert_equal(to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"], to_untrusted_pending_before + Decimal(amount if amount else 0))\n+            else:\n+                assert_equal(to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"], to_untrusted_pending_before)\n+\n+        return res\n+\n+    def run_test(self):\n+        self.log.info(\"Setup wallets...\")\n+        # w0 is a wallet with coinbase rewards\n+        w0 = self.nodes[0].get_wallet_rpc(\"\")\n+        # w1 is a regular wallet\n+        self.nodes[1].createwallet(wallet_name=\"w1\")\n+        w1 = self.nodes[1].get_wallet_rpc(\"w1\")\n+        # w2 contains the private keys for w3\n+        self.nodes[1].createwallet(wallet_name=\"w2\")\n+        w2 = self.nodes[1].get_wallet_rpc(\"w2\")\n+        # w3 is a watch-only wallet, based on w2\n+        self.nodes[1].createwallet(wallet_name=\"w3\",disable_private_keys=True)\n+        w3 = self.nodes[1].get_wallet_rpc(\"w3\")\n+        for _ in range(3):\n+            a2_receive = w2.getnewaddress()\n+            a2_change = w2.getrawchangeaddress() # doesn't actually use change derivation\n+            res = w3.importmulti([{\n+                \"desc\": w2.getaddressinfo(a2_receive)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": True,\n+                \"watchonly\": True\n+            },{\n+                \"desc\": w2.getaddressinfo(a2_change)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": True,\n+                \"internal\": True,\n+                \"watchonly\": True\n+            }])\n+            assert_equal(res, [{\"success\": True}, {\"success\": True}])\n+\n+        w0.sendtoaddress(a2_receive, 10) # fund w3\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+\n+        # w4 has private keys enabled, but only contains watch-only keys (from w2)\n+        self.nodes[1].createwallet(wallet_name=\"w4\",disable_private_keys=False)\n+        w4 = self.nodes[1].get_wallet_rpc(\"w4\")\n+        for _ in range(3):\n+            a2_receive = w2.getnewaddress()\n+            res = w4.importmulti([{\n+                \"desc\": w2.getaddressinfo(a2_receive)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": False,\n+                \"watchonly\": True\n+            }])\n+            assert_equal(res, [{\"success\": True}])\n+\n+        w0.sendtoaddress(a2_receive, 10) # fund w4\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+\n+        self.log.info(\"Send to address...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1)\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=True)\n+\n+        self.log.info(\"Don't broadcast...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False)\n+        assert(res[\"hex\"])\n+\n+        self.log.info(\"Return PSBT...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, psbt=True)\n+        assert(res[\"psbt\"])\n+\n+        self.log.info(\"Create transaction that spends to address, but don't broadcast...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False)\n+        # conf_target & estimate_mode can be set as argument or option\n+        res1 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\", add_to_wallet=False)\n+        res2 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=1, estimate_mode=\"economical\", add_to_wallet=False)\n+        assert_equal(self.nodes[1].decodepsbt(res1[\"psbt\"])[\"fee\"],\n+                     self.nodes[1].decodepsbt(res2[\"psbt\"])[\"fee\"])\n+        # but not at the same time\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\",\n+                       conf_target=1, estimate_mode=\"economical\", add_to_wallet=False, expect_error=(-8,\"Use either conf_target and estimate_mode or the options dictionary to control fee rate\"))\n+\n+        self.log.info(\"Create PSBT from watch-only wallet w3, sign with w2...\")\n+        res = self.test_send(from_wallet=w3, to_wallet=w1, amount=1)\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Create PSBT from wallet w4 with watch-only keys, sign with w2...\")\n+        self.test_send(from_wallet=w4, to_wallet=w1, amount=1, expect_error=(-4, \"Insufficient funds\"))\n+        res = self.test_send(from_wallet=w4, to_wallet=w1, amount=1, include_watching=True, add_to_wallet=False)\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Create OP_RETURN...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1)\n+        self.test_send(from_wallet=w0, data=\"Hello World\", expect_error=(-8, \"Data must be hexadecimal string (not 'Hello World')\"))\n+        self.test_send(from_wallet=w0, data=\"23\")\n+        res = self.test_send(from_wallet=w3, data=\"23\")\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Set fee rate...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=2, estimate_mode=\"sat/b\", add_to_wallet=False)\n+        fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n+        assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00002\"))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=-1, estimate_mode=\"sat/b\",\n+                       expect_error=(-3, \"Amount out of range\"))\n+        # Fee rate of 0.1 satoshi per byte should throw an error\n+        # TODO: error should say 1.000 sat/b",
      "path": "test/functional/wallet_send.py",
      "position": 256,
      "original_position": 256,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that's supposed to be 0.1, not 1.000",
      "created_at": "2020-09-15T01:21:17Z",
      "updated_at": "2020-09-15T01:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488325666",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488325666"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 256,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488342027",
      "pull_request_review_id": 488276068,
      "id": 488342027,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0MjAyNw==",
      "diff_hunk": "@@ -21,10 +21,15 @@\n \n CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, bool rbf)\n {\n-    if (inputs_in.isNull() || outputs_in.isNull())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n+    if (outputs_in.isNull())",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`[rpc] walletcreatefundedpsbt: allow inputs to be null`:\r\n\r\nStyle-nit: add `{}` while at it, since you're touching this line.",
      "created_at": "2020-09-15T02:19:01Z",
      "updated_at": "2020-09-15T02:47:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488342027",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488342027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488342222",
      "pull_request_review_id": 488276068,
      "id": 488342222,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0MjIyMg==",
      "diff_hunk": "@@ -21,10 +21,15 @@\n \n CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, bool rbf)\n {\n-    if (inputs_in.isNull() || outputs_in.isNull())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n+    if (outputs_in.isNull())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, output argument must be non-null\");\n+\n+    UniValue inputs;\n+    if (inputs_in.isNull())",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": 10,
      "original_position": 10,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`[rpc] walletcreatefundedpsbt: allow inputs to be null`:\r\n\r\nAdd `{}`s.",
      "created_at": "2020-09-15T02:19:44Z",
      "updated_at": "2020-09-15T02:47:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488342222",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488342222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488347026",
      "pull_request_review_id": 488276068,
      "id": 488347026,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NzAyNg==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 106,
      "original_position": 45,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`RPCArg::Type::AMOUNT` is not a key-value pair. I think you mean `RPCArg::Type::OBJ`.",
      "created_at": "2020-09-15T02:36:39Z",
      "updated_at": "2020-09-15T02:47:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488347026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488347026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3885,
      "original_line": 3885,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488347536",
      "pull_request_review_id": 488276068,
      "id": 488347536,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NzUzNg==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 111,
      "original_position": 50,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`RPCArg::Type::STR_HEX` is not a key-value pair either. I think you mean `RPCArg::Type::OBJ` here too.",
      "created_at": "2020-09-15T02:38:27Z",
      "updated_at": "2020-09-15T02:47:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488347536",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488347536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3890,
      "original_line": 3890,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488348105",
      "pull_request_review_id": 488276068,
      "id": 488348105,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0ODEwNQ==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 127,
      "original_position": 66,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why are there two conf_target and estimate_mode parameters?",
      "created_at": "2020-09-15T02:40:23Z",
      "updated_at": "2020-09-15T02:47:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488348105",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488348105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3906,
      "original_line": 3906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488349241",
      "pull_request_review_id": 488276068,
      "id": 488349241,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0OTI0MQ==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // ARR or OBJ, checked later\n+                UniValue::VNUM,\n+                UniValue::VSTR,\n+                UniValue::VOBJ\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            UniValue options = request.params[3];\n+            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"add_to_wallet\"].get_bool();\n+            }\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+            CCoinControl coin_control;\n+            // Automatically select coins, unless at least one is manually selected. Can\n+            // be overriden by options.add_inputs.\n+            coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+            FundTransaction(pwallet, rawTx, fee, change_position, options, coin_control);\n+\n+            bool add_to_wallet = true;\n+            if (options.exists(\"add_to_wallet\")) {\n+                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            }",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 230,
      "original_position": 169,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Alternative:\r\n```C++\r\nbool add_to_wallet = !options.exists(\"add_to_wallet\") || options[\"add_to_wallet\"].get_bool();\r\n```\r\n",
      "created_at": "2020-09-15T02:44:23Z",
      "updated_at": "2020-09-15T02:48:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488349241",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488349241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4009,
      "original_line": 4009,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488690111",
      "pull_request_review_id": 488713127,
      "id": 488690111,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY5MDExMQ==",
      "diff_hunk": "@@ -2972,22 +2977,24 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             coinControl.m_add_inputs = options[\"add_inputs\"].get_bool();\n         }\n \n-        if (options.exists(\"changeAddress\")) {\n-            CTxDestination dest = DecodeDestination(options[\"changeAddress\"].get_str());\n+        if (options.exists(\"changeAddress\") || options.exists(\"change_address\")) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 38,
      "original_position": 24,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be more robust to throw an error if both options are set.",
      "created_at": "2020-09-15T13:58:26Z",
      "updated_at": "2020-09-15T16:03:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488690111",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488690111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2985,
      "original_line": 2980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488692783",
      "pull_request_review_id": 488713127,
      "id": 488692783,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY5Mjc4Mw==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 100,
      "original_position": 39,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: JSON, Capitalize A",
      "created_at": "2020-09-15T14:01:49Z",
      "updated_at": "2020-09-15T16:03:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488692783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488692783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3879,
      "original_line": 3879,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488694616",
      "pull_request_review_id": 488713127,
      "id": 488694616,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY5NDYxNg==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 142,
      "original_position": 81,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: JSON",
      "created_at": "2020-09-15T14:04:15Z",
      "updated_at": "2020-09-15T16:03:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488694616",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488694616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3921,
      "original_line": 3921,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488695442",
      "pull_request_review_id": 488713127,
      "id": 488695442,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY5NTQ0Mg==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 132,
      "original_position": 71,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: JSON",
      "created_at": "2020-09-15T14:05:19Z",
      "updated_at": "2020-09-15T16:03:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488695442",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488695442"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3911,
      "original_line": 3911,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488698235",
      "pull_request_review_id": 488713127,
      "id": 488698235,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY5ODIzNQ==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // ARR or OBJ, checked later\n+                UniValue::VNUM,\n+                UniValue::VSTR,\n+                UniValue::VOBJ\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            UniValue options = request.params[3];\n+            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"add_to_wallet\"].get_bool();",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 218,
      "original_position": 157,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems like an bug? s/\"add_to_wallet\"/\"replaceable\"/",
      "created_at": "2020-09-15T14:09:12Z",
      "updated_at": "2020-09-15T16:03:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488698235",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488698235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3997,
      "original_line": 3997,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488701017",
      "pull_request_review_id": 488713127,
      "id": 488701017,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMTAxNw==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // ARR or OBJ, checked later\n+                UniValue::VNUM,\n+                UniValue::VSTR,\n+                UniValue::VOBJ\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            UniValue options = request.params[3];\n+            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"add_to_wallet\"].get_bool();",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 218,
      "original_position": 157,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488698235,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Maybe this and comparable sections could be compressed with ternaries as well\r\n```\r\nconst bool rbf = options.exists(\"replaceable\") ? options[\"add_to_wallet\"].get_bool() : pwallet->m_signal_rbf;\r\n```\r\n\r\nEDIT: or see kalle's suggestion...",
      "created_at": "2020-09-15T14:12:55Z",
      "updated_at": "2020-09-15T16:03:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488701017",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488701017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3997,
      "original_line": 3997,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488711853",
      "pull_request_review_id": 488713127,
      "id": 488711853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcxMTg1Mw==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the send RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_fee_amount,\n+    assert_greater_than,\n+    assert_raises_rpc_error\n+)\n+\n+class WalletSendTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        # whitelist all peers to speed up tx relay / mempool sync\n+        self.extra_args = [\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+        ]\n+        getcontext().prec = 8 # Satoshi precision for Decimal\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n+                  arg_conf_target=None, arg_estimate_mode=None,\n+                  conf_target=None, estimate_mode=None, add_to_wallet=None,psbt=None,\n+                  inputs=None,add_inputs=None,change_address=None,change_position=None,change_type=None,\n+                  include_watching=None,locktime=None,lock_unspents=None,replaceable=None,subtract_fee_from_outputs=None,\n+                  expect_error=None):\n+        assert (amount is None) != (data is None)\n+\n+        from_balance_before = from_wallet.getbalance()\n+        if to_wallet is None:\n+            assert amount is None\n+        else:\n+            to_untrusted_pending_before = to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"]\n+\n+        if amount:\n+            dest = to_wallet.getnewaddress()\n+            outputs = {dest: amount}\n+        else:\n+            outputs = {\"data\": data}\n+\n+        # Construct options dictionary\n+        options = {}\n+        if add_to_wallet is not None:\n+            options[\"add_to_wallet\"] = add_to_wallet\n+        else:\n+            if psbt:\n+                add_to_wallet = False\n+            else:\n+                add_to_wallet = from_wallet.getwalletinfo()[\"private_keys_enabled\"] # Default value\n+        if psbt is not None:\n+            options[\"psbt\"] = psbt\n+        if conf_target is not None:\n+            options[\"conf_target\"] = conf_target\n+        if estimate_mode is not None:\n+            options[\"estimate_mode\"] = estimate_mode\n+        if inputs is not None:\n+            options[\"inputs\"] = inputs\n+        if add_inputs is not None:\n+            options[\"add_inputs\"] = add_inputs\n+        if change_address is not None:\n+            options[\"change_address\"] = change_address\n+        if change_position is not None:\n+            options[\"change_position\"] = change_position\n+        if change_type is not None:\n+            options[\"change_type\"] = change_type\n+        if include_watching is not None:\n+            options[\"include_watching\"] = include_watching\n+        if locktime is not None:\n+            options[\"locktime\"] = locktime\n+        if lock_unspents is not None:\n+            options[\"lock_unspents\"] = lock_unspents\n+        if replaceable is None:\n+            replaceable = True # default\n+        else:\n+            options[\"replaceable\"] = replaceable\n+        if subtract_fee_from_outputs is not None:\n+            options[\"subtract_fee_from_outputs\"] = subtract_fee_from_outputs\n+\n+        if len(options.keys()) == 0:\n+            options = None\n+\n+        if expect_error is None:\n+            res = from_wallet.send(outputs=outputs, conf_target=arg_conf_target, estimate_mode=arg_estimate_mode, options=options)\n+        else:\n+            try:\n+                assert_raises_rpc_error(expect_error[0],expect_error[1],from_wallet.send,\n+                                        outputs=outputs,conf_target=arg_conf_target,estimate_mode=arg_estimate_mode,options=options)\n+            except AssertionError:\n+                # Provide debug info if the test fails\n+                self.log.error(\"Unexpected successful result:\")\n+                self.log.error(options)\n+                res = from_wallet.send(outputs=outputs,conf_target=arg_conf_target,estimate_mode=arg_estimate_mode,options=options)\n+                self.log.error(res)\n+                if \"txid\" in res and add_to_wallet:\n+                    self.log.error(\"Transaction details:\")\n+                    try:\n+                        tx = from_wallet.gettransaction(res[\"txid\"])\n+                        self.log.error(tx)\n+                        self.log.error(\"testmempoolaccept (transaction may already be in mempool):\")\n+                        self.log.error(from_wallet.testmempoolaccept([tx[\"hex\"]]))\n+                    except JSONRPCException as exc:\n+                        self.log.error(exc)\n+\n+                raise\n+\n+            return\n+\n+        if locktime:\n+            return res\n+\n+        if from_wallet.getwalletinfo()[\"private_keys_enabled\"] and not include_watching:\n+            assert_equal(res[\"complete\"], True)\n+            assert \"txid\" in res\n+        else:\n+            assert_equal(res[\"complete\"], False)\n+            assert not \"txid\" in res\n+            assert \"psbt\" in res\n+\n+        if add_to_wallet and not include_watching:\n+            # Ensure transaction exists in the wallet:\n+            tx = from_wallet.gettransaction(res[\"txid\"])\n+            assert tx\n+            assert_equal(tx[\"bip125-replaceable\"], \"yes\" if replaceable else \"no\")\n+            # Ensure transaction exists in the mempool:\n+            tx = from_wallet.getrawtransaction(res[\"txid\"],True)\n+            assert tx\n+            if amount:\n+                if subtract_fee_from_outputs:\n+                    assert_equal(from_balance_before - from_wallet.getbalance(), amount)\n+                else:\n+                    assert_greater_than(from_balance_before - from_wallet.getbalance(), amount)\n+            else:\n+                assert next((out for out in tx[\"vout\"] if out[\"scriptPubKey\"][\"asm\"] == \"OP_RETURN 35\"), None)\n+        else:\n+            assert_equal(from_balance_before, from_wallet.getbalance())\n+\n+        if to_wallet:\n+            self.sync_mempools()\n+            if add_to_wallet:\n+                if not subtract_fee_from_outputs:\n+                    assert_equal(to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"], to_untrusted_pending_before + Decimal(amount if amount else 0))\n+            else:\n+                assert_equal(to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"], to_untrusted_pending_before)\n+\n+        return res\n+\n+    def run_test(self):\n+        self.log.info(\"Setup wallets...\")\n+        # w0 is a wallet with coinbase rewards\n+        w0 = self.nodes[0].get_wallet_rpc(\"\")\n+        # w1 is a regular wallet\n+        self.nodes[1].createwallet(wallet_name=\"w1\")\n+        w1 = self.nodes[1].get_wallet_rpc(\"w1\")\n+        # w2 contains the private keys for w3\n+        self.nodes[1].createwallet(wallet_name=\"w2\")\n+        w2 = self.nodes[1].get_wallet_rpc(\"w2\")\n+        # w3 is a watch-only wallet, based on w2\n+        self.nodes[1].createwallet(wallet_name=\"w3\",disable_private_keys=True)\n+        w3 = self.nodes[1].get_wallet_rpc(\"w3\")\n+        for _ in range(3):\n+            a2_receive = w2.getnewaddress()\n+            a2_change = w2.getrawchangeaddress() # doesn't actually use change derivation\n+            res = w3.importmulti([{\n+                \"desc\": w2.getaddressinfo(a2_receive)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": True,\n+                \"watchonly\": True\n+            },{\n+                \"desc\": w2.getaddressinfo(a2_change)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": True,\n+                \"internal\": True,\n+                \"watchonly\": True\n+            }])\n+            assert_equal(res, [{\"success\": True}, {\"success\": True}])\n+\n+        w0.sendtoaddress(a2_receive, 10) # fund w3\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+\n+        # w4 has private keys enabled, but only contains watch-only keys (from w2)\n+        self.nodes[1].createwallet(wallet_name=\"w4\",disable_private_keys=False)\n+        w4 = self.nodes[1].get_wallet_rpc(\"w4\")\n+        for _ in range(3):\n+            a2_receive = w2.getnewaddress()\n+            res = w4.importmulti([{\n+                \"desc\": w2.getaddressinfo(a2_receive)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": False,\n+                \"watchonly\": True\n+            }])\n+            assert_equal(res, [{\"success\": True}])\n+\n+        w0.sendtoaddress(a2_receive, 10) # fund w4\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+\n+        self.log.info(\"Send to address...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1)\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=True)\n+\n+        self.log.info(\"Don't broadcast...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False)\n+        assert(res[\"hex\"])\n+\n+        self.log.info(\"Return PSBT...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, psbt=True)\n+        assert(res[\"psbt\"])\n+\n+        self.log.info(\"Create transaction that spends to address, but don't broadcast...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False)\n+        # conf_target & estimate_mode can be set as argument or option\n+        res1 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\", add_to_wallet=False)\n+        res2 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=1, estimate_mode=\"economical\", add_to_wallet=False)\n+        assert_equal(self.nodes[1].decodepsbt(res1[\"psbt\"])[\"fee\"],\n+                     self.nodes[1].decodepsbt(res2[\"psbt\"])[\"fee\"])\n+        # but not at the same time\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\",\n+                       conf_target=1, estimate_mode=\"economical\", add_to_wallet=False, expect_error=(-8,\"Use either conf_target and estimate_mode or the options dictionary to control fee rate\"))\n+\n+        self.log.info(\"Create PSBT from watch-only wallet w3, sign with w2...\")\n+        res = self.test_send(from_wallet=w3, to_wallet=w1, amount=1)\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Create PSBT from wallet w4 with watch-only keys, sign with w2...\")\n+        self.test_send(from_wallet=w4, to_wallet=w1, amount=1, expect_error=(-4, \"Insufficient funds\"))\n+        res = self.test_send(from_wallet=w4, to_wallet=w1, amount=1, include_watching=True, add_to_wallet=False)\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Create OP_RETURN...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1)\n+        self.test_send(from_wallet=w0, data=\"Hello World\", expect_error=(-8, \"Data must be hexadecimal string (not 'Hello World')\"))\n+        self.test_send(from_wallet=w0, data=\"23\")\n+        res = self.test_send(from_wallet=w3, data=\"23\")\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Set fee rate...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=2, estimate_mode=\"sat/b\", add_to_wallet=False)\n+        fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n+        assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00002\"))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=-1, estimate_mode=\"sat/b\",\n+                       expect_error=(-3, \"Amount out of range\"))\n+        # Fee rate of 0.1 satoshi per byte should throw an error\n+        # TODO: error should say 1.000 sat/b\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\",\n+                       expect_error=(-4, \"Fee rate (0.00000100 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n+\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.000001, estimate_mode=\"BTC/KB\",\n+                       expect_error=(-4, \"Fee rate (0.00000100 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n+\n+        # TODO: Return hex if fee rate is below -maxmempool\n+        # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)\n+        # assert res[\"hex\"]\n+        # hex = res[\"hex\"]\n+        # res = self.nodes[0].testmempoolaccept([hex])\n+        # assert not res[0][\"allowed\"]\n+        # assert_equal(res[0][\"reject-reason\"], \"...\") # low fee\n+        # assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.000001\"))\n+\n+        self.log.info(\"If inputs are specified, do not automatically add more...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[], add_to_wallet=False)\n+        assert res[\"complete\"]\n+        utxo1 = w0.listunspent()[0]\n+        assert_equal(utxo1[\"amount\"], 50)\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[utxo1],\n+                       expect_error=(-4, \"Insufficient funds\"))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[utxo1], add_inputs=False,\n+                       expect_error=(-4, \"Insufficient funds\"))\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[utxo1], add_inputs=True, add_to_wallet=False)\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Manual change address and position...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, change_address=\"not an address\",\n+                       expect_error=(-5, \"Change address must be a valid bitcoin address\"))\n+        change_address = w0.getnewaddress()\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_address=change_address)\n+        assert res[\"complete\"]\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_address=change_address, change_position=0)\n+        assert res[\"complete\"]\n+        assert_equal(self.nodes[0].decodepsbt(res[\"psbt\"])[\"tx\"][\"vout\"][0][\"scriptPubKey\"][\"addresses\"], [change_address])\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_type=\"legacy\", change_position=0)\n+        assert res[\"complete\"]\n+        change_address = self.nodes[0].decodepsbt(res[\"psbt\"])[\"tx\"][\"vout\"][0][\"scriptPubKey\"][\"addresses\"][0]\n+        assert change_address[0] == \"m\" or change_address[0] == \"n\"\n+\n+        self.log.info(\"Set lock time...\")\n+        height = self.nodes[0].getblockchaininfo()[\"blocks\"]\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, locktime=height + 1)\n+        assert res[\"complete\"]\n+        assert res[\"txid\"]\n+        txid = res[\"txid\"]\n+        # Although the wallet finishes the transaction, it can't be added to the mempool yet:\n+        hex = self.nodes[0].gettransaction(res[\"txid\"])[\"hex\"]\n+        res = self.nodes[0].testmempoolaccept([hex])\n+        assert not res[0][\"allowed\"]\n+        assert_equal(res[0][\"reject-reason\"], \"non-final\")\n+        # It shouldn't be confirmed in the next block\n+        self.nodes[0].generate(1)\n+        assert_equal(self.nodes[0].gettransaction(txid)[\"confirmations\"], 0)\n+        # The mempool should allow it now:\n+        res = self.nodes[0].testmempoolaccept([hex])\n+        assert res[0][\"allowed\"]\n+        # Don't wait for wallet to add it to the mempool:\n+        res = self.nodes[0].sendrawtransaction(hex)\n+        self.nodes[0].generate(1)\n+        assert_equal(self.nodes[0].gettransaction(txid)[\"confirmations\"], 1)\n+\n+        self.log.info(\"Lock unspents...\")\n+        utxo1 = w0.listunspent()[0]\n+        assert_greater_than(utxo1[\"amount\"], 1)\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, inputs=[utxo1], add_to_wallet=False, lock_unspents=True)\n+        assert res[\"complete\"]\n+        locked_coins = w0.listlockunspent()\n+        assert_equal(len(locked_coins), 1)\n+        # Locked coins are automatically unlocked when manually selected\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, inputs=[utxo1],add_to_wallet=False)\n+\n+        self.log.info(\"Replaceable...\")",
      "path": "test/functional/wallet_send.py",
      "position": 330,
      "original_position": 330,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The assert if the replaceable option was actually set is only done if the tx is added to the wallet, so I think these tests can not fail.",
      "created_at": "2020-09-15T14:26:43Z",
      "updated_at": "2020-09-15T16:03:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488711853",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488711853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488714069",
      "pull_request_review_id": 488713127,
      "id": 488714069,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcxNDA2OQ==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the send RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_fee_amount,\n+    assert_greater_than,\n+    assert_raises_rpc_error\n+)\n+\n+class WalletSendTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        # whitelist all peers to speed up tx relay / mempool sync\n+        self.extra_args = [\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+        ]\n+        getcontext().prec = 8 # Satoshi precision for Decimal\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n+                  arg_conf_target=None, arg_estimate_mode=None,\n+                  conf_target=None, estimate_mode=None, add_to_wallet=None,psbt=None,\n+                  inputs=None,add_inputs=None,change_address=None,change_position=None,change_type=None,\n+                  include_watching=None,locktime=None,lock_unspents=None,replaceable=None,subtract_fee_from_outputs=None,\n+                  expect_error=None):\n+        assert (amount is None) != (data is None)\n+\n+        from_balance_before = from_wallet.getbalance()\n+        if to_wallet is None:\n+            assert amount is None\n+        else:\n+            to_untrusted_pending_before = to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"]\n+\n+        if amount:\n+            dest = to_wallet.getnewaddress()\n+            outputs = {dest: amount}\n+        else:\n+            outputs = {\"data\": data}\n+\n+        # Construct options dictionary\n+        options = {}\n+        if add_to_wallet is not None:\n+            options[\"add_to_wallet\"] = add_to_wallet\n+        else:\n+            if psbt:\n+                add_to_wallet = False\n+            else:\n+                add_to_wallet = from_wallet.getwalletinfo()[\"private_keys_enabled\"] # Default value\n+        if psbt is not None:\n+            options[\"psbt\"] = psbt\n+        if conf_target is not None:\n+            options[\"conf_target\"] = conf_target\n+        if estimate_mode is not None:\n+            options[\"estimate_mode\"] = estimate_mode\n+        if inputs is not None:\n+            options[\"inputs\"] = inputs\n+        if add_inputs is not None:\n+            options[\"add_inputs\"] = add_inputs\n+        if change_address is not None:\n+            options[\"change_address\"] = change_address\n+        if change_position is not None:\n+            options[\"change_position\"] = change_position\n+        if change_type is not None:\n+            options[\"change_type\"] = change_type\n+        if include_watching is not None:\n+            options[\"include_watching\"] = include_watching\n+        if locktime is not None:\n+            options[\"locktime\"] = locktime\n+        if lock_unspents is not None:\n+            options[\"lock_unspents\"] = lock_unspents\n+        if replaceable is None:\n+            replaceable = True # default\n+        else:\n+            options[\"replaceable\"] = replaceable\n+        if subtract_fee_from_outputs is not None:\n+            options[\"subtract_fee_from_outputs\"] = subtract_fee_from_outputs\n+\n+        if len(options.keys()) == 0:\n+            options = None\n+\n+        if expect_error is None:\n+            res = from_wallet.send(outputs=outputs, conf_target=arg_conf_target, estimate_mode=arg_estimate_mode, options=options)\n+        else:\n+            try:\n+                assert_raises_rpc_error(expect_error[0],expect_error[1],from_wallet.send,\n+                                        outputs=outputs,conf_target=arg_conf_target,estimate_mode=arg_estimate_mode,options=options)\n+            except AssertionError:\n+                # Provide debug info if the test fails\n+                self.log.error(\"Unexpected successful result:\")\n+                self.log.error(options)\n+                res = from_wallet.send(outputs=outputs,conf_target=arg_conf_target,estimate_mode=arg_estimate_mode,options=options)\n+                self.log.error(res)\n+                if \"txid\" in res and add_to_wallet:\n+                    self.log.error(\"Transaction details:\")\n+                    try:\n+                        tx = from_wallet.gettransaction(res[\"txid\"])\n+                        self.log.error(tx)\n+                        self.log.error(\"testmempoolaccept (transaction may already be in mempool):\")\n+                        self.log.error(from_wallet.testmempoolaccept([tx[\"hex\"]]))\n+                    except JSONRPCException as exc:\n+                        self.log.error(exc)\n+\n+                raise\n+\n+            return\n+\n+        if locktime:\n+            return res\n+\n+        if from_wallet.getwalletinfo()[\"private_keys_enabled\"] and not include_watching:\n+            assert_equal(res[\"complete\"], True)\n+            assert \"txid\" in res\n+        else:\n+            assert_equal(res[\"complete\"], False)\n+            assert not \"txid\" in res\n+            assert \"psbt\" in res\n+\n+        if add_to_wallet and not include_watching:\n+            # Ensure transaction exists in the wallet:\n+            tx = from_wallet.gettransaction(res[\"txid\"])\n+            assert tx\n+            assert_equal(tx[\"bip125-replaceable\"], \"yes\" if replaceable else \"no\")\n+            # Ensure transaction exists in the mempool:\n+            tx = from_wallet.getrawtransaction(res[\"txid\"],True)\n+            assert tx\n+            if amount:\n+                if subtract_fee_from_outputs:\n+                    assert_equal(from_balance_before - from_wallet.getbalance(), amount)\n+                else:\n+                    assert_greater_than(from_balance_before - from_wallet.getbalance(), amount)\n+            else:\n+                assert next((out for out in tx[\"vout\"] if out[\"scriptPubKey\"][\"asm\"] == \"OP_RETURN 35\"), None)\n+        else:\n+            assert_equal(from_balance_before, from_wallet.getbalance())\n+\n+        if to_wallet:\n+            self.sync_mempools()\n+            if add_to_wallet:\n+                if not subtract_fee_from_outputs:\n+                    assert_equal(to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"], to_untrusted_pending_before + Decimal(amount if amount else 0))\n+            else:\n+                assert_equal(to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"], to_untrusted_pending_before)\n+\n+        return res\n+\n+    def run_test(self):\n+        self.log.info(\"Setup wallets...\")\n+        # w0 is a wallet with coinbase rewards\n+        w0 = self.nodes[0].get_wallet_rpc(\"\")\n+        # w1 is a regular wallet\n+        self.nodes[1].createwallet(wallet_name=\"w1\")\n+        w1 = self.nodes[1].get_wallet_rpc(\"w1\")\n+        # w2 contains the private keys for w3\n+        self.nodes[1].createwallet(wallet_name=\"w2\")\n+        w2 = self.nodes[1].get_wallet_rpc(\"w2\")\n+        # w3 is a watch-only wallet, based on w2\n+        self.nodes[1].createwallet(wallet_name=\"w3\",disable_private_keys=True)\n+        w3 = self.nodes[1].get_wallet_rpc(\"w3\")\n+        for _ in range(3):\n+            a2_receive = w2.getnewaddress()\n+            a2_change = w2.getrawchangeaddress() # doesn't actually use change derivation\n+            res = w3.importmulti([{\n+                \"desc\": w2.getaddressinfo(a2_receive)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": True,\n+                \"watchonly\": True\n+            },{\n+                \"desc\": w2.getaddressinfo(a2_change)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": True,\n+                \"internal\": True,\n+                \"watchonly\": True\n+            }])\n+            assert_equal(res, [{\"success\": True}, {\"success\": True}])\n+\n+        w0.sendtoaddress(a2_receive, 10) # fund w3\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+\n+        # w4 has private keys enabled, but only contains watch-only keys (from w2)\n+        self.nodes[1].createwallet(wallet_name=\"w4\",disable_private_keys=False)\n+        w4 = self.nodes[1].get_wallet_rpc(\"w4\")\n+        for _ in range(3):\n+            a2_receive = w2.getnewaddress()\n+            res = w4.importmulti([{\n+                \"desc\": w2.getaddressinfo(a2_receive)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": False,\n+                \"watchonly\": True\n+            }])\n+            assert_equal(res, [{\"success\": True}])\n+\n+        w0.sendtoaddress(a2_receive, 10) # fund w4\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+\n+        self.log.info(\"Send to address...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1)\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=True)\n+\n+        self.log.info(\"Don't broadcast...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False)\n+        assert(res[\"hex\"])\n+\n+        self.log.info(\"Return PSBT...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, psbt=True)\n+        assert(res[\"psbt\"])\n+\n+        self.log.info(\"Create transaction that spends to address, but don't broadcast...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False)\n+        # conf_target & estimate_mode can be set as argument or option\n+        res1 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\", add_to_wallet=False)\n+        res2 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=1, estimate_mode=\"economical\", add_to_wallet=False)\n+        assert_equal(self.nodes[1].decodepsbt(res1[\"psbt\"])[\"fee\"],\n+                     self.nodes[1].decodepsbt(res2[\"psbt\"])[\"fee\"])\n+        # but not at the same time\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\",\n+                       conf_target=1, estimate_mode=\"economical\", add_to_wallet=False, expect_error=(-8,\"Use either conf_target and estimate_mode or the options dictionary to control fee rate\"))\n+\n+        self.log.info(\"Create PSBT from watch-only wallet w3, sign with w2...\")\n+        res = self.test_send(from_wallet=w3, to_wallet=w1, amount=1)\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Create PSBT from wallet w4 with watch-only keys, sign with w2...\")\n+        self.test_send(from_wallet=w4, to_wallet=w1, amount=1, expect_error=(-4, \"Insufficient funds\"))\n+        res = self.test_send(from_wallet=w4, to_wallet=w1, amount=1, include_watching=True, add_to_wallet=False)\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Create OP_RETURN...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1)\n+        self.test_send(from_wallet=w0, data=\"Hello World\", expect_error=(-8, \"Data must be hexadecimal string (not 'Hello World')\"))\n+        self.test_send(from_wallet=w0, data=\"23\")\n+        res = self.test_send(from_wallet=w3, data=\"23\")\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Set fee rate...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=2, estimate_mode=\"sat/b\", add_to_wallet=False)\n+        fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n+        assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00002\"))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=-1, estimate_mode=\"sat/b\",\n+                       expect_error=(-3, \"Amount out of range\"))\n+        # Fee rate of 0.1 satoshi per byte should throw an error\n+        # TODO: error should say 1.000 sat/b\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\",\n+                       expect_error=(-4, \"Fee rate (0.00000100 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n+\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.000001, estimate_mode=\"BTC/KB\",\n+                       expect_error=(-4, \"Fee rate (0.00000100 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n+\n+        # TODO: Return hex if fee rate is below -maxmempool\n+        # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)\n+        # assert res[\"hex\"]\n+        # hex = res[\"hex\"]\n+        # res = self.nodes[0].testmempoolaccept([hex])\n+        # assert not res[0][\"allowed\"]\n+        # assert_equal(res[0][\"reject-reason\"], \"...\") # low fee\n+        # assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.000001\"))\n+\n+        self.log.info(\"If inputs are specified, do not automatically add more...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[], add_to_wallet=False)\n+        assert res[\"complete\"]\n+        utxo1 = w0.listunspent()[0]\n+        assert_equal(utxo1[\"amount\"], 50)\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[utxo1],\n+                       expect_error=(-4, \"Insufficient funds\"))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[utxo1], add_inputs=False,\n+                       expect_error=(-4, \"Insufficient funds\"))\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[utxo1], add_inputs=True, add_to_wallet=False)\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Manual change address and position...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, change_address=\"not an address\",\n+                       expect_error=(-5, \"Change address must be a valid bitcoin address\"))\n+        change_address = w0.getnewaddress()\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_address=change_address)\n+        assert res[\"complete\"]\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_address=change_address, change_position=0)\n+        assert res[\"complete\"]\n+        assert_equal(self.nodes[0].decodepsbt(res[\"psbt\"])[\"tx\"][\"vout\"][0][\"scriptPubKey\"][\"addresses\"], [change_address])\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_type=\"legacy\", change_position=0)\n+        assert res[\"complete\"]\n+        change_address = self.nodes[0].decodepsbt(res[\"psbt\"])[\"tx\"][\"vout\"][0][\"scriptPubKey\"][\"addresses\"][0]\n+        assert change_address[0] == \"m\" or change_address[0] == \"n\"\n+\n+        self.log.info(\"Set lock time...\")\n+        height = self.nodes[0].getblockchaininfo()[\"blocks\"]\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, locktime=height + 1)\n+        assert res[\"complete\"]\n+        assert res[\"txid\"]\n+        txid = res[\"txid\"]\n+        # Although the wallet finishes the transaction, it can't be added to the mempool yet:\n+        hex = self.nodes[0].gettransaction(res[\"txid\"])[\"hex\"]\n+        res = self.nodes[0].testmempoolaccept([hex])\n+        assert not res[0][\"allowed\"]\n+        assert_equal(res[0][\"reject-reason\"], \"non-final\")\n+        # It shouldn't be confirmed in the next block\n+        self.nodes[0].generate(1)\n+        assert_equal(self.nodes[0].gettransaction(txid)[\"confirmations\"], 0)\n+        # The mempool should allow it now:\n+        res = self.nodes[0].testmempoolaccept([hex])\n+        assert res[0][\"allowed\"]\n+        # Don't wait for wallet to add it to the mempool:\n+        res = self.nodes[0].sendrawtransaction(hex)\n+        self.nodes[0].generate(1)\n+        assert_equal(self.nodes[0].gettransaction(txid)[\"confirmations\"], 1)\n+\n+        self.log.info(\"Lock unspents...\")\n+        utxo1 = w0.listunspent()[0]\n+        assert_greater_than(utxo1[\"amount\"], 1)\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, inputs=[utxo1], add_to_wallet=False, lock_unspents=True)\n+        assert res[\"complete\"]\n+        locked_coins = w0.listlockunspent()\n+        assert_equal(len(locked_coins), 1)\n+        # Locked coins are automatically unlocked when manually selected\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, inputs=[utxo1],add_to_wallet=False)",
      "path": "test/functional/wallet_send.py",
      "position": 328,
      "original_position": 328,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "micro-nit: spacing before `add_to_wallet`",
      "created_at": "2020-09-15T14:29:23Z",
      "updated_at": "2020-09-15T16:03:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r488714069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488714069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 328,
      "original_line": 328,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490222969",
      "pull_request_review_id": 490564605,
      "id": 490222969,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyMjk2OQ==",
      "diff_hunk": "@@ -3857,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 167,
      "original_position": 167,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 486325092,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, adding fix to followup PR.",
      "created_at": "2020-09-17T12:58:53Z",
      "updated_at": "2020-09-17T12:58:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490222969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490222969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3946,
      "original_line": 3946,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490223692",
      "pull_request_review_id": 490565551,
      "id": 490223692,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyMzY5Mg==",
      "diff_hunk": "@@ -2955,16 +2956,20 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n         RPCTypeCheckObj(options,\n             {\n                 {\"add_inputs\", UniValueType(UniValue::VBOOL)},\n+                {\"add_to_wallet\", UniValueType(UniValue::VBOOL)},\n                 {\"changeAddress\", UniValueType(UniValue::VSTR)},\n                 {\"change_address\", UniValueType(UniValue::VSTR)},\n                 {\"changePosition\", UniValueType(UniValue::VNUM)},\n                 {\"change_position\", UniValueType(UniValue::VNUM)},\n                 {\"change_type\", UniValueType(UniValue::VSTR)},\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"include_watching\", UniValueType(UniValue::VBOOL)},\n+                {\"inputs\", UniValueType(UniValue::VARR)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n                 {\"lock_unspents\", UniValueType(UniValue::VBOOL)},\n-                {\"feeRate\", UniValueType()}, // will be checked below\n+                {\"locktime\", UniValueType(UniValue::VNUM)},\n+                {\"feeRate\", UniValueType()}, // will be checked below,",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488315345,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixing nits in followup.",
      "created_at": "2020-09-17T12:59:58Z",
      "updated_at": "2020-09-17T12:59:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490223692",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490223692"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2971,
      "original_line": 2971,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490232799",
      "pull_request_review_id": 490577514,
      "id": 490232799,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzMjc5OQ==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the send RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_fee_amount,\n+    assert_greater_than,\n+    assert_raises_rpc_error\n+)\n+\n+class WalletSendTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        # whitelist all peers to speed up tx relay / mempool sync\n+        self.extra_args = [\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+        ]\n+        getcontext().prec = 8 # Satoshi precision for Decimal\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n+                  arg_conf_target=None, arg_estimate_mode=None,\n+                  conf_target=None, estimate_mode=None, add_to_wallet=None,psbt=None,\n+                  inputs=None,add_inputs=None,change_address=None,change_position=None,change_type=None,",
      "path": "test/functional/wallet_send.py",
      "position": 33,
      "original_position": 33,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488322773,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`,[a-zA-Z0-9]+` found a bunch more",
      "created_at": "2020-09-17T13:13:28Z",
      "updated_at": "2020-09-17T13:13:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490232799",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490232799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490233578",
      "pull_request_review_id": 490578529,
      "id": 490233578,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzMzU3OA==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 122,
      "original_position": 61,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488323964,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe, but this also works when `walletbroadcast` is off",
      "created_at": "2020-09-17T13:14:34Z",
      "updated_at": "2020-09-17T13:14:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490233578",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490233578"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3901,
      "original_line": 3901,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490235723",
      "pull_request_review_id": 490581378,
      "id": 490235723,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzNTcyMw==",
      "diff_hunk": "@@ -21,10 +21,15 @@\n \n CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, bool rbf)\n {\n-    if (inputs_in.isNull() || outputs_in.isNull())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n+    if (outputs_in.isNull())",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
      "in_reply_to_id": 488342027,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will change in the followup in a separate commit, in case people think it's too late to touch.",
      "created_at": "2020-09-17T13:17:37Z",
      "updated_at": "2020-09-17T13:17:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490235723",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490235723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490237857",
      "pull_request_review_id": 490585490,
      "id": 490237857,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzNzg1Nw==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 127,
      "original_position": 66,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488348105,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For convenience; setting the fee rate is so common I'd rather not have to use the options field.",
      "created_at": "2020-09-17T13:20:24Z",
      "updated_at": "2020-09-17T13:20:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490237857",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490237857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3906,
      "original_line": 3906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490238141",
      "pull_request_review_id": 490586055,
      "id": 490238141,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzODE0MQ==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // ARR or OBJ, checked later\n+                UniValue::VNUM,\n+                UniValue::VSTR,\n+                UniValue::VOBJ\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            UniValue options = request.params[3];\n+            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"add_to_wallet\"].get_bool();\n+            }\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+            CCoinControl coin_control;\n+            // Automatically select coins, unless at least one is manually selected. Can\n+            // be overriden by options.add_inputs.\n+            coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+            FundTransaction(pwallet, rawTx, fee, change_position, options, coin_control);\n+\n+            bool add_to_wallet = true;\n+            if (options.exists(\"add_to_wallet\")) {\n+                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            }",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 230,
      "original_position": 169,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488349241,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll leave this to your #19957 ",
      "created_at": "2020-09-17T13:20:48Z",
      "updated_at": "2020-09-17T13:20:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490238141",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490238141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4009,
      "original_line": 4009,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490238402",
      "pull_request_review_id": 490586618,
      "id": 490238402,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzODQwMg==",
      "diff_hunk": "@@ -2972,22 +2977,24 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             coinControl.m_add_inputs = options[\"add_inputs\"].get_bool();\n         }\n \n-        if (options.exists(\"changeAddress\")) {\n-            CTxDestination dest = DecodeDestination(options[\"changeAddress\"].get_str());\n+        if (options.exists(\"changeAddress\") || options.exists(\"change_address\")) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 38,
      "original_position": 24,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
      "in_reply_to_id": 488690111,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe that's covered in #19957",
      "created_at": "2020-09-17T13:21:08Z",
      "updated_at": "2020-09-17T13:21:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490238402",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490238402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2985,
      "original_line": 2980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490239407",
      "pull_request_review_id": 490588534,
      "id": 490239407,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzOTQwNw==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 100,
      "original_position": 39,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488692783,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll address nits in the followup PR",
      "created_at": "2020-09-17T13:22:29Z",
      "updated_at": "2020-09-17T13:22:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490239407",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490239407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3879,
      "original_line": 3879,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490240636",
      "pull_request_review_id": 490589909,
      "id": 490240636,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0MDYzNg==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // ARR or OBJ, checked later\n+                UniValue::VNUM,\n+                UniValue::VSTR,\n+                UniValue::VOBJ\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            UniValue options = request.params[3];\n+            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"add_to_wallet\"].get_bool();",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 218,
      "original_position": 157,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488698235,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hopefully addressed in #19957?",
      "created_at": "2020-09-17T13:23:50Z",
      "updated_at": "2020-09-17T13:23:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490240636",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490240636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3997,
      "original_line": 3997,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490244843",
      "pull_request_review_id": 490594309,
      "id": 490244843,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0NDg0Mw==",
      "diff_hunk": "@@ -0,0 +1,339 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the send RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_fee_amount,\n+    assert_greater_than,\n+    assert_raises_rpc_error\n+)\n+\n+class WalletSendTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        # whitelist all peers to speed up tx relay / mempool sync\n+        self.extra_args = [\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+        ]\n+        getcontext().prec = 8 # Satoshi precision for Decimal\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n+                  arg_conf_target=None, arg_estimate_mode=None,\n+                  conf_target=None, estimate_mode=None, add_to_wallet=None,psbt=None,\n+                  inputs=None,add_inputs=None,change_address=None,change_position=None,change_type=None,\n+                  include_watching=None,locktime=None,lock_unspents=None,replaceable=None,subtract_fee_from_outputs=None,\n+                  expect_error=None):\n+        assert (amount is None) != (data is None)\n+\n+        from_balance_before = from_wallet.getbalance()\n+        if to_wallet is None:\n+            assert amount is None\n+        else:\n+            to_untrusted_pending_before = to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"]\n+\n+        if amount:\n+            dest = to_wallet.getnewaddress()\n+            outputs = {dest: amount}\n+        else:\n+            outputs = {\"data\": data}\n+\n+        # Construct options dictionary\n+        options = {}\n+        if add_to_wallet is not None:\n+            options[\"add_to_wallet\"] = add_to_wallet\n+        else:\n+            if psbt:\n+                add_to_wallet = False\n+            else:\n+                add_to_wallet = from_wallet.getwalletinfo()[\"private_keys_enabled\"] # Default value\n+        if psbt is not None:\n+            options[\"psbt\"] = psbt\n+        if conf_target is not None:\n+            options[\"conf_target\"] = conf_target\n+        if estimate_mode is not None:\n+            options[\"estimate_mode\"] = estimate_mode\n+        if inputs is not None:\n+            options[\"inputs\"] = inputs\n+        if add_inputs is not None:\n+            options[\"add_inputs\"] = add_inputs\n+        if change_address is not None:\n+            options[\"change_address\"] = change_address\n+        if change_position is not None:\n+            options[\"change_position\"] = change_position\n+        if change_type is not None:\n+            options[\"change_type\"] = change_type\n+        if include_watching is not None:\n+            options[\"include_watching\"] = include_watching\n+        if locktime is not None:\n+            options[\"locktime\"] = locktime\n+        if lock_unspents is not None:\n+            options[\"lock_unspents\"] = lock_unspents\n+        if replaceable is None:\n+            replaceable = True # default\n+        else:\n+            options[\"replaceable\"] = replaceable\n+        if subtract_fee_from_outputs is not None:\n+            options[\"subtract_fee_from_outputs\"] = subtract_fee_from_outputs\n+\n+        if len(options.keys()) == 0:\n+            options = None\n+\n+        if expect_error is None:\n+            res = from_wallet.send(outputs=outputs, conf_target=arg_conf_target, estimate_mode=arg_estimate_mode, options=options)\n+        else:\n+            try:\n+                assert_raises_rpc_error(expect_error[0],expect_error[1],from_wallet.send,\n+                                        outputs=outputs,conf_target=arg_conf_target,estimate_mode=arg_estimate_mode,options=options)\n+            except AssertionError:\n+                # Provide debug info if the test fails\n+                self.log.error(\"Unexpected successful result:\")\n+                self.log.error(options)\n+                res = from_wallet.send(outputs=outputs,conf_target=arg_conf_target,estimate_mode=arg_estimate_mode,options=options)\n+                self.log.error(res)\n+                if \"txid\" in res and add_to_wallet:\n+                    self.log.error(\"Transaction details:\")\n+                    try:\n+                        tx = from_wallet.gettransaction(res[\"txid\"])\n+                        self.log.error(tx)\n+                        self.log.error(\"testmempoolaccept (transaction may already be in mempool):\")\n+                        self.log.error(from_wallet.testmempoolaccept([tx[\"hex\"]]))\n+                    except JSONRPCException as exc:\n+                        self.log.error(exc)\n+\n+                raise\n+\n+            return\n+\n+        if locktime:\n+            return res\n+\n+        if from_wallet.getwalletinfo()[\"private_keys_enabled\"] and not include_watching:\n+            assert_equal(res[\"complete\"], True)\n+            assert \"txid\" in res\n+        else:\n+            assert_equal(res[\"complete\"], False)\n+            assert not \"txid\" in res\n+            assert \"psbt\" in res\n+\n+        if add_to_wallet and not include_watching:\n+            # Ensure transaction exists in the wallet:\n+            tx = from_wallet.gettransaction(res[\"txid\"])\n+            assert tx\n+            assert_equal(tx[\"bip125-replaceable\"], \"yes\" if replaceable else \"no\")\n+            # Ensure transaction exists in the mempool:\n+            tx = from_wallet.getrawtransaction(res[\"txid\"],True)\n+            assert tx\n+            if amount:\n+                if subtract_fee_from_outputs:\n+                    assert_equal(from_balance_before - from_wallet.getbalance(), amount)\n+                else:\n+                    assert_greater_than(from_balance_before - from_wallet.getbalance(), amount)\n+            else:\n+                assert next((out for out in tx[\"vout\"] if out[\"scriptPubKey\"][\"asm\"] == \"OP_RETURN 35\"), None)\n+        else:\n+            assert_equal(from_balance_before, from_wallet.getbalance())\n+\n+        if to_wallet:\n+            self.sync_mempools()\n+            if add_to_wallet:\n+                if not subtract_fee_from_outputs:\n+                    assert_equal(to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"], to_untrusted_pending_before + Decimal(amount if amount else 0))\n+            else:\n+                assert_equal(to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"], to_untrusted_pending_before)\n+\n+        return res\n+\n+    def run_test(self):\n+        self.log.info(\"Setup wallets...\")\n+        # w0 is a wallet with coinbase rewards\n+        w0 = self.nodes[0].get_wallet_rpc(\"\")\n+        # w1 is a regular wallet\n+        self.nodes[1].createwallet(wallet_name=\"w1\")\n+        w1 = self.nodes[1].get_wallet_rpc(\"w1\")\n+        # w2 contains the private keys for w3\n+        self.nodes[1].createwallet(wallet_name=\"w2\")\n+        w2 = self.nodes[1].get_wallet_rpc(\"w2\")\n+        # w3 is a watch-only wallet, based on w2\n+        self.nodes[1].createwallet(wallet_name=\"w3\",disable_private_keys=True)\n+        w3 = self.nodes[1].get_wallet_rpc(\"w3\")\n+        for _ in range(3):\n+            a2_receive = w2.getnewaddress()\n+            a2_change = w2.getrawchangeaddress() # doesn't actually use change derivation\n+            res = w3.importmulti([{\n+                \"desc\": w2.getaddressinfo(a2_receive)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": True,\n+                \"watchonly\": True\n+            },{\n+                \"desc\": w2.getaddressinfo(a2_change)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": True,\n+                \"internal\": True,\n+                \"watchonly\": True\n+            }])\n+            assert_equal(res, [{\"success\": True}, {\"success\": True}])\n+\n+        w0.sendtoaddress(a2_receive, 10) # fund w3\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+\n+        # w4 has private keys enabled, but only contains watch-only keys (from w2)\n+        self.nodes[1].createwallet(wallet_name=\"w4\",disable_private_keys=False)\n+        w4 = self.nodes[1].get_wallet_rpc(\"w4\")\n+        for _ in range(3):\n+            a2_receive = w2.getnewaddress()\n+            res = w4.importmulti([{\n+                \"desc\": w2.getaddressinfo(a2_receive)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": False,\n+                \"watchonly\": True\n+            }])\n+            assert_equal(res, [{\"success\": True}])\n+\n+        w0.sendtoaddress(a2_receive, 10) # fund w4\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+\n+        self.log.info(\"Send to address...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1)\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=True)\n+\n+        self.log.info(\"Don't broadcast...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False)\n+        assert(res[\"hex\"])\n+\n+        self.log.info(\"Return PSBT...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, psbt=True)\n+        assert(res[\"psbt\"])\n+\n+        self.log.info(\"Create transaction that spends to address, but don't broadcast...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False)\n+        # conf_target & estimate_mode can be set as argument or option\n+        res1 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\", add_to_wallet=False)\n+        res2 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=1, estimate_mode=\"economical\", add_to_wallet=False)\n+        assert_equal(self.nodes[1].decodepsbt(res1[\"psbt\"])[\"fee\"],\n+                     self.nodes[1].decodepsbt(res2[\"psbt\"])[\"fee\"])\n+        # but not at the same time\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\",\n+                       conf_target=1, estimate_mode=\"economical\", add_to_wallet=False, expect_error=(-8,\"Use either conf_target and estimate_mode or the options dictionary to control fee rate\"))\n+\n+        self.log.info(\"Create PSBT from watch-only wallet w3, sign with w2...\")\n+        res = self.test_send(from_wallet=w3, to_wallet=w1, amount=1)\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Create PSBT from wallet w4 with watch-only keys, sign with w2...\")\n+        self.test_send(from_wallet=w4, to_wallet=w1, amount=1, expect_error=(-4, \"Insufficient funds\"))\n+        res = self.test_send(from_wallet=w4, to_wallet=w1, amount=1, include_watching=True, add_to_wallet=False)\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Create OP_RETURN...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1)\n+        self.test_send(from_wallet=w0, data=\"Hello World\", expect_error=(-8, \"Data must be hexadecimal string (not 'Hello World')\"))\n+        self.test_send(from_wallet=w0, data=\"23\")\n+        res = self.test_send(from_wallet=w3, data=\"23\")\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Set fee rate...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=2, estimate_mode=\"sat/b\", add_to_wallet=False)\n+        fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n+        assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00002\"))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=-1, estimate_mode=\"sat/b\",\n+                       expect_error=(-3, \"Amount out of range\"))\n+        # Fee rate of 0.1 satoshi per byte should throw an error\n+        # TODO: error should say 1.000 sat/b\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\",\n+                       expect_error=(-4, \"Fee rate (0.00000100 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n+\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.000001, estimate_mode=\"BTC/KB\",\n+                       expect_error=(-4, \"Fee rate (0.00000100 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n+\n+        # TODO: Return hex if fee rate is below -maxmempool\n+        # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)\n+        # assert res[\"hex\"]\n+        # hex = res[\"hex\"]\n+        # res = self.nodes[0].testmempoolaccept([hex])\n+        # assert not res[0][\"allowed\"]\n+        # assert_equal(res[0][\"reject-reason\"], \"...\") # low fee\n+        # assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.000001\"))\n+\n+        self.log.info(\"If inputs are specified, do not automatically add more...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[], add_to_wallet=False)\n+        assert res[\"complete\"]\n+        utxo1 = w0.listunspent()[0]\n+        assert_equal(utxo1[\"amount\"], 50)\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[utxo1],\n+                       expect_error=(-4, \"Insufficient funds\"))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[utxo1], add_inputs=False,\n+                       expect_error=(-4, \"Insufficient funds\"))\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[utxo1], add_inputs=True, add_to_wallet=False)\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Manual change address and position...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, change_address=\"not an address\",\n+                       expect_error=(-5, \"Change address must be a valid bitcoin address\"))\n+        change_address = w0.getnewaddress()\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_address=change_address)\n+        assert res[\"complete\"]\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_address=change_address, change_position=0)\n+        assert res[\"complete\"]\n+        assert_equal(self.nodes[0].decodepsbt(res[\"psbt\"])[\"tx\"][\"vout\"][0][\"scriptPubKey\"][\"addresses\"], [change_address])\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_type=\"legacy\", change_position=0)\n+        assert res[\"complete\"]\n+        change_address = self.nodes[0].decodepsbt(res[\"psbt\"])[\"tx\"][\"vout\"][0][\"scriptPubKey\"][\"addresses\"][0]\n+        assert change_address[0] == \"m\" or change_address[0] == \"n\"\n+\n+        self.log.info(\"Set lock time...\")\n+        height = self.nodes[0].getblockchaininfo()[\"blocks\"]\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, locktime=height + 1)\n+        assert res[\"complete\"]\n+        assert res[\"txid\"]\n+        txid = res[\"txid\"]\n+        # Although the wallet finishes the transaction, it can't be added to the mempool yet:\n+        hex = self.nodes[0].gettransaction(res[\"txid\"])[\"hex\"]\n+        res = self.nodes[0].testmempoolaccept([hex])\n+        assert not res[0][\"allowed\"]\n+        assert_equal(res[0][\"reject-reason\"], \"non-final\")\n+        # It shouldn't be confirmed in the next block\n+        self.nodes[0].generate(1)\n+        assert_equal(self.nodes[0].gettransaction(txid)[\"confirmations\"], 0)\n+        # The mempool should allow it now:\n+        res = self.nodes[0].testmempoolaccept([hex])\n+        assert res[0][\"allowed\"]\n+        # Don't wait for wallet to add it to the mempool:\n+        res = self.nodes[0].sendrawtransaction(hex)\n+        self.nodes[0].generate(1)\n+        assert_equal(self.nodes[0].gettransaction(txid)[\"confirmations\"], 1)\n+\n+        self.log.info(\"Lock unspents...\")\n+        utxo1 = w0.listunspent()[0]\n+        assert_greater_than(utxo1[\"amount\"], 1)\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, inputs=[utxo1], add_to_wallet=False, lock_unspents=True)\n+        assert res[\"complete\"]\n+        locked_coins = w0.listlockunspent()\n+        assert_equal(len(locked_coins), 1)\n+        # Locked coins are automatically unlocked when manually selected\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, inputs=[utxo1],add_to_wallet=False)\n+\n+        self.log.info(\"Replaceable...\")",
      "path": "test/functional/wallet_send.py",
      "position": 330,
      "original_position": 330,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488711853,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added the check here in two other places just in case, though `test_send` should probably be refactored to check this unless it's explicitly expected to fail.",
      "created_at": "2020-09-17T13:28:27Z",
      "updated_at": "2020-09-17T13:28:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490244843",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490244843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490400099",
      "pull_request_review_id": 490785684,
      "id": 490400099,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwMDA5OQ==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // ARR or OBJ, checked later\n+                UniValue::VNUM,\n+                UniValue::VSTR,\n+                UniValue::VOBJ\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            UniValue options = request.params[3];\n+            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"add_to_wallet\"].get_bool();",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 218,
      "original_position": 157,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488698235,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not that I see... I am not sure if I am missing something or if you missed the point of my initial (non-nit) comment :) But now I seem to be able to make code suggestions again (didn't work before for some reason), this is what I meant with \"this seems like a bug\":\r\n\r\n```suggestion\r\n                rbf = options[\"replaceable\"].get_bool();\r\n```",
      "created_at": "2020-09-17T16:32:03Z",
      "updated_at": "2020-09-17T16:36:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490400099",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490400099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3997,
      "original_line": 3997,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490477215",
      "pull_request_review_id": 490885423,
      "id": 490477215,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3NzIxNQ==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // ARR or OBJ, checked later\n+                UniValue::VNUM,\n+                UniValue::VSTR,\n+                UniValue::VOBJ\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            UniValue options = request.params[3];\n+            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"add_to_wallet\"].get_bool();",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 218,
      "original_position": 157,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488698235,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think I got distracted by your second comment. Will fix in #19969 ",
      "created_at": "2020-09-17T18:42:48Z",
      "updated_at": "2020-09-17T18:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490477215",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490477215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3997,
      "original_line": 3997,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490500686",
      "pull_request_review_id": 490918410,
      "id": 490500686,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUwMDY4Ng==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 111,
      "original_position": 50,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488347536,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the type is correct, see also `walletcreatefundedpsbt`, but it's confusing (in the code) that the wrapping object is described next to the `data` field. cc @achow101 / @MarcoFalke thoughts?",
      "created_at": "2020-09-17T19:23:58Z",
      "updated_at": "2020-09-17T19:23:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490500686",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490500686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3890,
      "original_line": 3890,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490511521",
      "pull_request_review_id": 490925595,
      "id": 490511521,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxMTUyMQ==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 111,
      "original_position": 50,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488347536,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The type is correct because it is describing the type of the value in this key-value pair. The weirdness is that this output specification is the almost the only place where the key is not fixed but user defined.",
      "created_at": "2020-09-17T19:34:06Z",
      "updated_at": "2020-09-17T19:34:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490511521",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490511521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3890,
      "original_line": 3890,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490628950",
      "pull_request_review_id": 491068640,
      "id": 490628950,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyODk1MA==",
      "diff_hunk": "@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // ARR or OBJ, checked later\n+                UniValue::VNUM,\n+                UniValue::VSTR,\n+                UniValue::VOBJ\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            UniValue options = request.params[3];\n+            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"add_to_wallet\"].get_bool();\n+            }\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+            CCoinControl coin_control;\n+            // Automatically select coins, unless at least one is manually selected. Can\n+            // be overriden by options.add_inputs.\n+            coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+            FundTransaction(pwallet, rawTx, fee, change_position, options, coin_control);\n+\n+            bool add_to_wallet = true;\n+            if (options.exists(\"add_to_wallet\")) {\n+                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            }",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 230,
      "original_position": 169,
      "commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "original_commit_id": "92326d89766155a792254d30a9962251b8fc7799",
      "in_reply_to_id": 488349241,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Feels out of scope for #19957, and not a big deal anyway so leaving it be.",
      "created_at": "2020-09-18T00:12:43Z",
      "updated_at": "2020-09-18T00:12:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r490628950",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/490628950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4009,
      "original_line": 4009,
      "side": "RIGHT"
    }
  ]
}