{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524",
    "id": 398631154,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzk4NjMxMTU0",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18524",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/18524.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/18524.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/d6815a2313158862d448733954a73520f223deb6",
    "number": 18524,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "refactor: drop boost::signals2 in validationinterface",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Stop using boost::signals2 internally in validationinterface. Replace with std::list and Add/Remove/Clear/Iterate helper functions.\r\n\r\nMotivation for change is to reduce dependencies and avoid issues happening with boost versions before 1.59: https://github.com/bitcoin/bitcoin/issues/18517, https://github.com/bitcoin/bitcoin/pull/18471",
    "labels": [
      {
        "id": 64585,
        "node_id": "MDU6TGFiZWw2NDU4NQ==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug",
        "name": "Bug",
        "color": "FBBAAB",
        "default": false
      },
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      },
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/42",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/42",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/42/labels",
      "id": 4116761,
      "node_id": "MDk6TWlsZXN0b25lNDExNjc2MQ==",
      "number": 42,
      "state": "closed",
      "title": "0.20.0",
      "description": "",
      "creator": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 91,
      "created_at": "2019-03-06T20:02:40Z",
      "updated_at": "2020-06-02T07:55:47Z",
      "closed_at": "2020-06-02T07:55:47Z"
    },
    "active_lock_reason": "resolved",
    "created_at": "2020-04-04T16:03:18Z",
    "updated_at": "2022-02-15T10:42:27Z",
    "closed_at": "2020-04-06T14:46:30Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-04-06T14:46:29Z",
    "merge_commit_sha": "fdeb445a34a97357c87416d80350f9b0b4f222ca",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "ryanofsky:pr/nosig",
      "ref": "pr/nosig",
      "sha": "d6815a2313158862d448733954a73520f223deb6",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 69901633,
        "node_id": "MDEwOlJlcG9zaXRvcnk2OTkwMTYzMw==",
        "name": "bitcoin",
        "full_name": "ryanofsky/bitcoin",
        "owner": {
          "login": "ryanofsky",
          "id": 7133040,
          "node_id": "MDQ6VXNlcjcxMzMwNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ryanofsky",
          "html_url": "https://github.com/ryanofsky",
          "followers_url": "https://api.github.com/users/ryanofsky/followers",
          "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
          "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
          "repos_url": "https://api.github.com/users/ryanofsky/repos",
          "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ryanofsky/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ryanofsky/bitcoin",
        "archive_url": "https://api.github.com/repos/ryanofsky/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ryanofsky/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ryanofsky/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ryanofsky/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ryanofsky/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ryanofsky/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ryanofsky/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ryanofsky/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ryanofsky/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ryanofsky/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ryanofsky/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ryanofsky/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ryanofsky/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ryanofsky/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ryanofsky/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ryanofsky/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ryanofsky/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ryanofsky/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ryanofsky/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ryanofsky/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ryanofsky/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ryanofsky/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ryanofsky/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ryanofsky/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ryanofsky/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ryanofsky/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ryanofsky/bitcoin/hooks",
        "svn_url": "https://github.com/ryanofsky/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 6,
        "stargazers_count": 8,
        "watchers_count": 8,
        "size": 229522,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T09:40:24Z",
        "created_at": "2016-10-03T19:05:43Z",
        "updated_at": "2023-05-05T12:10:19Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "adac12ae73e896e405e75b02a0a49c575d115b6e",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 74,
    "deletions": 45,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 37,
    "comments": 15
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjgxNWEyMzEzMTU4ODYyZDQ0ODczMzk1NGE3MzUyMGYyMjNkZWI2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6815a2313158862d448733954a73520f223deb6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d6815a2313158862d448733954a73520f223deb6",
      "tree": {
        "sha": "f3e77851ecc37d8823109f6fdaefc207e516dcc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3e77851ecc37d8823109f6fdaefc207e516dcc9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8971547d9c9460fcbec6f54888df83f002c3dfd",
          "sha": "c8971547d9c9460fcbec6f54888df83f002c3dfd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c8971547d9c9460fcbec6f54888df83f002c3dfd"
        }
      ],
      "message": "refactor: drop boost::signals2 in validationinterface\n\nStop using boost::signals2 internally in validationinterface. Replace with\nstd::list and Add/Remove/Clear/Iterate helper functions.\n\nMotivation for change is to reduce dependencies and avoid issues happening with\nboost versions before 1.59:\n\nhttps://github.com/bitcoin/bitcoin/issues/18517\nhttps://github.com/bitcoin/bitcoin/pull/18471",
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-04-04T15:44:39Z"
      },
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-04-04T15:44:39Z"
      },
      "sha": "d6815a2313158862d448733954a73520f223deb6"
    },
    {
      "event": "commented",
      "id": 609054980,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTA1NDk4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609054980",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-04T16:37:44Z",
      "updated_at": "2020-04-04T16:37:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK: less boost is better",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609054980",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "commented",
      "id": 609055282,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTA1NTI4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609055282",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-04T16:39:07Z",
      "updated_at": "2020-04-04T16:39:07Z",
      "author_association": "MEMBER",
      "body": "Concept ACK: it solved [the issue](https://github.com/bitcoin/bitcoin/issues/18517) I had.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609055282",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "commented",
      "id": 609055471,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTA1NTQ3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609055471",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-04T16:40:04Z",
      "updated_at": "2020-04-04T16:40:04Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609055471",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3200265378,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzIwMDI2NTM3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3200265378",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-04T16:53:38Z"
    },
    {
      "event": "commented",
      "id": 609057547,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTA1NzU0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609057547",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-04T16:55:00Z",
      "updated_at": "2020-04-04T17:04:38Z",
      "author_association": "MEMBER",
      "body": "Updated ba8312c7dca427463c83acd490281bc35dde34b7 -> ad067a98ea1ca383898bf26d4abd00981246471f ([`pr/nosig.1`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.1) -> [`pr/nosig.2`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/nosig.1..pr/nosig.2)) avoiding unneeded shared_ptr copies and cleaning up typedefs\r\nUpdated ad067a98ea1ca383898bf26d4abd00981246471f -> 01639a21d12df54895d0214542b84335d7f58a94 ([`pr/nosig.2`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.2) -> [`pr/nosig.3`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/nosig.2..pr/nosig.3)) removing last typedef",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609057547",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "labeled",
      "id": 3200273113,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMyMDAyNzMxMTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3200273113",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-04T17:02:22Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "labeled",
      "id": 3200273114,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMyMDAyNzMxMTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3200273114",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-04T17:02:22Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3200274727,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzIwMDI3NDcyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3200274727",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-04T17:04:00Z"
    },
    {
      "event": "reviewed",
      "id": 387717466,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzE3NDY2",
      "url": null,
      "actor": null,
      "commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested that this fixes the issue. I also prefer dropping boost signals2.\r\n\r\nI was going a different way. From https://stackoverflow.com/a/2265979\r\n\r\n>  I suggest you go the other way around and connect a dummy slot, then disconnect it when your \"real\" slot is invoked. Connecting another slot will clean up stale connections, so your slot should be released.\r\n",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387717466",
      "submitted_at": "2020-04-04T17:20:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "milestoned",
      "id": 3200309965,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDMyMDAzMDk5NjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3200309965",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-04T17:36:38Z",
      "milestone": {
        "title": "0.20.0"
      }
    },
    {
      "event": "reviewed",
      "id": 387731478,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzMxNDc4",
      "url": null,
      "actor": null,
      "commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested 01639a21d12df54895d0214542b84335d7f58a94 on Ubuntu 16.04.6 LTS, it works as expected.\r\n\r\nThe end of output:\r\n```\r\n...\r\n2020-04-04T20:13:51Z FlushStateToDisk: write coins cache to disk (0 coins, 0kB) started\r\n2020-04-04T20:13:51Z FlushStateToDisk: write coins cache to disk (0 coins, 0kB) completed (0.00s)\r\n2020-04-04T20:13:51Z [default wallet] Releasing wallet\r\n2020-04-04T20:13:51Z Shutdown: done\r\n```\r\n\r\nThe only concern is about [failed](https://travis-ci.org/github/bitcoin/bitcoin/jobs/671000374) CentOS 7 build on Travis.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387731478",
      "submitted_at": "2020-04-04T20:18:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "reviewed",
      "id": 387732352,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzMyMzUy",
      "url": null,
      "actor": null,
      "commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387732352",
      "submitted_at": "2020-04-04T20:31:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3200675689,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzIwMDY3NTY4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3200675689",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-04T23:30:16Z"
    },
    {
      "event": "reviewed",
      "id": 387766291,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzY2Mjkx",
      "url": null,
      "actor": null,
      "commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updated 01639a21d12df54895d0214542b84335d7f58a94 -> 3d463addfe2859bc55916f61086aaab624132411 ([`pr/nosig.3`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.3) -> [`pr/nosig.4`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/nosig.3..pr/nosig.4)) to fix centos 7 compiler error",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387766291",
      "submitted_at": "2020-04-04T23:35:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "comment_deleted",
      "id": 3200688417,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQzMjAwNjg4NDE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3200688417",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-04T23:48:29Z"
    },
    {
      "event": "reviewed",
      "id": 387807723,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODA3NzIz",
      "url": null,
      "actor": null,
      "commit_id": "3d463addfe2859bc55916f61086aaab624132411",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387807723",
      "submitted_at": "2020-04-05T11:18:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3202404519,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzIwMjQwNDUxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3202404519",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-05T12:31:54Z"
    },
    {
      "event": "commented",
      "id": 609409312,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTQwOTMxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609409312",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-05T12:33:20Z",
      "updated_at": "2020-04-05T12:33:20Z",
      "author_association": "MEMBER",
      "body": "Updated 3d463addfe2859bc55916f61086aaab624132411 -> b5fea244e5ac38758d295203209b66bd5905d714 ([`pr/nosig.4`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.4) -> [`pr/nosig.5`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.5), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/nosig.4..pr/nosig.5)) to destroy scheduler before callback list (no real change but makes more sense logically)\r\n\r\nAlso I'm noticing random appveyor test failures with `OSError: [WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted` https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/31959888#L3892, I'm assuming not related to the PR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609409312",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "reviewed",
      "id": 387819834,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODE5ODM0",
      "url": null,
      "actor": null,
      "commit_id": "b5fea244e5ac38758d295203209b66bd5905d714",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387819834",
      "submitted_at": "2020-04-05T13:37:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "reviewed",
      "id": 387839804,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODM5ODA0",
      "url": null,
      "actor": null,
      "commit_id": "b5fea244e5ac38758d295203209b66bd5905d714",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK b5fea244e5ac38758d295203209b66bd5905d714",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387839804",
      "submitted_at": "2020-04-05T17:08:52Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "commented",
      "id": 609495700,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTQ5NTcwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609495700",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-05T22:33:11Z",
      "updated_at": "2020-04-05T22:33:11Z",
      "author_association": "MEMBER",
      "body": "ACK b5fea244e5ac38758d295203209b66bd5905d714",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609495700",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "reviewed",
      "id": 387873463,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODczNDYz",
      "url": null,
      "actor": null,
      "commit_id": "b5fea244e5ac38758d295203209b66bd5905d714",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387873463",
      "submitted_at": "2020-04-05T23:23:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "commented",
      "id": 609502600,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTUwMjYwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609502600",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-05T23:25:36Z",
      "updated_at": "2020-04-05T23:25:36Z",
      "author_association": "MEMBER",
      "body": "One way to test this change is to load and unload wallets repeatedly like in #18362. Each time a wallet is loaded and unloaded, a CValidationInterface instance gets registered and unregistered. If this is done during a sync when there are lots of UpdateTip and BlockConnected callbacks, it can be a good way to mix registrations with notifications and try to trigger deadlocks & segfaults we've previously seen here. Some command lines I used for testing this:\r\n\r\n```sh\r\nsrc/bitcoind -testnet -debug=1 -debugexclude=libevent -server=1 -printtoconsole\r\n\r\nsrc/bitcoin-cli -testnet createwallet w1\r\nsrc/bitcoin-cli -testnet unloadwallet w1\r\nsrc/bitcoin-cli -testnet createwallet w2\r\nsrc/bitcoin-cli -testnet unloadwallet w2\r\n\r\nwhile src/bitcoin-cli -testnet loadwallet w1 && src/bitcoin-cli -testnet unloadwallet w1; do true; done\r\n\r\nwhile src/bitcoin-cli -testnet loadwallet w2 && src/bitcoin-cli -testnet unloadwallet w2; do true; done\r\n```",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609502600",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "reviewed",
      "id": 387874097,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODc0MDk3",
      "url": null,
      "actor": null,
      "commit_id": "b5fea244e5ac38758d295203209b66bd5905d714",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387874097",
      "submitted_at": "2020-04-05T23:29:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "commented",
      "id": 609504395,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTUwNDM5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609504395",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-05T23:39:55Z",
      "updated_at": "2020-04-05T23:39:55Z",
      "author_association": "MEMBER",
      "body": "Out of curiosity, have you considered a read write lock?",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609504395",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3203206249,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzIwMzIwNjI0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3203206249",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T00:04:47Z"
    },
    {
      "event": "reviewed",
      "id": 387878658,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODc4NjU4",
      "url": null,
      "actor": null,
      "commit_id": "c3a471604b1ef263d32c7d90db27b2fcfadc7166",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387878658",
      "submitted_at": "2020-04-06T00:10:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "reviewed",
      "id": 387876252,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODc2MjUy",
      "url": null,
      "actor": null,
      "commit_id": "b5fea244e5ac38758d295203209b66bd5905d714",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updated b5fea244e5ac38758d295203209b66bd5905d714 -> c3a471604b1ef263d32c7d90db27b2fcfadc7166 ([`pr/nosig.5`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.5) -> [`pr/nosig.6`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/nosig.5..pr/nosig.6)) adding suggested comments and renaming a few things to match comments.\r\n\r\n> Out of curiosity, have you considered a read write lock?\r\n\r\nI was thinking about one in the context of the solution you were proposing. If we just used a read-write lock in the most straightforward way here without reference counts registering and unregistering would block while callbacks were executing which would be changing behavior from boost signals and might lead to external deadlocks\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387876252",
      "submitted_at": "2020-04-06T00:10:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3203229365,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzIwMzIyOTM2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3203229365",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T00:24:19Z"
    },
    {
      "event": "reviewed",
      "id": 387879988,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODc5OTg4",
      "url": null,
      "actor": null,
      "commit_id": "c3a471604b1ef263d32c7d90db27b2fcfadc7166",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updated c3a471604b1ef263d32c7d90db27b2fcfadc7166 -> 96176004a39c63fdd4ada1f07e55bc62ca0c447b ([`pr/nosig.6`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.6) -> [`pr/nosig.7`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.7), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/nosig.6..pr/nosig.7)) simplifying iterate loop with sipa's suggestion",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387879988",
      "submitted_at": "2020-04-06T00:25:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "reviewed",
      "id": 387883538,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODgzNTM4",
      "url": null,
      "actor": null,
      "commit_id": "96176004a39c63fdd4ada1f07e55bc62ca0c447b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387883538",
      "submitted_at": "2020-04-06T00:46:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "reviewed",
      "id": 387883875,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODgzODc1",
      "url": null,
      "actor": null,
      "commit_id": "96176004a39c63fdd4ada1f07e55bc62ca0c447b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-387883875",
      "submitted_at": "2020-04-06T00:49:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "commented",
      "id": 609537335,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTUzNzMzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609537335",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T02:43:11Z",
      "updated_at": "2020-04-06T02:43:11Z",
      "author_association": "MEMBER",
      "body": "ACK 96176004a39c63fdd4ada1f07e55bc62ca0c447b",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609537335",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "reviewed",
      "id": 388062749,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDYyNzQ5",
      "url": null,
      "actor": null,
      "commit_id": "96176004a39c63fdd4ada1f07e55bc62ca0c447b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "There is one little difference from boost signals2 when some validation interface is registered in the middle of some `Iterate` which results in a different order of callback execution. However I don't see how this could be a problem.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-388062749",
      "submitted_at": "2020-04-06T09:29:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "labeled",
      "id": 3204982248,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMyMDQ5ODIyNDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3204982248",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T11:52:54Z",
      "label": {
        "name": "Bug",
        "color": "FBBAAB"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3205181351,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzIwNTE4MTM1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3205181351",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T12:45:11Z"
    },
    {
      "event": "reviewed",
      "id": 388193470,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MTkzNDcw",
      "url": null,
      "actor": null,
      "commit_id": "96176004a39c63fdd4ada1f07e55bc62ca0c447b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Updated 96176004a39c63fdd4ada1f07e55bc62ca0c447b -> d6815a2313158862d448733954a73520f223deb6 ([`pr/nosig.7`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.7) -> [`pr/nosig.8`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.8), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/nosig.7..pr/nosig.8)) just adding public/private, simplifying emplace, and making erase calls more consistent\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-388062749\r\n\r\n> There is one little difference from boost signals2 when some validation interface is registered in the middle of some `Iterate` which results in a different order of callback execution. However I don't see how this could be a problem.\r\n\r\nCurious what the boost behavior is when registrations change during a call. Seems like it would have to make a snapshot copy or use a kind of versioning to be able to ignore additions / removals",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-388193470",
      "submitted_at": "2020-04-06T12:53:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "commented",
      "id": 609777505,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTc3NzUwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609777505",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T12:57:16Z",
      "updated_at": "2020-04-06T12:57:16Z",
      "author_association": "MEMBER",
      "body": "ACK d6815a2313158862d448733954a73520f223deb6",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609777505",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "commented",
      "id": 609781612,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTc4MTYxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609781612",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T13:05:33Z",
      "updated_at": "2020-04-06T13:05:33Z",
      "author_association": "MEMBER",
      "body": "> Curious what the boost behavior is when registrations change during a call. Seems like it would have to make a snapshot copy or use a kind of versioning to be able to ignore additions / removals\r\n\r\nYes, that's the case, slots are called without any lock using a local list.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609781612",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "reviewed",
      "id": 388261287,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjYxMjg3",
      "url": null,
      "actor": null,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK d6815a2313158862d448733954a73520f223deb6.\r\n\r\nTested it fixes #18517. Some nits for your consideration if you happen to push again.\r\n\r\nWhile reviewing I thought it could make sense to define `MainSignalsInstance` destructor that would assert nothing is registered.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-388261287",
      "submitted_at": "2020-04-06T13:51:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "commented",
      "id": 609827781,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTgyNzc4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609827781",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T14:25:34Z",
      "updated_at": "2020-04-06T14:25:34Z",
      "author_association": "MEMBER",
      "body": "ACK d6815a2313158862d448733954a73520f223deb6\r\n\r\nI like the general direction of this (to move away from boost::signals2), and as it works around a problem with boost I think this is the preferable way to fix this (both in 0.20 and master).\r\n\r\n> While reviewing I thought it could make sense to define MainSignalsInstance destructor that would assert nothing is registered.\r\n\r\nFWIW asserts in destructors have turned out to be pretty terrible in generating shutdown crashes in unexpected conditions such as errors. So I'm not sure I like this.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609827781",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "commented",
      "id": 609830139,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTgzMDEzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609830139",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T14:29:48Z",
      "updated_at": "2020-04-06T14:29:48Z",
      "author_association": "MEMBER",
      "body": "re-ACK d6815a2313158862d448733954a73520f223deb6",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609830139",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "merged",
      "id": 3205729753,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzIwNTcyOTc1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3205729753",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fdeb445a34a97357c87416d80350f9b0b4f222ca",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdeb445a34a97357c87416d80350f9b0b4f222ca",
      "created_at": "2020-04-06T14:46:29Z"
    },
    {
      "event": "closed",
      "id": 3205729802,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzIwNTcyOTgwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3205729802",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T14:46:30Z"
    },
    {
      "event": "commented",
      "id": 609844047,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTg0NDA0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609844047",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T14:53:42Z",
      "updated_at": "2020-04-06T14:53:42Z",
      "author_association": "MEMBER",
      "body": "> FWIW asserts in destructors have turned out to be pretty terrible in generating shutdown crashes in unexpected conditions such as errors. So I'm not sure I like this.\r\n\r\nIt could be something that is only enabled on `--enable-debug` for tests, something like #16136 ",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609844047",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "commented",
      "id": 609866730,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTg2NjczMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609866730",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-06T15:31:52Z",
      "updated_at": "2020-04-06T15:31:52Z",
      "author_association": "MEMBER",
      "body": "Thanks for suggestions and reviews! I was pushing back on some suggestions that would have expanded scope of this PR or prevented it from being a refactor, but I'm working on a followup PR to implement these.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609866730",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18524"
    },
    {
      "event": "reviewed",
      "id": 388626279,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjI2Mjc5",
      "url": null,
      "actor": null,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#pullrequestreview-388626279",
      "submitted_at": "2020-04-06T21:21:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
    },
    {
      "event": "referenced",
      "id": 3209561251,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyMDk1NjEyNTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3209561251",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4ba1627fb99ea46836e0d73ad1682b4b184124be",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/4ba1627fb99ea46836e0d73ad1682b4b184124be",
      "created_at": "2020-04-07T12:12:29Z"
    },
    {
      "event": "referenced",
      "id": 3211401808,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyMTE0MDE4MDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3211401808",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2276339a176f83ffe8ceefb3e41ecca8601aa13b",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/2276339a176f83ffe8ceefb3e41ecca8601aa13b",
      "created_at": "2020-04-07T19:57:35Z"
    },
    {
      "event": "referenced",
      "id": 3214655917,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyMTQ2NTU5MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3214655917",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "93082b3112e10b825ce020b0bb72d9c3c0f1cacc",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/93082b3112e10b825ce020b0bb72d9c3c0f1cacc",
      "created_at": "2020-04-08T15:32:53Z"
    },
    {
      "event": "referenced",
      "id": 3220466704,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyMjA0NjY3MDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3220466704",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d7bce8a0d79adfa78530cd278dcf9a9a66d781ca",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/d7bce8a0d79adfa78530cd278dcf9a9a66d781ca",
      "created_at": "2020-04-10T01:15:34Z"
    },
    {
      "event": "referenced",
      "id": 3244176189,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzYxODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244176189",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c33572b2d358c16715109ac62a40bd893c6f02a1",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/c33572b2d358c16715109ac62a40bd893c6f02a1",
      "created_at": "2020-04-17T12:28:31Z"
    },
    {
      "event": "referenced",
      "id": 3464202633,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NjQyMDI2MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3464202633",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "27fc0488693b78bf96750c57432ca93f77617c12",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/27fc0488693b78bf96750c57432ca93f77617c12",
      "created_at": "2020-06-20T00:35:07Z"
    },
    {
      "event": "referenced",
      "id": 3623108948,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2MjMxMDg5NDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3623108948",
      "actor": {
        "login": "metalicjames",
        "id": 4153717,
        "node_id": "MDQ6VXNlcjQxNTM3MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4153717?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/metalicjames",
        "html_url": "https://github.com/metalicjames",
        "followers_url": "https://api.github.com/users/metalicjames/followers",
        "following_url": "https://api.github.com/users/metalicjames/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/metalicjames/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/metalicjames/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/metalicjames/subscriptions",
        "organizations_url": "https://api.github.com/users/metalicjames/orgs",
        "repos_url": "https://api.github.com/users/metalicjames/repos",
        "events_url": "https://api.github.com/users/metalicjames/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/metalicjames/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "09af10dec524a32cb8da9314fba9fce8376a0436",
      "commit_url": "https://api.github.com/repos/vertcoin-project/vertcoin-core/commits/09af10dec524a32cb8da9314fba9fce8376a0436",
      "created_at": "2020-08-05T05:51:47Z"
    },
    {
      "event": "referenced",
      "id": 3960339236,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5NjAzMzkyMzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3960339236",
      "actor": {
        "login": "janus",
        "id": 6726,
        "node_id": "MDQ6VXNlcjY3MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6726?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/janus",
        "html_url": "https://github.com/janus",
        "followers_url": "https://api.github.com/users/janus/followers",
        "following_url": "https://api.github.com/users/janus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/janus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/janus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/janus/subscriptions",
        "organizations_url": "https://api.github.com/users/janus/orgs",
        "repos_url": "https://api.github.com/users/janus/repos",
        "events_url": "https://api.github.com/users/janus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/janus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d90950d5f8491970855011822fbaa2ee95a93b46",
      "commit_url": "https://api.github.com/repos/janus/bitgesell/commits/d90950d5f8491970855011822fbaa2ee95a93b46",
      "created_at": "2020-11-05T03:08:31Z"
    },
    {
      "event": "referenced",
      "id": 4518457008,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTcwMDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518457008",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "aa4910131712cfdb08c219610b46e431f7f8385b",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/aa4910131712cfdb08c219610b46e431f7f8385b",
      "created_at": "2021-03-28T19:23:28Z"
    },
    {
      "event": "locked",
      "id": 6073866839,
      "node_id": "LOE_lADOABII584jZsdazwAAAAFqB9pX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6073866839",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T10:42:27Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403493465",
      "pull_request_review_id": 387717466,
      "id": 403493465,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5MzQ2NQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());",
      "path": "src/validationinterface.cpp",
      "position": 56,
      "original_position": 42,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So we add the same twice?",
      "created_at": "2020-04-04T17:15:53Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403493465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403493465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403493569",
      "pull_request_review_id": 387717466,
      "id": 403493569,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5MzU2OQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);",
      "path": "src/validationinterface.cpp",
      "position": 86,
      "original_position": 71,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How about local copy and then iterate it lock free?",
      "created_at": "2020-04-04T17:16:57Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403493569",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403493569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403513585",
      "pull_request_review_id": 387732352,
      "id": 403513585,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMzU4NQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);\n+        for (auto it{m_list.begin()}, prev{m_list.end()};; prev = it++) {",
      "path": "src/validationinterface.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think some C++ compilers don't allow to use `auto` in combination with C++11 list initialization for non-primitive types. You might have to write \r\n```suggestion\r\n        for (auto it = m_list.begin(), prev{m_list.end()};; prev = it++) {\r\n```",
      "created_at": "2020-04-04T20:31:17Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403513585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403513585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403514268",
      "pull_request_review_id": 387732840,
      "id": 403514268,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxNDI2OA==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);\n+        for (auto it{m_list.begin()}, prev{m_list.end()};; prev = it++) {",
      "path": "src/validationinterface.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403513585,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think some C++ compilers don't allow to use `auto` in combination with C++11 list initialization for non-primitive types.\r\n\r\nI think they allow to do it, but the [deducted type](https://en.cppreference.com/w/cpp/language/template_argument_deduction#Other_contexts) is `std::initializer_list` in this case, which is not what we want here.",
      "created_at": "2020-04-04T20:38:31Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403514268",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403514268"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403565141",
      "pull_request_review_id": 387766291,
      "id": 403565141,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU2NTE0MQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());",
      "path": "src/validationinterface.cpp",
      "position": 56,
      "original_position": 42,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403493465,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403493465\r\n\r\n> So we add the same twice?\r\n\r\nThere's two emplaces because of the map and list (if that's the question)",
      "created_at": "2020-04-04T23:13:39Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403565141",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403565141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403570017",
      "pull_request_review_id": 387766291,
      "id": 403570017,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU3MDAxNw==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);",
      "path": "src/validationinterface.cpp",
      "position": 86,
      "original_position": 71,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403493569,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403493569\r\n\r\n> How about local copy and then iterate it lock free?\r\n\r\nI'm not sure what approach could be entirely lock free since the list is global and can be modified from any thread.\r\n\r\nI just implemented something simple that can be changed and optimized in the future. The lock is not held when calling CValidation interface methods. It avoids copying so allocations aren't needed just to iterate the list. Assumption is that the list is iterated frequently and modified infrequently",
      "created_at": "2020-04-04T23:25:24Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403570017",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403570017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403570978",
      "pull_request_review_id": 387766291,
      "id": 403570978,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU3MDk3OA==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);\n+        for (auto it{m_list.begin()}, prev{m_list.end()};; prev = it++) {",
      "path": "src/validationinterface.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403513585,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403513585\r\n\r\n> I think they allow to do it, but the [deducted type](https://en.cppreference.com/w/cpp/language/template_argument_deduction#Other_contexts) is `std::initializer_list` in this case, which is not what we want here.\r\n\r\nThis seems to be causing compile errors on centos 7:\r\n\r\nhttps://travis-ci.org/github/bitcoin/bitcoin/jobs/671000374#L2207\r\n\r\nChanged `{}` to `()` to see if it helps with that compiler",
      "created_at": "2020-04-04T23:27:41Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403570978",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403570978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403577276",
      "pull_request_review_id": 387767664,
      "id": 403577276,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU3NzI3Ng==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());",
      "path": "src/validationinterface.cpp",
      "position": 56,
      "original_position": 42,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403493465,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I mean this is allowing adding the same callbacks. Why not `assert(inserted.second)`?",
      "created_at": "2020-04-04T23:42:29Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403577276",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403577276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403579194",
      "pull_request_review_id": 387767918,
      "id": 403579194,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU3OTE5NA==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);",
      "path": "src/validationinterface.cpp",
      "position": 86,
      "original_position": 71,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403493569,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So at best case it would be lock free I think.",
      "created_at": "2020-04-04T23:46:55Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403579194",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403579194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403580354",
      "pull_request_review_id": 387768036,
      "id": 403580354,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4MDM1NA==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);",
      "path": "src/validationinterface.cpp",
      "position": 86,
      "original_position": 71,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403493569,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, I wanted to delete my own comment, but it seems I misclicked and deleted @promag's. Restoring from mail:\r\n\r\n> > Assumption is that the list is iterated frequently and modified infrequently\r\n>\r\n> Right. What I had in mind is 2 lists and an atomic book list_changed. On iterating it would then sync the list with the mutex locked.",
      "created_at": "2020-04-04T23:49:35Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403580354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403580354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403582919",
      "pull_request_review_id": 387768366,
      "id": 403582919,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4MjkxOQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);",
      "path": "src/validationinterface.cpp",
      "position": 86,
      "original_position": 71,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403493569,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ":) I was wondering what happened. So draft:\r\n```\r\nif (list_changed) {\r\n  lock;\r\n  iterate_list = list;\r\n  list_changed = false\r\n}\r\nfor (f : iterate_list) f()\r\n```\r\n ",
      "created_at": "2020-04-04T23:55:32Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403582919",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403582919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403588495",
      "pull_request_review_id": 387769084,
      "id": 403588495,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU4ODQ5NQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());",
      "path": "src/validationinterface.cpp",
      "position": 56,
      "original_position": 42,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403493465,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403493465\r\n\r\n> I mean this is allowing adding the same callbacks. Why not `assert(inserted.second)`?\r\n\r\nUnit tests fail if the unregister function is not idempotent, so it seems good to me that the register function is idempotent as well. I could imagine an idempotent API here making calling code simpler, even though I could also imagine an assert catching potential bugs. I think asserts tend to work a better at short range within a module instead of being used to make an API rigid in an attempt to catch external bugs. But I don't think there is a right answer here and would be ok with a PR that took a different approach.",
      "created_at": "2020-04-05T00:08:38Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403588495",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403588495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403594731",
      "pull_request_review_id": 387769084,
      "id": 403594731,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU5NDczMQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);",
      "path": "src/validationinterface.cpp",
      "position": 86,
      "original_position": 71,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403493569,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403493569\r\n\r\n> Right. What I had in mind is 2 lists and an atomic book list_changed. On iterating it would then sync the list with the mutex locked.\r\n\r\nI don't understand the suggestion from the pseudocode. I don't love the idea of having multiple lists, but even if you have them, I don't see how you avoid locks copying the list if you do create copies, or avoid needing a condition variable to delay modifying the list if you don't create copies. I'm probably just making an incorrect assumption about what you want to accomplish here. Feel free to post sample code, or just change the implementation in an alternate PR or followup PR. I'd be especially interested if it's a simplification and not just an optimization.",
      "created_at": "2020-04-05T00:23:32Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403594731",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403594731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403600366",
      "pull_request_review_id": 387770583,
      "id": 403600366,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYwMDM2Ng==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);",
      "path": "src/validationinterface.cpp",
      "position": 86,
      "original_position": 71,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403493569,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it not possible that there are two invocations of Iterate simultaneously?",
      "created_at": "2020-04-05T00:37:04Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403600366",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403600366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403605613",
      "pull_request_review_id": 387771289,
      "id": 403605613,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYwNTYxMw==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);",
      "path": "src/validationinterface.cpp",
      "position": 86,
      "original_position": 71,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403493569,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403600366\r\n\r\n> Is it not possible that there are two invocations of Iterate simultaneously?\r\n\r\nIt shouldn't be the most common thing but should be possible because notifications like CMainSignals::BlockChecked and CMainSignals::NewPoWValidBlock run on calling thread. Other notifications are sent from the scheduler so shouldn't happen simultaneously.",
      "created_at": "2020-04-05T00:49:38Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403605613",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403605613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403687245",
      "pull_request_review_id": 387807723,
      "id": 403687245,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY4NzI0NQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }",
      "path": "src/validationinterface.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "3d463addfe2859bc55916f61086aaab624132411",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It follows from the code of the `Clear()` function that `m_list` could be non-empty when the function returns.\r\n\r\nIs it consistent state if `m_list.empty() == false` and `m_map.empty() == true` ?",
      "created_at": "2020-04-05T11:18:57Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403687245",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403687245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": 52,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403693635",
      "pull_request_review_id": 387812483,
      "id": 403693635,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5MzYzNQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }",
      "path": "src/validationinterface.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "3d463addfe2859bc55916f61086aaab624132411",
      "in_reply_to_id": 403687245,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403687245\r\n\r\n> It follows from the code of the `Clear()` function that `m_list` could be non-empty when the function returns.\r\n> \r\n> Is it consistent state if `m_list.empty() == false` and `m_map.empty() == true` ?\r\n\r\nYes, this happens when the reference count of one or more callbacks in the list is nonzero, which means they are currently being called, and will be removed by the iterate function when they are done being called, clearing the list.",
      "created_at": "2020-04-05T12:15:47Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403693635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403693635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": 52,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403702991",
      "pull_request_review_id": 387819834,
      "id": 403702991,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwMjk5MQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);",
      "path": "src/validationinterface.cpp",
      "position": 58,
      "original_position": 47,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "b5fea244e5ac38758d295203209b66bd5905d714",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why `callbacks` are moved into the `m_list` always, but not only when an insertion into `m_map` occurs?",
      "created_at": "2020-04-05T13:37:08Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403702991",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403702991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403717827",
      "pull_request_review_id": 387831264,
      "id": 403717827,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNzgyNw==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);",
      "path": "src/validationinterface.cpp",
      "position": 58,
      "original_position": 47,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "b5fea244e5ac38758d295203209b66bd5905d714",
      "in_reply_to_id": 403702991,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403702991\r\n\r\n> Why `callbacks` are moved into the `m_list` always, but not only when an insertion into `m_map` occurs?\r\n\r\nShouldn't make a difference in practice, but it seemed better to me to call operator=(&&) and do empty destroy on the RHS object consistently instead of having different call sequences depending on a basically unrelated condition. Also, this will probably never matter but maybe always updating could be useful and worth guaranteeing in the future if there's internal property of the pointer worth updating like a new custom deleter.",
      "created_at": "2020-04-05T15:33:40Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403717827",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403717827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403771944",
      "pull_request_review_id": 387873463,
      "id": 403771944,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3MTk0NA==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };",
      "path": "src/validationinterface.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "b5fea244e5ac38758d295203209b66bd5905d714",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Am I correct in stating the invariants here?\r\n* There are two types of callbacks, ones that are registered (in m_map) and ones that are not (because they're still being executed while being deleted).\r\n* m_list contains all callbacks of both types\r\n* entry.count is equal to the number of current executions of that entry, plus 1 if it's registered. It cannot be 0 (because that would imply being unregistered, and not being executed).\r\n\r\nPerhaps it's worth spelling these out.",
      "created_at": "2020-04-05T23:23:24Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403771944",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403771944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403772517",
      "pull_request_review_id": 387873965,
      "id": 403772517,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3MjUxNw==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };",
      "path": "src/validationinterface.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "b5fea244e5ac38758d295203209b66bd5905d714",
      "in_reply_to_id": 403771944,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Am I correct in stating the invariants here?\r\n\r\nYes, that's all correct and well stated. I'll add this as a comment",
      "created_at": "2020-04-05T23:28:01Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403772517",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403772517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403772689",
      "pull_request_review_id": 387874097,
      "id": 403772689,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3MjY4OQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;",
      "path": "src/validationinterface.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "b5fea244e5ac38758d295203209b66bd5905d714",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: I think `else` on the same line like this without braces is hard to read (and easily changed into something with different semantics).",
      "created_at": "2020-04-05T23:29:13Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403772689",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403772689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403773935",
      "pull_request_review_id": 387875252,
      "id": 403773935,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3MzkzNQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);",
      "path": "src/validationinterface.cpp",
      "position": 86,
      "original_position": 71,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403493569,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Is it not possible that there are two invocations of Iterate simultaneously?\r\n\r\nMy previous suggestion isn't possible in this case.",
      "created_at": "2020-04-05T23:39:39Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403773935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403773935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403775079",
      "pull_request_review_id": 387876252,
      "id": 403775079,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3NTA3OQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;",
      "path": "src/validationinterface.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "b5fea244e5ac38758d295203209b66bd5905d714",
      "in_reply_to_id": 403772689,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Nit: I think `else` on the same line like this without braces is hard to read (and easily changed into something with different semantics).\r\n\r\nChanged to assign statement here. You're right the else is easy to miss",
      "created_at": "2020-04-05T23:48:44Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403775079",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403775079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403777744",
      "pull_request_review_id": 387878658,
      "id": 403777744,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3Nzc0NA==",
      "diff_hunk": "@@ -16,36 +16,74 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n+//! The MainSignalsInstance manages a list of shared_ptr<CValidationInterface>\n+//! callbacks.\n+//!\n+//! A std::unordered_map is used to track what callbacks are currently\n+//! registered, and a std::list is to used to store the callbacks that are\n+//! currently registered as well as any callbacks that are just unregistered\n+//! and about to be deleted when they are done executing.\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+    Mutex m_mutex;\n+    //! List entries consist of a callback pointer and reference count. The\n+    //! count is equal to the number of current executions of that entry, plus 1\n+    //! if it's registered. It cannot be 0 because that would imply it is\n+    //! unregistered and also not being executed (so shouldn't exist).\n+    struct ListEntry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<ListEntry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<ListEntry>::iterator> m_map GUARDED_BY(m_mutex);\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Register(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Unregister(CValidationInterface* callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(callbacks);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    //! Clear unregisters every previously registered callback, erasing every\n+    //! map entry. After this call, the list may still contain callbacks that\n+    //! are currently executing, but it will be cleared when they are done\n+    //! executing.\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            it = --it->count == 0 ? m_list.erase(it) : std::next(it);\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);\n+        for (auto it(m_list.begin()), prev(m_list.end());; prev = it++) {",
      "path": "src/validationinterface.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "c3a471604b1ef263d32c7d90db27b2fcfadc7166",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this loop equivalent to the following?\r\n\r\n```c++\r\nWAIT_LOCK(m_mutex, lock);\r\nfor (auto it = m_list.begin(); it != m_list.end();) {\r\n    ++it->count;\r\n    {\r\n        REVERSE_LOCK(lock);\r\n        f(*it->callbacks);\r\n    }\r\n    it = (--it->count) ? std::next(it) : m_list.erase(it);\r\n}\r\n```",
      "created_at": "2020-04-06T00:10:20Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403777744",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403777744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403779135",
      "pull_request_review_id": 387879988,
      "id": 403779135,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3OTEzNQ==",
      "diff_hunk": "@@ -16,36 +16,74 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n+//! The MainSignalsInstance manages a list of shared_ptr<CValidationInterface>\n+//! callbacks.\n+//!\n+//! A std::unordered_map is used to track what callbacks are currently\n+//! registered, and a std::list is to used to store the callbacks that are\n+//! currently registered as well as any callbacks that are just unregistered\n+//! and about to be deleted when they are done executing.\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+    Mutex m_mutex;\n+    //! List entries consist of a callback pointer and reference count. The\n+    //! count is equal to the number of current executions of that entry, plus 1\n+    //! if it's registered. It cannot be 0 because that would imply it is\n+    //! unregistered and also not being executed (so shouldn't exist).\n+    struct ListEntry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<ListEntry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<ListEntry>::iterator> m_map GUARDED_BY(m_mutex);\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Register(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Unregister(CValidationInterface* callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(callbacks);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    //! Clear unregisters every previously registered callback, erasing every\n+    //! map entry. After this call, the list may still contain callbacks that\n+    //! are currently executing, but it will be cleared when they are done\n+    //! executing.\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            it = --it->count == 0 ? m_list.erase(it) : std::next(it);\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);\n+        for (auto it(m_list.begin()), prev(m_list.end());; prev = it++) {",
      "path": "src/validationinterface.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "c3a471604b1ef263d32c7d90db27b2fcfadc7166",
      "in_reply_to_id": 403777744,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Is this loop equivalent to the following?\r\n\r\nYes and that's more straightforward. Updated",
      "created_at": "2020-04-06T00:20:58Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403779135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403779135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403782623",
      "pull_request_review_id": 387883538,
      "id": 403782623,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4MjYyMw==",
      "diff_hunk": "@@ -16,36 +16,75 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n+//! The MainSignalsInstance manages a list of shared_ptr<CValidationInterface>\n+//! callbacks.\n+//!\n+//! A std::unordered_map is used to track what callbacks are currently\n+//! registered, and a std::list is to used to store the callbacks that are\n+//! currently registered as well as any callbacks that are just unregistered\n+//! and about to be deleted when they are done executing.\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+    Mutex m_mutex;\n+    //! List entries consist of a callback pointer and reference count. The\n+    //! count is equal to the number of current executions of that entry, plus 1\n+    //! if it's registered. It cannot be 0 because that would imply it is\n+    //! unregistered and also not being executed (so shouldn't exist).\n+    struct ListEntry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<ListEntry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<ListEntry>::iterator> m_map GUARDED_BY(m_mutex);\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Register(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());",
      "path": "src/validationinterface.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "96176004a39c63fdd4ada1f07e55bc62ca0c447b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think these lines can be combined into `inserted.first->second = m_list.emplace(m_list.end());`.",
      "created_at": "2020-04-06T00:46:39Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403782623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403782623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403783002",
      "pull_request_review_id": 387883875,
      "id": 403783002,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4MzAwMg==",
      "diff_hunk": "@@ -16,36 +16,75 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n+//! The MainSignalsInstance manages a list of shared_ptr<CValidationInterface>\n+//! callbacks.\n+//!\n+//! A std::unordered_map is used to track what callbacks are currently\n+//! registered, and a std::list is to used to store the callbacks that are\n+//! currently registered as well as any callbacks that are just unregistered\n+//! and about to be deleted when they are done executing.\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+    Mutex m_mutex;",
      "path": "src/validationinterface.cpp",
      "position": 35,
      "original_position": 34,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "96176004a39c63fdd4ada1f07e55bc62ca0c447b",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do all of these member variables/types need to be public?",
      "created_at": "2020-04-06T00:49:40Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403783002",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403783002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403938401",
      "pull_request_review_id": 388062749,
      "id": 403938401,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzODQwMQ==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());",
      "path": "src/validationinterface.cpp",
      "position": 56,
      "original_position": 42,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403493465,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Personally I think these shouldn't be idempotent because makes sense to call just once. For instance `std::fstream::open` is not idempotent, fails if file is already opened. I'd rather fix unit tests. Just an opinion and should not prevent this change going forward.",
      "created_at": "2020-04-06T09:07:44Z",
      "updated_at": "2020-04-06T12:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403938401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403938401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404046688",
      "pull_request_review_id": 388193470,
      "id": 404046688,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA0NjY4OA==",
      "diff_hunk": "@@ -16,36 +16,75 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n+//! The MainSignalsInstance manages a list of shared_ptr<CValidationInterface>\n+//! callbacks.\n+//!\n+//! A std::unordered_map is used to track what callbacks are currently\n+//! registered, and a std::list is to used to store the callbacks that are\n+//! currently registered as well as any callbacks that are just unregistered\n+//! and about to be deleted when they are done executing.\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+    Mutex m_mutex;",
      "path": "src/validationinterface.cpp",
      "position": 35,
      "original_position": 34,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "96176004a39c63fdd4ada1f07e55bc62ca0c447b",
      "in_reply_to_id": 403783002,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403783002\r\n\r\n> Do all of these member variables/types need to be public?\r\n\r\nNo none do, added private/public sections",
      "created_at": "2020-04-06T12:19:51Z",
      "updated_at": "2020-04-06T12:53:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r404046688",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404046688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404046788",
      "pull_request_review_id": 388193470,
      "id": 404046788,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA0Njc4OA==",
      "diff_hunk": "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());",
      "path": "src/validationinterface.cpp",
      "position": 56,
      "original_position": 42,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "01639a21d12df54895d0214542b84335d7f58a94",
      "in_reply_to_id": 403493465,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403938401\r\n\r\n> Personally I think these shouldn't be idempotent because makes sense to call just once. For instance `std::fstream::open` is not idempotent, fails if file is already opened. I'd rather fix unit tests. Just an opinion and should not prevent this change going forward.\r\n\r\nFeel free to open a followup. If I wanted to change calling code not to use the same pointer more than once, I would change these to return bool and have calling code assert that they return true, rather having these crash on cases they can reasonably handle and making assumptions about calling code. I do find API's like std::map's insert/erase that are idempotent convenient for avoiding boilerplate code, so that's another reason I like the keeping the boost behavior beyond not wanting to increase scope of this PR and not liking asserts across an api boundary",
      "created_at": "2020-04-06T12:20:03Z",
      "updated_at": "2020-04-06T12:53:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r404046788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404046788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404046859",
      "pull_request_review_id": 388193470,
      "id": 404046859,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA0Njg1OQ==",
      "diff_hunk": "@@ -16,36 +16,75 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n+//! The MainSignalsInstance manages a list of shared_ptr<CValidationInterface>\n+//! callbacks.\n+//!\n+//! A std::unordered_map is used to track what callbacks are currently\n+//! registered, and a std::list is to used to store the callbacks that are\n+//! currently registered as well as any callbacks that are just unregistered\n+//! and about to be deleted when they are done executing.\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+    Mutex m_mutex;\n+    //! List entries consist of a callback pointer and reference count. The\n+    //! count is equal to the number of current executions of that entry, plus 1\n+    //! if it's registered. It cannot be 0 because that would imply it is\n+    //! unregistered and also not being executed (so shouldn't exist).\n+    struct ListEntry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<ListEntry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<ListEntry>::iterator> m_map GUARDED_BY(m_mutex);\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Register(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());",
      "path": "src/validationinterface.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "96176004a39c63fdd4ada1f07e55bc62ca0c447b",
      "in_reply_to_id": 403782623,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403782623\r\n\r\n> I think these lines can be combined into `inserted.first->second = m_list.emplace(m_list.end());`.\r\n\r\nThanks, switched to this",
      "created_at": "2020-04-06T12:20:11Z",
      "updated_at": "2020-04-06T12:53:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r404046859",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404046859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404100268",
      "pull_request_review_id": 388261287,
      "id": 404100268,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwMDI2OA==",
      "diff_hunk": "@@ -16,36 +16,75 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n+//! The MainSignalsInstance manages a list of shared_ptr<CValidationInterface>\n+//! callbacks.\n+//!\n+//! A std::unordered_map is used to track what callbacks are currently\n+//! registered, and a std::list is to used to store the callbacks that are\n+//! currently registered as well as any callbacks that are just unregistered\n+//! and about to be deleted when they are done executing.\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+private:\n+    Mutex m_mutex;\n+    //! List entries consist of a callback pointer and reference count. The\n+    //! count is equal to the number of current executions of that entry, plus 1\n+    //! if it's registered. It cannot be 0 because that would imply it is\n+    //! unregistered and also not being executed (so shouldn't exist).\n+    struct ListEntry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<ListEntry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<ListEntry>::iterator> m_map GUARDED_BY(m_mutex);\n+\n+public:\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Register(std::shared_ptr<CValidationInterface> callbacks)",
      "path": "src/validationinterface.cpp",
      "position": 53,
      "original_position": 53,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, could avoid incrementing usage count - receive reference.",
      "created_at": "2020-04-06T13:43:07Z",
      "updated_at": "2020-04-06T13:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r404100268",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404100268"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404101889",
      "pull_request_review_id": 388261287,
      "id": 404101889,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwMTg4OQ==",
      "diff_hunk": "@@ -16,36 +16,75 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n+//! The MainSignalsInstance manages a list of shared_ptr<CValidationInterface>\n+//! callbacks.\n+//!\n+//! A std::unordered_map is used to track what callbacks are currently\n+//! registered, and a std::list is to used to store the callbacks that are\n+//! currently registered as well as any callbacks that are just unregistered\n+//! and about to be deleted when they are done executing.\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+private:\n+    Mutex m_mutex;\n+    //! List entries consist of a callback pointer and reference count. The\n+    //! count is equal to the number of current executions of that entry, plus 1\n+    //! if it's registered. It cannot be 0 because that would imply it is\n+    //! unregistered and also not being executed (so shouldn't exist).\n+    struct ListEntry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };",
      "path": "src/validationinterface.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit `int count{1};` ",
      "created_at": "2020-04-06T13:45:12Z",
      "updated_at": "2020-04-06T13:51:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r404101889",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404101889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404102580",
      "pull_request_review_id": 388261287,
      "id": 404102580,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwMjU4MA==",
      "diff_hunk": "@@ -16,36 +16,75 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n+//! The MainSignalsInstance manages a list of shared_ptr<CValidationInterface>\n+//! callbacks.\n+//!\n+//! A std::unordered_map is used to track what callbacks are currently\n+//! registered, and a std::list is to used to store the callbacks that are\n+//! currently registered as well as any callbacks that are just unregistered\n+//! and about to be deleted when they are done executing.\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+private:\n+    Mutex m_mutex;\n+    //! List entries consist of a callback pointer and reference count. The\n+    //! count is equal to the number of current executions of that entry, plus 1\n+    //! if it's registered. It cannot be 0 because that would imply it is\n+    //! unregistered and also not being executed (so shouldn't exist).\n+    struct ListEntry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<ListEntry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<ListEntry>::iterator> m_map GUARDED_BY(m_mutex);\n+\n+public:\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Register(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) inserted.first->second = m_list.emplace(m_list.end());\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Unregister(CValidationInterface* callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(callbacks);\n+        if (it != m_map.end()) {\n+            if (!--it->second->count) m_list.erase(it->second);",
      "path": "src/validationinterface.cpp",
      "position": 66,
      "original_position": 66,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, `== 0`.",
      "created_at": "2020-04-06T13:46:16Z",
      "updated_at": "2020-04-06T13:51:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r404102580",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404102580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 58,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404395685",
      "pull_request_review_id": 388626279,
      "id": 404395685,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NTY4NQ==",
      "diff_hunk": "@@ -16,36 +16,75 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n+//! The MainSignalsInstance manages a list of shared_ptr<CValidationInterface>\n+//! callbacks.\n+//!\n+//! A std::unordered_map is used to track what callbacks are currently\n+//! registered, and a std::list is to used to store the callbacks that are\n+//! currently registered as well as any callbacks that are just unregistered\n+//! and about to be deleted when they are done executing.\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+private:\n+    Mutex m_mutex;\n+    //! List entries consist of a callback pointer and reference count. The\n+    //! count is equal to the number of current executions of that entry, plus 1\n+    //! if it's registered. It cannot be 0 because that would imply it is\n+    //! unregistered and also not being executed (so shouldn't exist).\n+    struct ListEntry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<ListEntry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<ListEntry>::iterator> m_map GUARDED_BY(m_mutex);\n+\n+public:\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Register(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) inserted.first->second = m_list.emplace(m_list.end());\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Unregister(CValidationInterface* callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(callbacks);\n+        if (it != m_map.end()) {\n+            if (!--it->second->count) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    //! Clear unregisters every previously registered callback, erasing every\n+    //! map entry. After this call, the list may still contain callbacks that\n+    //! are currently executing, but it will be cleared when they are done\n+    //! executing.\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {",
      "path": "src/validationinterface.cpp",
      "position": 78,
      "original_position": 78,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it correct that this iterates over the entire list? I think it should only iterate over entries that are in the map (the count of those that are already unregistered shouldn't be decremented further).",
      "created_at": "2020-04-06T21:21:04Z",
      "updated_at": "2020-04-06T21:21:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r404395685",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404395685"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404497756",
      "pull_request_review_id": 388741487,
      "id": 404497756,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5Nzc1Ng==",
      "diff_hunk": "@@ -16,36 +16,75 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n+//! The MainSignalsInstance manages a list of shared_ptr<CValidationInterface>\n+//! callbacks.\n+//!\n+//! A std::unordered_map is used to track what callbacks are currently\n+//! registered, and a std::list is to used to store the callbacks that are\n+//! currently registered as well as any callbacks that are just unregistered\n+//! and about to be deleted when they are done executing.\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n+private:\n+    Mutex m_mutex;\n+    //! List entries consist of a callback pointer and reference count. The\n+    //! count is equal to the number of current executions of that entry, plus 1\n+    //! if it's registered. It cannot be 0 because that would imply it is\n+    //! unregistered and also not being executed (so shouldn't exist).\n+    struct ListEntry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<ListEntry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<ListEntry>::iterator> m_map GUARDED_BY(m_mutex);\n+\n+public:\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Register(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) inserted.first->second = m_list.emplace(m_list.end());\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Unregister(CValidationInterface* callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(callbacks);\n+        if (it != m_map.end()) {\n+            if (!--it->second->count) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    //! Clear unregisters every previously registered callback, erasing every\n+    //! map entry. After this call, the list may still contain callbacks that\n+    //! are currently executing, but it will be cleared when they are done\n+    //! executing.\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {",
      "path": "src/validationinterface.cpp",
      "position": 78,
      "original_position": 78,
      "commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "original_commit_id": "d6815a2313158862d448733954a73520f223deb6",
      "in_reply_to_id": 404395685,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggested fix here: https://github.com/bitcoin/bitcoin/pull/18551",
      "created_at": "2020-04-07T02:20:07Z",
      "updated_at": "2020-04-07T02:20:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r404497756",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404497756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    }
  ]
}