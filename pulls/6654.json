{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654",
    "id": 44501479,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ1MDE0Nzk=",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6654",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/6654.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/6654.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
    "number": 6654,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Mempool package tracking",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is a preparatory pull to try to make reviewing #6557 easier.\n\nIn #6557, I added tracking packages of transactions to the mempool (for each tx, we track all the \"descendant\" transactions that depend on that tx), in order to make the mempool limiting code more effective.  This PR is a standalone implementation of mempool descendant tracking, including the policy limits on transaction chains (limiting ancestors and descendants) proposed in #6557.\n\nI'll rebase that pull off these commits assuming we can agree on this approach.\n",
    "labels": [],
    "active_lock_reason": "resolved",
    "created_at": "2015-09-09T01:23:39Z",
    "updated_at": "2021-09-08T10:55:53Z",
    "closed_at": "2015-09-21T12:35:07Z",
    "mergeable_state": "unknown",
    "merged_at": "2015-09-21T12:35:07Z",
    "merge_commit_sha": "3fdfce1f9dc23b8653d4c5c5280f794408bc555f",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "sdaftuar:mempool-packages-only",
      "ref": "mempool-packages-only",
      "sha": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 28761781,
        "node_id": "MDEwOlJlcG9zaXRvcnkyODc2MTc4MQ==",
        "name": "bitcoin",
        "full_name": "sdaftuar/bitcoin",
        "owner": {
          "login": "sdaftuar",
          "id": 7463573,
          "node_id": "MDQ6VXNlcjc0NjM1NzM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sdaftuar",
          "html_url": "https://github.com/sdaftuar",
          "followers_url": "https://api.github.com/users/sdaftuar/followers",
          "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
          "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
          "repos_url": "https://api.github.com/users/sdaftuar/repos",
          "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sdaftuar/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sdaftuar/bitcoin",
        "archive_url": "https://api.github.com/repos/sdaftuar/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sdaftuar/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sdaftuar/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sdaftuar/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sdaftuar/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sdaftuar/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sdaftuar/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sdaftuar/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sdaftuar/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sdaftuar/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sdaftuar/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sdaftuar/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sdaftuar/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sdaftuar/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sdaftuar/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sdaftuar/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sdaftuar/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sdaftuar/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sdaftuar/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sdaftuar/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sdaftuar/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sdaftuar/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sdaftuar/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sdaftuar/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sdaftuar/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sdaftuar/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sdaftuar/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sdaftuar/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sdaftuar/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sdaftuar/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sdaftuar/bitcoin/hooks",
        "svn_url": "https://github.com/sdaftuar/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 245655,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-01T00:45:13Z",
        "created_at": "2015-01-04T02:52:13Z",
        "updated_at": "2023-02-11T10:16:01Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d5d1d2e65a1c3b91452d2428410f701bca1e53cc",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34323,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T19:05:23Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T18:57:56Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1098,
    "deletions": 75,
    "changed_files": 11,
    "commits": 2,
    "review_comments": 33,
    "comments": 21
  },
  "events": [
    {
      "event": "commented",
      "id": 138748338,
      "node_id": "MDEyOklzc3VlQ29tbWVudDEzODc0ODMzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138748338",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-09T01:31:45Z",
      "updated_at": "2015-09-09T01:31:45Z",
      "author_association": "MEMBER",
      "body": "@sipa  I did end up reworking the tracking of in-mempool parents/children to use iterators rather than hashes as you had suggested (which I never pushed up to #6557).\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-138748338",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "mentioned",
      "id": 404316771,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDA0MzE2Nzcx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/404316771",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-09T01:31:45Z"
    },
    {
      "event": "subscribed",
      "id": 404316772,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwNDMxNjc3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/404316772",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-09T01:31:45Z"
    },
    {
      "event": "commented",
      "id": 138764516,
      "node_id": "MDEyOklzc3VlQ29tbWVudDEzODc2NDUxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138764516",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-09T03:11:28Z",
      "updated_at": "2015-09-09T03:11:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "@laanwj looks like travis crapped out on one of the jobs and needs restarting.\n",
      "user": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-138764516",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "mentioned",
      "id": 404367881,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDA0MzY3ODgx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/404367881",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-09T03:11:28Z"
    },
    {
      "event": "subscribed",
      "id": 404367882,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwNDM2Nzg4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/404367882",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-09T03:11:28Z"
    },
    {
      "event": "commented",
      "id": 138895713,
      "node_id": "MDEyOklzc3VlQ29tbWVudDEzODg5NTcxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138895713",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-09T12:35:29Z",
      "updated_at": "2015-09-09T12:35:47Z",
      "author_association": "MEMBER",
      "body": "@btcdrak Actually I think this is some kind of problem with the unit test code -- not sure why it fails to compile only in that one job but I was just able to reproduce locally. Working on a fix...\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-138895713",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "mentioned",
      "id": 404762463,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDA0NzYyNDYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/404762463",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-09T12:35:29Z"
    },
    {
      "event": "subscribed",
      "id": 404762464,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwNDc2MjQ2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/404762464",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-09T12:35:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 404766879,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA0NzY2ODc5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/404766879",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-09T12:41:36Z"
    },
    {
      "event": "commented",
      "id": 138904329,
      "node_id": "MDEyOklzc3VlQ29tbWVudDEzODkwNDMyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138904329",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-09T13:09:21Z",
      "updated_at": "2015-09-09T13:09:21Z",
      "author_association": "MEMBER",
      "body": "@btcdrak Fixed and pushed back up, travis is happy now...\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-138904329",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "mentioned",
      "id": 404792526,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDA0NzkyNTI2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/404792526",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-09T13:09:22Z"
    },
    {
      "event": "subscribed",
      "id": 404792527,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwNDc5MjUyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/404792527",
      "actor": {
        "login": "btcdrak",
        "id": 7275704,
        "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btcdrak",
        "html_url": "https://github.com/btcdrak",
        "followers_url": "https://api.github.com/users/btcdrak/followers",
        "following_url": "https://api.github.com/users/btcdrak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/btcdrak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/btcdrak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
        "organizations_url": "https://api.github.com/users/btcdrak/orgs",
        "repos_url": "https://api.github.com/users/btcdrak/repos",
        "events_url": "https://api.github.com/users/btcdrak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/btcdrak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-09T13:09:22Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4MzY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4Mzk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 140186250,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDE4NjI1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140186250",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-14T19:42:07Z",
      "updated_at": "2015-09-14T19:42:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "In general, it'd be good to think about separating the reorg case entirely from the main mempool codebase. For instance, keep a simple linear list of reorged transactions, and after a reorg attempt to add them back the mempool one-by-one. This separate code could also handle cases where we might want to remine transactions that we otherwise wouldn't, as a \"goodwill\" gesture to reduce the impact of large reorgs.\n",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140186250",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NDQ6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 140188867,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDE4ODg2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140188867",
      "actor": {
        "login": "pstratem",
        "id": 620611,
        "node_id": "MDQ6VXNlcjYyMDYxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pstratem",
        "html_url": "https://github.com/pstratem",
        "followers_url": "https://api.github.com/users/pstratem/followers",
        "following_url": "https://api.github.com/users/pstratem/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pstratem/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pstratem/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
        "organizations_url": "https://api.github.com/users/pstratem/orgs",
        "repos_url": "https://api.github.com/users/pstratem/repos",
        "events_url": "https://api.github.com/users/pstratem/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pstratem/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-14T19:54:07Z",
      "updated_at": "2015-09-14T19:54:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Needs a comment defining ancestor/descendant. \n",
      "user": {
        "login": "pstratem",
        "id": 620611,
        "node_id": "MDQ6VXNlcjYyMDYxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pstratem",
        "html_url": "https://github.com/pstratem",
        "followers_url": "https://api.github.com/users/pstratem/followers",
        "following_url": "https://api.github.com/users/pstratem/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pstratem/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pstratem/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
        "organizations_url": "https://api.github.com/users/pstratem/orgs",
        "repos_url": "https://api.github.com/users/pstratem/repos",
        "events_url": "https://api.github.com/users/pstratem/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pstratem/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140188867",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NDY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NDc6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NDk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NTA6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NTE6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NTI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NTQ6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NTY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 140200727,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDIwMDcyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140200727",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-14T20:45:56Z",
      "updated_at": "2015-09-14T20:45:56Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140200727",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "commented",
      "id": 140203389,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDIwMzM4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140203389",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-14T20:54:52Z",
      "updated_at": "2015-09-14T20:54:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "utACK, modulo nits.\n",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140203389",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "commented",
      "id": 140204729,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDIwNDcyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140204729",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-14T21:00:52Z",
      "updated_at": "2015-09-14T21:00:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK / code review ACK.\nPasses gitian/osx/debian build/unit-tests/rpc-tests.\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140204729",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "commented",
      "id": 140208052,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDIwODA1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140208052",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-14T21:16:00Z",
      "updated_at": "2015-09-14T21:16:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Tested with my FSS and Full RBF stress tests and -checkmempool, no unexpected failures. (this pull-req of course doesn't enable any RBF behavior, so replacements failed!)\n",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140208052",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "commented",
      "id": 140217087,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDIxNzA4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140217087",
      "actor": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-14T22:00:15Z",
      "updated_at": "2015-09-14T22:00:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "concept ACK\n",
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140217087",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NTg6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NjA6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NjI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NjY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4Njk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NzM6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4NzU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4Nzk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4ODI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4ODU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4ODc6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4OTA6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 140746438,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDc0NjQzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140746438",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-16T13:44:17Z",
      "updated_at": "2015-09-16T13:44:17Z",
      "author_association": "MEMBER",
      "body": "Thanks everyone for reviewing!  I've pushed up a series of commits to address everyone's feedback; I believe all comments should have been addressed.\n\nThese cleanups need to be squashed, and this pull now needs to be rebased (a merge conflict crept in now that I'm outputting additional information in getrawmempool).  Reviewers -- please let me know if you prefer I leave these commits unsquashed/unrebased so you can review the changes.  (In the absence of any expressed preferences, I'll plan to squash/rebase in a day or two so that this can become mergeable.)\n\n@petertodd I added the extra information to the getrawmempool RPC call (good idea!).  Now that the RPC call is there, I realized that adding an RPC test that exercises the new limits is a good idea, so I've started work on that, but it's not yet complete.\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140746438",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "mentioned",
      "id": 410970310,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDEwOTcwMzEw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/410970310",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-16T13:44:17Z"
    },
    {
      "event": "subscribed",
      "id": 410970311,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxMDk3MDMxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/410970311",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-16T13:44:17Z"
    },
    {
      "event": "commented",
      "id": 140773288,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDc3MzI4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140773288",
      "actor": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-16T15:16:49Z",
      "updated_at": "2015-09-16T15:26:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "utACK,  thanks @sdaftuar!\n\n**edit:** wait up,  might need to re-evaluate the policy options in regards to comments in #6403\n",
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140773288",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "mentioned",
      "id": 411076265,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDExMDc2MjY1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/411076265",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-16T15:16:49Z"
    },
    {
      "event": "subscribed",
      "id": 411076266,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxMTA3NjI2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/411076266",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-16T15:16:49Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4OTI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4OTQ6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4OTU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4OTc6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY4OTk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 141606429,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTYwNjQyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/141606429",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-19T01:23:48Z",
      "updated_at": "2015-09-19T01:23:48Z",
      "author_association": "MEMBER",
      "body": "My computer's battery died, but in txmempool.h, the definition of txiter as \"boost::multi_index_container::iterator\" is \"implementation defined\" according to boost's docs. In the latest versions it is defined to an equivalent of \"boost::multi_index_container::nth_index<0>::type::iterator\", so you should use that.\n\nOn September 16, 2015 8:44:26 AM CDT, Suhas Daftuar notifications@github.com wrote:\n\n> Thanks everyone for reviewing!  I've pushed up a series of commits to\n> address everyone's feedback; I believe all comments should have been\n> addressed.\n> \n> These cleanups need to be squashed, and this pull now needs to be\n> rebased (a merge conflict crept in now that I'm outputting additional\n> information in getrawmempool).  Reviewers -- please let me know if you\n> prefer I leave these commits unsquashed/unrebased so you can review the\n> changes.  (In the absence of any expressed preferences, I'll plan to\n> squash/rebase in a day or two so that this can become mergeable.)\n> \n> @petertodd I added the extra information to the getrawmempool RPC call\n> (good idea!).  Now that the RPC call is there, I realized that adding\n> an RPC test that exercises the new limits is a good idea, so I've\n> started work on that, but it's not yet complete.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140746438\n",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-141606429",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "mentioned",
      "id": 413770952,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDEzNzcwOTUy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/413770952",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-19T01:23:48Z"
    },
    {
      "event": "subscribed",
      "id": 413770953,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxMzc3MDk1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/413770953",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-19T01:23:48Z"
    },
    {
      "event": "commented",
      "id": 141613695,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTYxMzY5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/141613695",
      "actor": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-19T03:04:04Z",
      "updated_at": "2015-09-19T03:04:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sdaftuar needs rebase.\n",
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-141613695",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "mentioned",
      "id": 413789929,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDEzNzg5OTI5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/413789929",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-19T03:04:04Z"
    },
    {
      "event": "subscribed",
      "id": 413789930,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxMzc4OTkzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/413789930",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-19T03:04:04Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDYyOGExODA3MDA2NGU3NWIzNWYyOGZkNmE0M2Q1YzIzODMyZWI4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34628a18070064e75b35f28fd6a43d5c23832eb8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/34628a18070064e75b35f28fd6a43d5c23832eb8",
      "tree": {
        "sha": "e73c13d25d04212b5bbbb5b0c3829421f7616d6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e73c13d25d04212b5bbbb5b0c3829421f7616d6b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5d1d2e65a1c3b91452d2428410f701bca1e53cc",
          "sha": "d5d1d2e65a1c3b91452d2428410f701bca1e53cc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d5d1d2e65a1c3b91452d2428410f701bca1e53cc"
        }
      ],
      "message": "TxMemPool: Change mapTx to a boost::multi_index_container\n\nIndexes on:\n- Tx Hash\n- Fee Rate (fee-per-kb)",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-09-19T17:22:40Z"
      },
      "author": {
        "name": "Ashley Holman",
        "email": "dscvlt@gmail.com",
        "date": "2015-06-24T08:32:20Z"
      },
      "sha": "34628a18070064e75b35f28fd6a43d5c23832eb8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWRkN2E3NGE2NzJjYjEyYjBhMmE2MzBkMzE4ZDliYzY0ZGQwZjc3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "tree": {
        "sha": "e8b86acba14f47100af0bbadeb748f6f6a002d58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8b86acba14f47100af0bbadeb748f6f6a002d58"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34628a18070064e75b35f28fd6a43d5c23832eb8",
          "sha": "34628a18070064e75b35f28fd6a43d5c23832eb8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/34628a18070064e75b35f28fd6a43d5c23832eb8"
        }
      ],
      "message": "Track transaction packages in CTxMemPoolEntry\n\nAssociate with each CTxMemPoolEntry all the size/fees of descendant\nmempool transactions.  Sort mempool by max(feerate of entry, feerate\nof descendants).  Update statistics on-the-fly as transactions enter\nor leave the mempool.\n\nAlso add ancestor and descendant limiting, so that transactions can\nbe rejected if the number or size of unconfirmed ancestors exceeds\na target, or if adding a transaction would cause some other mempool\nentry to have too many (or too large) a set of unconfirmed in-\nmempool descendants.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-09-19T17:25:48Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-07-15T18:47:45Z"
      },
      "sha": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 413961939,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEzOTYxOTM5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/413961939",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-19T17:32:51Z"
    },
    {
      "event": "commented",
      "id": 141692820,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTY5MjgyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/141692820",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-19T17:40:03Z",
      "updated_at": "2015-09-19T17:40:03Z",
      "author_association": "MEMBER",
      "body": "I addressed the latest comments from @morcos and @TheBlueMatt, added an rpc test (it only tests the ancestor/descendant length limits, not the size limits, nor the handling of reorgs -- so that still can be improved), and then squashed everything down and rebased on master to get rid of the merge conflict in `rpcblockchain.cpp`.\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-141692820",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "mentioned",
      "id": 413965193,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDEzOTY1MTkz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/413965193",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-19T17:40:03Z"
    },
    {
      "event": "subscribed",
      "id": 413965194,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxMzk2NTE5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/413965194",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-19T17:40:03Z"
    },
    {
      "event": "mentioned",
      "id": 413965196,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDEzOTY1MTk2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/413965196",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-19T17:40:03Z"
    },
    {
      "event": "subscribed",
      "id": 413965197,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxMzk2NTE5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/413965197",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-19T17:40:03Z"
    },
    {
      "event": "commented",
      "id": 141696711,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTY5NjcxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/141696711",
      "actor": {
        "login": "Mirobit",
        "id": 13236924,
        "node_id": "MDQ6VXNlcjEzMjM2OTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/13236924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Mirobit",
        "html_url": "https://github.com/Mirobit",
        "followers_url": "https://api.github.com/users/Mirobit/followers",
        "following_url": "https://api.github.com/users/Mirobit/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Mirobit/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Mirobit/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Mirobit/subscriptions",
        "organizations_url": "https://api.github.com/users/Mirobit/orgs",
        "repos_url": "https://api.github.com/users/Mirobit/repos",
        "events_url": "https://api.github.com/users/Mirobit/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Mirobit/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-19T18:39:08Z",
      "updated_at": "2015-09-19T18:39:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Does anyone else think the ancestor limit is way to generous? In what other case than spamming do txs have 100 ancestors in mempool? Shouldn't 5 be enough?\n",
      "user": {
        "login": "Mirobit",
        "id": 13236924,
        "node_id": "MDQ6VXNlcjEzMjM2OTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/13236924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Mirobit",
        "html_url": "https://github.com/Mirobit",
        "followers_url": "https://api.github.com/users/Mirobit/followers",
        "following_url": "https://api.github.com/users/Mirobit/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Mirobit/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Mirobit/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Mirobit/subscriptions",
        "organizations_url": "https://api.github.com/users/Mirobit/orgs",
        "repos_url": "https://api.github.com/users/Mirobit/repos",
        "events_url": "https://api.github.com/users/Mirobit/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Mirobit/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-141696711",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "commented",
      "id": 141723288,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTcyMzI4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/141723288",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-20T00:53:25Z",
      "updated_at": "2015-09-20T00:53:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Mirobit The limits are there to limit computational costs in determining things like dependent fees/size etc. There's no need to set them low unless the algorithms take a long time to compute those sums; the data structures in the mempool are mainly pointer following so it's fairly fast.\n",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-141723288",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "mentioned",
      "id": 414041874,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE0MDQxODc0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/414041874",
      "actor": {
        "login": "Mirobit",
        "id": 13236924,
        "node_id": "MDQ6VXNlcjEzMjM2OTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/13236924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Mirobit",
        "html_url": "https://github.com/Mirobit",
        "followers_url": "https://api.github.com/users/Mirobit/followers",
        "following_url": "https://api.github.com/users/Mirobit/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Mirobit/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Mirobit/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Mirobit/subscriptions",
        "organizations_url": "https://api.github.com/users/Mirobit/orgs",
        "repos_url": "https://api.github.com/users/Mirobit/repos",
        "events_url": "https://api.github.com/users/Mirobit/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Mirobit/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-20T00:53:25Z"
    },
    {
      "event": "subscribed",
      "id": 414041875,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxNDA0MTg3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/414041875",
      "actor": {
        "login": "Mirobit",
        "id": 13236924,
        "node_id": "MDQ6VXNlcjEzMjM2OTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/13236924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Mirobit",
        "html_url": "https://github.com/Mirobit",
        "followers_url": "https://api.github.com/users/Mirobit/followers",
        "following_url": "https://api.github.com/users/Mirobit/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Mirobit/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Mirobit/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Mirobit/subscriptions",
        "organizations_url": "https://api.github.com/users/Mirobit/orgs",
        "repos_url": "https://api.github.com/users/Mirobit/repos",
        "events_url": "https://api.github.com/users/Mirobit/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Mirobit/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-20T00:53:25Z"
    },
    {
      "event": "commented",
      "id": 141957549,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTk1NzU0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/141957549",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-21T12:26:44Z",
      "updated_at": "2015-09-21T12:26:44Z",
      "author_association": "MEMBER",
      "body": "utACK\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-141957549",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "merged",
      "id": 414686109,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDE0Njg2MTA5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/414686109",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "created_at": "2015-09-21T12:35:07Z"
    },
    {
      "event": "closed",
      "id": 414686110,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDE0Njg2MTEw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/414686110",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-21T12:35:07Z"
    },
    {
      "event": "referenced",
      "id": 414686116,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQxNDY4NjExNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/414686116",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b0ce4508b04639189a6d0567782e27eeee5f73d6",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0ce4508b04639189a6d0567782e27eeee5f73d6",
      "created_at": "2015-09-21T12:35:08Z"
    },
    {
      "event": "commented",
      "id": 142345556,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjM0NTU1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/142345556",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-22T16:47:02Z",
      "updated_at": "2015-09-22T16:47:02Z",
      "author_association": "MEMBER",
      "body": "My node running 5add7a7 with -checkmempool crashed. Last debug.log message was:\n\n```\n2015-09-22 13:06:19 - Disconnect block: 90.04ms\n```\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-142345556",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "commented",
      "id": 142352916,
      "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjM1MjkxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/142352916",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-22T17:13:56Z",
      "updated_at": "2015-09-22T17:13:56Z",
      "author_association": "MEMBER",
      "body": "@sipa can you give us some more details?  were you running will all -debug options?  for instance I assume you were not running with estimatefee debugging?   it helps to narrow down where it crashed based on what didn't get printed to the debug log.\n",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-142352916",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6654"
    },
    {
      "event": "mentioned",
      "id": 416099632,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE2MDk5NjMy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/416099632",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-22T17:13:56Z"
    },
    {
      "event": "subscribed",
      "id": 416099633,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxNjA5OTYzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/416099633",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-09-22T17:13:56Z"
    },
    {
      "event": "referenced",
      "id": 1481542254,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0ODE1NDIyNTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1481542254",
      "actor": {
        "login": "zkbot",
        "id": 17032253,
        "node_id": "MDQ6VXNlcjE3MDMyMjUz",
        "avatar_url": "https://avatars.githubusercontent.com/u/17032253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zkbot",
        "html_url": "https://github.com/zkbot",
        "followers_url": "https://api.github.com/users/zkbot/followers",
        "following_url": "https://api.github.com/users/zkbot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zkbot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zkbot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zkbot/subscriptions",
        "organizations_url": "https://api.github.com/users/zkbot/orgs",
        "repos_url": "https://api.github.com/users/zkbot/repos",
        "events_url": "https://api.github.com/users/zkbot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zkbot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6d6b7809691459de2078e5655ee9ff6ff67a73cd",
      "commit_url": "https://api.github.com/repos/zcash/zcash/commits/6d6b7809691459de2078e5655ee9ff6ff67a73cd",
      "created_at": "2018-02-20T01:32:16Z"
    },
    {
      "event": "referenced",
      "id": 1481606877,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0ODE2MDY4Nzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1481606877",
      "actor": {
        "login": "zkbot",
        "id": 17032253,
        "node_id": "MDQ6VXNlcjE3MDMyMjUz",
        "avatar_url": "https://avatars.githubusercontent.com/u/17032253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zkbot",
        "html_url": "https://github.com/zkbot",
        "followers_url": "https://api.github.com/users/zkbot/followers",
        "following_url": "https://api.github.com/users/zkbot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zkbot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zkbot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zkbot/subscriptions",
        "organizations_url": "https://api.github.com/users/zkbot/orgs",
        "repos_url": "https://api.github.com/users/zkbot/repos",
        "events_url": "https://api.github.com/users/zkbot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zkbot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "49274558c6092eb0e693060356bd4bc2d86643a7",
      "commit_url": "https://api.github.com/repos/zcash/zcash/commits/49274558c6092eb0e693060356bd4bc2d86643a7",
      "created_at": "2018-02-20T03:00:33Z"
    },
    {
      "event": "referenced",
      "id": 3441742208,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NDE3NDIyMDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3441742208",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "eb00d0f62f5e176c7e0c3f5ebe77920ab6424ecb",
      "commit_url": "https://api.github.com/repos/PIVX-Project/PIVX/commits/eb00d0f62f5e176c7e0c3f5ebe77920ab6424ecb",
      "created_at": "2020-06-14T14:34:28Z"
    },
    {
      "event": "referenced",
      "id": 5133192694,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMzMxOTI2OTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5133192694",
      "actor": {
        "login": "str4d",
        "id": 4993799,
        "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/str4d",
        "html_url": "https://github.com/str4d",
        "followers_url": "https://api.github.com/users/str4d/followers",
        "following_url": "https://api.github.com/users/str4d/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/str4d/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/str4d/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
        "organizations_url": "https://api.github.com/users/str4d/orgs",
        "repos_url": "https://api.github.com/users/str4d/repos",
        "events_url": "https://api.github.com/users/str4d/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/str4d/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bd2c35a93fdc93a06d650da2a90378fbb7083711",
      "commit_url": "https://api.github.com/repos/str4d/zcash/commits/bd2c35a93fdc93a06d650da2a90378fbb7083711",
      "created_at": "2021-08-10T04:19:36Z"
    },
    {
      "event": "referenced",
      "id": 5133192696,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMzMxOTI2OTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5133192696",
      "actor": {
        "login": "str4d",
        "id": 4993799,
        "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/str4d",
        "html_url": "https://github.com/str4d",
        "followers_url": "https://api.github.com/users/str4d/followers",
        "following_url": "https://api.github.com/users/str4d/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/str4d/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/str4d/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
        "organizations_url": "https://api.github.com/users/str4d/orgs",
        "repos_url": "https://api.github.com/users/str4d/repos",
        "events_url": "https://api.github.com/users/str4d/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/str4d/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "55ee6e5415e85f173123e180954625a7a23ed82a",
      "commit_url": "https://api.github.com/repos/str4d/zcash/commits/55ee6e5415e85f173123e180954625a7a23ed82a",
      "created_at": "2021-08-10T04:19:36Z"
    },
    {
      "event": "referenced",
      "id": 5145611345,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxNDU2MTEzNDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5145611345",
      "actor": {
        "login": "str4d",
        "id": 4993799,
        "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/str4d",
        "html_url": "https://github.com/str4d",
        "followers_url": "https://api.github.com/users/str4d/followers",
        "following_url": "https://api.github.com/users/str4d/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/str4d/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/str4d/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
        "organizations_url": "https://api.github.com/users/str4d/orgs",
        "repos_url": "https://api.github.com/users/str4d/repos",
        "events_url": "https://api.github.com/users/str4d/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/str4d/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2a7ebb3abaff30b247ee06c912e21b6129d140ea",
      "commit_url": "https://api.github.com/repos/str4d/zcash/commits/2a7ebb3abaff30b247ee06c912e21b6129d140ea",
      "created_at": "2021-08-11T23:38:12Z"
    },
    {
      "event": "locked",
      "id": 5271515413,
      "node_id": "LOE_lADOABII584GSciGzwAAAAE6NPEV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271515413",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T10:55:53Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39434359",
      "pull_request_review_id": null,
      "id": 39434359,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0MzU5",
      "diff_hunk": "@@ -466,5 +474,7 @@ static const unsigned int REJECT_HIGHFEE = 0x100;\n static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n /** Transaction conflicts with a transaction already known */\n static const unsigned int REJECT_CONFLICT = 0x102;\n+/** Transaction would result in too long in-mempool chain */\n+static const unsigned int REJECT_LONGCHAIN = 0x103;",
      "path": "src/main.h",
      "position": null,
      "original_position": 20,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will move this to not be an internal code (so we send a reject message back).\n",
      "created_at": "2015-09-14T19:13:25Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39434359",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39434359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39436182",
      "pull_request_review_id": null,
      "id": 39436182,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MTgy",
      "diff_hunk": "@@ -921,6 +921,17 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                 REJECT_HIGHFEE, \"absurdly-high-fee\",\n                 strprintf(\"%d > %d\", nFees, ::minRelayTxFee.GetFee(nSize) * 10000));\n \n+        // Calculate in-mempool ancestors, up to a limit.\n+        CTxMemPool::setEntries setAncestors;\n+        size_t nLimitAncestors = GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        size_t nLimitAncestorSize = GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;",
      "path": "src/main.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As the idea is the ancestor size is set such that the whole string of transactions could be included in a single block, we really want this to be a less than the max block size, as there's always overhead to consider. (e.g. the coinbase, soft-limit, etc)\n\nI'd suggest we set this to 900KB for a 100KB buffer - plenty even in the case of p2pool's large max 50KB coinbase. Another option might be to set it based on the soft-limit - default 750KB - with another 100KB of overhad buffer.\n",
      "created_at": "2015-09-14T19:29:24Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39436182",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39436182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 927,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39437909",
      "pull_request_review_id": null,
      "id": 39437909,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3OTA5",
      "diff_hunk": "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; ",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "trailing whitespace\n",
      "created_at": "2015-09-14T19:45:54Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39437909",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39437909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39438792",
      "pull_request_review_id": null,
      "id": 39438792,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM4Nzky",
      "diff_hunk": "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; \n+\n+    setEntries stageEntries, setAllDescendants;\n+    stageEntries = GetMemPoolChildren(updateIt);\n+\n+    while (!stageEntries.empty()) {\n+        setAllDescendants.insert(stageEntries.begin(), stageEntries.end());\n+\n+        setEntries entriesToAdd;\n+        BOOST_FOREACH(const txiter cit, stageEntries) {\n+            if (cit->IsDirty()) {\n+                // Don't consider any more children if any descendant is dirty\n+                return false;\n+            }\n+            const setEntries &setChildren = GetMemPoolChildren(cit);\n+            BOOST_FOREACH(const txiter childEntry, setChildren) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                        // update visit count only for new child transactions\n+                        // (outside of setExclude and entriesToAdd)\n+                        if (setAllDescendants.insert(cacheEntry).second &&\n+                                !setExclude.count(cacheEntry->GetTx().GetHash()) &&\n+                                !entriesToAdd.count(cacheEntry)) {\n+                            nChildrenToVisit++;\n+                        }\n+                    }\n+                } else if (!setAllDescendants.count(childEntry)) {\n+                    // Try adding to entriesToAdd, and update our visit count\n+                    if (entriesToAdd.insert(childEntry).second && !setExclude.count(childEntry->GetTx().GetHash())) {\n+                        nChildrenToVisit++;\n+                    }\n+                }\n+                if (nChildrenToVisit > maxDescendantsToVisit) {\n+                    return false;\n+                }\n+            }\n+        }\n+        stageEntries = entriesToAdd;\n+    }\n+    // setAllDescendants now contains all in-mempool descendants of updateIt.\n+    // Update and add to cached descendant map\n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+        if (!setExclude.count(cit->GetTx().GetHash())) {\n+            modifySize += cit->GetTxSize();\n+            modifyFee += cit->GetFee();\n+            modifyCount++;\n+            cachedDescendants[updateIt].insert(cit);\n+        }\n+    }\n+    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n+    return true;\n+}\n+\n+// vHashesToUpdate is the set of transaction hashes from a disconnected block\n+// which has been re-added to the mempool.\n+// for each entry, look for descendants that are outside hashesToUpdate, and\n+// add fee/size information for such descendants to the parent.\n+void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n+{\n+    // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n+    // in-vHashesToUpdate transactions, so that we don't have to recalculate\n+    // descendants when we come across a previously seen entry.\n+    cacheMap mapMemPoolDescendantsToUpdate;\n+\n+    // Use a set for lookups into vHashesToUpdate (these entries are already\n+    // accounted for in the state of their ancestors)\n+    std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n+\n+    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // we are sure that all in-mempool descendants have already been processed.\n+    // This maximizes the benefit of the descendant cache and guarantees that\n+    // setMemPoolChildren will be updated, an assumption made in\n+    // UpdateForDescendants.\n+    BOOST_REVERSE_FOREACH(const uint256 &hash, vHashesToUpdate) {\n+        // we cache the in-mempool children to avoid duplicate updates\n+        setEntries setChildren;\n+        // calculate children from mapNextTx\n+        txiter it = mapTx.find(hash);\n+        if (it == mapTx.end()) {\n+            continue;\n+        }\n+        std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n+        // First calculate the children, and update setMemPoolChildren to\n+        // include them, and update their setMemPoolParents to include this tx.\n+        for (; iter != mapNextTx.end() && iter->first.hash == hash; ++iter) {\n+            const uint256 &childHash = iter->second.ptx->GetHash();\n+            txiter childIter = mapTx.find(childHash);\n+            // We can skip updating entries we've encountered before or that\n+            // are in the block (which are already accounted for).\n+            if (setChildren.insert(childIter).second && !setAlreadyIncluded.count(childHash)) {\n+                UpdateChild(it, childIter, true);\n+                UpdateParent(childIter, it, true);\n+            }\n+        }\n+        if (!UpdateForDescendants(it, 100, mapMemPoolDescendantsToUpdate, setAlreadyIncluded)) {\n+            // Mark as dirty if we can't do the calculation.\n+            mapTx.modify(it, set_dirty());\n+        }\n+    }\n+}\n+\n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString)\n+{\n+    setEntries parentHashes;\n+    const CTransaction &tx = entry.GetTx();\n+\n+    // Get parents of this transaction that are in the mempool\n+    // entry may or may not already be in the mempool, so we iterate mapTx\n+    // to find parents, rather than try GetMemPoolParents(entry)\n+    // TODO: optimize this so that we only check limits and walk\n+    // tx.vin when called on entries not already in the mempool.\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        txiter piter = mapTx.find(tx.vin[i].prevout.hash);\n+        if (piter != mapTx.end()) {\n+            parentHashes.insert(piter);\n+            if (parentHashes.size() + 1 > limitAncestorCount) {\n+                errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                return false;\n+            }\n+        }\n+    }\n+\n+    size_t totalSizeWithAncestors = entry.GetTxSize();\n+\n+    while (!parentHashes.empty()) {\n+        setAncestors.insert(parentHashes.begin(), parentHashes.end());\n+        setEntries stageParentSet; ",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 164,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "trailing whitespace\n",
      "created_at": "2015-09-14T19:54:28Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39438792",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39438792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39438992",
      "pull_request_review_id": null,
      "id": 39438992,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM4OTky",
      "diff_hunk": "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; \n+\n+    setEntries stageEntries, setAllDescendants;\n+    stageEntries = GetMemPoolChildren(updateIt);\n+\n+    while (!stageEntries.empty()) {\n+        setAllDescendants.insert(stageEntries.begin(), stageEntries.end());\n+\n+        setEntries entriesToAdd;\n+        BOOST_FOREACH(const txiter cit, stageEntries) {\n+            if (cit->IsDirty()) {\n+                // Don't consider any more children if any descendant is dirty\n+                return false;\n+            }\n+            const setEntries &setChildren = GetMemPoolChildren(cit);\n+            BOOST_FOREACH(const txiter childEntry, setChildren) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                        // update visit count only for new child transactions\n+                        // (outside of setExclude and entriesToAdd)\n+                        if (setAllDescendants.insert(cacheEntry).second &&\n+                                !setExclude.count(cacheEntry->GetTx().GetHash()) &&\n+                                !entriesToAdd.count(cacheEntry)) {\n+                            nChildrenToVisit++;\n+                        }\n+                    }\n+                } else if (!setAllDescendants.count(childEntry)) {\n+                    // Try adding to entriesToAdd, and update our visit count\n+                    if (entriesToAdd.insert(childEntry).second && !setExclude.count(childEntry->GetTx().GetHash())) {\n+                        nChildrenToVisit++;\n+                    }\n+                }\n+                if (nChildrenToVisit > maxDescendantsToVisit) {\n+                    return false;\n+                }\n+            }\n+        }\n+        stageEntries = entriesToAdd;\n+    }\n+    // setAllDescendants now contains all in-mempool descendants of updateIt.\n+    // Update and add to cached descendant map\n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+        if (!setExclude.count(cit->GetTx().GetHash())) {\n+            modifySize += cit->GetTxSize();\n+            modifyFee += cit->GetFee();\n+            modifyCount++;\n+            cachedDescendants[updateIt].insert(cit);\n+        }\n+    }\n+    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n+    return true;\n+}\n+\n+// vHashesToUpdate is the set of transaction hashes from a disconnected block\n+// which has been re-added to the mempool.\n+// for each entry, look for descendants that are outside hashesToUpdate, and\n+// add fee/size information for such descendants to the parent.\n+void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n+{\n+    // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n+    // in-vHashesToUpdate transactions, so that we don't have to recalculate\n+    // descendants when we come across a previously seen entry.\n+    cacheMap mapMemPoolDescendantsToUpdate;\n+\n+    // Use a set for lookups into vHashesToUpdate (these entries are already\n+    // accounted for in the state of their ancestors)\n+    std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n+\n+    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // we are sure that all in-mempool descendants have already been processed.\n+    // This maximizes the benefit of the descendant cache and guarantees that\n+    // setMemPoolChildren will be updated, an assumption made in\n+    // UpdateForDescendants.\n+    BOOST_REVERSE_FOREACH(const uint256 &hash, vHashesToUpdate) {\n+        // we cache the in-mempool children to avoid duplicate updates\n+        setEntries setChildren;\n+        // calculate children from mapNextTx\n+        txiter it = mapTx.find(hash);\n+        if (it == mapTx.end()) {\n+            continue;\n+        }\n+        std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n+        // First calculate the children, and update setMemPoolChildren to\n+        // include them, and update their setMemPoolParents to include this tx.\n+        for (; iter != mapNextTx.end() && iter->first.hash == hash; ++iter) {\n+            const uint256 &childHash = iter->second.ptx->GetHash();\n+            txiter childIter = mapTx.find(childHash);\n+            // We can skip updating entries we've encountered before or that\n+            // are in the block (which are already accounted for).\n+            if (setChildren.insert(childIter).second && !setAlreadyIncluded.count(childHash)) {\n+                UpdateChild(it, childIter, true);\n+                UpdateParent(childIter, it, true);\n+            }\n+        }\n+        if (!UpdateForDescendants(it, 100, mapMemPoolDescendantsToUpdate, setAlreadyIncluded)) {\n+            // Mark as dirty if we can't do the calculation.\n+            mapTx.modify(it, set_dirty());\n+        }\n+    }\n+}\n+\n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString)\n+{\n+    setEntries parentHashes;\n+    const CTransaction &tx = entry.GetTx();\n+\n+    // Get parents of this transaction that are in the mempool\n+    // entry may or may not already be in the mempool, so we iterate mapTx\n+    // to find parents, rather than try GetMemPoolParents(entry)\n+    // TODO: optimize this so that we only check limits and walk\n+    // tx.vin when called on entries not already in the mempool.\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        txiter piter = mapTx.find(tx.vin[i].prevout.hash);\n+        if (piter != mapTx.end()) {\n+            parentHashes.insert(piter);\n+            if (parentHashes.size() + 1 > limitAncestorCount) {\n+                errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                return false;\n+            }\n+        }\n+    }\n+\n+    size_t totalSizeWithAncestors = entry.GetTxSize();\n+\n+    while (!parentHashes.empty()) {\n+        setAncestors.insert(parentHashes.begin(), parentHashes.end());\n+        setEntries stageParentSet; \n+        BOOST_FOREACH(const txiter &stageit, parentHashes) {\n+            assert(stageit != mapTx.end());\n+\n+            totalSizeWithAncestors += stageit->GetTxSize();\n+            if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+                errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantSize);\n+                return false;\n+            } else if (uint64_t(stageit->GetCountWithDescendants() + 1) > limitDescendantCount) {\n+                errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantCount);\n+                return false;\n+            } else if (totalSizeWithAncestors > limitAncestorSize) {\n+                errString = strprintf(\"exceeds ancestor size limit [limit: %u]\", limitAncestorSize);\n+                return false;\n+            }\n+\n+            const setEntries & setMemPoolParents = GetMemPoolParents(stageit);\n+            BOOST_FOREACH(const txiter &phash, setMemPoolParents) {\n+                // If this is a new ancestor, add it.\n+                if (setAncestors.count(phash) == 0) {\n+                    stageParentSet.insert(phash);\n+                }\n+                if (stageParentSet.size() + setAncestors.size() + 1 > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed ancestors [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }    ",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 190,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "trailing whitespace\n",
      "created_at": "2015-09-14T19:56:25Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39438992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39438992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39440454",
      "pull_request_review_id": null,
      "id": 39440454,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwNDU0",
      "diff_hunk": "@@ -89,34 +334,106 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n     nTransactionsUpdated += n;\n }\n \n-\n-bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate)\n+bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate)\n {\n     // Add to memory pool without checking anything.\n     // Used by main.cpp AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n     LOCK(cs);\n-    mapTx[hash] = entry;\n-    const CTransaction& tx = mapTx[hash].GetTx();\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    indexed_transaction_set::iterator newit = mapTx.insert(entry).first;\n+    mapLinks.insert(make_pair(newit, TxLinks()));\n+\n+    // Update cachedInnerUsage to include contained transaction's usage.\n+    // (When we update the entry for in-mempool parents, memory usage will be\n+    // further updated.)\n+    cachedInnerUsage += entry.DynamicMemoryUsage();\n+\n+    const CTransaction& tx = newit->GetTx();\n+    std::set<uint256> setParentTransactions;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);\n+        setParentTransactions.insert(tx.vin[i].prevout.hash);\n+    }\n+    // Don't bother worrying about child transactions of this one.\n+    // Normal case of a new transaction arriving is that there can't be any\n+    // children, because such children would be orphans.\n+    // An exception to that is if a transaction enters that used to be in a block.\n+    // In that case, our disconnect block logic will call UpdateTransactionsFromBlock\n+    // to clean up the mess we're leaving here.\n+\n+    // Update ancestors with information about this tx\n+    BOOST_FOREACH (const uint256 &phash, setParentTransactions) {\n+        txiter pit = mapTx.find(phash);\n+        if (pit != mapTx.end()) {\n+            UpdateParent(newit, pit, true);\n+        }\n+    }\n+    UpdateAncestorsOf(true, hash, setAncestors);\n+\n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n-    cachedInnerUsage += entry.DynamicMemoryUsage();\n     minerPolicyEstimator->processTransaction(entry, fCurrentEstimate);\n \n     return true;\n }\n \n+// TODO: replace this hash with an iterator?\n+void CTxMemPool::removeUnchecked(const uint256& hash)\n+{\n+    indexed_transaction_set::iterator it = mapTx.find(hash);\n+\n+    BOOST_FOREACH(const CTxIn& txin, it->GetTx().vin)\n+        mapNextTx.erase(txin.prevout);\n+\n+    totalTxSize -= it->GetTxSize();\n+    cachedInnerUsage -= it->DynamicMemoryUsage();\n+    cachedInnerUsage -= memusage::DynamicUsage(mapLinks[it].parents) + memusage::DynamicUsage(mapLinks[it].children);\n+    mapLinks.erase(it);\n+    mapTx.erase(it);\n+    nTransactionsUpdated++;\n+    minerPolicyEstimator->removeTx(hash);\n+}\n+\n+// Calculates descendants of hash that are not already in setDescendants, and adds to ",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 338,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "trailing whitespace\n",
      "created_at": "2015-09-14T20:10:06Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39440454",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39440454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39441365",
      "pull_request_review_id": null,
      "id": 39441365,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxMzY1",
      "diff_hunk": "@@ -247,19 +554,23 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n     LOCK(cs);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n-    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n-        checkTotal += it->second.GetTxSize();\n-        innerUsage += it->second.DynamicMemoryUsage();\n-        const CTransaction& tx = it->second.GetTx();\n+        checkTotal += it->GetTxSize();\n+        innerUsage += it->DynamicMemoryUsage(); ",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 476,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "trailing whitespace\n",
      "created_at": "2015-09-14T20:18:35Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39441365",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39441365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39443752",
      "pull_request_review_id": null,
      "id": 39443752,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQzNzUy",
      "diff_hunk": "@@ -138,6 +363,29 @@ class CTxMemPool\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n     void ClearPrioritisation(const uint256 hash);\n \n+public:\n+    void RemoveStaged(std::set<uint256>& stage);",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 304,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Need to document what RemoveStaged() is.\n",
      "created_at": "2015-09-14T20:39:14Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39443752",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39443752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39443903",
      "pull_request_review_id": null,
      "id": 39443903,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQzOTAz",
      "diff_hunk": "@@ -138,6 +363,29 @@ class CTxMemPool\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n     void ClearPrioritisation(const uint256 hash);\n \n+public:\n+    void RemoveStaged(std::set<uint256>& stage);\n+\n+    /** When adding transactions from a disconnected block back to the mempool,\n+     *  new mempool entries may have children in the mempool (which is generally\n+     *  not the case when otherwise adding transactions).\n+     *  UpdateTransactionsFromBlock will find child transactions and update the",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 309,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would prefer if comments like this are written as \"Name()\" rather than just \"Name\" to make it clear what's a variable and what's a function.\n",
      "created_at": "2015-09-14T20:40:29Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39443903",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39443903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39443986",
      "pull_request_review_id": null,
      "id": 39443986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQzOTg2",
      "diff_hunk": "@@ -169,6 +417,48 @@ class CTxMemPool\n     bool ReadFeeEstimates(CAutoFile& filein);\n \n     size_t DynamicMemoryUsage() const;\n+\n+private:\n+    /** UpdateForDescendants is used by UpdateTransactionsFromBlock to update\n+     *  the descendants for a single transaction that has been added to the\n+     *  mempool but may have child transactions in the mempool, eg during a\n+     *  chain reorg.  setExclude is the set of descendant transactions in the",
      "path": "src/txmempool.h",
      "position": 342,
      "original_position": 338,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Double-space after periods? Obvs you're actually Satoshi.\n",
      "created_at": "2015-09-14T20:41:20Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39443986",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39443986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 434,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39444131",
      "pull_request_review_id": null,
      "id": 39444131,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ0MTMx",
      "diff_hunk": "@@ -138,6 +363,29 @@ class CTxMemPool\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n     void ClearPrioritisation(const uint256 hash);\n \n+public:\n+    void RemoveStaged(std::set<uint256>& stage);\n+\n+    /** When adding transactions from a disconnected block back to the mempool,\n+     *  new mempool entries may have children in the mempool (which is generally\n+     *  not the case when otherwise adding transactions).\n+     *  UpdateTransactionsFromBlock will find child transactions and update the\n+     *  descendant state for each transaction in hashesToUpdate (excluding any\n+     *  child transactions present in hashesToUpdate, which are already accounted\n+     *  for).\n+     */",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 313,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This comment doesn't make it clear whether or not transactions in hashesToUpdate are or are not already in the mempool. :)\n",
      "created_at": "2015-09-14T20:42:34Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39444131",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39444131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 385,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39454363",
      "pull_request_review_id": null,
      "id": 39454363,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MzYz",
      "diff_hunk": "@@ -921,6 +921,17 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                 REJECT_HIGHFEE, \"absurdly-high-fee\",\n                 strprintf(\"%d > %d\", nFees, ::minRelayTxFee.GetFee(nSize) * 10000));\n \n+        // Calculate in-mempool ancestors, up to a limit.\n+        CTxMemPool::setEntries setAncestors;\n+        size_t nLimitAncestors = GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);",
      "path": "src/main.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Using `GetArg` (an application level function) in mempool code feels a bit odd.\n",
      "created_at": "2015-09-14T22:14:48Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39454363",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39454363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 926,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455254",
      "pull_request_review_id": null,
      "id": 39455254,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1MjU0",
      "diff_hunk": "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; \n+\n+    setEntries stageEntries, setAllDescendants;\n+    stageEntries = GetMemPoolChildren(updateIt);\n+\n+    while (!stageEntries.empty()) {\n+        setAllDescendants.insert(stageEntries.begin(), stageEntries.end());\n+\n+        setEntries entriesToAdd;\n+        BOOST_FOREACH(const txiter cit, stageEntries) {\n+            if (cit->IsDirty()) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Dirty implies something changed typically,  perhaps instead change this to `ShouldSkip`?\n",
      "created_at": "2015-09-14T22:25:48Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39455254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455495",
      "pull_request_review_id": null,
      "id": 39455495,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1NDk1",
      "diff_hunk": "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; \n+\n+    setEntries stageEntries, setAllDescendants;\n+    stageEntries = GetMemPoolChildren(updateIt);\n+\n+    while (!stageEntries.empty()) {\n+        setAllDescendants.insert(stageEntries.begin(), stageEntries.end());\n+\n+        setEntries entriesToAdd;\n+        BOOST_FOREACH(const txiter cit, stageEntries) {\n+            if (cit->IsDirty()) {\n+                // Don't consider any more children if any descendant is dirty\n+                return false;\n+            }\n+            const setEntries &setChildren = GetMemPoolChildren(cit);\n+            BOOST_FOREACH(const txiter childEntry, setChildren) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                        // update visit count only for new child transactions\n+                        // (outside of setExclude and entriesToAdd)\n+                        if (setAllDescendants.insert(cacheEntry).second &&\n+                                !setExclude.count(cacheEntry->GetTx().GetHash()) &&\n+                                !entriesToAdd.count(cacheEntry)) {\n+                            nChildrenToVisit++;\n+                        }\n+                    }\n+                } else if (!setAllDescendants.count(childEntry)) {\n+                    // Try adding to entriesToAdd, and update our visit count\n+                    if (entriesToAdd.insert(childEntry).second && !setExclude.count(childEntry->GetTx().GetHash())) {\n+                        nChildrenToVisit++;\n+                    }\n+                }\n+                if (nChildrenToVisit > maxDescendantsToVisit) {\n+                    return false;\n+                }\n+            }\n+        }\n+        stageEntries = entriesToAdd;\n+    }\n+    // setAllDescendants now contains all in-mempool descendants of updateIt.\n+    // Update and add to cached descendant map\n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+        if (!setExclude.count(cit->GetTx().GetHash())) {\n+            modifySize += cit->GetTxSize();\n+            modifyFee += cit->GetFee();\n+            modifyCount++;\n+            cachedDescendants[updateIt].insert(cit);\n+        }\n+    }\n+    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n+    return true;\n+}\n+\n+// vHashesToUpdate is the set of transaction hashes from a disconnected block\n+// which has been re-added to the mempool.\n+// for each entry, look for descendants that are outside hashesToUpdate, and\n+// add fee/size information for such descendants to the parent.\n+void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n+{\n+    // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n+    // in-vHashesToUpdate transactions, so that we don't have to recalculate\n+    // descendants when we come across a previously seen entry.\n+    cacheMap mapMemPoolDescendantsToUpdate;\n+\n+    // Use a set for lookups into vHashesToUpdate (these entries are already\n+    // accounted for in the state of their ancestors)\n+    std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n+\n+    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // we are sure that all in-mempool descendants have already been processed.\n+    // This maximizes the benefit of the descendant cache and guarantees that\n+    // setMemPoolChildren will be updated, an assumption made in\n+    // UpdateForDescendants.\n+    BOOST_REVERSE_FOREACH(const uint256 &hash, vHashesToUpdate) {\n+        // we cache the in-mempool children to avoid duplicate updates\n+        setEntries setChildren;\n+        // calculate children from mapNextTx\n+        txiter it = mapTx.find(hash);\n+        if (it == mapTx.end()) {\n+            continue;\n+        }\n+        std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n+        // First calculate the children, and update setMemPoolChildren to\n+        // include them, and update their setMemPoolParents to include this tx.\n+        for (; iter != mapNextTx.end() && iter->first.hash == hash; ++iter) {\n+            const uint256 &childHash = iter->second.ptx->GetHash();\n+            txiter childIter = mapTx.find(childHash);",
      "path": "src/txmempool.cpp",
      "position": 125,
      "original_position": 124,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we need to check `childIter == mapTx.end()`?\n",
      "created_at": "2015-09-14T22:28:43Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39455495",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455549",
      "pull_request_review_id": null,
      "id": 39455549,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1NTQ5",
      "diff_hunk": "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; \n+\n+    setEntries stageEntries, setAllDescendants;\n+    stageEntries = GetMemPoolChildren(updateIt);\n+\n+    while (!stageEntries.empty()) {\n+        setAllDescendants.insert(stageEntries.begin(), stageEntries.end());\n+\n+        setEntries entriesToAdd;\n+        BOOST_FOREACH(const txiter cit, stageEntries) {\n+            if (cit->IsDirty()) {\n+                // Don't consider any more children if any descendant is dirty\n+                return false;\n+            }\n+            const setEntries &setChildren = GetMemPoolChildren(cit);\n+            BOOST_FOREACH(const txiter childEntry, setChildren) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                        // update visit count only for new child transactions\n+                        // (outside of setExclude and entriesToAdd)\n+                        if (setAllDescendants.insert(cacheEntry).second &&\n+                                !setExclude.count(cacheEntry->GetTx().GetHash()) &&\n+                                !entriesToAdd.count(cacheEntry)) {\n+                            nChildrenToVisit++;\n+                        }\n+                    }\n+                } else if (!setAllDescendants.count(childEntry)) {\n+                    // Try adding to entriesToAdd, and update our visit count\n+                    if (entriesToAdd.insert(childEntry).second && !setExclude.count(childEntry->GetTx().GetHash())) {\n+                        nChildrenToVisit++;\n+                    }\n+                }\n+                if (nChildrenToVisit > maxDescendantsToVisit) {\n+                    return false;\n+                }\n+            }\n+        }\n+        stageEntries = entriesToAdd;\n+    }\n+    // setAllDescendants now contains all in-mempool descendants of updateIt.\n+    // Update and add to cached descendant map\n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+        if (!setExclude.count(cit->GetTx().GetHash())) {\n+            modifySize += cit->GetTxSize();\n+            modifyFee += cit->GetFee();\n+            modifyCount++;\n+            cachedDescendants[updateIt].insert(cit);\n+        }\n+    }\n+    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n+    return true;\n+}\n+\n+// vHashesToUpdate is the set of transaction hashes from a disconnected block\n+// which has been re-added to the mempool.\n+// for each entry, look for descendants that are outside hashesToUpdate, and\n+// add fee/size information for such descendants to the parent.\n+void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n+{\n+    // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n+    // in-vHashesToUpdate transactions, so that we don't have to recalculate\n+    // descendants when we come across a previously seen entry.\n+    cacheMap mapMemPoolDescendantsToUpdate;\n+\n+    // Use a set for lookups into vHashesToUpdate (these entries are already\n+    // accounted for in the state of their ancestors)\n+    std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n+\n+    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // we are sure that all in-mempool descendants have already been processed.\n+    // This maximizes the benefit of the descendant cache and guarantees that\n+    // setMemPoolChildren will be updated, an assumption made in\n+    // UpdateForDescendants.\n+    BOOST_REVERSE_FOREACH(const uint256 &hash, vHashesToUpdate) {\n+        // we cache the in-mempool children to avoid duplicate updates\n+        setEntries setChildren;\n+        // calculate children from mapNextTx\n+        txiter it = mapTx.find(hash);\n+        if (it == mapTx.end()) {\n+            continue;\n+        }\n+        std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n+        // First calculate the children, and update setMemPoolChildren to\n+        // include them, and update their setMemPoolParents to include this tx.\n+        for (; iter != mapNextTx.end() && iter->first.hash == hash; ++iter) {\n+            const uint256 &childHash = iter->second.ptx->GetHash();\n+            txiter childIter = mapTx.find(childHash);\n+            // We can skip updating entries we've encountered before or that\n+            // are in the block (which are already accounted for).\n+            if (setChildren.insert(childIter).second && !setAlreadyIncluded.count(childHash)) {\n+                UpdateChild(it, childIter, true);\n+                UpdateParent(childIter, it, true);\n+            }\n+        }\n+        if (!UpdateForDescendants(it, 100, mapMemPoolDescendantsToUpdate, setAlreadyIncluded)) {\n+            // Mark as dirty if we can't do the calculation.\n+            mapTx.modify(it, set_dirty());\n+        }\n+    }\n+}\n+\n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString)\n+{\n+    setEntries parentHashes;\n+    const CTransaction &tx = entry.GetTx();\n+\n+    // Get parents of this transaction that are in the mempool\n+    // entry may or may not already be in the mempool, so we iterate mapTx\n+    // to find parents, rather than try GetMemPoolParents(entry)\n+    // TODO: optimize this so that we only check limits and walk\n+    // tx.vin when called on entries not already in the mempool.\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        txiter piter = mapTx.find(tx.vin[i].prevout.hash);\n+        if (piter != mapTx.end()) {\n+            parentHashes.insert(piter);\n+            if (parentHashes.size() + 1 > limitAncestorCount) {\n+                errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                return false;\n+            }\n+        }\n+    }\n+\n+    size_t totalSizeWithAncestors = entry.GetTxSize();\n+\n+    while (!parentHashes.empty()) {\n+        setAncestors.insert(parentHashes.begin(), parentHashes.end());\n+        setEntries stageParentSet; \n+        BOOST_FOREACH(const txiter &stageit, parentHashes) {\n+            assert(stageit != mapTx.end());\n+\n+            totalSizeWithAncestors += stageit->GetTxSize();\n+            if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+                errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantSize);\n+                return false;\n+            } else if (uint64_t(stageit->GetCountWithDescendants() + 1) > limitDescendantCount) {\n+                errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantCount);\n+                return false;\n+            } else if (totalSizeWithAncestors > limitAncestorSize) {\n+                errString = strprintf(\"exceeds ancestor size limit [limit: %u]\", limitAncestorSize);\n+                return false;\n+            }\n+\n+            const setEntries & setMemPoolParents = GetMemPoolParents(stageit);\n+            BOOST_FOREACH(const txiter &phash, setMemPoolParents) {\n+                // If this is a new ancestor, add it.\n+                if (setAncestors.count(phash) == 0) {\n+                    stageParentSet.insert(phash);\n+                }\n+                if (stageParentSet.size() + setAncestors.size() + 1 > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed ancestors [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }    \n+        }\n+        parentHashes = stageParentSet;\n+    }\n+\n+    return true;\n+}\n+\n+void CTxMemPool::UpdateAncestorsOf(bool add, const uint256 &hash, setEntries &setAncestors)\n+{\n+    indexed_transaction_set::iterator it = mapTx.find(hash);\n+    setEntries parentIters = GetMemPoolParents(it);\n+    // add or remove this tx as a child of each parent\n+    BOOST_FOREACH(txiter piter, parentIters) {\n+        UpdateChild(piter, it, add);\n+    }\n+    int64_t updateCount = (add ? 1 : -1);\n+    int64_t updateSize = updateCount * it->GetTxSize();\n+    CAmount updateFee = updateCount * it->GetFee();\n+    BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+        mapTx.modify(ancestorIt, update_descendant_state(updateSize, updateFee, updateCount));\n+    }\n+}\n+\n+// TODO: pass a txiter instead?\n+void CTxMemPool::UpdateChildrenForRemoval(const uint256 &hash)\n+{\n+    txiter it = mapTx.find(hash);\n+    const setEntries &setMemPoolChildren = GetMemPoolChildren(it);\n+    BOOST_FOREACH(txiter updateIt, setMemPoolChildren) {\n+        UpdateParent(updateIt, it, false);\n+    }\n+}\n+\n+void CTxMemPool::UpdateForRemoveFromMempool(const std::set<uint256> &hashesToRemove)\n+{\n+    // For each entry, walk back all ancestors and decrement size associated with this\n+    // transaction\n+    uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 228,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`const`?\n",
      "created_at": "2015-09-14T22:29:23Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39455549",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455549"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455606",
      "pull_request_review_id": null,
      "id": 39455606,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1NjA2",
      "diff_hunk": "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; \n+\n+    setEntries stageEntries, setAllDescendants;\n+    stageEntries = GetMemPoolChildren(updateIt);\n+\n+    while (!stageEntries.empty()) {\n+        setAllDescendants.insert(stageEntries.begin(), stageEntries.end());\n+\n+        setEntries entriesToAdd;\n+        BOOST_FOREACH(const txiter cit, stageEntries) {\n+            if (cit->IsDirty()) {\n+                // Don't consider any more children if any descendant is dirty\n+                return false;\n+            }\n+            const setEntries &setChildren = GetMemPoolChildren(cit);\n+            BOOST_FOREACH(const txiter childEntry, setChildren) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                        // update visit count only for new child transactions\n+                        // (outside of setExclude and entriesToAdd)\n+                        if (setAllDescendants.insert(cacheEntry).second &&\n+                                !setExclude.count(cacheEntry->GetTx().GetHash()) &&\n+                                !entriesToAdd.count(cacheEntry)) {\n+                            nChildrenToVisit++;\n+                        }\n+                    }\n+                } else if (!setAllDescendants.count(childEntry)) {\n+                    // Try adding to entriesToAdd, and update our visit count\n+                    if (entriesToAdd.insert(childEntry).second && !setExclude.count(childEntry->GetTx().GetHash())) {\n+                        nChildrenToVisit++;\n+                    }\n+                }\n+                if (nChildrenToVisit > maxDescendantsToVisit) {\n+                    return false;\n+                }\n+            }\n+        }\n+        stageEntries = entriesToAdd;\n+    }\n+    // setAllDescendants now contains all in-mempool descendants of updateIt.\n+    // Update and add to cached descendant map\n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+        if (!setExclude.count(cit->GetTx().GetHash())) {\n+            modifySize += cit->GetTxSize();\n+            modifyFee += cit->GetFee();\n+            modifyCount++;\n+            cachedDescendants[updateIt].insert(cit);\n+        }\n+    }\n+    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n+    return true;\n+}\n+\n+// vHashesToUpdate is the set of transaction hashes from a disconnected block\n+// which has been re-added to the mempool.\n+// for each entry, look for descendants that are outside hashesToUpdate, and\n+// add fee/size information for such descendants to the parent.\n+void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n+{\n+    // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n+    // in-vHashesToUpdate transactions, so that we don't have to recalculate\n+    // descendants when we come across a previously seen entry.\n+    cacheMap mapMemPoolDescendantsToUpdate;\n+\n+    // Use a set for lookups into vHashesToUpdate (these entries are already\n+    // accounted for in the state of their ancestors)\n+    std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n+\n+    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // we are sure that all in-mempool descendants have already been processed.\n+    // This maximizes the benefit of the descendant cache and guarantees that\n+    // setMemPoolChildren will be updated, an assumption made in\n+    // UpdateForDescendants.\n+    BOOST_REVERSE_FOREACH(const uint256 &hash, vHashesToUpdate) {\n+        // we cache the in-mempool children to avoid duplicate updates\n+        setEntries setChildren;\n+        // calculate children from mapNextTx\n+        txiter it = mapTx.find(hash);\n+        if (it == mapTx.end()) {\n+            continue;\n+        }\n+        std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n+        // First calculate the children, and update setMemPoolChildren to\n+        // include them, and update their setMemPoolParents to include this tx.\n+        for (; iter != mapNextTx.end() && iter->first.hash == hash; ++iter) {\n+            const uint256 &childHash = iter->second.ptx->GetHash();\n+            txiter childIter = mapTx.find(childHash);\n+            // We can skip updating entries we've encountered before or that\n+            // are in the block (which are already accounted for).\n+            if (setChildren.insert(childIter).second && !setAlreadyIncluded.count(childHash)) {\n+                UpdateChild(it, childIter, true);\n+                UpdateParent(childIter, it, true);\n+            }\n+        }\n+        if (!UpdateForDescendants(it, 100, mapMemPoolDescendantsToUpdate, setAlreadyIncluded)) {\n+            // Mark as dirty if we can't do the calculation.\n+            mapTx.modify(it, set_dirty());\n+        }\n+    }\n+}\n+\n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString)\n+{\n+    setEntries parentHashes;\n+    const CTransaction &tx = entry.GetTx();\n+\n+    // Get parents of this transaction that are in the mempool\n+    // entry may or may not already be in the mempool, so we iterate mapTx\n+    // to find parents, rather than try GetMemPoolParents(entry)\n+    // TODO: optimize this so that we only check limits and walk\n+    // tx.vin when called on entries not already in the mempool.\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        txiter piter = mapTx.find(tx.vin[i].prevout.hash);\n+        if (piter != mapTx.end()) {\n+            parentHashes.insert(piter);\n+            if (parentHashes.size() + 1 > limitAncestorCount) {\n+                errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                return false;\n+            }\n+        }\n+    }\n+\n+    size_t totalSizeWithAncestors = entry.GetTxSize();\n+\n+    while (!parentHashes.empty()) {\n+        setAncestors.insert(parentHashes.begin(), parentHashes.end());\n+        setEntries stageParentSet; \n+        BOOST_FOREACH(const txiter &stageit, parentHashes) {\n+            assert(stageit != mapTx.end());\n+\n+            totalSizeWithAncestors += stageit->GetTxSize();\n+            if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+                errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantSize);\n+                return false;\n+            } else if (uint64_t(stageit->GetCountWithDescendants() + 1) > limitDescendantCount) {\n+                errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantCount);\n+                return false;\n+            } else if (totalSizeWithAncestors > limitAncestorSize) {\n+                errString = strprintf(\"exceeds ancestor size limit [limit: %u]\", limitAncestorSize);\n+                return false;\n+            }\n+\n+            const setEntries & setMemPoolParents = GetMemPoolParents(stageit);\n+            BOOST_FOREACH(const txiter &phash, setMemPoolParents) {\n+                // If this is a new ancestor, add it.\n+                if (setAncestors.count(phash) == 0) {\n+                    stageParentSet.insert(phash);\n+                }\n+                if (stageParentSet.size() + setAncestors.size() + 1 > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed ancestors [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }    \n+        }\n+        parentHashes = stageParentSet;\n+    }\n+\n+    return true;\n+}\n+\n+void CTxMemPool::UpdateAncestorsOf(bool add, const uint256 &hash, setEntries &setAncestors)\n+{\n+    indexed_transaction_set::iterator it = mapTx.find(hash);\n+    setEntries parentIters = GetMemPoolParents(it);\n+    // add or remove this tx as a child of each parent\n+    BOOST_FOREACH(txiter piter, parentIters) {\n+        UpdateChild(piter, it, add);\n+    }\n+    int64_t updateCount = (add ? 1 : -1);\n+    int64_t updateSize = updateCount * it->GetTxSize();\n+    CAmount updateFee = updateCount * it->GetFee();\n+    BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+        mapTx.modify(ancestorIt, update_descendant_state(updateSize, updateFee, updateCount));\n+    }\n+}\n+\n+// TODO: pass a txiter instead?\n+void CTxMemPool::UpdateChildrenForRemoval(const uint256 &hash)\n+{\n+    txiter it = mapTx.find(hash);\n+    const setEntries &setMemPoolChildren = GetMemPoolChildren(it);\n+    BOOST_FOREACH(txiter updateIt, setMemPoolChildren) {\n+        UpdateParent(updateIt, it, false);\n+    }\n+}\n+\n+void CTxMemPool::UpdateForRemoveFromMempool(const std::set<uint256> &hashesToRemove)\n+{\n+    // For each entry, walk back all ancestors and decrement size associated with this\n+    // transaction\n+    uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n+    BOOST_FOREACH(const uint256& removeHash, hashesToRemove) {\n+        setEntries setAncestors;\n+        const CTxMemPoolEntry &entry = *mapTx.find(removeHash);\n+        std::string dummy;\n+        CalculateMemPoolAncestors(entry, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy);\n+        // Note that UpdateAncestorsOf severs the child links that point to\n+        // removeHash in the entries for the parents of removeHash.  This is\n+        // fine since we don't need to use the mempool children of any entries\n+        // to walk back over our ancestors (but we do need the mempool\n+        // parents!)\n+        UpdateAncestorsOf(false, removeHash, setAncestors);\n+    }\n+    // After updating all the ancestor sizes, we can now sever the link between each\n+    // transaction being removed and any mempool children (ie, update setMemPoolParents\n+    // for each direct child of a transaction being removed).\n+    BOOST_FOREACH(const uint256& removeHash, hashesToRemove) {\n+        UpdateChildrenForRemoval(removeHash);\n+    }\n+}\n+\n+void CTxMemPoolEntry::SetDirty()\n+{\n+    nCountWithDescendants=0;\n+    nSizeWithDescendants=nTxSize;\n+    nFeesWithDescendants=nFee;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 253,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Spacing between operators\n",
      "created_at": "2015-09-14T22:29:51Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39455606",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455793",
      "pull_request_review_id": null,
      "id": 39455793,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1Nzkz",
      "diff_hunk": "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; \n+\n+    setEntries stageEntries, setAllDescendants;\n+    stageEntries = GetMemPoolChildren(updateIt);\n+\n+    while (!stageEntries.empty()) {\n+        setAllDescendants.insert(stageEntries.begin(), stageEntries.end());\n+\n+        setEntries entriesToAdd;\n+        BOOST_FOREACH(const txiter cit, stageEntries) {\n+            if (cit->IsDirty()) {\n+                // Don't consider any more children if any descendant is dirty\n+                return false;\n+            }\n+            const setEntries &setChildren = GetMemPoolChildren(cit);\n+            BOOST_FOREACH(const txiter childEntry, setChildren) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                        // update visit count only for new child transactions\n+                        // (outside of setExclude and entriesToAdd)\n+                        if (setAllDescendants.insert(cacheEntry).second &&\n+                                !setExclude.count(cacheEntry->GetTx().GetHash()) &&\n+                                !entriesToAdd.count(cacheEntry)) {\n+                            nChildrenToVisit++;\n+                        }\n+                    }\n+                } else if (!setAllDescendants.count(childEntry)) {\n+                    // Try adding to entriesToAdd, and update our visit count\n+                    if (entriesToAdd.insert(childEntry).second && !setExclude.count(childEntry->GetTx().GetHash())) {\n+                        nChildrenToVisit++;\n+                    }\n+                }\n+                if (nChildrenToVisit > maxDescendantsToVisit) {\n+                    return false;\n+                }\n+            }\n+        }\n+        stageEntries = entriesToAdd;\n+    }\n+    // setAllDescendants now contains all in-mempool descendants of updateIt.\n+    // Update and add to cached descendant map\n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+        if (!setExclude.count(cit->GetTx().GetHash())) {\n+            modifySize += cit->GetTxSize();\n+            modifyFee += cit->GetFee();\n+            modifyCount++;\n+            cachedDescendants[updateIt].insert(cit);\n+        }\n+    }\n+    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n+    return true;\n+}\n+\n+// vHashesToUpdate is the set of transaction hashes from a disconnected block\n+// which has been re-added to the mempool.\n+// for each entry, look for descendants that are outside hashesToUpdate, and\n+// add fee/size information for such descendants to the parent.\n+void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n+{\n+    // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n+    // in-vHashesToUpdate transactions, so that we don't have to recalculate\n+    // descendants when we come across a previously seen entry.\n+    cacheMap mapMemPoolDescendantsToUpdate;\n+\n+    // Use a set for lookups into vHashesToUpdate (these entries are already\n+    // accounted for in the state of their ancestors)\n+    std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n+\n+    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // we are sure that all in-mempool descendants have already been processed.\n+    // This maximizes the benefit of the descendant cache and guarantees that\n+    // setMemPoolChildren will be updated, an assumption made in\n+    // UpdateForDescendants.\n+    BOOST_REVERSE_FOREACH(const uint256 &hash, vHashesToUpdate) {\n+        // we cache the in-mempool children to avoid duplicate updates\n+        setEntries setChildren;\n+        // calculate children from mapNextTx\n+        txiter it = mapTx.find(hash);\n+        if (it == mapTx.end()) {\n+            continue;\n+        }\n+        std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n+        // First calculate the children, and update setMemPoolChildren to\n+        // include them, and update their setMemPoolParents to include this tx.\n+        for (; iter != mapNextTx.end() && iter->first.hash == hash; ++iter) {\n+            const uint256 &childHash = iter->second.ptx->GetHash();\n+            txiter childIter = mapTx.find(childHash);\n+            // We can skip updating entries we've encountered before or that\n+            // are in the block (which are already accounted for).\n+            if (setChildren.insert(childIter).second && !setAlreadyIncluded.count(childHash)) {\n+                UpdateChild(it, childIter, true);\n+                UpdateParent(childIter, it, true);\n+            }\n+        }\n+        if (!UpdateForDescendants(it, 100, mapMemPoolDescendantsToUpdate, setAlreadyIncluded)) {\n+            // Mark as dirty if we can't do the calculation.\n+            mapTx.modify(it, set_dirty());\n+        }\n+    }\n+}\n+\n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString)\n+{\n+    setEntries parentHashes;\n+    const CTransaction &tx = entry.GetTx();\n+\n+    // Get parents of this transaction that are in the mempool\n+    // entry may or may not already be in the mempool, so we iterate mapTx\n+    // to find parents, rather than try GetMemPoolParents(entry)\n+    // TODO: optimize this so that we only check limits and walk\n+    // tx.vin when called on entries not already in the mempool.\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        txiter piter = mapTx.find(tx.vin[i].prevout.hash);\n+        if (piter != mapTx.end()) {\n+            parentHashes.insert(piter);\n+            if (parentHashes.size() + 1 > limitAncestorCount) {\n+                errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                return false;\n+            }\n+        }\n+    }\n+\n+    size_t totalSizeWithAncestors = entry.GetTxSize();\n+\n+    while (!parentHashes.empty()) {\n+        setAncestors.insert(parentHashes.begin(), parentHashes.end());\n+        setEntries stageParentSet; \n+        BOOST_FOREACH(const txiter &stageit, parentHashes) {\n+            assert(stageit != mapTx.end());\n+\n+            totalSizeWithAncestors += stageit->GetTxSize();\n+            if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+                errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantSize);\n+                return false;\n+            } else if (uint64_t(stageit->GetCountWithDescendants() + 1) > limitDescendantCount) {\n+                errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantCount);\n+                return false;\n+            } else if (totalSizeWithAncestors > limitAncestorSize) {\n+                errString = strprintf(\"exceeds ancestor size limit [limit: %u]\", limitAncestorSize);\n+                return false;\n+            }\n+\n+            const setEntries & setMemPoolParents = GetMemPoolParents(stageit);\n+            BOOST_FOREACH(const txiter &phash, setMemPoolParents) {\n+                // If this is a new ancestor, add it.\n+                if (setAncestors.count(phash) == 0) {\n+                    stageParentSet.insert(phash);\n+                }\n+                if (stageParentSet.size() + setAncestors.size() + 1 > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed ancestors [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }    \n+        }\n+        parentHashes = stageParentSet;\n+    }\n+\n+    return true;\n+}\n+\n+void CTxMemPool::UpdateAncestorsOf(bool add, const uint256 &hash, setEntries &setAncestors)\n+{\n+    indexed_transaction_set::iterator it = mapTx.find(hash);\n+    setEntries parentIters = GetMemPoolParents(it);\n+    // add or remove this tx as a child of each parent\n+    BOOST_FOREACH(txiter piter, parentIters) {\n+        UpdateChild(piter, it, add);\n+    }\n+    int64_t updateCount = (add ? 1 : -1);\n+    int64_t updateSize = updateCount * it->GetTxSize();\n+    CAmount updateFee = updateCount * it->GetFee();",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 208,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `const` on these?\n",
      "created_at": "2015-09-14T22:32:20Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39455793",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455846",
      "pull_request_review_id": null,
      "id": 39455846,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1ODQ2",
      "diff_hunk": "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; \n+\n+    setEntries stageEntries, setAllDescendants;\n+    stageEntries = GetMemPoolChildren(updateIt);\n+\n+    while (!stageEntries.empty()) {\n+        setAllDescendants.insert(stageEntries.begin(), stageEntries.end());\n+\n+        setEntries entriesToAdd;\n+        BOOST_FOREACH(const txiter cit, stageEntries) {\n+            if (cit->IsDirty()) {\n+                // Don't consider any more children if any descendant is dirty\n+                return false;\n+            }\n+            const setEntries &setChildren = GetMemPoolChildren(cit);\n+            BOOST_FOREACH(const txiter childEntry, setChildren) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                        // update visit count only for new child transactions\n+                        // (outside of setExclude and entriesToAdd)\n+                        if (setAllDescendants.insert(cacheEntry).second &&\n+                                !setExclude.count(cacheEntry->GetTx().GetHash()) &&\n+                                !entriesToAdd.count(cacheEntry)) {\n+                            nChildrenToVisit++;\n+                        }\n+                    }\n+                } else if (!setAllDescendants.count(childEntry)) {\n+                    // Try adding to entriesToAdd, and update our visit count\n+                    if (entriesToAdd.insert(childEntry).second && !setExclude.count(childEntry->GetTx().GetHash())) {\n+                        nChildrenToVisit++;\n+                    }\n+                }\n+                if (nChildrenToVisit > maxDescendantsToVisit) {\n+                    return false;\n+                }\n+            }\n+        }\n+        stageEntries = entriesToAdd;\n+    }\n+    // setAllDescendants now contains all in-mempool descendants of updateIt.\n+    // Update and add to cached descendant map\n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+        if (!setExclude.count(cit->GetTx().GetHash())) {\n+            modifySize += cit->GetTxSize();\n+            modifyFee += cit->GetFee();\n+            modifyCount++;\n+            cachedDescendants[updateIt].insert(cit);\n+        }\n+    }\n+    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n+    return true;\n+}\n+\n+// vHashesToUpdate is the set of transaction hashes from a disconnected block\n+// which has been re-added to the mempool.\n+// for each entry, look for descendants that are outside hashesToUpdate, and\n+// add fee/size information for such descendants to the parent.\n+void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n+{\n+    // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n+    // in-vHashesToUpdate transactions, so that we don't have to recalculate\n+    // descendants when we come across a previously seen entry.\n+    cacheMap mapMemPoolDescendantsToUpdate;\n+\n+    // Use a set for lookups into vHashesToUpdate (these entries are already\n+    // accounted for in the state of their ancestors)\n+    std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n+\n+    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // we are sure that all in-mempool descendants have already been processed.\n+    // This maximizes the benefit of the descendant cache and guarantees that\n+    // setMemPoolChildren will be updated, an assumption made in\n+    // UpdateForDescendants.\n+    BOOST_REVERSE_FOREACH(const uint256 &hash, vHashesToUpdate) {\n+        // we cache the in-mempool children to avoid duplicate updates\n+        setEntries setChildren;\n+        // calculate children from mapNextTx\n+        txiter it = mapTx.find(hash);\n+        if (it == mapTx.end()) {\n+            continue;\n+        }\n+        std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n+        // First calculate the children, and update setMemPoolChildren to\n+        // include them, and update their setMemPoolParents to include this tx.\n+        for (; iter != mapNextTx.end() && iter->first.hash == hash; ++iter) {\n+            const uint256 &childHash = iter->second.ptx->GetHash();\n+            txiter childIter = mapTx.find(childHash);\n+            // We can skip updating entries we've encountered before or that\n+            // are in the block (which are already accounted for).\n+            if (setChildren.insert(childIter).second && !setAlreadyIncluded.count(childHash)) {\n+                UpdateChild(it, childIter, true);\n+                UpdateParent(childIter, it, true);\n+            }\n+        }\n+        if (!UpdateForDescendants(it, 100, mapMemPoolDescendantsToUpdate, setAlreadyIncluded)) {\n+            // Mark as dirty if we can't do the calculation.\n+            mapTx.modify(it, set_dirty());\n+        }\n+    }\n+}\n+\n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString)\n+{\n+    setEntries parentHashes;\n+    const CTransaction &tx = entry.GetTx();\n+\n+    // Get parents of this transaction that are in the mempool\n+    // entry may or may not already be in the mempool, so we iterate mapTx\n+    // to find parents, rather than try GetMemPoolParents(entry)\n+    // TODO: optimize this so that we only check limits and walk\n+    // tx.vin when called on entries not already in the mempool.\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        txiter piter = mapTx.find(tx.vin[i].prevout.hash);\n+        if (piter != mapTx.end()) {\n+            parentHashes.insert(piter);\n+            if (parentHashes.size() + 1 > limitAncestorCount) {\n+                errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                return false;\n+            }\n+        }\n+    }\n+\n+    size_t totalSizeWithAncestors = entry.GetTxSize();\n+\n+    while (!parentHashes.empty()) {\n+        setAncestors.insert(parentHashes.begin(), parentHashes.end());\n+        setEntries stageParentSet; \n+        BOOST_FOREACH(const txiter &stageit, parentHashes) {\n+            assert(stageit != mapTx.end());\n+\n+            totalSizeWithAncestors += stageit->GetTxSize();\n+            if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+                errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantSize);\n+                return false;\n+            } else if (uint64_t(stageit->GetCountWithDescendants() + 1) > limitDescendantCount) {\n+                errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantCount);\n+                return false;\n+            } else if (totalSizeWithAncestors > limitAncestorSize) {\n+                errString = strprintf(\"exceeds ancestor size limit [limit: %u]\", limitAncestorSize);\n+                return false;\n+            }\n+\n+            const setEntries & setMemPoolParents = GetMemPoolParents(stageit);\n+            BOOST_FOREACH(const txiter &phash, setMemPoolParents) {\n+                // If this is a new ancestor, add it.\n+                if (setAncestors.count(phash) == 0) {\n+                    stageParentSet.insert(phash);\n+                }\n+                if (stageParentSet.size() + setAncestors.size() + 1 > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed ancestors [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }    \n+        }\n+        parentHashes = stageParentSet;\n+    }\n+\n+    return true;\n+}\n+\n+void CTxMemPool::UpdateAncestorsOf(bool add, const uint256 &hash, setEntries &setAncestors)\n+{\n+    indexed_transaction_set::iterator it = mapTx.find(hash);\n+    setEntries parentIters = GetMemPoolParents(it);\n+    // add or remove this tx as a child of each parent\n+    BOOST_FOREACH(txiter piter, parentIters) {\n+        UpdateChild(piter, it, add);\n+    }\n+    int64_t updateCount = (add ? 1 : -1);\n+    int64_t updateSize = updateCount * it->GetTxSize();\n+    CAmount updateFee = updateCount * it->GetFee();\n+    BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+        mapTx.modify(ancestorIt, update_descendant_state(updateSize, updateFee, updateCount));\n+    }\n+}\n+\n+// TODO: pass a txiter instead?\n+void CTxMemPool::UpdateChildrenForRemoval(const uint256 &hash)\n+{\n+    txiter it = mapTx.find(hash);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 217,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Check/assert `it == mapTx.end()`?\n",
      "created_at": "2015-09-14T22:33:09Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39455846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455889",
      "pull_request_review_id": null,
      "id": 39455889,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1ODg5",
      "diff_hunk": "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; \n+\n+    setEntries stageEntries, setAllDescendants;\n+    stageEntries = GetMemPoolChildren(updateIt);\n+\n+    while (!stageEntries.empty()) {\n+        setAllDescendants.insert(stageEntries.begin(), stageEntries.end());\n+\n+        setEntries entriesToAdd;\n+        BOOST_FOREACH(const txiter cit, stageEntries) {\n+            if (cit->IsDirty()) {\n+                // Don't consider any more children if any descendant is dirty\n+                return false;\n+            }\n+            const setEntries &setChildren = GetMemPoolChildren(cit);\n+            BOOST_FOREACH(const txiter childEntry, setChildren) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                        // update visit count only for new child transactions\n+                        // (outside of setExclude and entriesToAdd)\n+                        if (setAllDescendants.insert(cacheEntry).second &&\n+                                !setExclude.count(cacheEntry->GetTx().GetHash()) &&\n+                                !entriesToAdd.count(cacheEntry)) {\n+                            nChildrenToVisit++;\n+                        }\n+                    }\n+                } else if (!setAllDescendants.count(childEntry)) {\n+                    // Try adding to entriesToAdd, and update our visit count\n+                    if (entriesToAdd.insert(childEntry).second && !setExclude.count(childEntry->GetTx().GetHash())) {\n+                        nChildrenToVisit++;\n+                    }\n+                }\n+                if (nChildrenToVisit > maxDescendantsToVisit) {\n+                    return false;\n+                }\n+            }\n+        }\n+        stageEntries = entriesToAdd;\n+    }\n+    // setAllDescendants now contains all in-mempool descendants of updateIt.\n+    // Update and add to cached descendant map\n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+        if (!setExclude.count(cit->GetTx().GetHash())) {\n+            modifySize += cit->GetTxSize();\n+            modifyFee += cit->GetFee();\n+            modifyCount++;\n+            cachedDescendants[updateIt].insert(cit);\n+        }\n+    }\n+    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n+    return true;\n+}\n+\n+// vHashesToUpdate is the set of transaction hashes from a disconnected block\n+// which has been re-added to the mempool.\n+// for each entry, look for descendants that are outside hashesToUpdate, and\n+// add fee/size information for such descendants to the parent.\n+void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n+{\n+    // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n+    // in-vHashesToUpdate transactions, so that we don't have to recalculate\n+    // descendants when we come across a previously seen entry.\n+    cacheMap mapMemPoolDescendantsToUpdate;\n+\n+    // Use a set for lookups into vHashesToUpdate (these entries are already\n+    // accounted for in the state of their ancestors)\n+    std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n+\n+    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // we are sure that all in-mempool descendants have already been processed.\n+    // This maximizes the benefit of the descendant cache and guarantees that\n+    // setMemPoolChildren will be updated, an assumption made in\n+    // UpdateForDescendants.\n+    BOOST_REVERSE_FOREACH(const uint256 &hash, vHashesToUpdate) {\n+        // we cache the in-mempool children to avoid duplicate updates\n+        setEntries setChildren;\n+        // calculate children from mapNextTx\n+        txiter it = mapTx.find(hash);\n+        if (it == mapTx.end()) {\n+            continue;\n+        }\n+        std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n+        // First calculate the children, and update setMemPoolChildren to\n+        // include them, and update their setMemPoolParents to include this tx.\n+        for (; iter != mapNextTx.end() && iter->first.hash == hash; ++iter) {\n+            const uint256 &childHash = iter->second.ptx->GetHash();\n+            txiter childIter = mapTx.find(childHash);\n+            // We can skip updating entries we've encountered before or that\n+            // are in the block (which are already accounted for).\n+            if (setChildren.insert(childIter).second && !setAlreadyIncluded.count(childHash)) {\n+                UpdateChild(it, childIter, true);\n+                UpdateParent(childIter, it, true);\n+            }\n+        }\n+        if (!UpdateForDescendants(it, 100, mapMemPoolDescendantsToUpdate, setAlreadyIncluded)) {\n+            // Mark as dirty if we can't do the calculation.\n+            mapTx.modify(it, set_dirty());\n+        }\n+    }\n+}\n+\n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString)\n+{\n+    setEntries parentHashes;\n+    const CTransaction &tx = entry.GetTx();\n+\n+    // Get parents of this transaction that are in the mempool\n+    // entry may or may not already be in the mempool, so we iterate mapTx\n+    // to find parents, rather than try GetMemPoolParents(entry)\n+    // TODO: optimize this so that we only check limits and walk\n+    // tx.vin when called on entries not already in the mempool.\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        txiter piter = mapTx.find(tx.vin[i].prevout.hash);\n+        if (piter != mapTx.end()) {\n+            parentHashes.insert(piter);\n+            if (parentHashes.size() + 1 > limitAncestorCount) {\n+                errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                return false;\n+            }\n+        }\n+    }\n+\n+    size_t totalSizeWithAncestors = entry.GetTxSize();\n+\n+    while (!parentHashes.empty()) {\n+        setAncestors.insert(parentHashes.begin(), parentHashes.end());\n+        setEntries stageParentSet; \n+        BOOST_FOREACH(const txiter &stageit, parentHashes) {\n+            assert(stageit != mapTx.end());\n+\n+            totalSizeWithAncestors += stageit->GetTxSize();\n+            if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+                errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantSize);\n+                return false;\n+            } else if (uint64_t(stageit->GetCountWithDescendants() + 1) > limitDescendantCount) {\n+                errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantCount);\n+                return false;\n+            } else if (totalSizeWithAncestors > limitAncestorSize) {\n+                errString = strprintf(\"exceeds ancestor size limit [limit: %u]\", limitAncestorSize);\n+                return false;\n+            }\n+\n+            const setEntries & setMemPoolParents = GetMemPoolParents(stageit);\n+            BOOST_FOREACH(const txiter &phash, setMemPoolParents) {\n+                // If this is a new ancestor, add it.\n+                if (setAncestors.count(phash) == 0) {\n+                    stageParentSet.insert(phash);\n+                }\n+                if (stageParentSet.size() + setAncestors.size() + 1 > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed ancestors [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }    \n+        }\n+        parentHashes = stageParentSet;\n+    }\n+\n+    return true;\n+}\n+\n+void CTxMemPool::UpdateAncestorsOf(bool add, const uint256 &hash, setEntries &setAncestors)\n+{\n+    indexed_transaction_set::iterator it = mapTx.find(hash);\n+    setEntries parentIters = GetMemPoolParents(it);\n+    // add or remove this tx as a child of each parent\n+    BOOST_FOREACH(txiter piter, parentIters) {\n+        UpdateChild(piter, it, add);\n+    }\n+    int64_t updateCount = (add ? 1 : -1);\n+    int64_t updateSize = updateCount * it->GetTxSize();\n+    CAmount updateFee = updateCount * it->GetFee();\n+    BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+        mapTx.modify(ancestorIt, update_descendant_state(updateSize, updateFee, updateCount));\n+    }\n+}\n+\n+// TODO: pass a txiter instead?\n+void CTxMemPool::UpdateChildrenForRemoval(const uint256 &hash)\n+{\n+    txiter it = mapTx.find(hash);\n+    const setEntries &setMemPoolChildren = GetMemPoolChildren(it);\n+    BOOST_FOREACH(txiter updateIt, setMemPoolChildren) {\n+        UpdateParent(updateIt, it, false);\n+    }\n+}\n+\n+void CTxMemPool::UpdateForRemoveFromMempool(const std::set<uint256> &hashesToRemove)\n+{\n+    // For each entry, walk back all ancestors and decrement size associated with this\n+    // transaction\n+    uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n+    BOOST_FOREACH(const uint256& removeHash, hashesToRemove) {\n+        setEntries setAncestors;\n+        const CTxMemPoolEntry &entry = *mapTx.find(removeHash);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 231,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Check/assert `it == mapTx.end()`, especially before de-reference\n",
      "created_at": "2015-09-14T22:33:53Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39455889",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39455889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39456040",
      "pull_request_review_id": null,
      "id": 39456040,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2MDQw",
      "diff_hunk": "@@ -89,34 +334,106 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n     nTransactionsUpdated += n;\n }\n \n-\n-bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate)\n+bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate)\n {\n     // Add to memory pool without checking anything.\n     // Used by main.cpp AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n     LOCK(cs);\n-    mapTx[hash] = entry;\n-    const CTransaction& tx = mapTx[hash].GetTx();\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    indexed_transaction_set::iterator newit = mapTx.insert(entry).first;\n+    mapLinks.insert(make_pair(newit, TxLinks()));\n+\n+    // Update cachedInnerUsage to include contained transaction's usage.\n+    // (When we update the entry for in-mempool parents, memory usage will be\n+    // further updated.)\n+    cachedInnerUsage += entry.DynamicMemoryUsage();\n+\n+    const CTransaction& tx = newit->GetTx();\n+    std::set<uint256> setParentTransactions;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);\n+        setParentTransactions.insert(tx.vin[i].prevout.hash);\n+    }\n+    // Don't bother worrying about child transactions of this one.\n+    // Normal case of a new transaction arriving is that there can't be any\n+    // children, because such children would be orphans.\n+    // An exception to that is if a transaction enters that used to be in a block.\n+    // In that case, our disconnect block logic will call UpdateTransactionsFromBlock\n+    // to clean up the mess we're leaving here.\n+\n+    // Update ancestors with information about this tx\n+    BOOST_FOREACH (const uint256 &phash, setParentTransactions) {\n+        txiter pit = mapTx.find(phash);\n+        if (pit != mapTx.end()) {\n+            UpdateParent(newit, pit, true);\n+        }\n+    }\n+    UpdateAncestorsOf(true, hash, setAncestors);\n+\n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n-    cachedInnerUsage += entry.DynamicMemoryUsage();\n     minerPolicyEstimator->processTransaction(entry, fCurrentEstimate);\n \n     return true;\n }\n \n+// TODO: replace this hash with an iterator?\n+void CTxMemPool::removeUnchecked(const uint256& hash)\n+{\n+    indexed_transaction_set::iterator it = mapTx.find(hash);\n+\n+    BOOST_FOREACH(const CTxIn& txin, it->GetTx().vin)\n+        mapNextTx.erase(txin.prevout);\n+\n+    totalTxSize -= it->GetTxSize();\n+    cachedInnerUsage -= it->DynamicMemoryUsage();\n+    cachedInnerUsage -= memusage::DynamicUsage(mapLinks[it].parents) + memusage::DynamicUsage(mapLinks[it].children);\n+    mapLinks.erase(it);\n+    mapTx.erase(it);\n+    nTransactionsUpdated++;\n+    minerPolicyEstimator->removeTx(hash);\n+}\n+\n+// Calculates descendants of hash that are not already in setDescendants, and adds to \n+// setDescendants. Assumes hash is already a tx in the mempool and setMemPoolChildren\n+// is correct for tx and all descendants.\n+// Also assumes that if an entry is in setDescendants already, then all\n+// in-mempool descendants of it are already in setDescendants as well, so that we\n+// can save time by not iterating over those entries.\n+void CTxMemPool::CalculateDescendants(const uint256 &hash, std::set<uint256> &setDescendants)\n+{\n+    std::set<uint256> stage;\n+    if (setDescendants.count(hash) == 0) {\n+        stage.insert(hash);\n+    }\n+    // Traverse down the children of each hash, only adding children that are not\n+    // accounted for in setDescendants already (because those children have either\n+    // already been walked, or will be walked in this iteration).\n+    while (!stage.empty()) {\n+        setDescendants.insert(stage.begin(), stage.end());\n+        std::set<uint256> setNext;\n+        BOOST_FOREACH(const uint256 &stagehash, stage) {\n+            indexed_transaction_set::iterator it = mapTx.find(stagehash);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 357,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Check/assert `it == mapTx.end()`?\nWould only be possible on the first `stagehash` AFAIK\n\nAlso, `const`/`const_iterator`?\n",
      "created_at": "2015-09-14T22:35:51Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39456040",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39456040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39456108",
      "pull_request_review_id": null,
      "id": 39456108,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2MTA4",
      "diff_hunk": "@@ -125,34 +442,21 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n                 std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(origTx.GetHash(), i));\n                 if (it == mapNextTx.end())\n                     continue;\n-                txToRemove.push_back(it->second.ptx->GetHash());\n+                txToRemove.insert(it->second.ptx->GetHash());\n             }\n         }\n-        while (!txToRemove.empty())\n-        {\n-            uint256 hash = txToRemove.front();\n-            txToRemove.pop_front();\n-            if (!mapTx.count(hash))\n-                continue;\n-            const CTransaction& tx = mapTx[hash].GetTx();\n-            if (fRecursive) {\n-                for (unsigned int i = 0; i < tx.vout.size(); i++) {\n-                    std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n-                    if (it == mapNextTx.end())\n-                        continue;\n-                    txToRemove.push_back(it->second.ptx->GetHash());\n-                }\n+        std::set<uint256> setAllRemoves;\n+        if (fRecursive) {\n+            BOOST_FOREACH(const uint256 &hash, txToRemove) {\n+                CalculateDescendants(hash, setAllRemoves);\n             }\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-                mapNextTx.erase(txin.prevout);\n-\n-            removed.push_back(tx);\n-            totalTxSize -= mapTx[hash].GetTxSize();\n-            cachedInnerUsage -= mapTx[hash].DynamicMemoryUsage();\n-            mapTx.erase(hash);\n-            nTransactionsUpdated++;\n-            minerPolicyEstimator->removeTx(hash);\n+        } else {\n+            setAllRemoves = txToRemove;\n+        }\n+        BOOST_FOREACH(const uint256& hash, setAllRemoves) {\n+            removed.push_back(mapTx.find(hash)->GetTx());",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 424,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Again,  assumption of `hash` in `mapTx`,  worth asserting?\n",
      "created_at": "2015-09-14T22:36:54Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39456108",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39456108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39456258",
      "pull_request_review_id": null,
      "id": 39456258,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2MjU4",
      "diff_hunk": "@@ -271,8 +582,34 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             assert(it3->second.n == i);\n             i++;\n         }\n+        assert(setParentCheck == GetMemPoolParents(it));\n+        // Check children against mapNextTx\n+        CTxMemPool::setEntries setChildrenCheck;\n+        std::map<COutPoint, CInPoint>::const_iterator iter = mapNextTx.lower_bound(COutPoint(it->GetTx().GetHash(), 0));\n+        int64_t childSizes = 0;\n+        CAmount childFees = 0;\n+        for (; iter != mapNextTx.end() && iter->first.hash == it->GetTx().GetHash(); ++iter) {\n+            txiter childit = mapTx.find(iter->second.ptx->GetHash());",
      "path": "src/txmempool.cpp",
      "position": 508,
      "original_position": 506,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Again, `find` not checked,  if this assumption can hold true,  can it be documented?\n",
      "created_at": "2015-09-14T22:39:13Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39456258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39456258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 584,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39456322",
      "pull_request_review_id": null,
      "id": 39456322,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2MzIy",
      "diff_hunk": "@@ -247,19 +554,23 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n     LOCK(cs);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n-    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n-        checkTotal += it->second.GetTxSize();\n-        innerUsage += it->second.DynamicMemoryUsage();\n-        const CTransaction& tx = it->second.GetTx();\n+        checkTotal += it->GetTxSize();\n+        innerUsage += it->DynamicMemoryUsage(); \n+        const CTransaction& tx = it->GetTx();\n+        const TxLinks &links = mapLinks.find(it)->second;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 478,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "dcousens",
        "id": 413395,
        "node_id": "MDQ6VXNlcjQxMzM5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dcousens",
        "html_url": "https://github.com/dcousens",
        "followers_url": "https://api.github.com/users/dcousens/followers",
        "following_url": "https://api.github.com/users/dcousens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dcousens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dcousens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
        "organizations_url": "https://api.github.com/users/dcousens/orgs",
        "repos_url": "https://api.github.com/users/dcousens/repos",
        "events_url": "https://api.github.com/users/dcousens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dcousens/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is `mapLinks` in perfect sync with `mapTx`?\n",
      "created_at": "2015-09-14T22:40:16Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39456322",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39456322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39552306",
      "pull_request_review_id": null,
      "id": 39552306,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUyMzA2",
      "diff_hunk": "@@ -247,19 +554,23 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n     LOCK(cs);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n-    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n-        checkTotal += it->second.GetTxSize();\n-        innerUsage += it->second.DynamicMemoryUsage();\n-        const CTransaction& tx = it->second.GetTx();\n+        checkTotal += it->GetTxSize();\n+        innerUsage += it->DynamicMemoryUsage(); \n+        const CTransaction& tx = it->GetTx();\n+        const TxLinks &links = mapLinks.find(it)->second;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 478,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes -- I'll be adding some additional asserts to make this more clear.\n",
      "created_at": "2015-09-15T19:13:03Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39552306",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39552306"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39557768",
      "pull_request_review_id": null,
      "id": 39557768,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU3NzY4",
      "diff_hunk": "@@ -271,8 +582,34 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             assert(it3->second.n == i);\n             i++;\n         }\n+        assert(setParentCheck == GetMemPoolParents(it));\n+        // Check children against mapNextTx\n+        CTxMemPool::setEntries setChildrenCheck;\n+        std::map<COutPoint, CInPoint>::const_iterator iter = mapNextTx.lower_bound(COutPoint(it->GetTx().GetHash(), 0));\n+        int64_t childSizes = 0;\n+        CAmount childFees = 0;\n+        for (; iter != mapNextTx.end() && iter->first.hash == it->GetTx().GetHash(); ++iter) {\n+            txiter childit = mapTx.find(iter->second.ptx->GetHash());",
      "path": "src/txmempool.cpp",
      "position": 508,
      "original_position": 506,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "mapNextTx contains exactly the in-mempool children of a given transaction, so this code should be safe.  I'll add an assert to make the assumption clearer (the semantics of mapNextTx weren't changed by this pull).\n",
      "created_at": "2015-09-15T20:06:04Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39557768",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39557768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 584,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39581755",
      "pull_request_review_id": null,
      "id": 39581755,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNzU1",
      "diff_hunk": "@@ -921,6 +921,17 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                 REJECT_HIGHFEE, \"absurdly-high-fee\",\n                 strprintf(\"%d > %d\", nFees, ::minRelayTxFee.GetFee(nSize) * 10000));\n \n+        // Calculate in-mempool ancestors, up to a limit.\n+        CTxMemPool::setEntries setAncestors;\n+        size_t nLimitAncestors = GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);",
      "path": "src/main.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree but is there a better way to do this?  I think I'm following the common practice in the code base, though I look forward to a future refactoring when we have better encapsulation.\n",
      "created_at": "2015-09-16T00:12:05Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39581755",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39581755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 926,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39582922",
      "pull_request_review_id": null,
      "id": 39582922,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyOTIy",
      "diff_hunk": "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; \n+\n+    setEntries stageEntries, setAllDescendants;\n+    stageEntries = GetMemPoolChildren(updateIt);\n+\n+    while (!stageEntries.empty()) {\n+        setAllDescendants.insert(stageEntries.begin(), stageEntries.end());\n+\n+        setEntries entriesToAdd;\n+        BOOST_FOREACH(const txiter cit, stageEntries) {\n+            if (cit->IsDirty()) {\n+                // Don't consider any more children if any descendant is dirty\n+                return false;\n+            }\n+            const setEntries &setChildren = GetMemPoolChildren(cit);\n+            BOOST_FOREACH(const txiter childEntry, setChildren) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                        // update visit count only for new child transactions\n+                        // (outside of setExclude and entriesToAdd)\n+                        if (setAllDescendants.insert(cacheEntry).second &&\n+                                !setExclude.count(cacheEntry->GetTx().GetHash()) &&\n+                                !entriesToAdd.count(cacheEntry)) {\n+                            nChildrenToVisit++;\n+                        }\n+                    }\n+                } else if (!setAllDescendants.count(childEntry)) {\n+                    // Try adding to entriesToAdd, and update our visit count\n+                    if (entriesToAdd.insert(childEntry).second && !setExclude.count(childEntry->GetTx().GetHash())) {\n+                        nChildrenToVisit++;\n+                    }\n+                }\n+                if (nChildrenToVisit > maxDescendantsToVisit) {\n+                    return false;\n+                }\n+            }\n+        }\n+        stageEntries = entriesToAdd;\n+    }\n+    // setAllDescendants now contains all in-mempool descendants of updateIt.\n+    // Update and add to cached descendant map\n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+        if (!setExclude.count(cit->GetTx().GetHash())) {\n+            modifySize += cit->GetTxSize();\n+            modifyFee += cit->GetFee();\n+            modifyCount++;\n+            cachedDescendants[updateIt].insert(cit);\n+        }\n+    }\n+    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n+    return true;\n+}\n+\n+// vHashesToUpdate is the set of transaction hashes from a disconnected block\n+// which has been re-added to the mempool.\n+// for each entry, look for descendants that are outside hashesToUpdate, and\n+// add fee/size information for such descendants to the parent.\n+void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n+{\n+    // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n+    // in-vHashesToUpdate transactions, so that we don't have to recalculate\n+    // descendants when we come across a previously seen entry.\n+    cacheMap mapMemPoolDescendantsToUpdate;\n+\n+    // Use a set for lookups into vHashesToUpdate (these entries are already\n+    // accounted for in the state of their ancestors)\n+    std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n+\n+    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // we are sure that all in-mempool descendants have already been processed.\n+    // This maximizes the benefit of the descendant cache and guarantees that\n+    // setMemPoolChildren will be updated, an assumption made in\n+    // UpdateForDescendants.\n+    BOOST_REVERSE_FOREACH(const uint256 &hash, vHashesToUpdate) {\n+        // we cache the in-mempool children to avoid duplicate updates\n+        setEntries setChildren;\n+        // calculate children from mapNextTx\n+        txiter it = mapTx.find(hash);\n+        if (it == mapTx.end()) {\n+            continue;\n+        }\n+        std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n+        // First calculate the children, and update setMemPoolChildren to\n+        // include them, and update their setMemPoolParents to include this tx.\n+        for (; iter != mapNextTx.end() && iter->first.hash == hash; ++iter) {\n+            const uint256 &childHash = iter->second.ptx->GetHash();\n+            txiter childIter = mapTx.find(childHash);",
      "path": "src/txmempool.cpp",
      "position": 125,
      "original_position": 124,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll add an assert to make clear that is not possible.\n",
      "created_at": "2015-09-16T00:31:38Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39582922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39582922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39649035",
      "pull_request_review_id": null,
      "id": 39649035,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MDM1",
      "diff_hunk": "@@ -99,8 +285,43 @@ class CTxMemPool\n     uint64_t cachedInnerUsage; //! sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n public:\n+    typedef boost::multi_index_container<\n+        CTxMemPoolEntry,\n+        boost::multi_index::indexed_by<\n+            // sorted by txid\n+            boost::multi_index::ordered_unique<mempoolentry_txid>,\n+            // sorted by fee rate\n+            boost::multi_index::ordered_non_unique<\n+                boost::multi_index::identity<CTxMemPoolEntry>,\n+                CompareTxMemPoolEntryByFee\n+            >\n+        >\n+    > indexed_transaction_set;\n+\n     mutable CCriticalSection cs;\n-    std::map<uint256, CTxMemPoolEntry> mapTx;\n+    indexed_transaction_set mapTx;\n+    typedef indexed_transaction_set::iterator txiter;\n+    struct CompareIteratorByHash {",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 258,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "38e9d0da46004e76dddb4021bfd9e66ad21ec001",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can all these new members from here through to `UpdateChild` be made private?\n",
      "created_at": "2015-09-16T16:02:31Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39649035",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39649035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39649355",
      "pull_request_review_id": null,
      "id": 39649355,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MzU1",
      "diff_hunk": "@@ -429,5 +758,58 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 9 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 9 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + cachedInnerUsage;\n+}\n+\n+void CTxMemPool::RemoveStaged(setEntries &stage) {\n+    UpdateForRemoveFromMempool(stage);\n+    BOOST_FOREACH(const txiter& it, stage) {\n+        removeUnchecked(it);\n+    }\n+}\n+\n+bool CTxMemPool::addUnchecked(const uint256&hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate)\n+{",
      "path": "src/txmempool.cpp",
      "position": 584,
      "original_position": 582,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "38e9d0da46004e76dddb4021bfd9e66ad21ec001",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "needs LOCK(cs)?\n",
      "created_at": "2015-09-16T16:04:53Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39649355",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39649355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 775,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39649424",
      "pull_request_review_id": null,
      "id": 39649424,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5NDI0",
      "diff_hunk": "@@ -429,5 +758,58 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 9 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 9 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + cachedInnerUsage;\n+}\n+\n+void CTxMemPool::RemoveStaged(setEntries &stage) {",
      "path": "src/txmempool.cpp",
      "position": 575,
      "original_position": 574,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "38e9d0da46004e76dddb4021bfd9e66ad21ec001",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Needs LOCK(cs) if ever called from somewhere else.\n",
      "created_at": "2015-09-16T16:05:24Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39649424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39649424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 766,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39649501",
      "pull_request_review_id": null,
      "id": 39649501,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5NTAx",
      "diff_hunk": "@@ -48,6 +46,243 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0;\n+\n+    setEntries stageEntries, setAllDescendants;\n+    stageEntries = GetMemPoolChildren(updateIt);\n+\n+    while (!stageEntries.empty()) {\n+        const txiter cit = *stageEntries.begin();\n+        if (cit->IsDirty()) {\n+            // Don't consider any more children if any descendant is dirty\n+            return false;\n+        }\n+        setAllDescendants.insert(cit);\n+        stageEntries.erase(cit);\n+        const setEntries &setChildren = GetMemPoolChildren(cit);\n+        BOOST_FOREACH(const txiter childEntry, setChildren) {\n+            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n+            if (cacheIt != cachedDescendants.end()) {\n+                // We've already calculated this one, just add the entries for this set\n+                // but don't traverse again.\n+                BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                    // update visit count only for new child transactions\n+                    // (outside of setExclude and stageEntries)\n+                    if (setAllDescendants.insert(cacheEntry).second &&\n+                            !setExclude.count(cacheEntry->GetTx().GetHash()) &&\n+                            !stageEntries.count(cacheEntry)) {\n+                        nChildrenToVisit++;\n+                    }\n+                }\n+            } else if (!setAllDescendants.count(childEntry)) {\n+                // Schedule for later processing and update our visit count\n+                if (stageEntries.insert(childEntry).second && !setExclude.count(childEntry->GetTx().GetHash())) {\n+                        nChildrenToVisit++;\n+                }\n+            }\n+            if (nChildrenToVisit > maxDescendantsToVisit) {\n+                return false;\n+            }\n+        }\n+    }\n+    // setAllDescendants now contains all in-mempool descendants of updateIt.\n+    // Update and add to cached descendant map\n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+        if (!setExclude.count(cit->GetTx().GetHash())) {\n+            modifySize += cit->GetTxSize();\n+            modifyFee += cit->GetFee();\n+            modifyCount++;\n+            cachedDescendants[updateIt].insert(cit);\n+        }\n+    }\n+    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n+    return true;\n+}\n+\n+// vHashesToUpdate is the set of transaction hashes from a disconnected block\n+// which has been re-added to the mempool.\n+// for each entry, look for descendants that are outside hashesToUpdate, and\n+// add fee/size information for such descendants to the parent.\n+void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n+{",
      "path": "src/txmempool.cpp",
      "position": 96,
      "original_position": 96,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "38e9d0da46004e76dddb4021bfd9e66ad21ec001",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Needs LOCK(cs)\n",
      "created_at": "2015-09-16T16:06:08Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39649501",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39649501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 117,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39650632",
      "pull_request_review_id": null,
      "id": 39650632,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNjMy",
      "diff_hunk": "@@ -99,8 +285,43 @@ class CTxMemPool\n     uint64_t cachedInnerUsage; //! sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n public:\n+    typedef boost::multi_index_container<\n+        CTxMemPoolEntry,\n+        boost::multi_index::indexed_by<\n+            // sorted by txid\n+            boost::multi_index::ordered_unique<mempoolentry_txid>,\n+            // sorted by fee rate\n+            boost::multi_index::ordered_non_unique<\n+                boost::multi_index::identity<CTxMemPoolEntry>,\n+                CompareTxMemPoolEntryByFee\n+            >\n+        >\n+    > indexed_transaction_set;\n+\n     mutable CCriticalSection cs;\n-    std::map<uint256, CTxMemPoolEntry> mapTx;\n+    indexed_transaction_set mapTx;\n+    typedef indexed_transaction_set::iterator txiter;\n+    struct CompareIteratorByHash {\n+        bool operator()(const txiter &a, const txiter &b) const {\n+            return a->GetTx().GetHash() < b->GetTx().GetHash();\n+        }\n+    };\n+    typedef std::set<txiter, CompareIteratorByHash> setEntries;",
      "path": "src/txmempool.h",
      "position": 263,
      "original_position": 263,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "38e9d0da46004e76dddb4021bfd9e66ad21ec001",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oops, `setEntries` needs to be public, the rest can be private though.\n",
      "created_at": "2015-09-16T16:15:40Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39650632",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39650632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 309,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39914366",
      "pull_request_review_id": null,
      "id": 39914366,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE0MzY2",
      "diff_hunk": "@@ -429,5 +758,58 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 9 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 9 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + cachedInnerUsage;\n+}\n+\n+void CTxMemPool::RemoveStaged(setEntries &stage) {",
      "path": "src/txmempool.cpp",
      "position": 575,
      "original_position": 574,
      "commit_id": "5add7a74a672cb12b0a2a630d318d9bc64dd0f77",
      "original_commit_id": "38e9d0da46004e76dddb4021bfd9e66ad21ec001",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can also AssertLockHeld(cs), otherwise, to make things more readable.\n\nOn September 16, 2015 11:05:34 AM CDT, Alex Morcos notifications@github.com wrote:\n\n> > @@ -429,5 +758,58 @@ bool CCoinsViewMemPool::HaveCoins(const uint256\n> > &txid) const {\n> > \n> >  size_t CTxMemPool::DynamicMemoryUsage() const {\n> >      LOCK(cs);\n> > -    return memusage::DynamicUsage(mapTx) +\n> >   memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) +\n> >   cachedInnerUsage;\n> > -    // Estimate the overhead of mapTx to be 9 pointers + an\n> >   allocation, as no exact formula for boost::multi_index_contained is\n> >   implemented.\n> > -    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 9 *\n> >   sizeof(void*)) \\* mapTx.size() + memusage::DynamicUsage(mapNextTx) +\n> >   memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) +\n> >   cachedInnerUsage;\n> >   +}\n> >   +\n> >   +void CTxMemPool::RemoveStaged(setEntries &stage) {\n> \n> Needs LOCK(cs) if ever called from somewhere else.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/bitcoin/bitcoin/pull/6654/files#r39649424\n",
      "created_at": "2015-09-19T01:23:30Z",
      "updated_at": "2015-09-19T17:32:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39914366",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39914366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 766,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}