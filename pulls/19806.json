{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
    "id": 473391579,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDczMzkxNTc5",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19806",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/19806.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/19806.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/1afc0e4aa1b910991d4f8a77d74e2197f370987c",
    "number": 19806,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "validation: UTXO snapshot activation",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is part of the [assumeutxo project](https://github.com/bitcoin/bitcoin/projects/11):\r\n\r\nParent PR: #15606 \r\nIssue: #15605 \r\nSpecification: https://github.com/jamesob/assumeutxo-docs/tree/master/proposal\r\n\r\n---\r\n\r\nThis change proposes logic for activating UTXO snapshots, which is unused at the moment aside from an included unittest. There are a few moveonyish/refactoring commits to allow for halfway decent unittests.\r\n\r\nBasic structure is included for specifying and checking the assumeutxo hash values used to validate activated snapshots. Initially I had specified a few height/hash pairs for mainnet in this change, but because of the security-critical nature of those parameters, I figured it was better to leave their inclusion to a future PR that includes only that change - my intent being that reviewers will be more likely to verify those parameters firsthand in a dedicated PR.\r\n\r\nAside from that and the snapshot activation logic, there are a few related changes:\r\n\r\n- ~~allow caching the `nChainTx` value in the CCoinsViewDB; this is set during snapshot activation. Because we don't necessarily have access to the full chain at the time of snapshot load, this value is communicated through the snapshot metadata and must be cached within the chainstate to survive restarts.~~\r\n- break out `CreateUTXOSnapshot()` from dumptxoutset. This is essentially a move-only change to allow the reuse of snapshot creation logic from within unittests.\r\n- ...and a few other misc. changes that are solely related to unittests.\r\n\r\nThe move-onlyish commit is most easily reviewed with `--color-moved=zebra`.",
    "labels": [
      {
        "id": 97470796,
        "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
        "name": "UTXO Db and Indexes",
        "color": "fbca04",
        "default": false
      },
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      },
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-08-25T18:49:41Z",
    "updated_at": "2022-08-18T18:23:16Z",
    "closed_at": "2021-02-16T18:23:27Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-02-16T18:23:27Z",
    "merge_commit_sha": "92fee79dab384acea47bf20741a9847a58253330",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "jamesob:2020-08-au.activate",
      "ref": "2020-08-au.activate",
      "sha": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 42077031,
        "node_id": "MDEwOlJlcG9zaXRvcnk0MjA3NzAzMQ==",
        "name": "bitcoin",
        "full_name": "jamesob/bitcoin",
        "owner": {
          "login": "jamesob",
          "id": 73197,
          "node_id": "MDQ6VXNlcjczMTk3",
          "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jamesob",
          "html_url": "https://github.com/jamesob",
          "followers_url": "https://api.github.com/users/jamesob/followers",
          "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
          "organizations_url": "https://api.github.com/users/jamesob/orgs",
          "repos_url": "https://api.github.com/users/jamesob/repos",
          "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jamesob/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jamesob/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jamesob/bitcoin",
        "archive_url": "https://api.github.com/repos/jamesob/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jamesob/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jamesob/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jamesob/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jamesob/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jamesob/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jamesob/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jamesob/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jamesob/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jamesob/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jamesob/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jamesob/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jamesob/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jamesob/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jamesob/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jamesob/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jamesob/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jamesob/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jamesob/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jamesob/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jamesob/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jamesob/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jamesob/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jamesob/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jamesob/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jamesob/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jamesob/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jamesob/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jamesob/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jamesob/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jamesob/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jamesob/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jamesob/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jamesob/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jamesob/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jamesob/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jamesob/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jamesob/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jamesob/bitcoin/hooks",
        "svn_url": "https://github.com/jamesob/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 252891,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-31T19:20:56Z",
        "created_at": "2015-09-07T22:18:03Z",
        "updated_at": "2023-05-05T06:31:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e9c037ba64dd5b073fccf059ef75db1c97abd0bd",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T03:51:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 715,
    "deletions": 30,
    "changed_files": 17,
    "commits": 8,
    "review_comments": 183,
    "comments": 35
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 3691485727,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY5MTQ4NTcyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3691485727",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T18:51:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3691511154,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY5MTUxMTE1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3691511154",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T18:59:12Z"
    },
    {
      "event": "labeled",
      "id": 3691807011,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM2OTE4MDcwMTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3691807011",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T20:27:45Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 3691807012,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM2OTE4MDcwMTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3691807012",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T20:27:45Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "labeled",
      "id": 3691807015,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM2OTE4MDcwMTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3691807015",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-25T20:27:45Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 680400991,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDQwMDk5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680400991",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-26T01:08:50Z",
      "updated_at": "2021-02-13T01:43:31Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21121 ([test] Small unit test improvements, including helper to make mempool transaction by amitiuttarwar)\n* #21061 ([p2p] Introduce node rebroadcast module by amitiuttarwar)\n* #21003 (test: Move MakeNoLogFileContext to libtest_util, and use it in bench by MarcoFalke)\n* #20286 (rpc: deprecate `addresses` and `reqSigs` from rpc outputs by mjdietzx)\n* #19888 (rpc: Fix getblockstats issues by fjahr)\n* #19652 (Avoid locking CTxMemPool::cs recursively in Mempool{Info}ToJSON() by hebasto)\n* #13875 ([doc] nChainTx needs to become a 64-bit earlier due to SegWit by Sjors)\n* #9384 (CCoinsViewCache code cleanup & deduplication by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-680400991",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3692676414,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY5MjY3NjQxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3692676414",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-26T02:31:33Z"
    },
    {
      "event": "labeled",
      "id": 3693279317,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM2OTMyNzkzMTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3693279317",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-26T06:56:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3695277553,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY5NTI3NzU1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3695277553",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-26T15:05:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3695334807,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY5NTMzNDgwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3695334807",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-26T15:17:41Z"
    },
    {
      "event": "unlabeled",
      "id": 3695354116,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzY5NTM1NDExNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3695354116",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-26T15:21:50Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "added_to_project",
      "id": 3701064743,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQzNzAxMDY0NzQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3701064743",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-27T19:18:29Z",
      "project_card": {
        "id": 44443919,
        "url": "https://api.github.com/projects/columns/cards/44443919",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "reviewed",
      "id": 478110745,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MTEwNzQ1",
      "url": null,
      "actor": null,
      "commit_id": "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nJust a few questions and comments from a first pass, code looks already in good shape. Will test soon.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-478110745",
      "submitted_at": "2020-08-29T10:48:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "reviewed",
      "id": 478786341,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4Nzg2MzQx",
      "url": null,
      "actor": null,
      "commit_id": "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK 2cb1f842dc, but I had some approach questions. Didn't closely review, nor did I review the tests.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-478786341",
      "submitted_at": "2020-08-31T17:38:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3711907802,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcxMTkwNzgwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3711907802",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-31T22:23:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3711942760,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcxMTk0Mjc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3711942760",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-31T22:38:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3711952435,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcxMTk1MjQzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3711952435",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-31T22:42:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3711963787,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcxMTk2Mzc4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3711963787",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-31T22:47:10Z"
    },
    {
      "event": "reviewed",
      "id": 479728652,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NzI4NjUy",
      "url": null,
      "actor": null,
      "commit_id": "1aa7b9137090d0021298a0e2696871dd21bfdefc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-479728652",
      "submitted_at": "2020-09-01T13:15:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3715296502,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcxNTI5NjUwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3715296502",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T14:41:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3715328679,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcxNTMyODY3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3715328679",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T14:47:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3715760423,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcxNTc2MDQyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3715760423",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T16:15:50Z"
    },
    {
      "event": "reviewed",
      "id": 481228137,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMjI4MTM3",
      "url": null,
      "actor": null,
      "commit_id": "60bd91334a3654fe59dac0bd28fb8824b897edf7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Started review (will update list below with progress)\r\n\r\n- [X] 60bd91334a3654fe59dac0bd28fb8824b897edf7 add allowed assumeutxo values (1/9)\r\n- [X] bc622c33ce925159906e3b00be77b11d598397ed txdb: add nChainTx cache for snapshot chainstates (2/9)\r\n- [x] 9c1db71dbd82342b0a1d33401b329e34a7a6cee8 validation: add ChainstateManager::ActivateSnapshot (3/9)\r\n- [x] 86032053d14bf454f94f4318ebfcbaf54bc0285e txdb: don't reset during in-memory cache resize (4/9)\r\n- [x] cf0c07340885c770a383e340ee09f922bb90a45b move-onlyish: break out CreateUTXOSnapshot from dumptxoutset (5/9)\r\n- [x] 75d1e7754274d3f015a49e71871c3a069cbe020b simplify ChainstateManager::SnapshotBlockhash() return semantics (6/9)\r\n- [x] 17f833d4c826eadf7992cdb22198cae70cba61d9 tests: add unittest for ExpectedAssumeutxo (7/9)\r\n- [ ] 35861eb9ced11da85a9f3659437d60c1507b4075 tests: add deterministic chain generation unittest fixture (8/9)\r\n- [ ] 89c9182ec0c81d38248fa92d0284fb4da2a71927 tests: add snapshot activation test (9/9)\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-481228137",
      "submitted_at": "2020-09-02T22:29:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "reviewed",
      "id": 482906983,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTA2OTgz",
      "url": null,
      "actor": null,
      "commit_id": "75d1e7754274d3f015a49e71871c3a069cbe020b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Mostly finished review (updated progress in https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-481228137). Feel free to ignore any of my comments that don't make sense. They are all not too important and a little half baked as I was figuring things out. All the changes here are basically straightforward and seem good.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-482906983",
      "submitted_at": "2020-09-04T22:23:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3738571591,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzczODU3MTU5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3738571591",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-07T23:39:08Z"
    },
    {
      "event": "reviewed",
      "id": 483725550,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzI1NTUw",
      "url": null,
      "actor": null,
      "commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for the review so far, @ryanofsky. I've pushed an update (d690546) that removes the nChainTx caching changes and hardcodes that value per @MarcoFalke's feedback. I also reduced locking during snapshot activation per your recommendations. I'll get around to addressing the rest of your feedback in the next day or so. ",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-483725550",
      "submitted_at": "2020-09-07T23:42:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "commented",
      "id": 694835995,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDgzNTk5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694835995",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-18T12:22:12Z",
      "updated_at": "2020-09-18T15:59:48Z",
      "author_association": "MEMBER",
      "body": "Would it make sense to add the 110 and 210 block regtest snapshots to the repo, and then add a functional test to load them? That should demonstrate all the behavior we need without committing to a testnet or mainnet block.\r\n\r\nI can't compile on macOS.\r\n```\r\nvalidation.cpp:5334:67: error: passing variable 'm_blockman' by reference requires holding mutex 'cs_main' [-Werror,-Wthread-safety-reference]\r\n    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\r\n                                                                  ^\r\nvalidation.cpp:5375:56: error: calling function 'CoinsTip' requires holding mutex 'cs_main' exclusively [-Werror,-Wthread-safety-analysis]\r\n    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\r\n                                                       ^\r\nvalidation.cpp:5413:37: error: calling function 'GetCoinsCacheSizeState' requires holding mutex 'cs_main' exclusively [-Werror,-Wthread-safety-analysis]\r\n            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\r\n                                    ^\r\nvalidation.cpp:5462:44: error: calling function 'CoinsDB' requires holding mutex 'cs_main' exclusively [-Werror,-Wthread-safety-analysis]\r\n    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\r\n\r\n```",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-694835995",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "labeled",
      "id": 3794311553,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3OTQzMTE1NTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3794311553",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T17:06:41Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3825284560,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgyNTI4NDU2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3825284560",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T16:00:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3825366593,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgyNTM2NjU5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3825366593",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T16:19:17Z"
    },
    {
      "event": "unlabeled",
      "id": 3825700047,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzgyNTcwMDA0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3825700047",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T17:40:49Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 3857168092,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM4NTcxNjgwOTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3857168092",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-08T20:05:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3871603376,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg3MTYwMzM3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3871603376",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-13T14:17:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3871908271,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg3MTkwODI3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3871908271",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-13T15:08:06Z"
    },
    {
      "event": "unlabeled",
      "id": 3871920816,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzg3MTkyMDgxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3871920816",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-13T15:10:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3872151819,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg3MjE1MTgxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3872151819",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-13T15:50:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3873285879,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg3MzI4NTg3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3873285879",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-13T20:00:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3881361352,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg4MTM2MTM1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3881361352",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T12:47:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3881848816,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg4MTg0ODgxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3881848816",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T14:18:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3883412987,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg4MzQxMjk4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3883412987",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-15T20:19:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3886570300,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg4NjU3MDMwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3886570300",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-16T14:03:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3886679218,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg4NjY3OTIxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3886679218",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-16T14:26:22Z"
    },
    {
      "event": "commented",
      "id": 710438957,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxMDQzODk1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/710438957",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-16T19:02:56Z",
      "updated_at": "2020-10-16T19:03:15Z",
      "author_association": "MEMBER",
      "body": "Okay, rebased. After a few days of fighting on CI with an apparent msan compiler bug (doesn't like `const` map values - thanks to @ryanofsky for the help) and a few macOS-specific sign comparison warnings (I'm beginning to understand why no one writes tests in C++), this thing is building on CI. The lock annotation warnings that @Sjors helpfully pointed out have been fixed (and were introduced when I removed the cs_main hold throughout snapshot activation).\r\n\r\nI spoke to Sjors offline per his recommendation about adding testnet snapshots and I think that's a good idea, but we can do it in a followup - especially given that the big benefit of doing that would be the ability to use the snapshot files in functional tests, but since the behavior here isn't accessible via RPC (and really can't be until the remaining assumeutxo changes are in), I think we can wait to do that until later.\r\n\r\nI think I've addressed all the feedback here, thanks to everyone so far for that.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-710438957",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "mentioned",
      "id": 3887800926,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg4NzgwMDkyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3887800926",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-16T19:02:56Z"
    },
    {
      "event": "subscribed",
      "id": 3887800931,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4ODc4MDA5MzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3887800931",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-16T19:02:57Z"
    },
    {
      "event": "mentioned",
      "id": 3887801968,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg4NzgwMTk2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3887801968",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-16T19:03:16Z"
    },
    {
      "event": "subscribed",
      "id": 3887801973,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4ODc4MDE5NzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3887801973",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-16T19:03:16Z"
    },
    {
      "event": "reviewed",
      "id": 512534741,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNTM0NzQx",
      "url": null,
      "actor": null,
      "commit_id": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Functional tests might indeed be too much to add here. However there are lots of potential failure modes, and it's not obvious that 59013d80067948e5073da10a06802a1e9b84e7d7 tests for all of those.  The use of smaller helper function might make it easier to cover those cases. Alternatively a new exception class or error/result enum (like `TransactionError`) could help tease them out better.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-512534741",
      "submitted_at": "2020-10-20T10:48:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "reviewed",
      "id": 512182467,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMTgyNDY3",
      "url": null,
      "actor": null,
      "commit_id": "a1aa47484fb7c272a1b957a37dc8c4595a0774bb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 59013d80067948e5073da10a06802a1e9b84e7d7. This looks good and there are no important suggestions here from me. This unit test is very clean, and I'd suggest looking at the unit test as a starting point for other reviewers to see what functionality this PR implements. I think this PR would also be a good candidate for https://bitcoincore.reviews/.\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-512534741\r\n\r\n> Functional tests might indeed be too much to add here.\r\n\r\nI think it's mostly not possible to add function tests yet before the ActivateSnapshot method is called, but #15606 should eventually have these",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-512182467",
      "submitted_at": "2020-10-20T16:15:13Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "reviewed",
      "id": 518873927,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODczOTI3",
      "url": null,
      "actor": null,
      "commit_id": "59013d80067948e5073da10a06802a1e9b84e7d7",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "Platinumwrist",
        "id": 36762635,
        "node_id": "MDQ6VXNlcjM2NzYyNjM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/36762635?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Platinumwrist",
        "html_url": "https://github.com/Platinumwrist",
        "followers_url": "https://api.github.com/users/Platinumwrist/followers",
        "following_url": "https://api.github.com/users/Platinumwrist/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Platinumwrist/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Platinumwrist/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Platinumwrist/subscriptions",
        "organizations_url": "https://api.github.com/users/Platinumwrist/orgs",
        "repos_url": "https://api.github.com/users/Platinumwrist/repos",
        "events_url": "https://api.github.com/users/Platinumwrist/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Platinumwrist/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-518873927",
      "submitted_at": "2020-10-28T16:44:49Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3932673090,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzkzMjY3MzA5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3932673090",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-28T18:02:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3932707787,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzkzMjcwNzc4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3932707787",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-28T18:10:26Z"
    },
    {
      "event": "reviewed",
      "id": 527579228,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NTc5MjI4",
      "url": null,
      "actor": null,
      "commit_id": "700e66dc6bf6ed1b6bc2a642686a734cb69f4932",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 700e66dc6bf6ed1b6bc2a642686a734cb69f4932. Just many suggested updates since last review. Adding cs_main for cblockindex updates, adding lots of comments, rearranging commits, tweaking test and optional block hash code",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-527579228",
      "submitted_at": "2020-11-10T20:25:20Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "reviewed",
      "id": 529599345,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTk5MzQ1",
      "url": null,
      "actor": null,
      "commit_id": "f92a76b62fad04213884ec602822601ee84f3825",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Close to finished. Great to have the deterministic chain as an option in the tests now :)\r\n\r\nI was playing with the tests a bit to check the behavior with maleated snapshot data and maybe that is interesting to add here or in a follow-up, so I pushed it up here: https://github.com/fjahr/bitcoin/commit/2835c8118fe35f5551886ac5251e535bb337571a. Feel free to use any way you like.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-529599345",
      "submitted_at": "2020-11-15T21:15:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4016157715,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAxNjE1NzcxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4016157715",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T14:32:49Z"
    },
    {
      "event": "commented",
      "id": 730415498,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMDQxNTQ5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730415498",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T14:35:09Z",
      "updated_at": "2020-11-19T14:35:09Z",
      "author_association": "MEMBER",
      "body": "Thanks @ryanofsky @fjahr for the review, and thanks especially for the test Fabian - that's great. I've addressed your feedback and slightly modified the test patch for formatting. I fixed up the snapshot activation so that we can properly test both sides of a false coin count without exception, and I've added your commit as the head of this branch.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-730415498",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "mentioned",
      "id": 4016169376,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDAxNjE2OTM3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4016169376",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T14:35:10Z"
    },
    {
      "event": "subscribed",
      "id": 4016169397,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwMTYxNjkzOTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4016169397",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T14:35:10Z"
    },
    {
      "event": "mentioned",
      "id": 4016169404,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDAxNjE2OTQwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4016169404",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T14:35:10Z"
    },
    {
      "event": "subscribed",
      "id": 4016169411,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwMTYxNjk0MTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4016169411",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T14:35:10Z"
    },
    {
      "event": "commented",
      "id": 730704478,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMDcwNDQ3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730704478",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T23:36:28Z",
      "updated_at": "2020-11-19T23:36:28Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 2aba960c3360da1e840ffef3b0f95c4fde4f86a6\r\n\r\nAlso played with the tests extensively looking for edge cases.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-730704478",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "comment_deleted",
      "id": 4018526947,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQ0MDE4NTI2OTQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4018526947",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-20T00:31:29Z"
    },
    {
      "event": "commented",
      "id": 735256648,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNTI1NjY0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/735256648",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-28T17:03:28Z",
      "updated_at": "2020-11-28T17:03:28Z",
      "author_association": "MEMBER",
      "body": "The Cirrus fuzzer/valgrind test is reliably timing out here. Not sure if that's unique to this PR or not.\r\n\r\nOtherwise, I think this is close to ready for merge?",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-735256648",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "commented",
      "id": 735257431,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNTI1NzQzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/735257431",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-28T17:10:12Z",
      "updated_at": "2020-11-28T17:10:12Z",
      "author_association": "MEMBER",
      "body": "Jup, can be ignored. (Or fixed with a rebase)",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-735257431",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "reviewed",
      "id": 542183818,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMTgzODE4",
      "url": null,
      "actor": null,
      "commit_id": "a2e7b295a33d90c895da649ee479fa090f20276b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 2aba960c3360da1e840ffef3b0f95c4fde4f86a6. Changes since last review: better error handling for missing coins in snapshot and a new commit to test it. Also minor style cleanups",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-542183818",
      "submitted_at": "2020-12-01T18:41:53Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "labeled",
      "id": 4079527079,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwNzk1MjcwNzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4079527079",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T13:04:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4095930189,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA5NTkzMDE4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4095930189",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-10T16:12:20Z"
    },
    {
      "event": "unlabeled",
      "id": 4096112393,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDA5NjExMjM5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4096112393",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-10T16:49:54Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 550222596,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjIyNTk2",
      "url": null,
      "actor": null,
      "commit_id": "80121fbb2d0c7c14f9c99cb873859e5ed9c83a0e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 80121fbb2d0c7c14f9c99cb873859e5ed9c83a0e. Only changes since last review: rebasing after minor conflicts, tweaking log print as suggested, switching to [[nodiscard]] instead of NODISCARD",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-550222596",
      "submitted_at": "2020-12-11T15:55:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "commented",
      "id": 744091765,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDA5MTc2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744091765",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-13T23:55:15Z",
      "updated_at": "2020-12-13T23:55:15Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 80121fbb2d0c7c14f9c99cb873859e5ed9c83a0e. Changes since last review: rebased, changed a logprint in `validation.cpp` (see GH comments), changed NODISCARD to [[nodiscard]].",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-744091765",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "commented",
      "id": 744436297,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDQzNjI5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744436297",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-14T13:22:24Z",
      "updated_at": "2020-12-14T13:22:24Z",
      "author_association": "MEMBER",
      "body": "In ba2779f98490f1492644a4ee4320fa689560272c you mock `nTx`, `nChainTx` (memory only) and `BLOCK_OPT_WITNESS` in `m_active_chainstate` for all blocks below the snapshot height. Meanwhile the background sync from genesis takes place on `m_ibd_chainstate` which sets the correct values. I spent a bunch of time being confused, but eventually realised `pblocktree` is a global. It might be nice to pull that into `ChainstateManager` as well in another PR.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-744436297",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "reviewed",
      "id": 551401919,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNDAxOTE5",
      "url": null,
      "actor": null,
      "commit_id": "ba2779f98490f1492644a4ee4320fa689560272c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 80121fb",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-551401919",
      "submitted_at": "2020-12-14T17:23:23Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4115974788,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDExNTk3NDc4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4115974788",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-15T18:13:16Z"
    },
    {
      "event": "commented",
      "id": 745471074,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTQ3MTA3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745471074",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-15T18:14:31Z",
      "updated_at": "2020-12-15T18:14:31Z",
      "author_association": "MEMBER",
      "body": "[`au.activate.27`](https://github.com/jamesob/bitcoin/tree/au.activate.27) -> [`au.activate.28`](https://github.com/jamesob/bitcoin/tree/au.activate.28)\r\n\r\n<details><summary>Show range-diff</summary>\r\n\r\n```sh\r\n$ git range-diff master au.activate.27 au.activate.28\r\n\r\n1:  35188e646c = 1:  a9fb5a3174 chainparams: add allowed assumeutxo values\r\n2:  96d70a3897 = 2:  7356672cc1 simplify ChainstateManager::SnapshotBlockhash() return semantics\r\n3:  ba2779f984 ! 3:  164ccb2cf6 validation: add ChainstateManager::ActivateSnapshot\r\n    @@ -140,7 +140,8 @@\r\n     +        LOCK(::cs_main);\r\n     +        assert(!m_snapshot_chainstate);\r\n     +        m_snapshot_chainstate.swap(snapshot_chainstate);\r\n    -+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\r\n    ++        bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\r\n    ++        assert(chaintip_loaded);\r\n     +\r\n     +        m_active_chainstate = m_snapshot_chainstate.get();\r\n     +\r\n4:  ea0e1d005a = 4:  3f69b370fb txdb: don't reset during in-memory cache resize\r\n5:  6bb63e9efe = 5:  290b567736 move-onlyish: break out CreateUTXOSnapshot from dumptxoutset\r\n6:  e82498b056 = 6:  78cdc6271a tests: add deterministic chain generation unittest fixture\r\n7:  77efd7e0a4 = 7:  b9b819ae12 tests: add snapshot activation test\r\n8:  80121fbb2d = 8:  68dadbdcb9 test: Add tests with maleated snapshot data\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-745471074",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "commented",
      "id": 745491141,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTQ5MTE0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745491141",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-15T18:47:37Z",
      "updated_at": "2020-12-15T19:04:43Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, hope to review this tomorrow. Building now.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-745491141",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "reviewed",
      "id": 552964012,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyOTY0MDEy",
      "url": null,
      "actor": null,
      "commit_id": "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-552964012",
      "submitted_at": "2020-12-15T22:05:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "reviewed",
      "id": 552966143,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyOTY2MTQz",
      "url": null,
      "actor": null,
      "commit_id": "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-552966143",
      "submitted_at": "2020-12-15T22:07:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "commented",
      "id": 745661241,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTY2MTI0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745661241",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T00:14:32Z",
      "updated_at": "2020-12-16T00:14:32Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 68dadbdcb9afe60b77e027d6b066c87b86dbf7a9\r\n\r\nOnly change since last review was introduction of intermediary variable `chaintip_loaded` to fix https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542412737.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-745661241",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "labeled",
      "id": 4135965153,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQxMzU5NjUxNTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4135965153",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-21T13:26:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 749036079,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0OTAzNjA3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/749036079",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-21T15:35:35Z",
      "updated_at": "2020-12-21T15:35:35Z",
      "author_association": "MEMBER",
      "body": "This has many ACKs and  seems (besides needing rebase again, sorry) ready for merge.\r\nSo I think what we need to decide here is whether we'll accept a circular dependency added momentarily, and resolve that in a later PR. I don't insist on holding it up on that.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749036079",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "commented",
      "id": 749045152,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0OTA0NTE1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/749045152",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-21T15:53:54Z",
      "updated_at": "2020-12-21T15:53:54Z",
      "author_association": "MEMBER",
      "body": "Thanks for the clear feedback - I'll rebase tonight and at the very least remove the unnecessary optional stuff.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749045152",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4138456634,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEzODQ1NjYzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4138456634",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T03:49:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4138465317,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEzODQ2NTMxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4138465317",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T03:54:43Z"
    },
    {
      "event": "commented",
      "id": 749324217,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0OTMyNDIxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/749324217",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T03:57:09Z",
      "updated_at": "2020-12-22T03:57:09Z",
      "author_association": "MEMBER",
      "body": "[`au.activate.28`](https://github.com/jamesob/bitcoin/tree/au.activate.28) -> [`au.activate.30`](https://github.com/jamesob/bitcoin/tree/au.activate.30)\r\n\r\n<details><summary>Show range-diff</summary>\r\n\r\n```sh\r\n$ git range-diff master au.activate.28 au.activate.30\r\n\r\n1:  a9fb5a3174 ! 1:  d684ecd5f1 chainparams: add allowed assumeutxo values\r\n    @@ -140,17 +140,10 @@\r\n      #include <chainparams.h>\r\n      #include <net.h>\r\n      #include <signet.h>\r\n    -+#include <optional.h>\r\n     +#include <uint256.h>\r\n      #include <validation.h>\r\n\r\n      #include <test/util/setup_common.h>\r\n    -\r\n    - #include <boost/test/unit_test.hpp>\r\n    -+#include <boost/optional/optional_io.hpp>\r\n    -\r\n    - BOOST_FIXTURE_TEST_SUITE(validation_tests, TestingSetup)\r\n    -\r\n     @@\r\n          BOOST_CHECK(!CheckSignetBlockSolution(block, signet_params->GetConsensus()));\r\n      }\r\n    @@ -166,14 +159,14 @@\r\n     +\r\n     +    for (auto empty : bad_heights) {\r\n     +        const auto out = ExpectedAssumeutxo(empty, *params);\r\n    -+        BOOST_CHECK_EQUAL(out, nullopt);\r\n    ++        BOOST_CHECK(!out.has_value());\r\n     +    }\r\n     +\r\n    -+    const auto out110 = ExpectedAssumeutxo(110, *params).get();\r\n    ++    const auto out110 = ExpectedAssumeutxo(110, *params).value();\r\n     +    BOOST_CHECK_EQUAL(out110.hash_serialized, uint256S(\"76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"));\r\n     +    BOOST_CHECK_EQUAL(out110.nChainTx, (unsigned int)110);\r\n     +\r\n    -+    const auto out210 = ExpectedAssumeutxo(210, *params).get();\r\n    ++    const auto out210 = ExpectedAssumeutxo(210, *params).value();\r\n     +    BOOST_CHECK_EQUAL(out210.hash_serialized, uint256S(\"9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"));\r\n     +    BOOST_CHECK_EQUAL(out210.nChainTx, (unsigned int)210);\r\n     +}\r\n    @@ -235,15 +228,3 @@\r\n     +Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& params);\r\n     +\r\n      #endif // BITCOIN_VALIDATION_H\r\n    -\r\n    - diff --git a/test/lint/lint-includes.sh b/test/lint/lint-includes.sh\r\n    - --- a/test/lint/lint-includes.sh\r\n    - +++ b/test/lint/lint-includes.sh\r\n    -@@\r\n    -     boost/multi_index/sequenced_index.hpp\r\n    -     boost/multi_index_container.hpp\r\n    -     boost/optional.hpp\r\n    -+    boost/optional/optional_io.hpp\r\n    -     boost/preprocessor/cat.hpp\r\n    -     boost/preprocessor/stringize.hpp\r\n    -     boost/process.hpp\r\n2:  7356672cc1 ! 2:  e3240046d2 simplify ChainstateManager::SnapshotBlockhash() return semantics\r\n    @@ -15,19 +15,11 @@\r\n      #include <uint256.h>\r\n      #include <validation.h>\r\n      #include <validationinterface.h>\r\n    -@@\r\n    - #include <vector>\r\n    -\r\n    - #include <boost/test/unit_test.hpp>\r\n    -+#include <boost/optional/optional_io.hpp>\r\n    -\r\n    - BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, ChainTestingSetup)\r\n    -\r\n     @@\r\n          std::vector<CChainState*> chainstates;\r\n          const CChainParams& chainparams = Params();\r\n\r\n    -+    BOOST_CHECK_EQUAL(manager.SnapshotBlockhash(), nullopt);\r\n    ++    BOOST_CHECK(!manager.SnapshotBlockhash().has_value());\r\n     +\r\n          // Create a legacy (IBD) chainstate.\r\n          //\r\n    @@ -36,7 +28,7 @@\r\n          auto& validated_cs = manager.ValidatedChainstate();\r\n          BOOST_CHECK_EQUAL(&validated_cs, &c1);\r\n\r\n    -+    BOOST_CHECK_EQUAL(manager.SnapshotBlockhash(), nullopt);\r\n    ++    BOOST_CHECK(!manager.SnapshotBlockhash().has_value());\r\n     +\r\n          // Create a snapshot-based chainstate.\r\n          //\r\n    @@ -46,7 +38,7 @@\r\n     +        mempool, snapshot_blockhash));\r\n          chainstates.push_back(&c2);\r\n     +\r\n    -+    BOOST_CHECK_EQUAL(manager.SnapshotBlockhash().get(), snapshot_blockhash);\r\n    ++    BOOST_CHECK_EQUAL(manager.SnapshotBlockhash().value(), snapshot_blockhash);\r\n     +\r\n          c2.InitCoinsDB(\r\n              /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\r\n3:  164ccb2cf6 ! 3:  80f5bacf55 validation: add ChainstateManager::ActivateSnapshot\r\n    @@ -305,7 +305,7 @@\r\n     +        return false;\r\n     +    }\r\n     +\r\n    -+    AssumeutxoData au_data = maybe_au_data.get();\r\n    ++    AssumeutxoData au_data = maybe_au_data.value();\r\n     +\r\n     +    if (stats.hashSerialized != au_data.hash_serialized) {\r\n     +        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\r\n4:  3f69b370fb = 4:  822fdb59cf txdb: don't reset during in-memory cache resize\r\n5:  290b567736 = 5:  9a2c888df3 move-onlyish: break out CreateUTXOSnapshot from dumptxoutset\r\n6:  78cdc6271a = 6:  414ba87784 tests: add deterministic chain generation unittest fixture\r\n7:  b9b819ae12 = 7:  51f3f97490 tests: add snapshot activation test\r\n8:  68dadbdcb9 = 8:  e62e2a96f6 test: Add tests with maleated snapshot data\r\n```\r\n\r\n</details>\r\n\r\n",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749324217",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "unlabeled",
      "id": 4138488518,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDEzODQ4ODUxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4138488518",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T04:08:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 749500104,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0OTUwMDEwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/749500104",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T11:43:43Z",
      "updated_at": "2020-12-22T11:43:43Z",
      "author_association": "MEMBER",
      "body": "re-ACK e62e2a96f623f5d38845d472329d1a8253e146d0",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749500104",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "reviewed",
      "id": 556949409,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTQ5NDA5",
      "url": null,
      "actor": null,
      "commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK e62e2a96f623f5d38845d472329d1a8253e146d0\r\n\r\nVarious suggestions below, feel free to pick/choose/ignore/defer.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-556949409",
      "submitted_at": "2020-12-22T11:51:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "commented",
      "id": 749700550,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0OTcwMDU1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/749700550",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T18:19:28Z",
      "updated_at": "2020-12-22T18:19:28Z",
      "author_association": "MEMBER",
      "body": "@jonatack prefer to defer those cleanups for a follow-up PR unless others feel it necessary to do those there, thanks for the look.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749700550",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "mentioned",
      "id": 4141267351,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE0MTI2NzM1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4141267351",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T18:19:28Z"
    },
    {
      "event": "subscribed",
      "id": 4141267358,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxNDEyNjczNTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4141267358",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T18:19:28Z"
    },
    {
      "event": "commented",
      "id": 750445059,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDQ0NTA1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750445059",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T19:40:44Z",
      "updated_at": "2020-12-23T19:40:44Z",
      "author_association": "MEMBER",
      "body": "re-ACK e62e2a96f623f5d38845d472329d1a8253e146d0\r\n\r\nOnly changes since last review are updated usage of optional since std::optional was merged.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-750445059",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "commented",
      "id": 754671970,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NDY3MTk3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754671970",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-05T14:33:54Z",
      "updated_at": "2021-01-05T14:33:54Z",
      "author_association": "MEMBER",
      "body": "Would appreciate some guidance here if maintainers are waiting on anything to be done.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-754671970",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "commented",
      "id": 756289600,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NjI4OTYwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756289600",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-07T18:17:04Z",
      "updated_at": "2021-01-07T18:17:16Z",
      "author_association": "MEMBER",
      "body": "Code review ACK e62e2a96f623f5d38845d472329d1a8253e146d0",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-756289600",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "commented",
      "id": 756290806,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NjI5MDgwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756290806",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-07T18:19:05Z",
      "updated_at": "2021-01-07T18:19:05Z",
      "author_association": "MEMBER",
      "body": "The cirrus CI error looks relevant, though strange (a race in ostream?):\r\n```\r\nWrote UTXO snapshot to /tmp/test_common_Bitcoin Core/35ec263ac30d22e47a7de455d58dbf0fd5788ec03feee003dfe753772e175d86/test_snapshot.110.dat: {\"coins_written\":110,\"base_hash\":\"5149f8fe2875e71f5ef664b0e78909cfbd651356fdf5505558323f8321405269\",\"base_height\":110}\r\nmake[3]: *** [Makefile:16615: test/validation_chainstatemanager_tests.cpp.test] Error 1\r\nmake[3]: *** Waiting for unfinished jobs....\r\nmake[3]: Leaving directory '/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src'\r\nmake[2]: *** [Makefile:15156: check-am] Error 2\r\nmake[2]: Leaving directory '/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src'\r\nmake[1]: *** [Makefile:14841: check-recursive] Error 1\r\nmake[1]: Leaving directory '/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src'\r\nmake: *** [Makefile:806: check-recursive] Error 1\r\n==================\r\nWARNING: ThreadSanitizer: data race (pid=26233)\r\n  Read of size 8 at 0x7f77ce57d290 by main thread:\r\n    #0 std::__1::ios_base::width() const /usr/lib/llvm-10/bin/../include/c++/v1/ios:522:12 (test_bitcoin+0x163a0c)\r\n    #1 std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > std::__1::__pad_and_output<char, std::__1::char_traits<char> >(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, char const*, char const*, char const*, std::__1::ios_base&, char) /usr/lib/llvm-10/bin/../include/c++/v1/locale:1385:29 (test_bitcoin+0x163a0c)\r\n    #2 std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::__put_character_sequence<char, std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*, unsigned long) /usr/lib/llvm-10/bin/../include/c++/v1/ostream:730:17 (test_bitcoin+0x1638b3)\r\n    #3 std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::operator<<<std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*) /usr/lib/llvm-10/bin/../include/c++/v1/ostream:869:12 (test_bitcoin+0x789ec1)\r\n    #4 boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream, char [24], char const (&) [24]>::operator()(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) const /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/test/utils/lazy_ostream.hpp:67:29 (test_bitcoin+0x789ec1)\r\n    #5 boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream, char [24], char const (&) [24]>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>::operator()(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) const /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/test/utils/lazy_ostream.hpp:67:16 (test_bitcoin+0x789d6b)\r\n    #6 boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream, char [24], char const (&) [24]>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>, char [3], char const (&) [3]>::operator()(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) const /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/test/utils/lazy_ostream.hpp:67:16 (test_bitcoin+0x789c6b)\r\n    #7 boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream, char [24], char const (&) [24]>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>, char [3], char const (&) [3]>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>::operator()(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) const /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/test/utils/lazy_ostream.hpp:67:16 (test_bitcoin+0x789b3b)\r\n    #8 boost::unit_test::unit_test_log_t::operator<<(boost::unit_test::lazy_ostream const&) <null> (test_bitcoin+0xf0181b)\r\n    #9 validation_chainstatemanager_tests::chainstatemanager_activate_snapshot_invoker() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/validation_chainstatemanager_tests.cpp:204:1 (test_bitcoin+0x7834d8)\r\n    #10 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:117:11 (test_bitcoin+0x1b109d)\r\n    #11 boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) <null> (test_bitcoin+0xf3063a)\r\n  Previous write of size 8 at 0x7f77ce57d290 by thread T4 (mutexes: write M643):\r\n    #0 std::__1::ios_base::width(long) /usr/lib/llvm-10/bin/../include/c++/v1/ios:530:14 (test_bitcoin+0x163b1c)\r\n    #1 std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > std::__1::__pad_and_output<char, std::__1::char_traits<char> >(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, char const*, char const*, char const*, std::__1::ios_base&, char) /usr/lib/llvm-10/bin/../include/c++/v1/locale:1417:11 (test_bitcoin+0x163b1c)\r\n    #2 std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::__put_character_sequence<char, std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*, unsigned long) /usr/lib/llvm-10/bin/../include/c++/v1/ostream:730:17 (test_bitcoin+0x1638b3)\r\n    #3 std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::operator<<<char, std::__1::char_traits<char>, std::__1::allocator<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-10/bin/../include/c++/v1/ostream:1052:12 (test_bitcoin+0x163427)\r\n    #4 $_0::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/main.cpp:25:15 (test_bitcoin+0x163427)\r\n    #5 decltype(std::__1::forward<$_0&>(fp)(std::__1::forward<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(fp0))) std::__1::__invoke<$_0&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>($_0&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-10/bin/../include/c++/v1/type_traits:3539:1 (test_bitcoin+0x163427)\r\n    #6 void std::__1::__invoke_void_return_wrapper<void>::__call<$_0&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>($_0&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-10/bin/../include/c++/v1/__functional_base:348:9 (test_bitcoin+0x163427)\r\n    #7 std::__1::__function::__alloc_func<$_0, std::__1::allocator<$_0>, void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-10/bin/../include/c++/v1/functional:1540:16 (test_bitcoin+0x163427)\r\n    #8 std::__1::__function::__func<$_0, std::__1::allocator<$_0>, void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-10/bin/../include/c++/v1/functional:1714:12 (test_bitcoin+0x163427)\r\n    #9 std::__1::__function::__value_func<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /usr/lib/llvm-10/bin/../include/c++/v1/functional:1867:16 (test_bitcoin+0xc2a0c9)\r\n    #10 std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /usr/lib/llvm-10/bin/../include/c++/v1/functional:2473:12 (test_bitcoin+0xc2a0c9)\r\n    #11 BCLog::Logger::LogPrintStr(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/logging.cpp:264:9 (test_bitcoin+0xc2a0c9)\r\n    #12 void LogPrintf<char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(char const*, char const* const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./logging.h:176:23 (test_bitcoin+0xb63ad5)\r\n    #13 CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13::operator()() const /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/validationinterface.cpp:243:5 (test_bitcoin+0xb686a0)\r\n    #14 decltype(std::__1::forward<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13&>(fp)()) std::__1::__invoke<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13&>(CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13&) /usr/lib/llvm-10/bin/../include/c++/v1/type_traits:3539:1 (test_bitcoin+0xb686a0)\r\n    #15 void std::__1::__invoke_void_return_wrapper<void>::__call<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13&>(CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13&) /usr/lib/llvm-10/bin/../include/c++/v1/__functional_base:348:9 (test_bitcoin+0xb686a0)\r\n    #16 std::__1::__function::__alloc_func<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13, std::__1::allocator<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13>, void ()>::operator()() /usr/lib/llvm-10/bin/../include/c++/v1/functional:1540:16 (test_bitcoin+0xb686a0)\r\n    #17 std::__1::__function::__func<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13, std::__1::allocator<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13>, void ()>::operator()() /usr/lib/llvm-10/bin/../include/c++/v1/functional:1714:12 (test_bitcoin+0xb686a0)\r\n    #18 std::__1::__function::__value_func<void ()>::operator()() const /usr/lib/llvm-10/bin/../include/c++/v1/functional:1867:16 (test_bitcoin+0xbeaa1a)\r\n    #19 std::__1::function<void ()>::operator()() const /usr/lib/llvm-10/bin/../include/c++/v1/functional:2473:12 (test_bitcoin+0xbeaa1a)\r\n    #20 SingleThreadedSchedulerClient::ProcessQueue() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/scheduler.cpp:173:5 (test_bitcoin+0xbeaa1a)\r\n    #21 decltype(*(std::__1::forward<SingleThreadedSchedulerClient*&>(fp0)).*fp()) std::__1::__invoke<void (SingleThreadedSchedulerClient::*&)(), SingleThreadedSchedulerClient*&, void>(void (SingleThreadedSchedulerClient::*&)(), SingleThreadedSchedulerClient*&) /usr/lib/llvm-10/bin/../include/c++/v1/type_traits:3480:1 (test_bitcoin+0xbec9ca)\r\n    #22 std::__1::__bind_return<void (SingleThreadedSchedulerClient::*)(), std::__1::tuple<SingleThreadedSchedulerClient*>, std::__1::tuple<>, __is_valid_bind_return<void (SingleThreadedSchedulerClient::*)(), std::__1::tuple<SingleThreadedSchedulerClient*>, std::__1::tuple<> >::value>::type std::__1::__apply_functor<void (SingleThreadedSchedulerClient::*)(), std::__1::tuple<SingleThreadedSchedulerClient*>, 0ul, std::__1::tuple<> >(void (SingleThreadedSchedulerClient::*&)(), std::__1::tuple<SingleThreadedSchedulerClient*>&, std::__1::__tuple_indices<0ul>, std::__1::tuple<>&&) /usr/lib/llvm-10/bin/../include/c++/v1/functional:2770:12 (test_bitcoin+0xbec9ca)\r\n    #23 std::__1::__bind_return<void (SingleThreadedSchedulerClient::*)(), std::__1::tuple<SingleThreadedSchedulerClient*>, std::__1::tuple<>, __is_valid_bind_return<void (SingleThreadedSchedulerClient::*)(), std::__1::tuple<SingleThreadedSchedulerClient*>, std::__1::tuple<> >::value>::type std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>::operator()<>() /usr/lib/llvm-10/bin/../include/c++/v1/functional:2803:20 (test_bitcoin+0xbec9ca)\r\n    #24 decltype(std::__1::forward<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>&>(fp)()) std::__1::__invoke<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>&>(std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>&) /usr/lib/llvm-10/bin/../include/c++/v1/type_traits:3539:1 (test_bitcoin+0xbec9ca)\r\n    #25 void std::__1::__invoke_void_return_wrapper<void>::__call<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>&>(std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>&) /usr/lib/llvm-10/bin/../include/c++/v1/__functional_base:348:9 (test_bitcoin+0xbec9ca)\r\n    #26 std::__1::__function::__alloc_func<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>, std::__1::allocator<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*> >, void ()>::operator()() /usr/lib/llvm-10/bin/../include/c++/v1/functional:1540:16 (test_bitcoin+0xbec9ca)\r\n    #27 std::__1::__function::__func<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>, std::__1::allocator<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*> >, void ()>::operator()() /usr/lib/llvm-10/bin/../include/c++/v1/functional:1714:12 (test_bitcoin+0xbec9ca)\r\n    #28 std::__1::__function::__value_func<void ()>::operator()() const /usr/lib/llvm-10/bin/../include/c++/v1/functional:1867:16 (test_bitcoin+0xbe99d5)\r\n    #29 std::__1::function<void ()>::operator()() const /usr/lib/llvm-10/bin/../include/c++/v1/functional:2473:12 (test_bitcoin+0xbe99d5)\r\n    #30 CScheduler::serviceQueue() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/scheduler.cpp:60:17 (test_bitcoin+0xbe99d5)\r\n    #31 ChainTestingSetup::ChainTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&)::$_0::operator()() const::'lambda'()::operator()() const /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/util/setup_common.cpp:134:86 (test_bitcoin+0x8307f1)\r\n    #32 void TraceThread<ChainTestingSetup::ChainTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&)::$_0::operator()() const::'lambda'()>(char const*, ChainTestingSetup::ChainTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&)::$_0::operator()() const::'lambda'()) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./util/system.h:438:9 (test_bitcoin+0x8307f1)\r\n    #33 ChainTestingSetup::ChainTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&)::$_0::operator()() const /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/util/setup_common.cpp:134:37 (test_bitcoin+0x8307f1)\r\n    #34 boost::detail::thread_data<ChainTestingSetup::ChainTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&)::$_0>::run() /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/thread/detail/thread.hpp:120:17 (test_bitcoin+0x8307f1)\r\n    #35 boost::(anonymous namespace)::thread_proxy(void*) <null> (test_bitcoin+0xedacce)\r\n  Location is global 'std::__1::cout' of size 160 at 0x7f77ce57d270 (libc++.so.1+0x0000000c0290)\r\n  Mutex M643 (0x7b2400000240) created at:\r\n    #0 pthread_mutex_lock <null> (test_bitcoin+0xf10d6)\r\n    #1 std::__1::mutex::lock() <null> (libc++.so.1+0x83505)\r\n    #2 SeedInsecureRand(SeedRand) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./test/util/setup_common.h:60:9 (test_bitcoin+0x82ccd7)\r\n    #3 BasicTestingSetup::BasicTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/util/setup_common.cpp:99:5 (test_bitcoin+0x82ccd7)\r\n    #4 ChainTestingSetup::ChainTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/util/setup_common.cpp:129:7 (test_bitcoin+0x82d273)\r\n    #5 validation_chainstatemanager_tests::chainstatemanager::chainstatemanager() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/validation_chainstatemanager_tests.cpp:29:1 (test_bitcoin+0x77bd00)\r\n    #6 validation_chainstatemanager_tests::chainstatemanager_invoker() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/validation_chainstatemanager_tests.cpp:29:1 (test_bitcoin+0x77bd00)\r\n    #7 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:117:11 (test_bitcoin+0x1b109d)\r\n    #8 boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) <null> (test_bitcoin+0xf3063a)\r\n  Thread T4 'b-scheduler' (tid=26248, running) created by main thread at:\r\n    #0 pthread_create <null> (test_bitcoin+0xd3d0b)\r\n    #1 boost::thread::start_thread_noexcept() <null> (test_bitcoin+0xedabcd)\r\n    #2 TestingSetup::TestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/util/setup_common.cpp:171:7 (test_bitcoin+0x82df0d)\r\n    #3 RegTestingSetup::RegTestingSetup() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./test/util/setup_common.h:105:11 (test_bitcoin+0x82e768)\r\n    #4 TestChain100Setup::TestChain100Setup(bool) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/util/setup_common.cpp:205:20 (test_bitcoin+0x82e768)\r\n    #5 TestChain100DeterministicSetup::TestChain100DeterministicSetup() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./test/util/setup_common.h:137:40 (test_bitcoin+0x783014)\r\n    #6 validation_chainstatemanager_tests::chainstatemanager_activate_snapshot::chainstatemanager_activate_snapshot() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/validation_chainstatemanager_tests.cpp:204:1 (test_bitcoin+0x783014)\r\n    #7 validation_chainstatemanager_tests::chainstatemanager_activate_snapshot_invoker() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/validation_chainstatemanager_tests.cpp:204:1 (test_bitcoin+0x783014)\r\n    #8 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:117:11 (test_bitcoin+0x1b109d)\r\n    #9 boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) <null> (test_bitcoin+0xf3063a)\r\nSUMMARY: ThreadSanitizer: data race /usr/lib/llvm-10/bin/../include/c++/v1/ios:522:12 in std::__1::ios_base::width() const\r\n==================\r\nExit status: 2\r\n```",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-756290806",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "reviewed",
      "id": 559711766,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NzExNzY2",
      "url": null,
      "actor": null,
      "commit_id": "d684ecd5f11b2cf63235cd483858f3fd27f8c712",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "A few comments I wrote earlier but forgot to submit.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-559711766",
      "submitted_at": "2021-01-07T19:04:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "commented",
      "id": 756372850,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NjM3Mjg1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756372850",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-07T20:43:49Z",
      "updated_at": "2021-01-07T20:43:49Z",
      "author_association": "MEMBER",
      "body": "I could only reproduce the tsan failure once, so was unable to debug. Maybe just add `race:validation_chainstatemanager_tests` to the suppressions file?",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-756372850",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4182628539,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE4MjYyODUzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4182628539",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T03:03:19Z"
    },
    {
      "event": "commented",
      "id": 756806028,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NjgwNjAyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756806028",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T15:10:54Z",
      "updated_at": "2021-01-08T15:10:54Z",
      "author_association": "MEMBER",
      "body": "[`au.activate.30`](https://github.com/jamesob/bitcoin/tree/au.activate.30) -> [`au.activate.31`](https://github.com/jamesob/bitcoin/tree/au.activate.31)\r\n\r\n<details><summary>Show range-diff</summary>\r\n\r\n```sh\r\n$ git range-diff master au.activate.30 au.activate.31\r\n\r\n1:  d684ecd5f1 ! 1:  5b7fede907 chainparams: add allowed assumeutxo values\r\n    @@ -162,11 +162,11 @@\r\n     +        BOOST_CHECK(!out.has_value());\r\n     +    }\r\n     +\r\n    -+    const auto out110 = ExpectedAssumeutxo(110, *params).value();\r\n    ++    const auto out110 = ExpectedAssumeutxo(110, *params).value().get();\r\n     +    BOOST_CHECK_EQUAL(out110.hash_serialized, uint256S(\"76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"));\r\n     +    BOOST_CHECK_EQUAL(out110.nChainTx, (unsigned int)110);\r\n     +\r\n    -+    const auto out210 = ExpectedAssumeutxo(210, *params).value();\r\n    ++    const auto out210 = ExpectedAssumeutxo(210, *params).value().get();\r\n     +    BOOST_CHECK_EQUAL(out210.hash_serialized, uint256S(\"9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"));\r\n     +    BOOST_CHECK_EQUAL(out210.nChainTx, (unsigned int)210);\r\n     +}\r\n    @@ -188,15 +188,16 @@\r\n          return *to_modify;\r\n      }\r\n\r\n    -+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\r\n    ++Optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\r\n    ++    const int height, const CChainParams& chainparams)\r\n     +{\r\n     +    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\r\n     +    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\r\n     +\r\n     +    if (assumeutxo_found != valid_assumeutxos_map.end()) {\r\n    -+        return assumeutxo_found->second;\r\n    ++        return std::ref(assumeutxo_found->second);\r\n     +    }\r\n    -+    return {};\r\n    ++    return std::nullopt;\r\n     +}\r\n     +\r\n      CChainState& ChainstateManager::ActiveChainstate() const\r\n    @@ -225,6 +226,7 @@\r\n     + *\r\n     + * @returns empty if no assumeutxo configuration exists for the given height.\r\n     + */\r\n    -+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& params);\r\n    ++Optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\r\n    ++    const int height, const CChainParams& params);\r\n     +\r\n      #endif // BITCOIN_VALIDATION_H\r\n2:  e3240046d2 = 2:  cc86ebab20 simplify ChainstateManager::SnapshotBlockhash() return semantics\r\n3:  80f5bacf55 ! 3:  3a54732744 validation: add ChainstateManager::ActivateSnapshot\r\n    @@ -34,6 +34,25 @@\r\n\r\n          //! block header\r\n\r\n    + diff --git a/src/coins.cpp b/src/coins.cpp\r\n    + --- a/src/coins.cpp\r\n    + +++ b/src/coins.cpp\r\n    +@@\r\n    +     cachedCoinsUsage += it->second.coin.DynamicMemoryUsage();\r\n    + }\r\n    +\r\n    ++void CCoinsViewCache::EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin) {\r\n    ++    cachedCoinsUsage += coin.DynamicMemoryUsage();\r\n    ++    cacheCoins.emplace(\r\n    ++        std::piecewise_construct,\r\n    ++        std::forward_as_tuple(std::move(outpoint)),\r\n    ++        std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\r\n    ++}\r\n    ++\r\n    + void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight, bool check_for_overwrite) {\r\n    +     bool fCoinbase = tx.IsCoinBase();\r\n    +     const uint256& txid = tx.GetHash();\r\n    +\r\n      diff --git a/src/coins.h b/src/coins.h\r\n      --- a/src/coins.h\r\n      +++ b/src/coins.h\r\n    @@ -64,12 +83,39 @@\r\n      public:\r\n          CCoinsViewCache(CCoinsView *baseIn);\r\n\r\n    +@@\r\n    +      */\r\n    +     void AddCoin(const COutPoint& outpoint, Coin&& coin, bool possible_overwrite);\r\n    +\r\n    ++    /**\r\n    ++     * Emplace a coin into cacheCoins without performing any checks, marking\r\n    ++     * the emplaced coin as dirty.\r\n    ++     *\r\n    ++     * NOT FOR GENERAL USE. Used only when loading coins from a UTXO snapshot.\r\n    ++     * @sa ChainstateManager::PopulateAndValidateSnapshot()\r\n    ++     */\r\n    ++    void EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin);\r\n    ++\r\n    +     /**\r\n    +      * Spend a coin. Pass moveto in order to get the deleted data.\r\n    +      * If no unspent output exists for the passed outpoint, this call\r\n\r\n      diff --git a/src/validation.cpp b/src/validation.cpp\r\n      --- a/src/validation.cpp\r\n      +++ b/src/validation.cpp\r\n     @@\r\n    -     return {};\r\n    + #include <index/txindex.h>\r\n    + #include <logging.h>\r\n    + #include <logging/timer.h>\r\n    ++#include <node/coinstats.h>\r\n    + #include <node/ui_interface.h>\r\n    + #include <optional.h>\r\n    +-#include <node/coinstats.h>\r\n    + #include <policy/policy.h>\r\n    + #include <policy/settings.h>\r\n    + #include <pow.h>\r\n    +@@\r\n    +     return std::nullopt;\r\n      }\r\n\r\n     +bool ChainstateManager::ActivateSnapshot(\r\n    @@ -93,8 +139,8 @@\r\n     +    // relevant during snapshot activation; caches are rebalanced at the conclusion of\r\n     +    // this function. We want to give (essentially) all available cache capacity to the\r\n     +    // snapshot to aid the bulk load later in this function.\r\n    -+    constexpr double IBD_CACHE_PERC = 0.01;\r\n    -+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\r\n    ++    static constexpr double IBD_CACHE_PERC = 0.01;\r\n    ++    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\r\n     +\r\n     +    {\r\n     +        LOCK(::cs_main);\r\n    @@ -112,8 +158,8 @@\r\n     +        // Temporarily resize the active coins cache to make room for the newly-created\r\n     +        // snapshot chain.\r\n     +        this->ActiveChainstate().ResizeCoinsCaches(\r\n    -+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\r\n    -+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\r\n    ++            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\r\n    ++            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\r\n     +    }\r\n     +\r\n     +    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\r\n    @@ -122,10 +168,10 @@\r\n     +    {\r\n     +        LOCK(::cs_main);\r\n     +        snapshot_chainstate->InitCoinsDB(\r\n    -+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\r\n    ++            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\r\n     +            in_memory, false, \"chainstate\");\r\n     +        snapshot_chainstate->InitCoinsCache(\r\n    -+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\r\n    ++            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\r\n     +    }\r\n     +\r\n     +    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\r\n    @@ -140,7 +186,7 @@\r\n     +        LOCK(::cs_main);\r\n     +        assert(!m_snapshot_chainstate);\r\n     +        m_snapshot_chainstate.swap(snapshot_chainstate);\r\n    -+        bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\r\n    ++        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\r\n     +        assert(chaintip_loaded);\r\n     +\r\n     +        m_active_chainstate = m_snapshot_chainstate.get();\r\n    @@ -183,18 +229,15 @@\r\n     +            return false;\r\n     +        }\r\n     +        coins_file >> coin;\r\n    -+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\r\n    -+        coins_cache.cacheCoins.emplace(\r\n    -+            std::piecewise_construct,\r\n    -+            std::forward_as_tuple(std::move(outpoint)),\r\n    -+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\r\n    -+        coins_left -= 1;\r\n    -+        coins_processed += 1;\r\n    ++        coins_cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\r\n    ++\r\n    ++        --coins_left;\r\n    ++        ++coins_processed;\r\n     +\r\n     +        if (coins_processed % 1000000 == 0) {\r\n     +            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\r\n     +                coins_processed,\r\n    -+                (float) coins_processed * 100 / (float) coins_count,\r\n    ++                static_cast<float>(coins_processed) * 100 / static_cast<float>(coins_count),\r\n     +                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\r\n     +        }\r\n     +\r\n    @@ -279,7 +322,7 @@\r\n     +\r\n     +    while (max_secs_to_wait_for_headers > 0) {\r\n     +        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\r\n    -+        max_secs_to_wait_for_headers -= 1;\r\n    ++        --max_secs_to_wait_for_headers;\r\n     +\r\n     +        if (!snapshot_start_block) {\r\n     +            std::this_thread::sleep_for(std::chrono::seconds(1));\r\n    @@ -305,7 +348,7 @@\r\n     +        return false;\r\n     +    }\r\n     +\r\n    -+    AssumeutxoData au_data = maybe_au_data.value();\r\n    ++    const AssumeutxoData& au_data = maybe_au_data.value();\r\n     +\r\n     +    if (stats.hashSerialized != au_data.hash_serialized) {\r\n     +        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\r\n    @@ -366,11 +409,10 @@\r\n      #include <coins.h>\r\n      #include <crypto/common.h> // for ReadLE64\r\n      #include <fs.h>\r\n    - #include <optional.h>\r\n     +#include <node/utxo_snapshot.h>\r\n    + #include <optional.h>\r\n      #include <policy/feerate.h>\r\n      #include <protocol.h> // For CMessageHeader::MessageStartChars\r\n    - #include <script/script_error.h>\r\n     @@\r\n          //! by the background validation chainstate.\r\n          bool m_snapshot_validated{false};\r\n4:  822fdb59cf = 4:  94d8f69070 txdb: don't reset during in-memory cache resize\r\n5:  9a2c888df3 = 5:  5add970a98 move-onlyish: break out CreateUTXOSnapshot from dumptxoutset\r\n6:  414ba87784 = 6:  6c6ec048f1 tests: add deterministic chain generation unittest fixture\r\n7:  51f3f97490 ! 7:  d14f6cf68d tests: add snapshot activation test\r\n    @@ -173,3 +173,15 @@\r\n     +}\r\n     +\r\n      BOOST_AUTO_TEST_SUITE_END()\r\n    +\r\n    + diff --git a/test/sanitizer_suppressions/tsan b/test/sanitizer_suppressions/tsan\r\n    + --- a/test/sanitizer_suppressions/tsan\r\n    + +++ b/test/sanitizer_suppressions/tsan\r\n    +@@\r\n    + race:BerkeleyDatabase\r\n    + race:DatabaseBatch\r\n    + race:leveldb::DBImpl::DeleteObsoleteFiles\r\n    ++race:validation_chainstatemanager_tests\r\n    + race:zmq::*\r\n    + race:bitcoin-qt\r\n    + # deadlock (TODO fix)\r\n8:  e62e2a96f6 = 8:  38b07a0a73 test: Add tests with maleated snapshot data\r\n```\r\n\r\n</details>\r\n\r\nI've addressed all of @sipa's feedback and a good chunk of @jonatack's. Tests are passing. Thanks for the continued help everyone.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-756806028",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "mentioned",
      "id": 4184795706,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4NDc5NTcwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4184795706",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T15:10:55Z"
    },
    {
      "event": "subscribed",
      "id": 4184795709,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODQ3OTU3MDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4184795709",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T15:10:55Z"
    },
    {
      "event": "mentioned",
      "id": 4184795716,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE4NDc5NTcxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4184795716",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T15:10:55Z"
    },
    {
      "event": "subscribed",
      "id": 4184795719,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxODQ3OTU3MTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4184795719",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T15:10:55Z"
    },
    {
      "event": "reviewed",
      "id": 564541950,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NTQxOTUw",
      "url": null,
      "actor": null,
      "commit_id": "38b07a0a7399a8d5721e2fea157752e253246fd7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-564541950",
      "submitted_at": "2021-01-08T19:58:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "reviewed",
      "id": 564546248,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NTQ2MjQ4",
      "url": null,
      "actor": null,
      "commit_id": "38b07a0a7399a8d5721e2fea157752e253246fd7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-564546248",
      "submitted_at": "2021-01-08T20:21:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "reviewed",
      "id": 564782958,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NzgyOTU4",
      "url": null,
      "actor": null,
      "commit_id": "38b07a0a7399a8d5721e2fea157752e253246fd7",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "utACK",
      "user": {
        "login": "felipsoarez",
        "id": 62164241,
        "node_id": "MDQ6VXNlcjYyMTY0MjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/62164241?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/felipsoarez",
        "html_url": "https://github.com/felipsoarez",
        "followers_url": "https://api.github.com/users/felipsoarez/followers",
        "following_url": "https://api.github.com/users/felipsoarez/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/felipsoarez/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/felipsoarez/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/felipsoarez/subscriptions",
        "organizations_url": "https://api.github.com/users/felipsoarez/orgs",
        "repos_url": "https://api.github.com/users/felipsoarez/repos",
        "events_url": "https://api.github.com/users/felipsoarez/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/felipsoarez/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-564782958",
      "submitted_at": "2021-01-09T13:09:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "reviewed",
      "id": 564817050,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0ODE3MDUw",
      "url": null,
      "actor": null,
      "commit_id": "3a547327446a3608ef2af25a8d25a42954fc5116",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Changes look good to me aside from the friend thingy.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-564817050",
      "submitted_at": "2021-01-09T23:36:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4187543086,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE4NzU0MzA4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4187543086",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-10T00:03:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4187546674,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE4NzU0NjY3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4187546674",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-10T00:10:06Z"
    },
    {
      "event": "commented",
      "id": 757391086,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzM5MTA4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757391086",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-10T00:41:30Z",
      "updated_at": "2021-01-10T00:41:30Z",
      "author_association": "MEMBER",
      "body": "Code review ACK a56b71054f9ba4f13cea9938826032f9359a39d4\r\n\r\nChanges since last review only addressed review comments, most notably introduced `EmplaceCoinInternalDANGER()`.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-757391086",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "reviewed",
      "id": 564848436,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0ODQ4NDM2",
      "url": null,
      "actor": null,
      "commit_id": "a56b71054f9ba4f13cea9938826032f9359a39d4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-564848436",
      "submitted_at": "2021-01-10T11:29:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4188195367,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE4ODE5NTM2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4188195367",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-10T16:33:48Z"
    },
    {
      "event": "commented",
      "id": 757504260,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzUwNDI2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757504260",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-10T16:34:31Z",
      "updated_at": "2021-01-10T16:34:31Z",
      "author_association": "MEMBER",
      "body": "[`au.activate.33`](https://github.com/jamesob/bitcoin/tree/au.activate.33) -> [`au.activate.34`](https://github.com/jamesob/bitcoin/tree/au.activate.34)\r\n\r\n<details><summary>Show range-diff</summary>\r\n\r\n```sh\r\n$ git range-diff master au.activate.33 au.activate.34\r\n\r\n1:  27f5ea82b5 = 1:  27f5ea82b5 chainparams: add allowed assumeutxo values\r\n2:  a1410726a1 ! 2:  b02730f8bc simplify ChainstateManager::SnapshotBlockhash() return semantics\r\n    @@ -7,14 +7,6 @@\r\n      diff --git a/src/test/validation_chainstatemanager_tests.cpp b/src/test/validation_chainstatemanager_tests.cpp\r\n      --- a/src/test/validation_chainstatemanager_tests.cpp\r\n      +++ b/src/test/validation_chainstatemanager_tests.cpp\r\n    -@@\r\n    - #include <random.h>\r\n    - #include <sync.h>\r\n    - #include <test/util/setup_common.h>\r\n    -+#include <optional.h>\r\n    - #include <uint256.h>\r\n    - #include <validation.h>\r\n    - #include <validationinterface.h>\r\n     @@\r\n          std::vector<CChainState*> chainstates;\r\n          const CChainParams& chainparams = Params();\r\n3:  48c8af8f90 ! 3:  72470144a2 validation: add ChainstateManager::ActivateSnapshot\r\n    @@ -90,6 +90,24 @@\r\n           * Spend a coin. Pass moveto in order to get the deleted data.\r\n           * If no unspent output exists for the passed outpoint, this call\r\n\r\n    + diff --git a/src/test/validation_tests.cpp b/src/test/validation_tests.cpp\r\n    + --- a/src/test/validation_tests.cpp\r\n    + +++ b/src/test/validation_tests.cpp\r\n    +@@\r\n    +         BOOST_CHECK(!out.has_value());\r\n    +     }\r\n    +\r\n    +-    const auto out110 = ExpectedAssumeutxo(110, *params).value().get();\r\n    ++    const AssumeutxoData& out110 = ExpectedAssumeutxo(110, *params).value();\r\n    +     BOOST_CHECK_EQUAL(out110.hash_serialized, uint256S(\"76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"));\r\n    +     BOOST_CHECK_EQUAL(out110.nChainTx, (unsigned int)110);\r\n    +\r\n    +-    const auto out210 = ExpectedAssumeutxo(210, *params).value().get();\r\n    ++    const AssumeutxoData& out210 = ExpectedAssumeutxo(210, *params).value();\r\n    +     BOOST_CHECK_EQUAL(out210.hash_serialized, uint256S(\"9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"));\r\n    +     BOOST_CHECK_EQUAL(out210.nChainTx, (unsigned int)210);\r\n    + }\r\n    +\r\n      diff --git a/src/validation.cpp b/src/validation.cpp\r\n      --- a/src/validation.cpp\r\n      +++ b/src/validation.cpp\r\n    @@ -330,7 +348,7 @@\r\n     +    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\r\n     +\r\n     +    int base_height = snapshot_start_block->nHeight;\r\n    -+    Optional<AssumeutxoData> maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\r\n    ++    auto maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\r\n     +\r\n     +    if (!maybe_au_data) {\r\n     +        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\r\n4:  3243fe11f0 = 4:  f53b871a4c txdb: don't reset during in-memory cache resize\r\n5:  56bc86443f = 5:  8409053cc0 move-onlyish: break out CreateUTXOSnapshot from dumptxoutset\r\n6:  d28f6156c0 = 6:  86a8e742f8 tests: add deterministic chain generation unittest fixture\r\n7:  3c9b16f8e4 ! 7:  065dc80745 tests: add snapshot activation test\r\n    @@ -14,8 +14,7 @@\r\n     +#include <rpc/blockchain.h>\r\n      #include <sync.h>\r\n      #include <test/util/setup_common.h>\r\n    - #include <optional.h>\r\n    -@@\r\n    + #include <uint256.h>\r\n      #include <validation.h>\r\n      #include <validationinterface.h>\r\n\r\n8:  a56b71054f = 8:  f5fe848d67 test: Add tests with maleated snapshot data\r\n```\r\n\r\n</details>\r\n\r\n",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-757504260",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "commented",
      "id": 758289550,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODI4OTU1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/758289550",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-11T23:29:05Z",
      "updated_at": "2021-01-11T23:29:05Z",
      "author_association": "MEMBER",
      "body": "Code review ACK f5fe848d676b884692e25b6826737913afb020f5\r\n\r\nChanges since last review only addressed @jnewbery 's feedback on optional usage.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-758289550",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "mentioned",
      "id": 4193257611,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE5MzI1NzYxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4193257611",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-11T23:29:05Z"
    },
    {
      "event": "subscribed",
      "id": 4193257612,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxOTMyNTc2MTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4193257612",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-11T23:29:05Z"
    },
    {
      "event": "labeled",
      "id": 4194522058,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQxOTQ1MjIwNTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4194522058",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-12T08:05:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4196455925,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE5NjQ1NTkyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4196455925",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-12T15:22:53Z"
    },
    {
      "event": "unlabeled",
      "id": 4196794268,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDE5Njc5NDI2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4196794268",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-12T16:28:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 759017745,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTAxNzc0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759017745",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-12T21:23:52Z",
      "updated_at": "2021-01-12T21:23:52Z",
      "author_association": "MEMBER",
      "body": "Code review ACK e77eea5150bd46d2972ec5086b86948df6e73a83\r\n\r\nConfirmed only rebased since last review.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-759017745",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "reviewed",
      "id": 566767401,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2NzY3NDAx",
      "url": null,
      "actor": null,
      "commit_id": "e77eea5150bd46d2972ec5086b86948df6e73a83",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK e77eea5150bd46d2972ec5086b86948df6e73a83 reviewed diff since my last review per `git range-diff 7b97563 e62e2a9 e77eea5`, then re-reviewed, debug building and running validation/validation_chainstatemanager unit tests at each commit, ran node at head as a sanity check.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-566767401",
      "submitted_at": "2021-01-12T22:51:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "reviewed",
      "id": 569391124,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MzkxMTI0",
      "url": null,
      "actor": null,
      "commit_id": "647c91957f99f5b9aed790e49941e3370fc3c0b2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK e77eea5150bd46d2972ec5086b86948df6e73a83. Just rebase, std::optional updates, with_lock updates, EmplaceCoinInternalDANGER addition, const/cast updates since last review. Left one suggestion but feel free to ignore to avoid churn.\r\n\r\nI don't think there should be much hand-wringing about circular dependencies. As far as I know the only thing the circular dependencies linter provides is a vague indication that code organization sucks, and we already know that code organization sucks. It's easy to satisfy the linter by just cramming everything into one file, but that wouldn't make things better. Just listing the validation/coinstats dependency seems good in itself if it generates ideas for pulling a larger chunk of functionality out of validation.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-569391124",
      "submitted_at": "2021-01-15T16:38:24Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "reviewed",
      "id": 572304144,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMzA0MTQ0",
      "url": null,
      "actor": null,
      "commit_id": "c5154cad6c195759409d6eb5134fad635b9aaade",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-572304144",
      "submitted_at": "2021-01-20T14:56:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "commented",
      "id": 768673523,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODY3MzUyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/768673523",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T00:40:25Z",
      "updated_at": "2021-01-28T00:41:00Z",
      "author_association": "MEMBER",
      "body": "Hi all, I've had a chat offline with @jamesob about potential conflicts between this PR (#19806) and all of chainman-deglobalizing (#20158).\r\n\r\nThankfully, there is only one substantial conflict of note: the commit 385cb331bbf48cfba7b1e77e180d856100e1fdf1 pushed to #19806 yesterday which added lock annotations to the `ActiveChain{,state}()` suite of methods makes both rebase orders significantly harder, as it imposes additional locking requirements on its callers which are not easily `scripted-diff`able.\r\n\r\nWhat I propose is that for now in #19806, we just lock `::cs_main` inside `ActiveChain{,state}()` (mirroring how `::Chain{,state}Active()` works) so that the two PRs don't block each other. I have a modified version of #19806 here which demonstrates this change: https://github.com/dongcarl/bitcoin/tree/2021-01-au.activate-rebased-with-alt-locking. Of course, the lock annotation is preferable in the longer term, and I'd be happy to publish a separate PR for that.\r\n\r\nWith my proposed modification, there won't be many conflicts, and I've tested that by playing out both merge orders:\r\n\r\n1. Modified #19806 gets merged first, then #20158 (branch: https://github.com/dongcarl/bitcoin/tree/2021-01-autxo-rebase)\r\n2. #20158 gets merged first, then modified #19806 (branch: https://github.com/dongcarl/bitcoin/tree/2021-01-autxo-rebase-me-first)\r\n\r\nBoth seem to be fairly straightforward, and arrive at the exact same tree (checked with `git diff`).\r\n\r\n-----\r\n\r\n**TL;DR** #19806 and #20158 can be merged in any order without much pain if we redo #19806's 385cb331bbf48cfba7b1e77e180d856100e1fdf1 like https://github.com/dongcarl/bitcoin/commit/08c6ece20ed398d7ed07b095353cb2a4bec7af2b and push the annotations in 385cb331bbf48cfba7b1e77e180d856100e1fdf1 to a followup PR.",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-768673523",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "mentioned",
      "id": 4258620815,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI1ODYyMDgxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4258620815",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T00:40:25Z"
    },
    {
      "event": "subscribed",
      "id": 4258620817,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNTg2MjA4MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4258620817",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T00:40:25Z"
    },
    {
      "event": "commented",
      "id": 768946522,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODk0NjUyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/768946522",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T10:11:50Z",
      "updated_at": "2021-01-28T10:11:50Z",
      "author_association": "MEMBER",
      "body": "The most recent commit looks ok in that it addresses the issue pointed out here: https://github.com/bitcoin/bitcoin/pull/19806#discussion_r564074755. However, I think we should do more to ensure that there aren't other potential data races in this series of PRs. For example:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/02b01651c56239db227bd58e85bc3174cda64519/src/validation.cpp#L5153-L5166\r\n\r\naccesses both `m_ibd_chainstate` and `m_snapshot_chainstate` without locking cs_main first. The comment for both of those members says \"it is safe to acquire the contents of this pointer **with ::cs_main held**, release the lock, and then use the reference without concern of it being deconstructed\". Currently, all callers of `GetAll()` are holding cs_main first, but there's no enforcement of cs_main locking either by the compiler or at runtime.\r\n\r\nI think that a good rule to follow is: _if some mutable state can be read/written by multiple threads, it must be guarded by a mutex (or made atomic)._ **Even if the code as written doesn't have a data race because of the order in which functions are called, future changes could introduce very subtle bugs if those assumptions aren't stated clearly**.\r\n\r\nFor `m_active_chainstate`, I think it's actually fine to just make it `std::atomic<CChainstate*>` since you don't care which chainstate pointer it returns, as long as it's valid. I think that'd make @dongcarl's conflict here: https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-768673523 much easier to resolve, since there would only be very minor changes at the call sites.\r\n\r\nFor `m_ibd_chainstate` and `m_snapshot_chainstate`, either they should be `GUARDED_BY(::cs_main)`, or alternatively they could be made `const std::unique_ptr`s and initialized in the `ChainstateManager` constructor.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-768946522",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "mentioned",
      "id": 4260250402,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI2MDI1MDQwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4260250402",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T10:11:51Z"
    },
    {
      "event": "subscribed",
      "id": 4260250404,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNjAyNTA0MDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4260250404",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T10:11:51Z"
    },
    {
      "event": "commented",
      "id": 768955695,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODk1NTY5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/768955695",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T10:27:55Z",
      "updated_at": "2021-01-28T10:28:37Z",
      "author_association": "MEMBER",
      "body": "> Hi all, I've had a chat offline with @jamesob about potential conflicts between this PR (#19806) and all of chainman-deglobalizing (#20158).\r\n\r\nGlad that you two managed to resolve it, so both can move forward!\r\n\r\n> I think that a good rule to follow is: if some mutable state can be read/written by multiple threads, it must be guarded by a mutex (or made atomic). \r\n\r\nI think this is a good rule and the motivation has to be really well argued to deviate from that. It's important to keep in mind that while Intel is lenient here, different CPU architectures have different rules with regard to [non-guarded memory access and multiple threads](https://en.cppreference.com/w/cpp/atomic/memory_order), with the regard to in which order and granularity the changes become visible (if at all) there no guarantees of sanity at all.\r\n\r\nWould be something good to include in the developer notes.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-768955695",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "mentioned",
      "id": 4260323896,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI2MDMyMzg5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4260323896",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T10:27:56Z"
    },
    {
      "event": "subscribed",
      "id": 4260323898,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNjAzMjM4OTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4260323898",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T10:27:56Z"
    },
    {
      "event": "referenced",
      "id": 4262527208,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyNjI1MjcyMDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4262527208",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c1d4af79b35d678e9e6ea03cf8cf15f5a8b6dfe2",
      "commit_url": "https://api.github.com/repos/dongcarl/bitcoin/commits/c1d4af79b35d678e9e6ea03cf8cf15f5a8b6dfe2",
      "created_at": "2021-01-28T18:25:32Z"
    },
    {
      "event": "referenced",
      "id": 4262624921,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyNjI2MjQ5MjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4262624921",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5b8118e0fd2a90ea650b10e1fdff1666cc711ae8",
      "commit_url": "https://api.github.com/repos/dongcarl/bitcoin/commits/5b8118e0fd2a90ea650b10e1fdff1666cc711ae8",
      "created_at": "2021-01-28T18:50:19Z"
    },
    {
      "event": "referenced",
      "id": 4262718112,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyNjI3MTgxMTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4262718112",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f92dc6557a153b390a1ae1d0808ff7ed5d02c66e",
      "commit_url": "https://api.github.com/repos/dongcarl/bitcoin/commits/f92dc6557a153b390a1ae1d0808ff7ed5d02c66e",
      "created_at": "2021-01-28T19:14:39Z"
    },
    {
      "event": "referenced",
      "id": 4263133372,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyNjMxMzMzNzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4263133372",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e6eb8d2bbbd32e5741c1dc1ef4c9cec7aac16b34",
      "commit_url": "https://api.github.com/repos/dongcarl/bitcoin/commits/e6eb8d2bbbd32e5741c1dc1ef4c9cec7aac16b34",
      "created_at": "2021-01-28T20:48:53Z"
    },
    {
      "event": "labeled",
      "id": 4273592771,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQyNzM1OTI3NzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4273592771",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-01T13:10:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 770857739,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDg1NzczOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/770857739",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-01T13:30:05Z",
      "updated_at": "2021-02-01T13:30:05Z",
      "author_association": "MEMBER",
      "body": "Needs the (planned) rebase after #20749 merge.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-770857739",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "referenced",
      "id": 4289754634,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyODk3NTQ2MzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4289754634",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f1239b70d116ea28b65e60993a6e4ac82cc6c2b1",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1239b70d116ea28b65e60993a6e4ac82cc6c2b1",
      "created_at": "2021-02-04T09:23:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4291499150,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI5MTQ5OTE1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4291499150",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-04T15:27:30Z"
    },
    {
      "event": "referenced",
      "id": 4291708398,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyOTE3MDgzOTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4291708398",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "203242fcfc928f5cca15f670a54af5be8d58035c",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/203242fcfc928f5cca15f670a54af5be8d58035c",
      "created_at": "2021-02-04T16:05:32Z"
    },
    {
      "event": "unlabeled",
      "id": 4291766934,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDI5MTc2NjkzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4291766934",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-04T16:16:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 583460788,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzNDYwNzg4",
      "url": null,
      "actor": null,
      "commit_id": "c5154cad6c195759409d6eb5134fad635b9aaade",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Just few lightweight comments, not really blockers. I think the new changes are correct but have not done yet an in-depth review.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-583460788",
      "submitted_at": "2021-02-04T17:05:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "reviewed",
      "id": 584279133,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0Mjc5MTMz",
      "url": null,
      "actor": null,
      "commit_id": "2369045c6909bc242b996976d635cd7e6f9c7f62",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 74c8167b58db74597b624073fca0aaaab0066aea modulo new lock annotation error in the fuzz build https://cirrus-ci.com/task/4623722814373888?command=ci#L2378. Since last review there was a rebase with some trivial conflicts, and two new commits were added.\r\n\r\nI think you could consider dropping the last two commits and leaving them for a followup, because after f92dc6557a153b390a1ae1d0808ff7ed5d02c66e from #20749 and 20677ffa22e93e7408daadbd15d433f1e42faa86 from #21025, these are locking cleanups basically orthogonal to this PR.\r\n\r\nOn the contents of the two new commits, I don't really think the new is_ibd commit 2369045c6909bc242b996976d635cd7e6f9c7f62 is great and I left a comment about it. The lock annotation commit 74c8167b58db74597b624073fca0aaaab0066aea replacing cs_main locks with lock annotations is very welcome, though. It also could be extended to go further and remove other new cs_main locks added in f92dc6557a153b390a1ae1d0808ff7ed5d02c66e from #20749 and 20677ffa22e93e7408daadbd15d433f1e42faa86 from #21025, replacing them with lock annotations.\r\n\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-584279133",
      "submitted_at": "2021-02-05T12:37:00Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4323045963,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMyMzA0NTk2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4323045963",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T04:08:51Z"
    },
    {
      "event": "commented",
      "id": 777957331,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3Nzk1NzMzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777957331",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T04:16:51Z",
      "updated_at": "2021-02-12T04:16:51Z",
      "author_association": "MEMBER",
      "body": "I've pushed a rebase that\r\n- peels off the latest two locking annotation commits. I'll likely revive those in some form in a follow-up PR,\r\n- changes `ExpectedAssumeutxo()`'s return value per @ryanofsky's advice,\r\n- removes confusing `ChainstateManager` comments about locking per @jnewbery's advice,\r\n- adds commentary around the severity of changing the assumeutxo hash per @ariard's advice.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-777957331",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "mentioned",
      "id": 4323059482,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDMyMzA1OTQ4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4323059482",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T04:16:52Z"
    },
    {
      "event": "subscribed",
      "id": 4323059486,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzMjMwNTk0ODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4323059486",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T04:16:52Z"
    },
    {
      "event": "mentioned",
      "id": 4323059487,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDMyMzA1OTQ4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4323059487",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T04:16:52Z"
    },
    {
      "event": "subscribed",
      "id": 4323059489,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzMjMwNTk0ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4323059489",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T04:16:52Z"
    },
    {
      "event": "mentioned",
      "id": 4323059493,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDMyMzA1OTQ5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4323059493",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T04:16:52Z"
    },
    {
      "event": "subscribed",
      "id": 4323059495,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzMjMwNTk0OTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4323059495",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T04:16:52Z"
    },
    {
      "event": "labeled",
      "id": 4324042284,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQzMjQwNDIyODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4324042284",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T10:08:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTZjNDZiMzdlZGI4YmZhMDA4NWQyMDJhYTdlOTQyN2Q1ZTRmY2Vi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
      "tree": {
        "sha": "68f691ce5fec4b11dc22465db1ac82b25662f128",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68f691ce5fec4b11dc22465db1ac82b25662f128"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 68f691ce5fec4b11dc22465db1ac82b25662f128\nparent e9c037ba64dd5b073fccf059ef75db1c97abd0bd\nauthor James O'Beirne <james.obeirne@gmail.com> 1556204969 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138002 -0600\n\nchainparams: add allowed assumeutxo values\n\nValues for mainnet and testnet will be specified in a follow-up PR that can be\nscrutinized accordingly. This structure is required for use in snapshot activation\nlogic.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiFUACgkQepNdrbLE\nTwU8CA/9Grk0/CHM16R71VTtxDPLnL59LXe6jzkh3ePQPqqgh38bD7cw9DOOxFaq\ntapv1xAiRnW73V1jb4Cs5HJgb6//UErisB1Mq+uPB0U65KwDmyASxV8N2yo2z7iP\nVaZwlEU6t/iudwscTtmotA30iqmmjckhszhy5h1VFJTDkedrPoiLrIgzsbo8OE8R\nr9pShUK6dWrl8ZKJnn9woct/uGUk8fcf0J6IZaGMZLENAUmCtwooU7xQK6sChDZM\nGcQjanG+WhNKPoUkNmcbna5sLH32HLXgp1dBjX8msOIX65TO7OdtHpycjA+BcLvx\nwSeuAx9oJmNyxbCScymtovyNum/Ax0vT41Ouv2YB9aKvheWlKy4oQnuSiCtAWjdY\naRY3/F4IgMLrOIx6gEBGtFjL5DTypU6cWmL0aiF2X/W6wx2U54NRG/PebHo8sFpM\nYuqaWu50rlzN+fIJVbFsC63ryyygZLtlkwHPDlVSf39GBIhWZrW1VfvMBHfg/YP9\n8kYwDbFXDSHTeNQyOrlhTh9YgqEBoXhpLO0m2Gn2ScZJAHjvHzZpzAYeWak8lHVU\n/WiK+YH7z9DMyNOxsr91+hP1yaW4yyxm+96SmdGZOoDJFBxQcUqQRWe8vB3QeNzs\nvmb5N8jTxfOGmUwI/w01630Gar8YRJqO0DTlucoHTV7rywf0LiE=\n=/a9Y\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9c037ba64dd5b073fccf059ef75db1c97abd0bd",
          "sha": "e9c037ba64dd5b073fccf059ef75db1c97abd0bd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e9c037ba64dd5b073fccf059ef75db1c97abd0bd"
        }
      ],
      "message": "chainparams: add allowed assumeutxo values\n\nValues for mainnet and testnet will be specified in a follow-up PR that can be\nscrutinized accordingly. This structure is required for use in snapshot activation\nlogic.",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:22Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-04-25T15:09:29Z"
      },
      "sha": "7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmUyZGE1ZmI3YzY0MDZjMzc2MTJjODM4Yzk5ODA3OGVhOGQyMjUy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6e2da5fb7c6406c37612c838c998078ea8d2252",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f6e2da5fb7c6406c37612c838c998078ea8d2252",
      "tree": {
        "sha": "a543e8de37216084fe3cc7a32234e873377003e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a543e8de37216084fe3cc7a32234e873377003e5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a543e8de37216084fe3cc7a32234e873377003e5\nparent 7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb\nauthor James O'Beirne <james.obeirne@pm.me> 1598377823 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138009 -0600\n\nsimplify ChainstateManager::SnapshotBlockhash() return semantics\n\nDon't return null snapshotblockhash values to avoid caller complexity/confusion.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiFkACgkQepNdrbLE\nTwU7Gw/9FN18iCsDnuIp7YRWW12QEYbQgnzu7ppM78II69eazwOzaQS/K5Hn3vEK\nMu2tZ83bZHAUTkGHeSQkI5dD+ezSnY0+0Lw1YB1ffk/8ct3Seo1FbGmbe127/PLV\n0mDcQFYHrLApyL5ljA6iyWvOg8moFdQG2nZuid11mNLy6PrYcuSLCftiniOmJtw8\nTGVR3gG3bOZj2p5GCQ4bTupQDH9CihwJJhUYq0aYNUtiHAWX076/QHox2uydFr2K\nxKvZyNVmnHSPAZnK+NxszN5K+7dzifYHD/kJ5ZI8AIlP0ESv+MfnYr9BPfFFIRgv\nwx4QWNttC+gCt0CbDuKGrGPUm6cOCNcUhxXAEZMGF+kxmYaM04Eknw4CaMLZqcW5\nOKWI6ZFfcLjPjf0n1rKsc7u8RuQTepdWtrQfG9qWoYkcSaI7MnFNUSiHzb6aT4w4\nV9Y6ivBA4IYvFKNpG9PGhCyFXhKQamVg1WTr3Vf8LAjQcWLvdXePZe3uvOMZOJ5u\nZdmlMjz0gxKLAEDLFyNClzJLHDnAdmIcIHn72PF4/Xke/uwBtLXpavYD58v0ZOhA\nEvWl5rlD7gAre/bkG5VT/a3RLRIAgZC/7NPMDwErSc8B0As6Sn/dRgpb48y/WHaM\nSre5+dIiMMBuNRnO6ePE6WUr3b9R6dbe5rFdMmAxrpYpRGgQdAo=\n=9vE/\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
          "sha": "7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb"
        }
      ],
      "message": "simplify ChainstateManager::SnapshotBlockhash() return semantics\n\nDon't return null snapshotblockhash values to avoid caller complexity/confusion.",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:29Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-08-25T17:50:23Z"
      },
      "sha": "f6e2da5fb7c6406c37612c838c998078ea8d2252"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDk0OWJhNDQ5ZmYyMTE1ZTNkMjJjNzFmNWI2NTA5ZjExMTEyMDk4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad949ba449ff2115e3d22c71f5b6509f11112098",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ad949ba449ff2115e3d22c71f5b6509f11112098",
      "tree": {
        "sha": "e389510ed6ca780532c322c378c8049adde0e7c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e389510ed6ca780532c322c378c8049adde0e7c9"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e389510ed6ca780532c322c378c8049adde0e7c9\nparent f6e2da5fb7c6406c37612c838c998078ea8d2252\nauthor James O'Beirne <james.obeirne@pm.me> 1598377701 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138012 -0600\n\ntxdb: don't reset during in-memory cache resize\n\nWe can't support a reset of the dbwrapper object when in-memory configuration is used\nbecause it results in the permanent loss of coins. This only affects unittest\nconfigurations (since that's the only place we use in-memory CCoinsViewDB instances).\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiFwACgkQepNdrbLE\nTwXm8Q/+KRZ5vrkTdsKXdA9TGJIEyCTTPwSrSMv+x6+CK/fzPqMreqLF5SevdoST\n1nPuhRrL491K3Tb04/0NYzNiksX37wgyHap0eU7D5xU+NdZBXQVUJlwJ/EMuv134\nAlM7+L2JaLIR0u+2Y1A4KfY22EWmkaVQbQcNeV8/Vftz7jqTII5vkqlUNfQQM/O2\nGDB8DQWSFig33F56v9ofNYBNnUxfKjsSI9ybMyY9JxV/GtsW0ISao8xyIq7BDHWf\nVmA+2AtmXOXRURcj5FPrdvoqk1wd7gi9Dm6qHi5pm7beM29NWTYG9yCfrEvuJOrx\nJL+bPSAo9ClQCrz3K5Q9CFe/IpydDIPvXdEMGTq5lv1lv8KoFE9+nzkeJy43VF1+\n5zy9w+lqaygGM9iRgv/HPL82b1xELVd9CB2+t4DNB81/3ztHWhgdihBppEkbr//z\neILrM7ySyBkb91p3oo79eeQHSrGynBkD3rfWPqtHTyaSfKpdgZobcvjzaZPiuB0I\n+qt7ImdEbFWECDjmLRSqwzhhKrLWqzyzW7tzKNwpmrCNlF/iKStHsV7FcJRhB6LK\nN5tS4KenREbNVYpTwpOaYYiv/uYKDXXcRTqQJxLw9c/81TdNc4rpGA85aaPKucJM\nf+IpR8y9dE4qGmuyXvD29lnKmkdsgE6j8tWhpGxb/VrA2uO6RXQ=\n=9Xef\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6e2da5fb7c6406c37612c838c998078ea8d2252",
          "sha": "f6e2da5fb7c6406c37612c838c998078ea8d2252",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f6e2da5fb7c6406c37612c838c998078ea8d2252"
        }
      ],
      "message": "txdb: don't reset during in-memory cache resize\n\nWe can't support a reset of the dbwrapper object when in-memory configuration is used\nbecause it results in the permanent loss of coins. This only affects unittest\nconfigurations (since that's the only place we use in-memory CCoinsViewDB instances).",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:32Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-08-25T17:48:21Z"
      },
      "sha": "ad949ba449ff2115e3d22c71f5b6509f11112098"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjA2YTRmOGM2MTZjZjI1NjUzN2MzYmZiZGFkZTliNDNjNTFiNGY1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6606a4f8c616cf256537c3bfbdade9b43c51b4f5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6606a4f8c616cf256537c3bfbdade9b43c51b4f5",
      "tree": {
        "sha": "910c48b11b571dba80c11a5a9dbaa4d4226c3328",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/910c48b11b571dba80c11a5a9dbaa4d4226c3328"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 910c48b11b571dba80c11a5a9dbaa4d4226c3328\nparent ad949ba449ff2115e3d22c71f5b6509f11112098\nauthor James O'Beirne <james.obeirne@pm.me> 1598377618 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138014 -0600\n\nmove-onlyish: break out CreateUTXOSnapshot from dumptxoutset\n\nThis move/refactor is needed to set up a decent unittest for UTXO snapshot activation.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiF4ACgkQepNdrbLE\nTwUxgA//S3LVU14YczPEFCV/SdLNyUfIA4tTTxslJWSx4uSz6tApLMCHStHoF5Nl\nPnbzPzh/11dOgu3yvIdw8dljRWNWEBt42ilwW26TKl6sWu/SsK2NBLoioKTN5H8W\nAkiNxUw8Qld8jnbIrSfcE2fkopVcpsuoSe03UMPVOHUCeBeAcpBfoE9Mi34+55BJ\nqw53ZheHJPsarqBg71f4+sQPDUnLESWP2azVaXMknZeUjAR0QusdYoO+AwZTS2YJ\nL6d3HPcUltO9NaykNnW29wsiQChPCrI+Gz4j7gkCn2epF5AqrWcIE37W8zrwfAy8\nizWwMzZPwlMfEYUM0kWYZMOgivD6MCZ2bbysWu+ZPr287lKrL+FciesteIExLi18\nI6ZZrPzZQHlgxuwItwe3I03Tntu7A//bklfdfpGFLd4xmmpWkXGo9/tfEAD0m/9J\nO9BZRgRZd1L5ptL8y7oI2KGpunBIOH5aGpI0RtdHjhjEXirtYJhz8YNK/59x0jmQ\nP7qmlCsiiLTXqHX0JyeDIPBw2N7ggRNWtmsXymSId5pR65haZSQS6LnIL7ZJYoHT\nyOn4Tt+WrX2RY9Jd+arfJqUHVQ/nlZm8E6J09AhtSuCbEvv4hR/PIay8j+5ae7ry\nIJXUa5niIm2b/rSHIVDx9t3Sud/iMet/IRohAteMFBo4ZVv6UNQ=\n=Yo2g\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad949ba449ff2115e3d22c71f5b6509f11112098",
          "sha": "ad949ba449ff2115e3d22c71f5b6509f11112098",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ad949ba449ff2115e3d22c71f5b6509f11112098"
        }
      ],
      "message": "move-onlyish: break out CreateUTXOSnapshot from dumptxoutset\n\nThis move/refactor is needed to set up a decent unittest for UTXO snapshot activation.",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:34Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-08-25T17:46:58Z"
      },
      "sha": "6606a4f8c616cf256537c3bfbdade9b43c51b4f5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWQyMjUyNzRmZjFhNGIyNDVhZWEwYTY5ZjBlNTIyNGIwZTY0Y2Ey",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
      "tree": {
        "sha": "6fb0cb907ac8eed73edc23ee740eaedf1027ba01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fb0cb907ac8eed73edc23ee740eaedf1027ba01"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6fb0cb907ac8eed73edc23ee740eaedf1027ba01\nparent 6606a4f8c616cf256537c3bfbdade9b43c51b4f5\nauthor James O'Beirne <james.obeirne@pm.me> 1598891979 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138016 -0600\n\ntests: add deterministic chain generation unittest fixture\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiGAACgkQepNdrbLE\nTwXtgA//RRK4Z9bz/WpVWT/1KsgzEGhE3vJOGxDpoX/k5M6obCED8lS80HaE5wM4\nC4c8W/k0pinc6icfA9K60DYTUidoTGWsfSWyX0KDV4qNh3yUHyFnXtH+Z3EP+Nxf\nTwwb4tJSpi/V8cv8mtaAjT8GvOjM67r8pvQBoPNTdB5UxlXZfhi2LUIkmz/N+RLV\nM8POFrLtYxWwT3HseSvBhX9u0nnpvmLLIKgvIHmmjoTJnYuDIYIz02H+U46XGbyP\ncify9GitGVWXzwym8dOrw0ctCQOSqrbjfFQ4KfQ1dsyMFK1e4kxjqqw2c5wwXHUM\nNeqRnZurVEso8GRy0HiFRW2C1penqXo2JQsO7dU09XPKlIAnxw2Ua0RxwwhCfRzQ\nINtvIPpSCobd2QOllDNd7rkm88/3xtzWIR22ov7MY+sUNSgWTXaMI8OZoKVPXAs/\ndP1XLB9lcw+KPoBw7aCK+lsQfm+lwT1R1FwdOynneE3zegcSDF/p3ob+ep+FRi0C\n/Y+yc0HMWdLUovmCnbQxlx9olh3S9H9zXShb/YRdc4pK2yDtfSnpgqLJ48In13cb\n+qsccW7Wv+hki+1UokrZzdGl0a8jYYO/a+lrpKLTs7rkL076IlmVTi37QTDg0tEV\nbuvNqq+ju1jQGNU0hMCWA44P3pp2cjNoH8rIBBh9PAa92MxPqOg=\n=sjYf\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6606a4f8c616cf256537c3bfbdade9b43c51b4f5",
          "sha": "6606a4f8c616cf256537c3bfbdade9b43c51b4f5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6606a4f8c616cf256537c3bfbdade9b43c51b4f5"
        }
      ],
      "message": "tests: add deterministic chain generation unittest fixture",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:36Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-08-31T16:39:39Z"
      },
      "sha": "31d225274ff1a4b245aea0a69f0e5224b0e64ca2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDhkZTA0ZjMyNzM2MTk5ZTRiNDFhMTRhMmQyOWIxYTRkMGExNWQ0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
      "tree": {
        "sha": "400bc4e728fb9291532a71e83a504f7c776d674c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/400bc4e728fb9291532a71e83a504f7c776d674c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 400bc4e728fb9291532a71e83a504f7c776d674c\nparent 31d225274ff1a4b245aea0a69f0e5224b0e64ca2\nauthor James O'Beirne <james.obeirne@pm.me> 1598377971 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138017 -0600\n\ntests: add snapshot activation test\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiGEACgkQepNdrbLE\nTwXTnA//RbKle/vzds0Oy8W3JevcOPaHWPAjgPmylxi+levnHKCINwF+WBuqbjnI\nWfKfCyei5+7fO/ImaohuF2OY/gFPLeKEPWlTDiqRnEi+ydhYrAxxgd3q+MAi9wtl\nJdVo088qBPvAGvZTV1nPebIiv+PbRT9GRyzWe0QlogqdqzgqgBsm/hWAOnM3+ODI\nAbTlFA4BkE9Mgfq4hxSo7UoE2xjnXG6cJdPPS15V7HOKs40kVT3zGWGtZ0/AVpZc\nV5S8ek0ZgIY/P5p6EXDL94+Clksa/6SkxTv2Id46cgjkCOidtYXinDir+leE3cQs\nl4h2YuelX7WUmpSq0duhgKEyMvdFfD3oW6eG9Kmzj4Dxhfi73XzRxPW9dugaYGl3\ngaOjr4Y6qXuJOYsNnuz71ytnacSN975zI4EyH0IsvxfJdRl+ggzzaJStPecXc2mX\nYnUYjzYpoknfoENEjcyOTYegXzwg6n2w3GP+oS+utdms2Q1w+x5cc4WrolivOUE1\naRMlwLfIckaJeQ6Cqd5QY6u96ozZ4Jl8seCYjiQ6SWS3L7oRHul0EtGr6Zxz6fYA\nUe5457W+s2bzGIa+Jo1aPpD2ec6tPW70+xTed6wbqJGrBlGm/8FURYJN9LA1hlmT\nVAgKdwm8UNgO8ifaJIgmVeBVlRmiraHIa3rPgZ/dB+4A0mWqRLE=\n=eCKw\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
          "sha": "31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/31d225274ff1a4b245aea0a69f0e5224b0e64ca2"
        }
      ],
      "message": "tests: add snapshot activation test",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:37Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-08-25T17:52:51Z"
      },
      "sha": "4d8de04f32736199e4b41a14a2d29b1a4d0a15d4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjlhMWVmOWZkYzljMzcyZjViYmU5MWQxOTYxY2FiZDYwYmMxODk1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/769a1ef9fdc9c372f5bbe91d1961cabd60bc1895",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/769a1ef9fdc9c372f5bbe91d1961cabd60bc1895",
      "tree": {
        "sha": "324e7d1fa6011b18de611ec05934f14bd8eb4a5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/324e7d1fa6011b18de611ec05934f14bd8eb4a5c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 324e7d1fa6011b18de611ec05934f14bd8eb4a5c\nparent 4d8de04f32736199e4b41a14a2d29b1a4d0a15d4\nauthor Fabian Jahr <fjahr@protonmail.com> 1605796213 -0500\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138020 -0600\n\ntest: Add tests with maleated snapshot data\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiGQACgkQepNdrbLE\nTwWk9hAAhHmnR/XLGWDzKCVD2Gy1dBIwl2YfB4aEzMjdogAdar9B46SL2aSra8mZ\nar1wntPb0lyvgYsRsNsL4qxZhLXjlUN0J6PEJwkwTvGsinBcsduaPAvyS1AlI3ZQ\nTKUTBApuajdKwgFlfLBpY4+PiqLyNLa5Rd/JssoHNZT2cr0yc/tL/4zy+PpVY4Su\nc94MB8Phn7JUvPkBMLE/FzwKhoSvz9h7mR/NkRb/4KgxnJsJZowx9at7yeC91ukN\nKHakmGlFmFz3WYEzB7uIoOHeRfeF4k5fXyNPOGQ/R6TuKbhhDEdtpjw6+sOJv8zx\nNliJvmPXc9PJT+qLbqllh/5sLdp12dbdKQKtMdrQx6l80XBQHmMgWVuKPs65hNc3\nDYIR2cjbAFD+pLl5BBtRuG1IhPaipwg7LzwAIISyowd+Hk1XCaFPuVfAJFfhJZqA\nCifNZ2uoJDbOjD3oPLoyybeh1AgyqlXMfUJeMYITGM8CgBhWKxx2aHMXJ3wRCN/C\nhcV/+ClvvSQvXx9UnUKRyu0bbA2F4XkbQEoxUHglpuxGNwYrqebHXLPp3zaPTnL6\no2VktP2SnWZABzrrZ6tAkCUEZ1a5u0n0HsiS2x2Aj+jfnTziVZfYZyQFe4UN2lEO\n50lbSS/FZVADI49bMsxZ5Xw99Rh7uqAiN61KZ3ZL0edh2sud3xA=\n=/v88\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
          "sha": "4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4"
        }
      ],
      "message": "test: Add tests with maleated snapshot data",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:40Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-11-19T14:30:13Z"
      },
      "sha": "769a1ef9fdc9c372f5bbe91d1961cabd60bc1895"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWZjMGU0YWExYjkxMDk5MWQ0ZjhhNzdkNzRlMjE5N2YzNzA5ODdj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "tree": {
        "sha": "62de33efac62e7d02f994021f35e45d47f83ea10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62de33efac62e7d02f994021f35e45d47f83ea10"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 62de33efac62e7d02f994021f35e45d47f83ea10\nparent 769a1ef9fdc9c372f5bbe91d1961cabd60bc1895\nauthor James O'Beirne <james.obeirne@pm.me> 1613102564 -0600\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138021 -0600\n\ndoc: remove potentially confusing ChainstateManager comment\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiGUACgkQepNdrbLE\nTwUzyg/8CHSj7Mt3plqPyJdq9+L9+jtE2mrOhDC87WgszWDyF2uFe9zvUogIKG8i\nrGj4RyhMB5dPpJEv0UuY79cjizI3kVEL8e+FUQWRzbD5VjK7WBD+8dkiEMfx6WEh\nIFtWiQGJ/5ouKuTROuWy+lwlgmzkaBIaGNv5lu9EQLAin8/7ZtFccnPymSOgzvlW\nOCD1OIIvtw93gMpXYm0OMiHJR1vl+2tokgJw0pc8hkly7QW9Q6eOH+JEKTu0q1oF\nOzVCtGjkByr5xQJkACRFMB8PrQRe7f4gRMe340uFGYMfaECNmmOuNzX/uTVXOoas\nnnpRRfWj87aCQSl9lZfBb78DpLZjS4Yy4t/beffYvOeCKdGv3n3zI7eNdjUix4OV\noazmzvljHtNeyoLn21+xpwB7aUFQlo8yZBEax8Mr9bH7YiqT6MhujbyBHG6G+MH1\n+SsjhT585mQFy+ZutOeH7kp9DqXoaoM1RSV6DUrIzJS9DnUhoqRdbKEIjEpSuBeu\nqcLNKY/124z51LsTtakoJLkBeNSjRQRPzsGIDpZgW3VXVTQTPLfgxYtiPDBjkreL\nrW13Nqbo9sE3RiTDWSfmIjqAsXKs+JOK7EUxCTN9JFfIBeLE8ScsSFpKeOT7sj1z\n5Pce83fonKM8oRcIWkBptwf8R8XBieY2X0OuFXHeaOekBQOwZaE=\n=Lp9S\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/769a1ef9fdc9c372f5bbe91d1961cabd60bc1895",
          "sha": "769a1ef9fdc9c372f5bbe91d1961cabd60bc1895",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/769a1ef9fdc9c372f5bbe91d1961cabd60bc1895"
        }
      ],
      "message": "doc: remove potentially confusing ChainstateManager comment",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:41Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T04:02:44Z"
      },
      "sha": "1afc0e4aa1b910991d4f8a77d74e2197f370987c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4324947486,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMyNDk0NzQ4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4324947486",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T14:01:42Z"
    },
    {
      "event": "unlabeled",
      "id": 4325028070,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDMyNTAyODA3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4325028070",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T14:18:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 778804420,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3ODgwNDQyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/778804420",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-14T16:47:32Z",
      "updated_at": "2021-02-14T16:47:32Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 1afc0e4aa1b910991d4f8a77d74e2197f370987c\r\n\r\nReviewed changes since last review and confirmed they were due to rebasing or addressing review comments as discussed above.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-778804420",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "commented",
      "id": 780028424,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDAyODQyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780028424",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T18:22:00Z",
      "updated_at": "2021-02-16T18:22:00Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-780028424",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "merged",
      "id": 4337647619,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDMzNzY0NzYxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4337647619",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "92fee79dab384acea47bf20741a9847a58253330",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fee79dab384acea47bf20741a9847a58253330",
      "created_at": "2021-02-16T18:23:27Z"
    },
    {
      "event": "closed",
      "id": 4337647624,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDMzNzY0NzYyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4337647624",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T18:23:27Z"
    },
    {
      "event": "removed_from_project",
      "id": 4337649367,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50NDMzNzY0OTM2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4337649367",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T18:23:52Z",
      "project_card": {
        "id": 44443919,
        "url": "https://api.github.com/projects/columns/cards/44443919",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 4338269870,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQzMzgyNjk4NzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4338269870",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4fa2f63d067b75fad896524de5cbeaf32f115ea4",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/4fa2f63d067b75fad896524de5cbeaf32f115ea4",
      "created_at": "2021-02-16T21:08:13Z"
    },
    {
      "event": "reviewed",
      "id": 556903868,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTAzODY4",
      "url": null,
      "actor": null,
      "commit_id": "80f5bacf55ef62b6ac67ee3bc1d9220ec4bc67d6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. I left some style comment, questions, and found a bunch of crashes/UB.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-556903868",
      "submitted_at": "2021-04-03T13:29:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "commented",
      "id": 813055299,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxMzA1NTI5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813055299",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-04T15:47:59Z",
      "updated_at": "2021-04-04T15:47:59Z",
      "author_association": "MEMBER",
      "body": "(commit title and description of f6e2da5 doesn't match what it does)",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-813055299",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19806"
    },
    {
      "event": "added_to_project",
      "id": 4559862252,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQ0NTU5ODYyMjUy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4559862252",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-07T02:28:02Z",
      "project_card": {
        "id": 44312284,
        "url": "https://api.github.com/projects/columns/cards/44312284",
        "project_id": 2564674,
        "project_url": "https://api.github.com/projects/2564674",
        "column_name": "In progress"
      }
    },
    {
      "event": "moved_columns_in_project",
      "id": 4559862440,
      "node_id": "MDI2Ok1vdmVkQ29sdW1uc0luUHJvamVjdEV2ZW50NDU1OTg2MjQ0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4559862440",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-07T02:28:06Z",
      "project_card": {
        "id": 44312284,
        "url": "https://api.github.com/projects/columns/cards/44312284",
        "project_id": 2564674,
        "project_url": "https://api.github.com/projects/2564674",
        "column_name": "Done",
        "previous_column_name": "In progress"
      }
    },
    {
      "event": "reviewed",
      "id": 634216112,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM0MjE2MTEy",
      "url": null,
      "actor": null,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-634216112",
      "submitted_at": "2021-04-13T06:33:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
    },
    {
      "event": "referenced",
      "id": 4690190563,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2OTAxOTA1NjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4690190563",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "128b98fce36db8d4a85e056a30e141fc117f3390",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/128b98fce36db8d4a85e056a30e141fc117f3390",
      "created_at": "2021-05-05T16:41:31Z"
    },
    {
      "event": "referenced",
      "id": 5840770157,
      "node_id": "REFE_lADOABII584o3xsEzwAAAAFcIxRt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5840770157",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c50dcf5b67ea805a74e1550c3790b1b6e36fc3b0",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/c50dcf5b67ea805a74e1550c3790b1b6e36fc3b0",
      "created_at": "2022-01-04T14:30:36Z"
    },
    {
      "event": "referenced",
      "id": 6282501454,
      "node_id": "REFE_lADOABII584o3xsEzwAAAAF2d11O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6282501454",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "cc45d5a0d908dbf739178e7112e3799691b9cf20",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/cc45d5a0d908dbf739178e7112e3799691b9cf20",
      "created_at": "2022-03-22T10:35:06Z"
    },
    {
      "event": "referenced",
      "id": 6417333874,
      "node_id": "REFE_lADOABII584o3xsEzwAAAAF-gL5y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6417333874",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ddb302e35b90674aed680573f75b613bb34d4c63",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/ddb302e35b90674aed680573f75b613bb34d4c63",
      "created_at": "2022-04-12T09:44:53Z"
    },
    {
      "event": "referenced",
      "id": 6417333884,
      "node_id": "REFE_lADOABII584o3xsEzwAAAAF-gL58",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6417333884",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "329ebe9632294dc4d4eadd82fd3d6b6d2307191c",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/329ebe9632294dc4d4eadd82fd3d6b6d2307191c",
      "created_at": "2022-04-12T09:44:53Z"
    },
    {
      "event": "referenced",
      "id": 6417333906,
      "node_id": "REFE_lADOABII584o3xsEzwAAAAF-gL6S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6417333906",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a5dc7a8acfa5c761cef378b83323898a71a33189",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/a5dc7a8acfa5c761cef378b83323898a71a33189",
      "created_at": "2022-04-12T09:44:53Z"
    },
    {
      "event": "referenced",
      "id": 6424683772,
      "node_id": "REFE_lADOABII584o3xsEzwAAAAF-8OT8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6424683772",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "03af9518eaa9c53017be77b7a1c945f539897c62",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/03af9518eaa9c53017be77b7a1c945f539897c62",
      "created_at": "2022-04-13T06:43:31Z"
    },
    {
      "event": "referenced",
      "id": 6424683781,
      "node_id": "REFE_lADOABII584o3xsEzwAAAAF-8OUF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6424683781",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0e3eebdb361880698531cb2269a294d4b13cd308",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/0e3eebdb361880698531cb2269a294d4b13cd308",
      "created_at": "2022-04-13T06:43:31Z"
    },
    {
      "event": "referenced",
      "id": 6424683789,
      "node_id": "REFE_lADOABII584o3xsEzwAAAAF-8OUN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6424683789",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "83ee1128149f37ea27836e524affab0eebce5032",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/83ee1128149f37ea27836e524affab0eebce5032",
      "created_at": "2022-04-13T06:43:31Z"
    },
    {
      "event": "referenced",
      "id": 6424683809,
      "node_id": "REFE_lADOABII584o3xsEzwAAAAF-8OUh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6424683809",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "64fc457623b224b501e469d6640b43b2bc6e7f03",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/64fc457623b224b501e469d6640b43b2bc6e7f03",
      "created_at": "2022-04-13T06:43:31Z"
    },
    {
      "event": "locked",
      "id": 7216534778,
      "node_id": "LOE_lADOABII584o3xsEzwAAAAGuI5T6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7216534778",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T18:23:16Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479626183",
      "pull_request_review_id": 478110745,
      "id": 479626183,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyNjE4Mw==",
      "diff_hunk": "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is your reasoning behind calling the utxo set hash `assumeutxo` here? It makes it harder for me to reason about but i may be in the minority and this is easier for the casual user. Was that your intention? If we have different hashes in the future and they might be used for assumeutxo as well it would be probably best to use the explicit name for this type of hash `hash_serialized_2`.",
      "created_at": "2020-08-29T08:35:22Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479626183",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479626183"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479626276",
      "pull_request_review_id": 478110745,
      "id": 479626276,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyNjI3Ng==",
      "diff_hunk": "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This makes me a bit uncomfortable because we can't test the actual functionality of this function with this. Do you plan to keep this or change it in a follow-up with changes to the testing framework that allow for a better test?",
      "created_at": "2020-08-29T08:36:46Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479626276",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479626276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479634348",
      "pull_request_review_id": 478110745,
      "id": 479634348,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNDM0OA==",
      "diff_hunk": "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\r\n```",
      "created_at": "2020-08-29T10:16:09Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479634348",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479634348"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5346,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479636397",
      "pull_request_review_id": 478110745,
      "id": 479636397,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNjM5Nw==",
      "diff_hunk": "@@ -407,3 +411,25 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+bool CCoinsViewDB::SetNChainTx(unsigned int n_chain_tx)\n+{\n+    return m_db->Write(DB_NCHAINTX, n_chain_tx, /*fsync*/ true);\n+}\n+\n+unsigned int CCoinsViewDB::GetNChainTx()\n+{\n+    // We choose 1 and not 0 because, in the unlikely event that we can't read\n+    // a value from this key, we don't want LoadBlockIndex() to malfunction for\n+    // snapshot chainstates being loaded. Returning 1 here will break the\n+    // progress= measure, but returning 0 would cause us to not be able to add\n+    // chain tips for the snapshot chainstate. This shouldn't happen and is",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I assume it wouldn't work because of a divide by zero error in the progress function? Shouldn't that be rather dealt with at that layer?",
      "created_at": "2020-08-29T10:42:35Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479636397",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479636397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": 425,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 430,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479649888",
      "pull_request_review_id": 478128208,
      "id": 479649888,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTg4OA==",
      "diff_hunk": "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "in_reply_to_id": 479626276,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "One alternative way would be hardcode a pre-mined chain into the test and use it, similar to what signet does here: https://github.com/bitcoin/bitcoin/pull/18267/commits/6206c2e8e87fcc70848e4a0fab871d5fd9ea6b16",
      "created_at": "2020-08-29T13:28:00Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479649888",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479649888"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479717530",
      "pull_request_review_id": 478169500,
      "id": 479717530,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcxNzUzMA==",
      "diff_hunk": "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "in_reply_to_id": 479626276,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the look. This is good feedback; I'll see if I can get a seed-based deterministic generation of a reg test chain and then add some values/tests based on that. When I originally wrote this I think I'd forgotten that we can mock time.",
      "created_at": "2020-08-30T03:50:48Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479717530",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479717530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479717700",
      "pull_request_review_id": 478169595,
      "id": 479717700,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcxNzcwMA==",
      "diff_hunk": "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "in_reply_to_id": 479626183,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It was for consistency with `assumevalid` but I'm happy to rename it in lieu of something better.",
      "created_at": "2020-08-30T03:53:28Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479717700",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479717700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480264245",
      "pull_request_review_id": 478786341,
      "id": 480264245,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NDI0NQ==",
      "diff_hunk": "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit d6396c4be4\r\n\r\nFor pure-utility functions it would be good to pass in `params` instead of relying on the global",
      "created_at": "2020-08-31T17:01:59Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480264245",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480264245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480264955",
      "pull_request_review_id": 478786341,
      "id": 480264955,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NDk1NQ==",
      "diff_hunk": "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "in_reply_to_id": 479626276,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree that regtest should have an assumeutxo hash baked in. Maybe we could even get the 200-blocks premine to be deterministic and use that?",
      "created_at": "2020-08-31T17:03:25Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480264955",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480264955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480269550",
      "pull_request_review_id": 478786341,
      "id": 480269550,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2OTU1MA==",
      "diff_hunk": "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.\n+//! This only contains a value for chainstates created based on a snapshot.\n+static constexpr char DB_NCHAINTX = 'n';",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can't this be hardcoded beside the blockheight and assumeutxo hash in the chain params? \r\n\r\n(If not, I'll need to think more about how the txdb value for nchaintx interacts with major version upgrades, which bump the assumeutxo)",
      "created_at": "2020-08-31T17:12:07Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480269550",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480269550"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480270148",
      "pull_request_review_id": 478786341,
      "id": 480270148,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MDE0OA==",
      "diff_hunk": "@@ -232,6 +233,9 @@ class CCoinsViewBacked : public CCoinsView\n };\n \n \n+class ChainstateManager;",
      "path": "src/coins.h",
      "position": null,
      "original_position": 12,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit: bdf182e81e\r\n\r\nforward decls right after the includes, pls. kthx",
      "created_at": "2020-08-31T17:13:16Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480270148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480270148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480272552",
      "pull_request_review_id": 478786341,
      "id": 480272552,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjU1Mg==",
      "diff_hunk": "@@ -829,6 +837,27 @@ class ChainstateManager\n     //! Get all chainstates currently being used.\n     std::vector<CChainState*> GetAll();\n \n+    //! Construct and activate a Chainstate on the basis of UTXO snapshot data.\n+    //!\n+    //! Steps:\n+    //!\n+    //! - Initialize an unused CChainState.\n+    //!\n+    //! - Load its `CoinsViews` contents from `coins_file`.\n+    //!\n+    //! - Verify that the hash of the resulting coinsdb matches the expected hash\n+    //!   per assumeutxo chain parameters.\n+    //!\n+    //! - Wait for our headers chain to include the base block of the snapshot.\n+    //!\n+    //! - \"Fast forward\" the tip of the new chainstate to the base of the snapshot,\n+    //!   faking nTx* block index data along the way.\n+    //!\n+    //! - Move the new chainstate to `m_snapshot_chainstate` and make it our\n+    //!   ChainstateActive().\n+    NODISCARD bool ActivateSnapshot(\n+        CAutoFile* coins_file, SnapshotMetadata metadata, bool in_memory);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 49,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit bdf182e81e\r\n\r\nthis can't be nullptr, so `&` seems more appropriate. Also the metadata should be read-only here?\r\n\r\n```suggestion\r\n        CAutoFile& coins_file, const SnapshotMetadata& metadata, bool in_memory);\r\n```",
      "created_at": "2020-08-31T17:18:14Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480272552",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480272552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480274008",
      "pull_request_review_id": 478786341,
      "id": 480274008,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NDAwOA==",
      "diff_hunk": "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: compile time constants can be UPPER_CASE",
      "created_at": "2020-08-31T17:21:03Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480274008",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480274008"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5315,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480274541",
      "pull_request_review_id": 478786341,
      "id": 480274541,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NDU0MQ==",
      "diff_hunk": "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Please prefer the identical ChainstateManager::ActiveChainstate",
      "created_at": "2020-08-31T17:22:04Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480274541",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480274541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5328,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480275488",
      "pull_request_review_id": 478786341,
      "id": 480275488,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NTQ4OA==",
      "diff_hunk": "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    auto snapshot_chainstate = MakeUnique<CChainState>(mempool, m_blockman, base_blockhash);\r\n```\r\n\r\nneeds rebase",
      "created_at": "2020-08-31T17:24:00Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480275488",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480275488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5337,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480280231",
      "pull_request_review_id": 478786341,
      "id": 480280231,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MDIzMQ==",
      "diff_hunk": "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile* coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        *coins_file >> outpoint;\n+        *coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        *coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {})) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 166,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {/*TODO*/})) {\r\n```\r\n\r\ncould make sense to make this interruptible if it takes a long time",
      "created_at": "2020-08-31T17:32:52Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480280231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480280231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5463,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480281665",
      "pull_request_review_id": 478786341,
      "id": 480281665,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MTY2NQ==",
      "diff_hunk": "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile* coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        *coins_file >> outpoint;\n+        *coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        *coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {})) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));",
      "path": "src/validation.cpp",
      "position": 242,
      "original_position": 183,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So in other words this will deadlock with `-nonetworkactive` or `-noconnect`?\r\n\r\nIf yes, what about including the preceding headers in the snapshot? I know we had a discussion about that, but I forget the result. Please remind me :sweat_smile:  ",
      "created_at": "2020-08-31T17:35:28Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480281665",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480281665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5417,
      "original_line": 5417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480284080",
      "pull_request_review_id": 478811744,
      "id": 480284080,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NDA4MA==",
      "diff_hunk": "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "in_reply_to_id": 479626276,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If nothing else, you can take the hash from `./test/functional/rpc_dumptxoutset.py`",
      "created_at": "2020-08-31T17:40:02Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480284080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480284080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480432499",
      "pull_request_review_id": 479010878,
      "id": 480432499,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMjQ5OQ==",
      "diff_hunk": "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "in_reply_to_id": 479626276,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've updated the regtest assumeutxo values for two separate heights and added some utilities to the unittest framework for generating a deterministic chain, so we now have some decent tests in place for this.",
      "created_at": "2020-08-31T22:25:06Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480432499",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480432499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480432847",
      "pull_request_review_id": 479011098,
      "id": 480432847,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMjg0Nw==",
      "diff_hunk": "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "in_reply_to_id": 480264245,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-08-31T22:25:36Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480432847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480432847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433215",
      "pull_request_review_id": 479011341,
      "id": 480433215,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMzIxNQ==",
      "diff_hunk": "@@ -829,6 +837,27 @@ class ChainstateManager\n     //! Get all chainstates currently being used.\n     std::vector<CChainState*> GetAll();\n \n+    //! Construct and activate a Chainstate on the basis of UTXO snapshot data.\n+    //!\n+    //! Steps:\n+    //!\n+    //! - Initialize an unused CChainState.\n+    //!\n+    //! - Load its `CoinsViews` contents from `coins_file`.\n+    //!\n+    //! - Verify that the hash of the resulting coinsdb matches the expected hash\n+    //!   per assumeutxo chain parameters.\n+    //!\n+    //! - Wait for our headers chain to include the base block of the snapshot.\n+    //!\n+    //! - \"Fast forward\" the tip of the new chainstate to the base of the snapshot,\n+    //!   faking nTx* block index data along the way.\n+    //!\n+    //! - Move the new chainstate to `m_snapshot_chainstate` and make it our\n+    //!   ChainstateActive().\n+    NODISCARD bool ActivateSnapshot(\n+        CAutoFile* coins_file, SnapshotMetadata metadata, bool in_memory);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 49,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "in_reply_to_id": 480272552,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yup, good call. Done.",
      "created_at": "2020-08-31T22:26:07Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433215",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433490",
      "pull_request_review_id": 479011530,
      "id": 480433490,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMzQ5MA==",
      "diff_hunk": "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "in_reply_to_id": 480274541,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oof, dumb move on my part. Thanks, fixed.",
      "created_at": "2020-08-31T22:26:30Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433490",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5328,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433603",
      "pull_request_review_id": 479011600,
      "id": 480433603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMzYwMw==",
      "diff_hunk": "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "in_reply_to_id": 480275488,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks.",
      "created_at": "2020-08-31T22:26:39Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5337,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480435696",
      "pull_request_review_id": 479012962,
      "id": 480435696,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzNTY5Ng==",
      "diff_hunk": "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile* coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        *coins_file >> outpoint;\n+        *coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        *coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {})) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));",
      "path": "src/validation.cpp",
      "position": 242,
      "original_position": 183,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "in_reply_to_id": 480281665,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Well, if by \"deadlock\" you mean \"sleep-loop for ten minutes and then fail the activation,\" I guess so. But I wouldn't call this a deadlock personally.\r\n\r\nMaybe others can chime in here but IMO it still makes sense to obtain headers from the network, since ultimately what use is a snapshot without network connectivity and peers to get you to the tip of the chain? There may have been a more concrete reason but I can't remember it.",
      "created_at": "2020-08-31T22:29:43Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480435696",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480435696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5417,
      "original_line": 5417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480835783",
      "pull_request_review_id": 479412104,
      "id": 480835783,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNTc4Mw==",
      "diff_hunk": "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile* coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        *coins_file >> outpoint;\n+        *coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        *coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {})) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));",
      "path": "src/validation.cpp",
      "position": 242,
      "original_position": 183,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "in_reply_to_id": 480281665,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh I missed the `max_secs_to_wait_for_headers` :sleeping: ",
      "created_at": "2020-09-01T05:34:47Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480835783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480835783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5417,
      "original_line": 5417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481128165",
      "pull_request_review_id": 479728652,
      "id": 481128165,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyODE2NQ==",
      "diff_hunk": "@@ -74,4 +74,43 @@ BOOST_AUTO_TEST_CASE(test_combiner_all)\n     Test.disconnect(&ReturnTrue);\n     BOOST_CHECK(Test());\n }\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_tests_regtest, RegTestingSetup)",
      "path": "src/test/validation_tests.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "1aa7b9137090d0021298a0e2696871dd21bfdefc",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\nThe test suite in file src/test/foo_tests.cpp should be named\r\n\"foo_tests\". Please make sure the following test suites follow\r\nthat convention:\r\nsrc/test/validation_tests.cpp:BOOST_FIXTURE_TEST_SUITE(validation_tests_regtest, RegTestingSetup)\r\n^---- failure generated from test/lint/lint-tests.sh\r\n```",
      "created_at": "2020-09-01T13:15:18Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r481128165",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481128165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482332094",
      "pull_request_review_id": 481228137,
      "id": 482332094,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMzMjA5NA==",
      "diff_hunk": "@@ -24,6 +24,9 @@ static uint64_t GetBogoSize(const CScript& scriptPubKey)\n            scriptPubKey.size() /* scriptPubKey */;\n }\n \n+//! XXX: be very careful when changing this! assumeutuxo and UTXO snapshot",
      "path": "src/node/coinstats.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "60bd91334a3654fe59dac0bd28fb8824b897edf7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"add allowed assumeutxo values\" (60bd91334a3654fe59dac0bd28fb8824b897edf7)\r\n\r\nMinor: Suggest s/XXX/Warning/. Some editors treat XXX like TODO",
      "created_at": "2020-09-02T19:22:46Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482332094",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482332094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482426252",
      "pull_request_review_id": 481228137,
      "id": 482426252,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyNjI1Mg==",
      "diff_hunk": "@@ -955,4 +955,14 @@ inline bool IsBlockPruned(const CBlockIndex* pblockindex)\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainParams& params);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 12,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "60bd91334a3654fe59dac0bd28fb8824b897edf7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"add allowed assumeutxo values\" (60bd91334a3654fe59dac0bd28fb8824b897edf7)\r\n\r\nNote: unit test coverage for this function is added in later commit \"tests: add unittest for ExpectedAssumeutxo\"\r\n\r\nJust a suggestion, but I think it would be nice to combine these two commits. Adding new tests along with code makes it easier to:\r\n\r\n- Understand the code change (seeing how a function is called can be even more helpful than seeing how it's defined)\r\n- Check that test coverage is adequate\r\n- Check that intermediate commits aren't broken",
      "created_at": "2020-09-02T20:34:05Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482426252",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482426252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 966,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482495858",
      "pull_request_review_id": 481228137,
      "id": 482495858,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ5NTg1OA==",
      "diff_hunk": "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.\n+//! This only contains a value for chainstates created based on a snapshot.\n+static constexpr char DB_NCHAINTX = 'n';",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "in_reply_to_id": 480269550,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Can't this be hardcoded beside the blockheight and assumeutxo hash in the chain params?\r\n> \r\n> (If not, I'll need to think more about how the txdb value for nchaintx interacts with major version upgrades, which bump the assumeutxo)\r\n\r\nHardcoding this seems does seem like it might be a good simplification. It also seems like hardcoding might be useful for validating the snapshot? Otherwise, would a bad SnapshotMetadata::m_nchaintx value in the snapshot go undetected?\r\n\r\nAnother place this value could be stored might is in `chainstate_` directory name alongside the block hash, but maybe that is too verbose.\r\n\r\nAnyway, txdb does seem like a reasonable place to keep this number, especially if it can be checked and removed when the background sync completes.",
      "created_at": "2020-09-02T21:34:48Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482495858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482495858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482518150",
      "pull_request_review_id": 481228137,
      "id": 482518150,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxODE1MA==",
      "diff_hunk": "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.\n+//! This only contains a value for chainstates created based on a snapshot.",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bc622c33ce925159906e3b00be77b11d598397ed",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"txdb: add nChainTx cache for snapshot chainstates\" (bc622c33ce925159906e3b00be77b11d598397ed)\r\n\r\n\"Only contains a value\" suggests the row may be present without a value. Would suggest saying something like \"This is not present in the normal coins database. It is only saved and used in in temporary UTXO snapshots.\"",
      "created_at": "2020-09-02T22:02:18Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482518150",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482518150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482524613",
      "pull_request_review_id": 481228137,
      "id": 482524613,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUyNDYxMw==",
      "diff_hunk": "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "bc622c33ce925159906e3b00be77b11d598397ed",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"txdb: add nChainTx cache for snapshot chainstates\" (bc622c33ce925159906e3b00be77b11d598397ed)\r\n\r\nCan you remind what this is used for? Just estimating sync progress, or other things too? Would also be good to make comment more specific, maybe \"Cached CBlockIndex::nChainTx value (number of transactions in chain) at the base block of a UTXO snapshot that is being imported. This is used to [...]\" ",
      "created_at": "2020-09-02T22:10:52Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482524613",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482524613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482532448",
      "pull_request_review_id": 481228137,
      "id": 482532448,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUzMjQ0OA==",
      "diff_hunk": "@@ -407,3 +411,25 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+bool CCoinsViewDB::SetNChainTx(unsigned int n_chain_tx)\n+{\n+    return m_db->Write(DB_NCHAINTX, n_chain_tx, /*fsync*/ true);\n+}\n+\n+unsigned int CCoinsViewDB::GetNChainTx()\n+{\n+    // We choose 1 and not 0 because, in the unlikely event that we can't read\n+    // a value from this key, we don't want LoadBlockIndex() to malfunction for\n+    // snapshot chainstates being loaded. Returning 1 here will break the\n+    // progress= measure, but returning 0 would cause us to not be able to add\n+    // chain tips for the snapshot chainstate. This shouldn't happen and is",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "in_reply_to_id": 479636397,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I assume it wouldn't work because of a divide by zero error in the progress function? Shouldn't that be rather dealt with at that layer?\r\n\r\nWould agree that handling this in LoadBlockIndex would be preferable to having to hardcode 1's  here and in `ChainstateManager::GetSnapshotNChainTx` along with comments describing other layers of code. Both `CCoinsViewDB::GetNChainTx` and `ChainstateManager::GetSnapshotNChainTx` could return `Optional<int>` to avoid the need to hardcode something",
      "created_at": "2020-09-02T22:21:08Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482532448",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482532448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": 425,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 430,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482595806",
      "pull_request_review_id": 481378969,
      "id": 482595806,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5NTgwNg==",
      "diff_hunk": "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.\n+//! This only contains a value for chainstates created based on a snapshot.\n+static constexpr char DB_NCHAINTX = 'n';",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "in_reply_to_id": 480269550,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, I think @MarcoFalke's approach is the right one. Will implement tomorrow.",
      "created_at": "2020-09-02T23:24:18Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482595806",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482595806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483817973",
      "pull_request_review_id": 482906983,
      "id": 483817973,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxNzk3Mw==",
      "diff_hunk": "@@ -5235,7 +5235,8 @@ class CMainCleanup\n static CMainCleanup instance_of_cmaincleanup;\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n-    if (m_active_chainstate != nullptr) {\n+    if (m_active_chainstate != nullptr &&\n+            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {",
      "path": "src/validation.cpp",
      "position": 14,
      "original_position": 6,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "75d1e7754274d3f015a49e71871c3a069cbe020b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"simplify ChainstateManager::SnapshotBlockhash() return semantics\" (75d1e7754274d3f015a49e71871c3a069cbe020b)\r\n\r\nThere doesn't seem to be any test coverage for this, or at least test seem to pass with change reverted. Would be good to have test coverage when changing a corner case.",
      "created_at": "2020-09-04T19:51:00Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483817973",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483817973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5152,
      "original_line": 5152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483846226",
      "pull_request_review_id": 482906983,
      "id": 483846226,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0NjIyNg==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nWould be good to use SetBestBlock so this is consistent and it's clear this is overwriting random value above. Also it would be good to move this next to the Flush call below for consistency with the sequence above.\r\n\r\nOn layer violation comment, IMO it would be reasonable to write a CAutoFile -> CCoinsViewCache function and do the loading in coins.cpp rather than validation.cpp, so validation changes are smaller and not as many assumptions about the coins cache implementation have to be made outside of coins.cpp.",
      "created_at": "2020-09-04T21:13:37Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483846226",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483846226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5435,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483848478",
      "pull_request_review_id": 482906983,
      "id": 483848478,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0ODQ3OA==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };",
      "path": "src/validation.cpp",
      "position": 218,
      "original_position": 172,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nProbably it makes sense for this function to take an interruption_point argument instead of defining its own internally.\r\n",
      "created_at": "2020-09-04T21:20:45Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483848478",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483848478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5393,
      "original_line": 5393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483851329",
      "pull_request_review_id": 482906983,
      "id": 483851329,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg1MTMyOQ==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nCan you add a comment explaining locking in this function. It's not clear to me why cs_main needs to be held at all while reading the snapshot file and populating the chainstate when the chainstate is still being constructed shouldn't be referenced externally. It's also not clear why it's safe to keep cs_main locked for up to 10 minutes below while downloading headers.",
      "created_at": "2020-09-04T21:30:38Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483851329",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483851329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5375,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483852578",
      "pull_request_review_id": 482906983,
      "id": 483852578,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg1MjU3OA==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 213,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nIs there a reason hash is being computed above before sleeping but only checked now after sleeping? It seems like it'd be good to return an error as early as possible and not wait for headers if this is going to fail.",
      "created_at": "2020-09-04T21:34:49Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483852578",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483852578"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483857507",
      "pull_request_review_id": 482906983,
      "id": 483857507,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg1NzUwNw==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            expected_contents_hash.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:",
      "path": "src/validation.cpp",
      "position": 278,
      "original_position": 221,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nIdeally, we would not have to fake these things and external code would code better with missing data, right? Or do you disagree? It would be good if comment would say one way or the other what ultimate fate of faking should be.\r\n\r\nIt would also be good if comments in chain.h documenting CBlockIndex fields mentioned the fake values and said how to determine whether values are real or fake, to reduce likelihood of new bugs being introduced because of fake values.",
      "created_at": "2020-09-04T21:49:49Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483857507",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483857507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5453,
      "original_line": 5453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483858967",
      "pull_request_review_id": 482906983,
      "id": 483858967,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg1ODk2Nw==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{",
      "path": "src/validation.cpp",
      "position": 38,
      "original_position": 8,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nThis function and PopulateAndValidateSnapshot below are doing a lot of things, and I think might benefit from being split up into smaller functions:\r\n\r\n- Rebalance caches\r\n- Load snapshot file -> ccoinsview and verify expected hash\r\n- Wait for headers\r\n- Set chain tip and fake blockindex data\r\n\r\nSome of these could be marked EXCLUSIVE_LOCKS_REQUIRED(cs_main) to make locking requirements more explicit.",
      "created_at": "2020-09-04T21:51:39Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483858967",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483858967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5213,
      "original_line": 5213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483860811",
      "pull_request_review_id": 482906983,
      "id": 483860811,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MDgxMQ==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nI don't understand implication of this comment. Maybe it should say why not to rebalance or flush. I'm not clear on what rebalancing would do here, and it seems like the PopulateAndValidateSnapshot call already flushes the snapshot chainstate, at least.",
      "created_at": "2020-09-04T21:57:53Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483860811",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483860811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483865232",
      "pull_request_review_id": 482906983,
      "id": 483865232,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NTIzMg==",
      "diff_hunk": "@@ -5235,7 +5235,8 @@ class CMainCleanup\n static CMainCleanup instance_of_cmaincleanup;\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n-    if (m_active_chainstate != nullptr) {\n+    if (m_active_chainstate != nullptr &&\n+            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {",
      "path": "src/validation.cpp",
      "position": 14,
      "original_position": 6,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "75d1e7754274d3f015a49e71871c3a069cbe020b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"simplify ChainstateManager::SnapshotBlockhash() return semantics\" (75d1e7754274d3f015a49e71871c3a069cbe020b)\r\n\r\nI think if all the calling code is going to continue to do `.value_or(uint256())` it makes little sense for this to return an optional. Would be simpler to just use `Optional<uint256>` everywhere (make `m_from_snapshot_blockhash` an `Optional<uint256>` and stop treating zero hash specially) or use `uint256` everywhere and keep treating zero hash specially. But having back and forth nullopt <-> null hash conversions doesn't make sense over just picking one format and sticking with it.",
      "created_at": "2020-09-04T22:15:44Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483865232",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483865232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5152,
      "original_line": 5152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484585151",
      "pull_request_review_id": 483725550,
      "id": 484585151,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4NTE1MQ==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": 483851329,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, you're right about this - I'll remove the lock acquisition. I had initially put this in to simplify testing, and had some vague rationale about snapshot load being the most important task and so meriting \"stopping\" everything else by holding cs_main, but that doesn't make much sense. Also probably good to keep cs_main free while deserializing the snapshot so that we have a better chance of having finished headers retrieval by the time we get to the related check below.",
      "created_at": "2020-09-07T23:26:48Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r484585151",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484585151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5375,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484585389",
      "pull_request_review_id": 483725550,
      "id": 484585389,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4NTM4OQ==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": 483846226,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Would be good to use SetBestBlock\r\n\r\nFixed, thanks.\r\n\r\n> it would be reasonable to write a CAutoFile -> CCoinsViewCache function\r\n\r\nHm yeah, this is definitely worth some consideration.\r\n\r\n",
      "created_at": "2020-09-07T23:28:24Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r484585389",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484585389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5435,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484585738",
      "pull_request_review_id": 483725550,
      "id": 484585738,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4NTczOA==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 213,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": 483852578,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, that's a good point. Unfortunately we need the headers chain to [resolve the `base_height`](https://github.com/bitcoin/bitcoin/pull/19806/commits/9c1db71dbd82342b0a1d33401b329e34a7a6cee8#diff-24efdb00bfbe56b140fb006b562cc70bR5495) before retrieving the expected assumeutxo data.",
      "created_at": "2020-09-07T23:31:03Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r484585738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484585738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504009619",
      "pull_request_review_id": 507512760,
      "id": 504009619,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwOTYxOQ==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": 483860811,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After revisiting this comment, I don't understand it either! Seems like we should always `MaybeRebalanceCaches()` at the end of this function. It probably had something to do with not wanting to clear the coinscache of the new chainstate throughout the course of the flush, but since we're doing that anyway (#17487 doesn't look like it's going to get merged anytime soon) I'll just add that call to the end here.",
      "created_at": "2020-10-13T14:41:57Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504009619",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504009619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504014239",
      "pull_request_review_id": 507512760,
      "id": 504014239,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxNDIzOQ==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };",
      "path": "src/validation.cpp",
      "position": 218,
      "original_position": 172,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": 483848478,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure what you mean here. I was a little confused when rebasing because afaict we don't have any remaining usages of interruption_point in the codebase (aside from the RpcInterruptionPoint).",
      "created_at": "2020-10-13T14:47:25Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504014239",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504014239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5393,
      "original_line": 5393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504028114",
      "pull_request_review_id": 507512760,
      "id": 504028114,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyODExNA==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            expected_contents_hash.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:",
      "path": "src/validation.cpp",
      "position": 278,
      "original_position": 221,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": 483857507,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ideally you're right here, but there's a lot of complexity in cleaning up the \"consumer\" side of this data. Take for example `nChainTx`; in order to avoid faking that value, there are various points of consumption in net_processing (by way of `HaveTxsDownloaded()`) that need to be addressed. What makes these sites complicated is that they lack the chainstate context, having access only to the CBlockIndex objects.\r\n\r\nI'm not saying it isn't possible to do what you're suggesting here, but I think it will probably involve some deep thinking about how much regions like net_processing should know about chainstate semantics. I'm going to leave this for someone else to think about unless there is a fundamental objection to fudging this data for snapshot chainstates.",
      "created_at": "2020-10-13T15:04:55Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504028114",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504028114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5453,
      "original_line": 5453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504030195",
      "pull_request_review_id": 507512760,
      "id": 504030195,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAzMDE5NQ==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{",
      "path": "src/validation.cpp",
      "position": 38,
      "original_position": 8,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": 483858967,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not opposed, but I'm not sure I see a lot of benefit either. E.g. I don't think splitting this stuff up allows us to do a more comprehensive job of testing. I'm happy to apply a diff though.",
      "created_at": "2020-10-13T15:07:29Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504030195",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504030195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5213,
      "original_line": 5213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504031898",
      "pull_request_review_id": 507542406,
      "id": 504031898,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAzMTg5OA==",
      "diff_hunk": "@@ -5235,7 +5235,8 @@ class CMainCleanup\n static CMainCleanup instance_of_cmaincleanup;\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n-    if (m_active_chainstate != nullptr) {\n+    if (m_active_chainstate != nullptr &&\n+            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {",
      "path": "src/validation.cpp",
      "position": 14,
      "original_position": 6,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "75d1e7754274d3f015a49e71871c3a069cbe020b",
      "in_reply_to_id": 483865232,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah I don't disagree; initially had it that way but changed it at the request of a reviewer in a previous PR.",
      "created_at": "2020-10-13T15:09:47Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504031898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504031898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5152,
      "original_line": 5152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506665391",
      "pull_request_review_id": 510726011,
      "id": 506665391,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NTM5MQ==",
      "diff_hunk": "@@ -24,6 +24,9 @@ static uint64_t GetBogoSize(const CScript& scriptPubKey)\n            scriptPubKey.size() /* scriptPubKey */;\n }\n \n+//! XXX: be very careful when changing this! assumeutuxo and UTXO snapshot",
      "path": "src/node/coinstats.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "60bd91334a3654fe59dac0bd28fb8824b897edf7",
      "in_reply_to_id": 482332094,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2020-10-16T18:55:21Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506665391",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506665391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506665484",
      "pull_request_review_id": 510726110,
      "id": 506665484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NTQ4NA==",
      "diff_hunk": "@@ -955,4 +955,14 @@ inline bool IsBlockPruned(const CBlockIndex* pblockindex)\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainParams& params);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 12,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "60bd91334a3654fe59dac0bd28fb8824b897edf7",
      "in_reply_to_id": 482426252,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2020-10-16T18:55:32Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506665484",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506665484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 966,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506665741",
      "pull_request_review_id": 510726454,
      "id": 506665741,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NTc0MQ==",
      "diff_hunk": "@@ -5235,7 +5235,8 @@ class CMainCleanup\n static CMainCleanup instance_of_cmaincleanup;\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n-    if (m_active_chainstate != nullptr) {\n+    if (m_active_chainstate != nullptr &&\n+            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {",
      "path": "src/validation.cpp",
      "position": 14,
      "original_position": 6,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "75d1e7754274d3f015a49e71871c3a069cbe020b",
      "in_reply_to_id": 483817973,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, added test coverage in the same commit.",
      "created_at": "2020-10-16T18:56:07Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506665741",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506665741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5152,
      "original_line": 5152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506666210",
      "pull_request_review_id": 510727060,
      "id": 506666210,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NjIxMA==",
      "diff_hunk": "@@ -5235,7 +5235,8 @@ class CMainCleanup\n static CMainCleanup instance_of_cmaincleanup;\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n-    if (m_active_chainstate != nullptr) {\n+    if (m_active_chainstate != nullptr &&\n+            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {",
      "path": "src/validation.cpp",
      "position": 14,
      "original_position": 6,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "75d1e7754274d3f015a49e71871c3a069cbe020b",
      "in_reply_to_id": 483865232,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Cleaned up the usages to actually make use of the option. Thanks.",
      "created_at": "2020-10-16T18:57:04Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506666210",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506666210"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5152,
      "original_line": 5152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508081070",
      "pull_request_review_id": 512182467,
      "id": 508081070,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MTA3MA==",
      "diff_hunk": "@@ -30,6 +30,26 @@ struct CCheckpointData {\n     }\n };\n \n+/**\n+ * Holds configuration for use during UTXO snapshot load and validation. The contents\n+ * here are security critical, since they dictate which UTXO snapshots are recognized\n+ * as valid.\n+ */\n+struct AssumeutxoData {\n+    //! The expected hash of the deserialized UTXO set.\n+    const uint256 hash_serialized;\n+\n+    //! Used to populate the nChainTx value, which is used during BlockManager::LoadBlockIndex().\n+    //!\n+    //! We need to hardcode the value here because this is computed cumulatively using block data,\n+    //! which we do not necessarily have at the time of snapshot load.\n+    const unsigned int nChainTx;\n+};\n+\n+std::ostream& operator<<(std::ostream& o, const AssumeutxoData& aud);\n+\n+using MapAssumeutxo = std::map<int, const AssumeutxoData>;",
      "path": "src/chainparams.h",
      "position": 22,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "a1aa47484fb7c272a1b957a37dc8c4595a0774bb",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"chainparams: add allowed assumeutxo values\" (a1aa47484fb7c272a1b957a37dc8c4595a0774bb)\r\n\r\nIt might be good to say in comment that `int` is a height. Also, it looks like strictly speaking there is no need for this data structure to reference heights. E.g. it could just be a simple map from hash -> nChainTx. Not important, though.",
      "created_at": "2020-10-19T21:45:28Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508081070",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508081070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508087473",
      "pull_request_review_id": 512182467,
      "id": 508087473,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4NzQ3Mw==",
      "diff_hunk": "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\r\n\r\nWhat's the reason this uses 99:1 ratio while MaybeRebalanceCaches uses 95:5 ratio? Maybe there should be an explanatory comment, or the two pieces of code could use a common helper function or constants.",
      "created_at": "2020-10-19T21:59:41Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508087473",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508087473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508092882",
      "pull_request_review_id": 512182467,
      "id": 508092882,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5Mjg4Mg==",
      "diff_hunk": "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);",
      "path": "src/validation.cpp",
      "position": 101,
      "original_position": 66,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\r\n\r\nWould it make sense to assert m_snap_chainstate is null before this?",
      "created_at": "2020-10-19T22:12:29Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508092882",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508092882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5276,
      "original_line": 5276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508107265",
      "pull_request_review_id": 512182467,
      "id": 508107265,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNzI2NQ==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };",
      "path": "src/validation.cpp",
      "position": 218,
      "original_position": 172,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": 483848478,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504014239\r\n\r\n> Not sure what you mean here. I was a little confused when rebasing because afaict we don't have any remaining usages of interruption_point in the codebase (aside from the RpcInterruptionPoint).\r\n\r\nIt's not important, but the suggestion is for PopulateAndValidateSnapshot and ActivateSnapshot to take a `const std::function<void()>& interruption_point` so when this code is called from `loadtxoutset` in #15606 it is interruptable.",
      "created_at": "2020-10-19T22:50:03Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508107265",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508107265"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5393,
      "original_line": 5393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508368402",
      "pull_request_review_id": 512534741,
      "id": 508368402,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2ODQwMg==",
      "diff_hunk": "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5: You may want to move the refactor from 83a67ec24c053f6d085101c83e448e76806e8355 up a bit, so you can use `if (this->SnapshotBlockhash())` from the get go.",
      "created_at": "2020-10-20T09:56:57Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508368402",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508368402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508378505",
      "pull_request_review_id": 512534741,
      "id": 508378505,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3ODUwNQ==",
      "diff_hunk": "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));",
      "path": "src/validation.cpp",
      "position": 79,
      "original_position": 45,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5 : why is the snapshot mempool shared with the ibd mempool?",
      "created_at": "2020-10-20T10:12:44Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508378505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508378505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5254,
      "original_line": 5254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508390158",
      "pull_request_review_id": 512534741,
      "id": 508390158,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5MDE1OA==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{",
      "path": "src/validation.cpp",
      "position": 38,
      "original_position": 8,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": 483858967,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I tend to agree that (in the current incarnation 5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5 `PopulateAndValidateSnapshot` does quite a lot. Although I can follow along, it might be more clear if `ActivateSnapshot` called more specific helper functions in the right order, e.g. `WaitForHeaders`.",
      "created_at": "2020-10-20T10:32:07Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508390158",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508390158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5213,
      "original_line": 5213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508397723",
      "pull_request_review_id": 512534741,
      "id": 508397723,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5NzcyMw==",
      "diff_hunk": "@@ -163,4 +168,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    assert(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        chainman.SnapshotBlockhash().value_or(uint256()));\n+\n+    // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\n+    // be found.\n+    mineBlocks(10);",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 115,
      "original_position": 83,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "59013d80067948e5073da10a06802a1e9b84e7d7",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's a bit weird to activate a snapshot that is identical to the actual fully validated chain. It would be nice if we could mine headers-only. Calling `ProcessNewBlockHeaders` instead of `ProcessNewBlock` in the test helper might do the trick.\r\n\r\nTogether with mock time you could test the functionality of waiting for headers too.",
      "created_at": "2020-10-20T10:44:39Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508397723",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508397723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 236,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508597546",
      "pull_request_review_id": 512182467,
      "id": 508597546,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU5NzU0Ng==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            expected_contents_hash.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:",
      "path": "src/validation.cpp",
      "position": 278,
      "original_position": 221,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": 483857507,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504028114\r\n\r\n> I'm not saying it isn't possible to do what you're suggesting here\r\n\r\nSorry, wasn't objecting to fudging data now, just suggesting documenting in chain.h which fields may contain fake data and when the fake data is set. Documenting seems less important if fake data can be cleaned up easily, more important if fake data will be a more permanent thing",
      "created_at": "2020-10-20T15:16:20Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508597546",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508597546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5453,
      "original_line": 5453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508613868",
      "pull_request_review_id": 512182467,
      "id": 508613868,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxMzg2OA==",
      "diff_hunk": "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    Optional<AssumeutxoData> maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    AssumeutxoData au_data = maybe_au_data.get();\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries\n+    //       (among other things)\n+    //   - nStatus & BLOCK_OPT_WITNESS: so that RewindBlockIndex() doesn't zealously\n+    //       unwind the assumed-valid chain.\n+    //\n+    CBlockIndex* index = nullptr;\n+    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+        index = snapshot_chainstate.m_chain[i];\n+\n+        if (!index->nTx) {\n+            index->nTx = 1;",
      "path": "src/validation.cpp",
      "position": 291,
      "original_position": 248,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\r\n\r\nIf these blockindexes are shared across different chains and can be accessed without `snapshot_chainstate` is some locking needed to update them? Might be good to have a comment saying why cs_main isn't acquired here. (Feel free to skip if I'm just missing a basic assumption)",
      "created_at": "2020-10-20T15:31:25Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508613868",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508613868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5466,
      "original_line": 5466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508622929",
      "pull_request_review_id": 512182467,
      "id": 508622929,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyMjkyOQ==",
      "diff_hunk": "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load",
      "path": "src/validation.cpp",
      "position": 189,
      "original_position": 150,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\r\n\r\nFWIW, I don't think a CoinsView bulk load method would be a crazy thing to have. But I can see how making it not snapshot-activation specific could be a pain, so the `friend ChainstateManager` approach does seem ok too.",
      "created_at": "2020-10-20T15:39:07Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508622929",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508622929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5364,
      "original_line": 5364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508634404",
      "pull_request_review_id": 512182467,
      "id": 508634404,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYzNDQwNA==",
      "diff_hunk": "@@ -230,6 +259,7 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n TestChain100Setup::~TestChain100Setup()\n {\n     gArgs.ForceSetArg(\"-segwitheight\", \"0\");\n+    SetMockTime(0);",
      "path": "src/test/util/setup_common.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e08cc16f53b7b465f4f1e3b6f7bf83b37356b043",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"tests: add deterministic chain generation unittest fixture\" (e08cc16f53b7b465f4f1e3b6f7bf83b37356b043)\r\n\r\nPerhaps should use `if (m_deterministic)` condition for consistency with the other SetMockTime calls in this class",
      "created_at": "2020-10-20T15:48:35Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508634404",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508634404"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508645914",
      "pull_request_review_id": 512182467,
      "id": 508645914,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0NTkxNA==",
      "diff_hunk": "@@ -163,4 +168,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    assert(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "59013d80067948e5073da10a06802a1e9b84e7d7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"tests: add snapshot activation test\" (59013d80067948e5073da10a06802a1e9b84e7d7)\r\n\r\nBetter to replace `assert` with `BOOST_REQUIRE` to integrate with test framework. Also because it's good not to do things with side effects in c asserts in case there are custom CPPFLAGS",
      "created_at": "2020-10-20T15:58:40Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508645914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508645914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513427859",
      "pull_request_review_id": 518639991,
      "id": 513427859,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQyNzg1OQ==",
      "diff_hunk": "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));",
      "path": "src/validation.cpp",
      "position": 79,
      "original_position": 45,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "in_reply_to_id": 508378505,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Each CChainState instance needs a mempool. In practice, the non-active mempool will never be used, but since each chainstate can be the active throughout runtime, they each need a reference to the same mempool.",
      "created_at": "2020-10-28T13:09:33Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513427859",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513427859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5254,
      "original_line": 5254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513429114",
      "pull_request_review_id": 518641737,
      "id": 513429114,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQyOTExNA==",
      "diff_hunk": "@@ -163,4 +168,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    assert(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        chainman.SnapshotBlockhash().value_or(uint256()));\n+\n+    // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\n+    // be found.\n+    mineBlocks(10);",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 115,
      "original_position": 83,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "59013d80067948e5073da10a06802a1e9b84e7d7",
      "in_reply_to_id": 508397723,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't really understand this. There's no way to generate a snapshot to activate without mining blocks on some chain. The chainstate we're loading the snapshot into has no knowledge of the mined blocks. I don't know how we can do better?",
      "created_at": "2020-10-28T13:11:29Z",
      "updated_at": "2021-02-12T14:01:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513429114",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513429114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 236,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513451488",
      "pull_request_review_id": 518671529,
      "id": 513451488,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1MTQ4OA==",
      "diff_hunk": "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    Optional<AssumeutxoData> maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    AssumeutxoData au_data = maybe_au_data.get();\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries\n+    //       (among other things)\n+    //   - nStatus & BLOCK_OPT_WITNESS: so that RewindBlockIndex() doesn't zealously\n+    //       unwind the assumed-valid chain.\n+    //\n+    CBlockIndex* index = nullptr;\n+    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+        index = snapshot_chainstate.m_chain[i];\n+\n+        if (!index->nTx) {\n+            index->nTx = 1;",
      "path": "src/validation.cpp",
      "position": 291,
      "original_position": 248,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "in_reply_to_id": 508613868,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh this is definitely a problem, thanks for finding it. Yet another vestige of originally having `::cs_main` held during the entirety of `PopulateAndValidateSnapshot`.",
      "created_at": "2020-10-28T13:41:41Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513451488",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513451488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5466,
      "original_line": 5466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513594968",
      "pull_request_review_id": 518867317,
      "id": 513594968,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5NDk2OA==",
      "diff_hunk": "@@ -30,6 +30,26 @@ struct CCheckpointData {\n     }\n };\n \n+/**\n+ * Holds configuration for use during UTXO snapshot load and validation. The contents\n+ * here are security critical, since they dictate which UTXO snapshots are recognized\n+ * as valid.\n+ */\n+struct AssumeutxoData {\n+    //! The expected hash of the deserialized UTXO set.\n+    const uint256 hash_serialized;\n+\n+    //! Used to populate the nChainTx value, which is used during BlockManager::LoadBlockIndex().\n+    //!\n+    //! We need to hardcode the value here because this is computed cumulatively using block data,\n+    //! which we do not necessarily have at the time of snapshot load.\n+    const unsigned int nChainTx;\n+};\n+\n+std::ostream& operator<<(std::ostream& o, const AssumeutxoData& aud);\n+\n+using MapAssumeutxo = std::map<int, const AssumeutxoData>;",
      "path": "src/chainparams.h",
      "position": 22,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "a1aa47484fb7c272a1b957a37dc8c4595a0774bb",
      "in_reply_to_id": 508081070,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, you're right about that. I kind of like the constraint that keying by height creates (enforces single entry per height), but that's neither here nor there. I'll leave as-is unless we can think of a good reason to change.",
      "created_at": "2020-10-28T16:39:28Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513594968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513594968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655004",
      "pull_request_review_id": 518946328,
      "id": 513655004,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTAwNA==",
      "diff_hunk": "@@ -163,4 +168,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    assert(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "59013d80067948e5073da10a06802a1e9b84e7d7",
      "in_reply_to_id": 508645914,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks.",
      "created_at": "2020-10-28T18:02:02Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655004",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655080",
      "pull_request_review_id": 518946447,
      "id": 513655080,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTA4MA==",
      "diff_hunk": "@@ -230,6 +259,7 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n TestChain100Setup::~TestChain100Setup()\n {\n     gArgs.ForceSetArg(\"-segwitheight\", \"0\");\n+    SetMockTime(0);",
      "path": "src/test/util/setup_common.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e08cc16f53b7b465f4f1e3b6f7bf83b37356b043",
      "in_reply_to_id": 508634404,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks.",
      "created_at": "2020-10-28T18:02:09Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655199",
      "pull_request_review_id": 518946607,
      "id": 513655199,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTE5OQ==",
      "diff_hunk": "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    Optional<AssumeutxoData> maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    AssumeutxoData au_data = maybe_au_data.get();\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries\n+    //       (among other things)\n+    //   - nStatus & BLOCK_OPT_WITNESS: so that RewindBlockIndex() doesn't zealously\n+    //       unwind the assumed-valid chain.\n+    //\n+    CBlockIndex* index = nullptr;\n+    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+        index = snapshot_chainstate.m_chain[i];\n+\n+        if (!index->nTx) {\n+            index->nTx = 1;",
      "path": "src/validation.cpp",
      "position": 291,
      "original_position": 248,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "in_reply_to_id": 508613868,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks.",
      "created_at": "2020-10-28T18:02:21Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5466,
      "original_line": 5466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655572",
      "pull_request_review_id": 518947076,
      "id": 513655572,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTU3Mg==",
      "diff_hunk": "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "in_reply_to_id": 508087473,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment here.",
      "created_at": "2020-10-28T18:02:54Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655572",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655773",
      "pull_request_review_id": 518947361,
      "id": 513655773,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTc3Mw==",
      "diff_hunk": "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "in_reply_to_id": 508368402,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks.",
      "created_at": "2020-10-28T18:03:14Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655773",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513660363",
      "pull_request_review_id": 518953545,
      "id": 513660363,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2MDM2Mw==",
      "diff_hunk": "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);",
      "path": "src/validation.cpp",
      "position": 101,
      "original_position": 66,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "in_reply_to_id": 508092882,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense to me. Fixed.",
      "created_at": "2020-10-28T18:10:25Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513660363",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513660363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5276,
      "original_line": 5276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513662804",
      "pull_request_review_id": 518956671,
      "id": 513662804,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2MjgwNA==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            expected_contents_hash.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:",
      "path": "src/validation.cpp",
      "position": 278,
      "original_position": 221,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": 483857507,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh sorry, somehow misinterpreted what you'd said. Added some comments in `chain.h` that at least provide references to where the faked values are created and used; if you can think of anything else that'd be useful I'm happy to apply a patch.",
      "created_at": "2020-10-28T18:14:21Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513662804",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513662804"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5453,
      "original_line": 5453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522516317",
      "pull_request_review_id": 529599345,
      "id": 522516317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNjMxNw==",
      "diff_hunk": "@@ -65,6 +76,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     BlockValidationState _;\n     BOOST_CHECK(c2.ActivateBestChain(_, chainparams, nullptr));\n \n+",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "f92a76b62fad04213884ec602822601ee84f3825",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in f92a76b62fad04213884ec602822601ee84f3825:\r\nnit: This new line doesn't seem necessary",
      "created_at": "2020-11-12T23:57:09Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r522516317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522516317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523774332",
      "pull_request_review_id": 529599345,
      "id": 523774332,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NDMzMg==",
      "diff_hunk": "@@ -24,6 +24,9 @@ static uint64_t GetBogoSize(const CScript& scriptPubKey)\n            scriptPubKey.size() /* scriptPubKey */;\n }\n \n+//! Warning: be very careful when changing this! assumeutuxo and UTXO snapshot",
      "path": "src/node/coinstats.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d2d1eb23331fdb1c36a8a879aff222ff0d731210",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in d2d1eb23331fdb1c36a8a879aff222ff0d731210:\r\nTypo: `assumeutuxo`",
      "created_at": "2020-11-15T15:34:47Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523774332",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523774332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523779017",
      "pull_request_review_id": 529599345,
      "id": 523779017,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3OTAxNw==",
      "diff_hunk": "@@ -5272,6 +5272,278 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 173,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "07936ca7c067f007f7fe9dc04e8feb2c934122a2",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 07936ca7c067f007f7fe9dc04e8feb2c934122a2:\r\n`coins_left` should always be 0 here so it can be removed I think",
      "created_at": "2020-11-15T16:13:14Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523779017",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523779017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5444,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523797335",
      "pull_request_review_id": 529599345,
      "id": 523797335,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc5NzMzNQ==",
      "diff_hunk": "@@ -5272,6 +5272,278 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "07936ca7c067f007f7fe9dc04e8feb2c934122a2",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 07936ca7c067f007f7fe9dc04e8feb2c934122a2:\r\nThis fails if `m_coins_count` has a higher count than the number of actual coins in `coins_file`. See also my test in https://github.com/fjahr/bitcoin/commit/2835c8118fe35f5551886ac5251e535bb337571a.",
      "created_at": "2020-11-15T18:52:28Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523797335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523797335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523799037",
      "pull_request_review_id": 529599345,
      "id": 523799037,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc5OTAzNw==",
      "diff_hunk": "@@ -164,6 +163,10 @@ class CMainParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+         // TODO to be specified in a future patch.",
      "path": "src/chainparams.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d2d1eb23331fdb1c36a8a879aff222ff0d731210",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in d2d1eb23331fdb1c36a8a879aff222ff0d731210:\r\nJust a thought: Should a node refuse to start if it has a chain that does not match with the assumeutxo data here? Maybe in the next steps it could make sense to add such a check to init but I haven't thought about it much and maybe you already plan to do this.",
      "created_at": "2020-11-15T19:05:53Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523799037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523799037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523802301",
      "pull_request_review_id": 529599345,
      "id": 523802301,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgwMjMwMQ==",
      "diff_hunk": "@@ -5272,6 +5272,278 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 168,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "07936ca7c067f007f7fe9dc04e8feb2c934122a2",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 07936ca7c067f007f7fe9dc04e8feb2c934122a2:\r\nThis statement does not have to be true afaict. The count in the metadata can be different from the actual count of the coins in the file. Also, the loop above doesn't seem to break unless `coins_left` is 0 anyway.",
      "created_at": "2020-11-15T19:30:55Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523802301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523802301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5445,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523811814",
      "pull_request_review_id": 529599345,
      "id": 523811814,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgxMTgxNA==",
      "diff_hunk": "@@ -4,14 +4,19 @@\n //\n #include <chainparams.h>\n #include <consensus/validation.h>\n+#include <node/utxo_snapshot.h>\n #include <random.h>\n+#include <rpc/blockchain.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n #include <optional.h>\n #include <uint256.h>\n #include <validation.h>\n #include <validationinterface.h>\n \n+#include <univalue.h>",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "700e66dc6bf6ed1b6bc2a642686a734cb69f4932",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 700e66dc6bf6ed1b6bc2a642686a734cb69f4932:\r\nnit: not sure about where univalue really belongs but mostly it seems to be in the very last block of includes while tinyformat is in the block above. But again, not sure which style guide we actually follow there. Either way, if you keep it like this, sorting between univalue and tinyformat is wrong.",
      "created_at": "2020-11-15T20:50:13Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523811814",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523811814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526918310",
      "pull_request_review_id": 534485946,
      "id": 526918310,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxODMxMA==",
      "diff_hunk": "@@ -5272,6 +5272,278 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "07936ca7c067f007f7fe9dc04e8feb2c934122a2",
      "in_reply_to_id": 523797335,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think failure is the desired behavior; if the coins count attached to the snapshot deviates from the actual contents of the snapshot, that's an indication that the snapshot has been modified somehow.",
      "created_at": "2020-11-19T14:14:39Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r526918310",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526918310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526925349",
      "pull_request_review_id": 534495074,
      "id": 526925349,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkyNTM0OQ==",
      "diff_hunk": "@@ -5272,6 +5272,278 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "07936ca7c067f007f7fe9dc04e8feb2c934122a2",
      "in_reply_to_id": 523797335,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh I think I see what you're saying here - it halts execution instead of `return false`? Yeah, maybe we should wrap this in a `try` for testability's sake.",
      "created_at": "2020-11-19T14:23:38Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r526925349",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526925349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533632213",
      "pull_request_review_id": 542183818,
      "id": 533632213,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzMjIxMw==",
      "diff_hunk": "@@ -5272,6 +5272,278 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 168,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "07936ca7c067f007f7fe9dc04e8feb2c934122a2",
      "in_reply_to_id": 523802301,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (a2e7b295a33d90c895da649ee479fa090f20276b)\r\n\r\nCould drop `- coins_left` to be consistent with `[snapshot] loaded` log print immediately below. Assuming no change in behavior since it will always be zero. Or maybe just move the    \"snapshot loaded\" print above the \"bad snapshot\" print so the loading information only needs to be printed one place",
      "created_at": "2020-12-01T18:31:10Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r533632213",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533632213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5445,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542412737",
      "pull_request_review_id": 551401919,
      "id": 542412737,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxMjczNw==",
      "diff_hunk": "@@ -5196,6 +5196,284 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "ba2779f98490f1492644a4ee4320fa689560272c",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ba2779f98490f1492644a4ee4320fa689560272c : Better to [avoid](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#general-c) asserts with side-effects.",
      "created_at": "2020-12-14T14:11:03Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542412737",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542412737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542499846",
      "pull_request_review_id": 551401919,
      "id": 542499846,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5OTg0Ng==",
      "diff_hunk": "@@ -47,11 +47,15 @@ CCoinsViewDB::CCoinsViewDB(fs::path ldb_path, size_t nCacheSize, bool fMemory, b\n \n void CCoinsViewDB::ResizeCache(size_t new_cache_size)\n {\n-    // Have to do a reset first to get the original `m_db` state to release its\n-    // filesystem lock.\n-    m_db.reset();\n-    m_db = MakeUnique<CDBWrapper>(\n-        m_ldb_path, new_cache_size, m_is_memory, /*fWipe*/ false, /*obfuscate*/ true);\n+    // We can't do this operation with an in-memory DB since we'll lose all the coins upon\n+    // reset.\n+    if (!m_is_memory) {",
      "path": "src/txdb.cpp",
      "position": 11,
      "original_position": 11,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "ea0e1d005a455d8ddef63d428dbedcd9f54a2f9e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ea0e1d005a455d8ddef63d428dbedcd9f54a2f9e: maybe put an `assert` here and have the caller do `if (!m_is_memory)`? It's also not very clear to me why it's fine to skip the resize (within tests).",
      "created_at": "2020-12-14T16:00:13Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542499846",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542499846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542504229",
      "pull_request_review_id": 551401919,
      "id": 542504229,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNDIyOQ==",
      "diff_hunk": "@@ -57,4 +59,10 @@ CTxMemPool& EnsureMemPool(const util::Ref& context);\n ChainstateManager& EnsureChainman(const util::Ref& context);\n CBlockPolicyEstimator& EnsureFeeEstimator(const util::Ref& context);\n \n+/**\n+ * Helper to create UTXO snapshots given a chainstate and a file handle.\n+ * @return a UniValue map containing metadata about the snapshot.\n+ */\n+UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile);",
      "path": "src/rpc/blockchain.h",
      "position": 24,
      "original_position": 24,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "6bb63e9efeccfad3e5f422453902cb22a22c33b4",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "6bb63e9efeccfad3e5f422453902cb22a22c33b4 : alternatively, it could return `path` rather than a `UniValue`, so it could even live outside of RPC land.",
      "created_at": "2020-12-14T16:05:42Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542504229",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542504229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542506377",
      "pull_request_review_id": 551401919,
      "id": 542506377,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNjM3Nw==",
      "diff_hunk": "@@ -79,7 +79,6 @@ struct BasicTestingSetup {\n     explicit BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n     ~BasicTestingSetup();\n \n-private:",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e82498b05634608e59a1d1acc1a8c1b8ece62ffc",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "e82498b05634608e59a1d1acc1a8c1b8ece62ffc: why are you dropping `private` here? ",
      "created_at": "2020-12-14T16:08:25Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542506377",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542506377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542512722",
      "pull_request_review_id": 551401919,
      "id": 542512722,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjcyMg==",
      "diff_hunk": "@@ -163,4 +168,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    assert(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        chainman.SnapshotBlockhash().value_or(uint256()));\n+\n+    // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\n+    // be found.\n+    mineBlocks(10);",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 115,
      "original_position": 83,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "59013d80067948e5073da10a06802a1e9b84e7d7",
      "in_reply_to_id": 508397723,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`mineBlocks()` calls `CreateAndProcessBlock` which calls `m_node.chainman->ProcessNewBlock`. Doesn't that mean the blocks are fully processed by the test node, including the right values for `nTx` and `BLOCK_OPT_WITNESS` for all blocks before the snapshot? Which would mean we're not testing the code path that sets dummy values.\r\n\r\nPerhaps one approach could be to split `CreateAndActivateUTXOSnapshot` so you can create a snapshot, wipe the node / chainstate manager, and then load it. But you'd have to save and reload the headers.\r\n\r\nIf this makes any sense, it can also wait.\r\n\r\n(in reply to https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513429114)",
      "created_at": "2020-12-14T16:16:42Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542512722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542512722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 236,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543481652",
      "pull_request_review_id": 552624485,
      "id": 543481652,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4MTY1Mg==",
      "diff_hunk": "@@ -79,7 +79,6 @@ struct BasicTestingSetup {\n     explicit BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n     ~BasicTestingSetup();\n \n-private:",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e82498b05634608e59a1d1acc1a8c1b8ece62ffc",
      "in_reply_to_id": 542506377,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have to make use of it here: https://github.com/bitcoin/bitcoin/pull/19806/files#diff-dbada1fe3a3d0af884304dd28be8c9df74b592401dec2c6400f6b491aefe6c9bR230",
      "created_at": "2020-12-15T16:13:02Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543481652",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543481652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543572101",
      "pull_request_review_id": 552733482,
      "id": 543572101,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3MjEwMQ==",
      "diff_hunk": "@@ -47,11 +47,15 @@ CCoinsViewDB::CCoinsViewDB(fs::path ldb_path, size_t nCacheSize, bool fMemory, b\n \n void CCoinsViewDB::ResizeCache(size_t new_cache_size)\n {\n-    // Have to do a reset first to get the original `m_db` state to release its\n-    // filesystem lock.\n-    m_db.reset();\n-    m_db = MakeUnique<CDBWrapper>(\n-        m_ldb_path, new_cache_size, m_is_memory, /*fWipe*/ false, /*obfuscate*/ true);\n+    // We can't do this operation with an in-memory DB since we'll lose all the coins upon\n+    // reset.\n+    if (!m_is_memory) {",
      "path": "src/txdb.cpp",
      "position": 11,
      "original_position": 11,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "ea0e1d005a455d8ddef63d428dbedcd9f54a2f9e",
      "in_reply_to_id": 542499846,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We have no choice but to skip the resize in tests because, as the comment says, the operations necessary for a resize when using an in-memory db result in an emptying of the coinsdb.\r\n\r\nI like the idea of some kind of assert here to prevent this from happening outside of a test setting, but what could we assert on? Sounds like a good small follow-up.",
      "created_at": "2020-12-15T18:10:24Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543572101",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543572101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543574650",
      "pull_request_review_id": 552736527,
      "id": 543574650,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3NDY1MA==",
      "diff_hunk": "@@ -5196,6 +5196,284 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "ba2779f98490f1492644a4ee4320fa689560272c",
      "in_reply_to_id": 542412737,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks.",
      "created_at": "2020-12-15T18:14:10Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543574650",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543574650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543721004",
      "pull_request_review_id": 552964012,
      "id": 543721004,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyMTAwNA==",
      "diff_hunk": "@@ -20,6 +20,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"txmempool -> validation -> txmempool\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n+    \"node/coinstats -> validation -> node/coinstats\"",
      "path": "test/lint/lint-circular-dependencies.sh",
      "position": 4,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Having to add a circular dependency here is kind of a shame.",
      "created_at": "2020-12-15T22:05:52Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543721004",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543721004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543721793",
      "pull_request_review_id": 552966143,
      "id": 543721793,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyMTc5Mw==",
      "diff_hunk": "@@ -61,6 +61,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp\n     boost/optional.hpp\n+    boost/optional/optional_io.hpp",
      "path": "test/lint/lint-includes.sh",
      "position": null,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there a C++17 equivalent for `optional_io`?",
      "created_at": "2020-12-15T22:07:16Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543721793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543721793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543726849",
      "pull_request_review_id": 552980627,
      "id": 543726849,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNjg0OQ==",
      "diff_hunk": "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };",
      "path": "src/validation.cpp",
      "position": 218,
      "original_position": 172,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "in_reply_to_id": 483848478,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The naming \"breakpoint\" in the comment confused me here at first, and made me think at first this was a remnant of debug code.\r\n\r\n> ct we don't have any remaining usages of interruption_point\r\n\r\nWell, the boost interruption point should no longer be used, If you want to check for interruption it should be done by passing in a polling function as @ryanofsky says.",
      "created_at": "2020-12-15T22:16:38Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543726849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543726849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5393,
      "original_line": 5393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543760624",
      "pull_request_review_id": 553079837,
      "id": 543760624,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2MDYyNA==",
      "diff_hunk": "@@ -61,6 +61,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp\n     boost/optional.hpp\n+    boost/optional/optional_io.hpp",
      "path": "test/lint/lint-includes.sh",
      "position": null,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "in_reply_to_id": 543721793,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unfortunately it doesn't look like it to me. [The contents of the boost header](https://www.boost.org/doc/libs/1_65_0/boost/optional/optional_io.hpp) don't seem to have any equivalent implementations [in c++17](https://en.cppreference.com/w/cpp/utility/optional), but that was a good idea to check. I tried removing the inclusion of this and it broke the build, so I guess it's required.",
      "created_at": "2020-12-15T23:24:31Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543760624",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543760624"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543762546",
      "pull_request_review_id": 553086745,
      "id": 543762546,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2MjU0Ng==",
      "diff_hunk": "@@ -20,6 +20,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"txmempool -> validation -> txmempool\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n+    \"node/coinstats -> validation -> node/coinstats\"",
      "path": "test/lint/lint-circular-dependencies.sh",
      "position": 4,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "in_reply_to_id": 543721004,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm with ya. This is cached (and may be stale) but I think the only workable alternative is to fold `coinstats` into validation. If you can think of something else I'm happy to make the change.",
      "created_at": "2020-12-15T23:28:52Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543762546",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543762546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544106688",
      "pull_request_review_id": 553457436,
      "id": 544106688,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwNjY4OA==",
      "diff_hunk": "@@ -61,6 +61,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp\n     boost/optional.hpp\n+    boost/optional/optional_io.hpp",
      "path": "test/lint/lint-includes.sh",
      "position": null,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "in_reply_to_id": 543721793,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay so you're not intentionally using anything from it, needing to include it is only a by-effect of how boost is structured internally?\r\nInteresting but yes I guess no way around it then.",
      "created_at": "2020-12-16T08:33:58Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544106688",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544106688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544109049",
      "pull_request_review_id": 553460084,
      "id": 544109049,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwOTA0OQ==",
      "diff_hunk": "@@ -20,6 +20,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"txmempool -> validation -> txmempool\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n+    \"node/coinstats -> validation -> node/coinstats\"",
      "path": "test/lint/lint-circular-dependencies.sh",
      "position": 4,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "in_reply_to_id": 543721004,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~~It isn't possible to factor out the part of `node/coinstats` that's used by `validation` to a third module, to prevent the `validation -> node/coinstats` side of the cycle?~~\r\nApparently that's almost all of it. Ugh.",
      "created_at": "2020-12-16T08:37:53Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544109049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544109049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544145712",
      "pull_request_review_id": 553503724,
      "id": 544145712,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE0NTcxMg==",
      "diff_hunk": "@@ -20,6 +20,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"txmempool -> validation -> txmempool\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n+    \"node/coinstats -> validation -> node/coinstats\"",
      "path": "test/lint/lint-circular-dependencies.sh",
      "position": 4,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "in_reply_to_id": 543721004,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think we want to roll more into validation, but less.\r\n\r\nMy only idea here is to have the snapshot loading functionality not in validation itself, but in a separate implementation unit (which can depend on both,. but neither will depend on it). ",
      "created_at": "2020-12-16T09:32:45Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544145712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544145712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544168044",
      "pull_request_review_id": 553530315,
      "id": 544168044,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2ODA0NA==",
      "diff_hunk": "@@ -61,6 +61,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp\n     boost/optional.hpp\n+    boost/optional/optional_io.hpp",
      "path": "test/lint/lint-includes.sh",
      "position": null,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "in_reply_to_id": 543721793,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can avoid this by using `std::optional`s everywhere. Minimal diff to get this working here (but other uses of boost::optional also need to be removed):\r\n\r\n```diff\r\ndiff --git a/src/test/validation_tests.cpp b/src/test/validation_tests.cpp\r\nindex 37450ec18f..be9b6ccad2 100644\r\n--- a/src/test/validation_tests.cpp\r\n+++ b/src/test/validation_tests.cpp\r\n@@ -5,14 +5,14 @@\r\n #include <chainparams.h>\r\n #include <net.h>\r\n #include <signet.h>\r\n-#include <optional.h>\r\n #include <uint256.h>\r\n #include <validation.h>\r\n \r\n #include <test/util/setup_common.h>\r\n \r\n #include <boost/test/unit_test.hpp>\r\n-#include <boost/optional/optional_io.hpp>\r\n+\r\n+#include <optional>\r\n \r\n BOOST_FIXTURE_TEST_SUITE(validation_tests, TestingSetup)\r\n \r\n@@ -133,14 +133,14 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\r\n \r\n     for (auto empty : bad_heights) {\r\n         const auto out = ExpectedAssumeutxo(empty, *params);\r\n-        BOOST_CHECK_EQUAL(out, nullopt);\r\n+        BOOST_CHECK(!out.has_value());\r\n     }\r\n \r\n-    const auto out110 = ExpectedAssumeutxo(110, *params).get();\r\n+    const auto out110 = ExpectedAssumeutxo(110, *params).value();\r\n     BOOST_CHECK_EQUAL(out110.hash_serialized, uint256S(\"76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"));\r\n     BOOST_CHECK_EQUAL(out110.nChainTx, (unsigned int)110);\r\n \r\n-    const auto out210 = ExpectedAssumeutxo(210, *params).get();\r\n+    const auto out210 = ExpectedAssumeutxo(210, *params).value();\r\n     BOOST_CHECK_EQUAL(out210.hash_serialized, uint256S(\"9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"));\r\n     BOOST_CHECK_EQUAL(out210.nChainTx, (unsigned int)210);\r\n }\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex e25d38d89f..09621420b5 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -5185,7 +5185,7 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\r\n     return *to_modify;\r\n }\r\n \r\n-Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\r\n+std::optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\r\n {\r\n     const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\r\n     const auto assumeutxo_found = valid_assumeutxos_map.find(height);\r\ndiff --git a/src/validation.h b/src/validation.h\r\nindex 0b8a72b8b0..db2cc1b643 100644\r\n--- a/src/validation.h\r\n+++ b/src/validation.h\r\n@@ -29,6 +29,7 @@\r\n #include <atomic>\r\n #include <map>\r\n #include <memory>\r\n+#include <optional>\r\n #include <set>\r\n #include <stdint.h>\r\n #include <string>\r\n@@ -1011,6 +1012,6 @@ inline bool IsBlockPruned(const CBlockIndex* pblockindex)\r\n  *\r\n  * @returns empty if no assumeutxo configuration exists for the given height.\r\n  */\r\n-Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& params);\r\n+std::optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& params);\r\n \r\n #endif // BITCOIN_VALIDATION_H\r\n```\r\n\r\nWe really shouldn't be adding new boost dependencies into validation.h, so I think changing all the `boost::optional`s to `std::optional`s needs to happen anyway.",
      "created_at": "2020-12-16T10:04:20Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544168044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544168044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546776491",
      "pull_request_review_id": 556471661,
      "id": 546776491,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NjQ5MQ==",
      "diff_hunk": "@@ -61,6 +61,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp\n     boost/optional.hpp\n+    boost/optional/optional_io.hpp",
      "path": "test/lint/lint-includes.sh",
      "position": null,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "in_reply_to_id": 543721793,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "boost::optional -> std::optional has now been merged: #20671.\r\n\r\nThis boost include can be removed (and some of the optional methods need to be changed).",
      "created_at": "2020-12-21T15:41:41Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r546776491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546776491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547175326",
      "pull_request_review_id": 556949409,
      "id": 547175326,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE3NTMyNg==",
      "diff_hunk": "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d684ecd5 pass cheaply copied types by non-const value\r\n```suggestion\r\nOptional<AssumeutxoData> ExpectedAssumeutxo(int height, const CChainParams& chainparams)\r\n```",
      "created_at": "2020-12-22T09:46:15Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547175326",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547175326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547190362",
      "pull_request_review_id": 556949409,
      "id": 547190362,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5MDM2Mg==",
      "diff_hunk": "@@ -431,6 +438,17 @@ class CRegTestParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+            {\n+                110,\n+                {uint256S(\"0x76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"), 110},\n+            },\n+            {\n+                210,\n+                {uint256S(\"0x9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"), 210},\n+            },\n+        };",
      "path": "src/chainparams.cpp",
      "position": 43,
      "original_position": 43,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry if this was previously discussed in the earlier, can `MapAssumeutxo` be simplified to not store the height twice?",
      "created_at": "2020-12-22T10:16:11Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547190362",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547190362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 450,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547193589",
      "pull_request_review_id": 556949409,
      "id": 547193589,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5MzU4OQ==",
      "diff_hunk": "@@ -979,4 +1004,13 @@ inline bool IsBlockPruned(const CBlockIndex* pblockindex)\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in] Get the assumeutxo value for this height.\n+ *\n+ * @returns empty if no assumeutxo configuration exists for the given height.\n+ */\n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& params);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 68,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d684ecd5f11b2cf63235cd483858f3fd27f8c712\r\n```suggestion\r\nOptional<AssumeutxoData> ExpectedAssumeutxo(int height, const CChainParams& params);\r\n```",
      "created_at": "2020-12-22T10:22:47Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547193589",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547193589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1014,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547199449",
      "pull_request_review_id": 556949409,
      "id": 547199449,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5OTQ0OQ==",
      "diff_hunk": "@@ -22,6 +22,7 @@\n #include <logging/timer.h>\n #include <node/ui_interface.h>\n #include <optional.h>\n+#include <node/coinstats.h>",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: sort",
      "created_at": "2020-12-22T10:34:19Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547199449",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547199449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547199589",
      "pull_request_review_id": 556949409,
      "id": 547199589,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5OTU4OQ==",
      "diff_hunk": "@@ -11,10 +11,12 @@\n #endif\n \n #include <amount.h>\n+#include <attributes.h>\n #include <coins.h>\n #include <crypto/common.h> // for ReadLE64\n #include <fs.h>\n #include <optional.h>\n+#include <node/utxo_snapshot.h>",
      "path": "src/validation.h",
      "position": 9,
      "original_position": 9,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: sort",
      "created_at": "2020-12-22T10:34:38Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547199589",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547199589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 19,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547206814",
      "pull_request_review_id": 556949409,
      "id": 547206814,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNjgxNA==",
      "diff_hunk": "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return assumeutxo_found->second;\n+    }\n+    return {};\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "80f5bacf here and lines 5249 and 5252 below, use [named casts](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Res-casts-named) for error avoidance. Named casts are more specific than a C-style or functional cast, allowing the compiler to catch some errors.\r\n```diff\r\n-            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\r\n-            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\r\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\r\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC))\r\n```",
      "created_at": "2020-12-22T10:49:12Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547206814",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547206814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5240,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547211443",
      "pull_request_review_id": 556949409,
      "id": 547211443,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxMTQ0Mw==",
      "diff_hunk": "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return assumeutxo_found->second;\n+    }\n+    return {};\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 101,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "80f5bacf5 nit\r\n```suggestion\r\n        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\r\n```",
      "created_at": "2020-12-22T10:58:55Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547211443",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547211443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547213999",
      "pull_request_review_id": 556949409,
      "id": 547213999,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxMzk5OQ==",
      "diff_hunk": "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return assumeutxo_found->second;\n+    }\n+    return {};\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 150,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "80f5bacf55\r\n```diff\r\n-        coins_left -= 1;\r\n-        coins_processed += 1;\r\n+        --coins_left;\r\n+        ++coins_processed;\r\n```\r\n",
      "created_at": "2020-12-22T11:04:29Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547213999",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547213999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5316,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547214463",
      "pull_request_review_id": 556949409,
      "id": 547214463,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxNDQ2Mw==",
      "diff_hunk": "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return assumeutxo_found->second;\n+    }\n+    return {};\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 155,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "80f5bacf use [named casts](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Res-casts-named)",
      "created_at": "2020-12-22T11:05:32Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547214463",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547214463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547218038",
      "pull_request_review_id": 556949409,
      "id": 547218038,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxODAzOA==",
      "diff_hunk": "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return assumeutxo_found->second;\n+    }\n+    return {};\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\n+        max_secs_to_wait_for_headers -= 1;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 240,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "80f5bacf55\r\n```suggestion\r\n        --max_secs_to_wait_for_headers;\r\n```",
      "created_at": "2020-12-22T11:13:32Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547218038",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547218038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5406,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547224890",
      "pull_request_review_id": 556949409,
      "id": 547224890,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyNDg5MA==",
      "diff_hunk": "@@ -57,4 +59,10 @@ CTxMemPool& EnsureMemPool(const util::Ref& context);\n ChainstateManager& EnsureChainman(const util::Ref& context);\n CBlockPolicyEstimator& EnsureFeeEstimator(const util::Ref& context);\n \n+/**\n+ * Helper to create UTXO snapshots given a chainstate and a file handle.\n+ * @return a UniValue map containing metadata about the snapshot.\n+ */\n+UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile);",
      "path": "src/rpc/blockchain.h",
      "position": 24,
      "original_position": 24,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "6bb63e9efeccfad3e5f422453902cb22a22c33b4",
      "in_reply_to_id": 542504229,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "9a2c888d agree with returning `path`\r\n\r\nIt looks like NodeContext should be passed by reference to const (\"in\" param), not by reference for an \"out\" param\r\n```suggestion\r\nUniValue CreateUTXOSnapshot(const NodeContext& node, CChainState& chainstate, CAutoFile& afile);\r\n```",
      "created_at": "2020-12-22T11:28:48Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547224890",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547224890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547225093",
      "pull_request_review_id": 556949409,
      "id": 547225093,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyNTA5Mw==",
      "diff_hunk": "@@ -2407,10 +2407,21 @@ static RPCHelpMan dumptxoutset()\n \n     FILE* file{fsbridge::fopen(temppath, \"wb\")};\n     CAutoFile afile{file, SER_DISK, CLIENT_VERSION};\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), afile);\n+    fs::rename(temppath, path);\n+\n+    result.pushKV(\"path\", path.string());\n+    return result;\n+},\n+    };\n+}\n+\n+UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile)",
      "path": "src/rpc/blockchain.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "9a2c888d NodeContext should be passed by reference to const\r\n```suggestion\r\nUniValue CreateUTXOSnapshot(const NodeContext& node, CChainState& chainstate, CAutoFile& afile);\r\n```",
      "created_at": "2020-12-22T11:29:14Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547225093",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547225093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2424,
      "original_line": 2424,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547226336",
      "pull_request_review_id": 556949409,
      "id": 547226336,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyNjMzNg==",
      "diff_hunk": "@@ -202,14 +202,43 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     }\n }\n \n-TestChain100Setup::TestChain100Setup()\n+TestChain100Setup::TestChain100Setup(bool deterministic)\n {\n+    m_deterministic = deterministic;\n+\n+    if (m_deterministic) {\n+        SetMockTime(1598887952);\n+        constexpr std::array<unsigned char, 32> vchKey = {\n+            {\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1\n+            }\n+        };\n+        coinbaseKey.Set(vchKey.begin(), vchKey.end(), false);\n+    } else {\n+        coinbaseKey.MakeNewKey(true);\n+    }\n+\n     // Generate a 100-block chain:\n-    coinbaseKey.MakeNewKey(true);\n+    this->mineBlocks(COINBASE_MATURITY);\n+\n+    if (m_deterministic) {\n+        LOCK(::cs_main);\n+        assert(\n+            m_node.chainman->ActiveChain().Tip()->GetBlockHash().ToString() ==\n+            \"49c95db1e470fed04496d801c9d8fbb78155d2c7f855232c918823d2c17d0cf6\");\n+    }\n+}\n+\n+void TestChain100Setup::mineBlocks(int num_blocks)\n+{\n     CScript scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n-    for (int i = 0; i < COINBASE_MATURITY; i++) {\n+    for (int i = 0; i < num_blocks; i++)",
      "path": "src/test/util/setup_common.cpp",
      "position": 37,
      "original_position": 37,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "414ba8778 here and 51f3f974 in a few places in `src/test/validation_chainstatemanager_tests.cpp`, per `developer-notes.md` prefer the prefix operator\r\n```suggestion\r\n    for (int i = 0; i < num_blocks; ++i)\r\n```",
      "created_at": "2020-12-22T11:32:19Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547226336",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547226336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 232,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547230123",
      "pull_request_review_id": 556949409,
      "id": 547230123,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzMDEyMw==",
      "diff_hunk": "@@ -155,4 +170,175 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+auto NoMalleation = [](CAutoFile& file, SnapshotMetadata& meta){};\n+\n+template<typename F = decltype(NoMalleation)>\n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleation = NoMalleation)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    malleation(auto_infile, metadata);\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 96,
      "original_position": 97,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "51f3f974 here and lines 291 and 320\r\n```suggestion\r\n        for (const CTransactionRef& txn : m_coinbase_txns) {\r\n```",
      "created_at": "2020-12-22T11:40:50Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547230123",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547230123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 217,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547231027",
      "pull_request_review_id": 556949409,
      "id": 547231027,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzMTAyNw==",
      "diff_hunk": "@@ -155,4 +170,175 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+auto NoMalleation = [](CAutoFile& file, SnapshotMetadata& meta){};\n+\n+template<typename F = decltype(NoMalleation)>\n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleation = NoMalleation)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    malleation(auto_infile, metadata);\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        chainman.SnapshotBlockhash().value_or(uint256()));\n+\n+    // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\n+    // be found.\n+    mineBlocks(10);\n+    initial_size += 10;\n+    initial_total_coins += 10;\n+\n+    // Should not load malleated snapshots\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(\n+        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {\n+            // A UTXO is missing but count is correct\n+            metadata.m_coins_count -= 1;\n+\n+            COutPoint outpoint;\n+            Coin coin;\n+\n+            auto_infile >> outpoint;\n+            auto_infile >> coin;\n+    }));\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(\n+        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {\n+            // Coins count is larger than coins in file\n+            metadata.m_coins_count += 1;\n+    }));\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(\n+        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {\n+            // Coins count is smaller than coins in file\n+            metadata.m_coins_count -= 1;",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 139,
      "original_position": 140,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "51f3f974 here and line 245 above\r\n```suggestion\r\n            --metadata.m_coins_count;\r\n```",
      "created_at": "2020-12-22T11:43:11Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547231027",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547231027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 260,
      "original_line": 260,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547231144",
      "pull_request_review_id": 556949409,
      "id": 547231144,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzMTE0NA==",
      "diff_hunk": "@@ -155,4 +170,175 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+auto NoMalleation = [](CAutoFile& file, SnapshotMetadata& meta){};\n+\n+template<typename F = decltype(NoMalleation)>\n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleation = NoMalleation)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    malleation(auto_infile, metadata);\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        chainman.SnapshotBlockhash().value_or(uint256()));\n+\n+    // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\n+    // be found.\n+    mineBlocks(10);\n+    initial_size += 10;\n+    initial_total_coins += 10;\n+\n+    // Should not load malleated snapshots\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(\n+        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {\n+            // A UTXO is missing but count is correct\n+            metadata.m_coins_count -= 1;\n+\n+            COutPoint outpoint;\n+            Coin coin;\n+\n+            auto_infile >> outpoint;\n+            auto_infile >> coin;\n+    }));\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(\n+        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {\n+            // Coins count is larger than coins in file\n+            metadata.m_coins_count += 1;",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 134,
      "original_position": 135,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "51f3f974\r\n```suggestion\r\n            ++metadata.m_coins_count;\r\n```",
      "created_at": "2020-12-22T11:43:29Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547231144",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547231144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 255,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547279343",
      "pull_request_review_id": 557080667,
      "id": 547279343,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3OTM0Mw==",
      "diff_hunk": "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": 547175326,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is not performance critical I think.  ~`const` has the additional benefit over being easier to reason about.~ (nvm, it's not a reference)",
      "created_at": "2020-12-22T13:32:17Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547279343",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547279343"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547295881",
      "pull_request_review_id": 557101963,
      "id": 547295881,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5NTg4MQ==",
      "diff_hunk": "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": 547175326,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, there have been a few conversations about this recently, like https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489776345 and others. The developer notes mention referring to the [C++ Core Guidelines](https://isocpp.github.io/CppCoreGuidelines/) but maybe a line about this in the notes would save everyone time.",
      "created_at": "2020-12-22T14:05:22Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547295881",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547295881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549858793",
      "pull_request_review_id": 559711766,
      "id": 549858793,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg1ODc5Mw==",
      "diff_hunk": "@@ -164,6 +163,10 @@ class CMainParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+         // TODO to be specified in a future patch.",
      "path": "src/chainparams.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d2d1eb23331fdb1c36a8a879aff222ff0d731210",
      "in_reply_to_id": 523799037,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Response to https://github.com/bitcoin/bitcoin/pull/19806/commits/d684ecd5f11b2cf63235cd483858f3fd27f8c712#r523799037:\r\n\r\n@fjahr I'd say no. assume* values are optimizations where we know some computation can be avoided because it's known to be valid. But refusing to start with a mismatching one should just mean you don't get the optimization; doing anything else is very close to making it a checkpoint, with all repercussions (actually affecting which chain the network can accept etc.).",
      "created_at": "2020-12-29T21:38:41Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549858793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549858793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549859378",
      "pull_request_review_id": 559711766,
      "id": 549859378,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg1OTM3OA==",
      "diff_hunk": "@@ -431,6 +438,17 @@ class CRegTestParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+            {\n+                110,\n+                {uint256S(\"0x76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"), 110},\n+            },\n+            {\n+                210,\n+                {uint256S(\"0x9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"), 210},\n+            },\n+        };",
      "path": "src/chainparams.cpp",
      "position": 43,
      "original_position": 43,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": 547190362,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Follow-up to https://github.com/bitcoin/bitcoin/pull/19806/commits/d684ecd5f11b2cf63235cd483858f3fd27f8c712#r547190362:\r\n\r\n@jonatack It's not the height, but the nChainTx value. It just happens to be equal to the height in chains that have never had anything but coinbase transactions.",
      "created_at": "2020-12-29T21:41:11Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549859378",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549859378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 450,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549863642",
      "pull_request_review_id": 559711766,
      "id": 549863642,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg2MzY0Mg==",
      "diff_hunk": "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": 547175326,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Response to https://github.com/bitcoin/bitcoin/pull/19806/commits/d684ecd5f11b2cf63235cd483858f3fd27f8c712#r547175326:\r\n\r\n@jonatack C++ Core Guidelines only say \"don't enforce const arguments for function arguments\", not don't use them. I'd consider whether someone uses them to be personal style.",
      "created_at": "2020-12-29T21:58:40Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549863642",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549863642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549864140",
      "pull_request_review_id": 559711766,
      "id": 549864140,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg2NDE0MA==",
      "diff_hunk": "@@ -5183,6 +5184,17 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d684ecd5f11b2cf63235cd483858f3fd27f8c712",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"chainparams: add allowed assumeutxo values\"\r\n\r\nReturning a copy of the AssumeUtxoData here is unnecessary, as the data is immutable. You could return a `Optional<std::reference_wrapper<AssumeutxoData>>` instead.",
      "created_at": "2020-12-29T22:00:55Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549864140",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549864140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549869106",
      "pull_request_review_id": 559711766,
      "id": 549869106,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg2OTEwNg==",
      "diff_hunk": "@@ -246,6 +249,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n     /* Cached dynamic memory usage for the inner Coin objects. */\n     mutable size_t cachedCoinsUsage;\n \n+    // Necessary so that we can write directly into cacheCoins during snapshot load.\n+    friend ChainstateManager;",
      "path": "src/coins.h",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "80f5bacf55ef62b6ac67ee3bc1d9220ec4bc67d6",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\"\r\n\r\nThis seems pretty ugly. I'd rather expose an actually public \"danger\" interface to CCoinsViewCache than needing to make CCoinsViewCache aware of ChainstateManager.",
      "created_at": "2020-12-29T22:10:11Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549869106",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549869106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549871887",
      "pull_request_review_id": 559711766,
      "id": 549871887,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3MTg4Nw==",
      "diff_hunk": "@@ -5196,6 +5196,285 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "80f5bacf55ef62b6ac67ee3bc1d9220ec4bc67d6",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\":\r\n\r\ncould be made `static`.",
      "created_at": "2020-12-29T22:18:43Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549871887",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549871887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5220,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552497554",
      "pull_request_review_id": 556903868,
      "id": 552497554,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ5NzU1NA==",
      "diff_hunk": "@@ -8,7 +8,6 @@\n #include <chainparamsseeds.h>\n #include <consensus/merkle.h>\n #include <hash.h> // for signet block challenge hash\n-#include <tinyformat.h>",
      "path": "src/chainparams.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d684ecd5f11b2cf63235cd483858f3fd27f8c712",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb: why is this removed. This is needed for `strprintf`",
      "created_at": "2021-01-06T10:38:24Z",
      "updated_at": "2021-04-03T13:29:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r552497554",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552497554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553529712",
      "pull_request_review_id": 563753315,
      "id": 553529712,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUyOTcxMg==",
      "diff_hunk": "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": 547175326,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa these C++ Core Guidelines appear to recommend not passing cheaply copied values as const:\r\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#con-constants-and-immutability\r\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Rf-in\r\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#f15-prefer-simple-and-conventional-ways-of-passing-information",
      "created_at": "2021-01-07T19:15:11Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553529712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553529712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553533900",
      "pull_request_review_id": 563760833,
      "id": 553533900,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUzMzkwMA==",
      "diff_hunk": "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": 547175326,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The only relevant discussion about by-value function arguments declared const I can see is:\r\n\r\n> Exception\r\n>\r\n> Function arguments are rarely mutated, but also rarely declared const. To avoid confusion and lots of false positives, don’t enforce this rule for function arguments.\r\n\r\nSo I read this as: the general advice (make immutable things const) applies, but you're not supposed to warn about it for function arguments because that would confuse people.\r\n\r\nI consider this personal style, and up to the author of the code.",
      "created_at": "2021-01-07T19:23:14Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553533900",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553533900"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553540940",
      "pull_request_review_id": 563766556,
      "id": 553540940,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU0MDk0MA==",
      "diff_hunk": "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": 547175326,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa per the replies by you and @vasild at https://github.com/bitcoin/bitcoin/pull/19845#discussion_r490289235, *My take is the same as the isocpp guidelines - no const for function arguments that are passed by value*, I had the impression that this is considered a guideline, but I won't comment on it further in reviews.",
      "created_at": "2021-01-07T19:32:08Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553540940",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553540940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553639369",
      "pull_request_review_id": 563886850,
      "id": 553639369,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYzOTM2OQ==",
      "diff_hunk": "@@ -164,6 +163,10 @@ class CMainParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+         // TODO to be specified in a future patch.",
      "path": "src/chainparams.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "d2d1eb23331fdb1c36a8a879aff222ff0d731210",
      "in_reply_to_id": 523799037,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa Right, I didn't look at it from that perspective. Thanks!",
      "created_at": "2021-01-07T22:51:19Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553639369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553639369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553716518",
      "pull_request_review_id": 563975423,
      "id": 553716518,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzcxNjUxOA==",
      "diff_hunk": "@@ -246,6 +249,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n     /* Cached dynamic memory usage for the inner Coin objects. */\n     mutable size_t cachedCoinsUsage;\n \n+    // Necessary so that we can write directly into cacheCoins during snapshot load.\n+    friend ChainstateManager;",
      "path": "src/coins.h",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "80f5bacf55ef62b6ac67ee3bc1d9220ec4bc67d6",
      "in_reply_to_id": 549869106,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks. I called this `EmplaceCoinInternalDANGER()`, let me know if you'd prefer something else.",
      "created_at": "2021-01-08T03:08:45Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553716518",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553716518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553716808",
      "pull_request_review_id": 563975799,
      "id": 553716808,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzcxNjgwOA==",
      "diff_hunk": "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return assumeutxo_found->second;\n+    }\n+    return {};\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": 547206814,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed (as well as a few others here), thanks.",
      "created_at": "2021-01-08T03:10:09Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553716808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553716808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5240,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554158337",
      "pull_request_review_id": 564539056,
      "id": 554158337,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE1ODMzNw==",
      "diff_hunk": "@@ -431,6 +438,17 @@ class CRegTestParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+            {\n+                110,\n+                {uint256S(\"0x76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"), 110},\n+            },\n+            {\n+                210,\n+                {uint256S(\"0x9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"), 210},\n+            },\n+        };",
      "path": "src/chainparams.cpp",
      "position": 43,
      "original_position": 43,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "in_reply_to_id": 547190362,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I must have been confused here. Will re-review this.",
      "created_at": "2021-01-08T19:53:28Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554158337",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554158337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 450,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554160596",
      "pull_request_review_id": 564541950,
      "id": 554160596,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE2MDU5Ng==",
      "diff_hunk": "@@ -5183,6 +5185,294 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "38b07a0a7399a8d5721e2fea157752e253246fd7",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems like a pretty strange return type, especially since the only call site immediately assigns an `Optional<AssumeutxoData>` from the return value so you're going to make a copy anyway. Why not just return a `std::optional<AssumeutxoData>` or `AssumeutxoData*`?\r\n\r\nAlso, prefer `std::optional<>` over `Optional<>` (`Optional<>` is just a wrapper for `std::optional<>` and is deprecated for new code).",
      "created_at": "2021-01-08T19:58:16Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554160596",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554160596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554163683",
      "pull_request_review_id": 564546248,
      "id": 554163683,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE2MzY4Mw==",
      "diff_hunk": "@@ -90,6 +110,11 @@ class CChainParams\n     const std::string& Bech32HRP() const { return bech32_hrp; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n+\n+    //! Get allowed assumeutxo height-hash pairs.",
      "path": "src/chainparams.h",
      "position": null,
      "original_position": 32,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "38b07a0a7399a8d5721e2fea157752e253246fd7",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These aren't height-hash pairs. It's a map from height to <hash, nChainTx>.",
      "created_at": "2021-01-08T20:05:33Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554163683",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554163683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554170337",
      "pull_request_review_id": 564555508,
      "id": 554170337,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE3MDMzNw==",
      "diff_hunk": "@@ -5183,6 +5185,294 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "38b07a0a7399a8d5721e2fea157752e253246fd7",
      "in_reply_to_id": 554160596,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See @sipa's feedback here: https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549864140",
      "created_at": "2021-01-08T20:18:24Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554170337",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554170337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554484699",
      "pull_request_review_id": 564817050,
      "id": 554484699,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ4NDY5OQ==",
      "diff_hunk": "@@ -246,6 +249,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n     /* Cached dynamic memory usage for the inner Coin objects. */\n     mutable size_t cachedCoinsUsage;\n \n+    // Necessary so that we can write directly into cacheCoins during snapshot load.\n+    friend ChainstateManager;",
      "path": "src/coins.h",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "3a547327446a3608ef2af25a8d25a42954fc5116",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 3a547327446a3608ef2af25a8d25a42954fc5116\r\n\r\nWith the introduction of `EmplaceCoinInternalDANGER()` you can remove this line now, right?",
      "created_at": "2021-01-09T23:16:07Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554484699",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554484699"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554486012",
      "pull_request_review_id": 564817050,
      "id": 554486012,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ4NjAxMg==",
      "diff_hunk": "@@ -5183,6 +5185,294 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "38b07a0a7399a8d5721e2fea157752e253246fd7",
      "in_reply_to_id": 554160596,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should probably still use `std::optional` though.",
      "created_at": "2021-01-09T23:33:04Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554486012",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554486012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554487506",
      "pull_request_review_id": 564818368,
      "id": 554487506,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ4NzUwNg==",
      "diff_hunk": "@@ -246,6 +249,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n     /* Cached dynamic memory usage for the inner Coin objects. */\n     mutable size_t cachedCoinsUsage;\n \n+    // Necessary so that we can write directly into cacheCoins during snapshot load.\n+    friend ChainstateManager;",
      "path": "src/coins.h",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "3a547327446a3608ef2af25a8d25a42954fc5116",
      "in_reply_to_id": 554484699,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ugh, embarrassing. Thanks.",
      "created_at": "2021-01-09T23:51:47Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554487506",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554487506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554489101",
      "pull_request_review_id": 564819109,
      "id": 554489101,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ4OTEwMQ==",
      "diff_hunk": "@@ -5183,6 +5185,294 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "38b07a0a7399a8d5721e2fea157752e253246fd7",
      "in_reply_to_id": 554160596,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2021-01-10T00:12:43Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554489101",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554489101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554544030",
      "pull_request_review_id": 564848436,
      "id": 554544030,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU0NDAzMA==",
      "diff_hunk": "@@ -5183,6 +5185,294 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\n+    const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return std::ref(assumeutxo_found->second);\n+    }\n+    return std::nullopt;\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+\n+        --coins_left;\n+        ++coins_processed;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                static_cast<float>(coins_processed) * 100 / static_cast<float>(coins_count),\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\n+        --max_secs_to_wait_for_headers;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    Optional<AssumeutxoData> maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 256,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "a56b71054f9ba4f13cea9938826032f9359a39d4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remove use of `Optional` wrapper.",
      "created_at": "2021-01-10T10:10:42Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554544030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554544030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5422,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554544120",
      "pull_request_review_id": 564848436,
      "id": 554544120,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU0NDEyMA==",
      "diff_hunk": "@@ -4,13 +4,19 @@\n //\n #include <chainparams.h>\n #include <consensus/validation.h>\n+#include <node/utxo_snapshot.h>\n #include <random.h>\n+#include <rpc/blockchain.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n+#include <optional.h>",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "a56b71054f9ba4f13cea9938826032f9359a39d4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unused import",
      "created_at": "2021-01-10T10:11:44Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554544120",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554544120"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554553327",
      "pull_request_review_id": 564848436,
      "id": 554553327,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU1MzMyNw==",
      "diff_hunk": "@@ -5183,6 +5185,294 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "38b07a0a7399a8d5721e2fea157752e253246fd7",
      "in_reply_to_id": 554160596,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe sipa's point was that you could avoid a copy by returning a `std::optional<std::reference_wrapper<T>>`. However, you're using that return to copy into a `std::optional<T>` in the only place that this is called:\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/19806/files#diff-97c3a52bc5fad452d82670a7fd291800bae20c7bc35bb82686c2c0a4ea7b5b98R5422\r\n\r\nso you're not actually saving a copy at all.\r\n\r\nIn any case, a copy of `AssumeutxoData` isn't expensive (32 byte hash + 4 byte int) and this is an infrequent operation, so there's really not problem just returning a `std::optional<AssumeutxoData>` (or indeed a `const AssumeutxoData*>` - returning a pointer with `nullptr` as a notfound sentinel is a common pattern).\r\n\r\nAlternatively, if you want to avoid the copy, just don't assign to `std::optional<AssumeUtxoData>` at the call site:\r\n\r\n```diff\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex b4206025be..8c95a837f8 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -5419,7 +5419,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\r\n     // Assert that the deserialized chainstate contents match the expected assumeutxo value.\r\n \r\n     int base_height = snapshot_start_block->nHeight;\r\n-    Optional<AssumeutxoData> maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\r\n+    auto maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\r\n \r\n     if (!maybe_au_data) {\r\n         LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\r\n@@ -5427,7 +5427,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\r\n         return false;\r\n     }\r\n \r\n-    const AssumeutxoData& au_data = maybe_au_data.value();\r\n+    const AssumeutxoData& au_data = maybe_au_data.value().get();\r\n```\r\n\r\nI personally find the `value().get()` for fishing the reference out a bit ugly.",
      "created_at": "2021-01-10T11:29:36Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554553327",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554553327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554591274",
      "pull_request_review_id": 564879830,
      "id": 554591274,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU5MTI3NA==",
      "diff_hunk": "@@ -5183,6 +5185,294 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "38b07a0a7399a8d5721e2fea157752e253246fd7",
      "in_reply_to_id": 554160596,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Gotcha, thanks @jnewbery.",
      "created_at": "2021-01-10T16:34:57Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554591274",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554591274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/558405368",
      "pull_request_review_id": 569391124,
      "id": 558405368,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQwNTM2OA==",
      "diff_hunk": "@@ -5177,6 +5178,18 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "647c91957f99f5b9aed790e49941e3370fc3c0b2",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"chainparams: add allowed assumeutxo values\" (647c91957f99f5b9aed790e49941e3370fc3c0b2)\r\n\r\nShould replace `optional<reference_wrapper<T>>` with `T*`. The advantage of using references instead of pointers is that references are not optional, so you don't have to check for null. If you take reference and make it optional, you are just verbosely emulating a pointer.",
      "created_at": "2021-01-15T16:05:00Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r558405368",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/558405368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561023961",
      "pull_request_review_id": 572304144,
      "id": 561023961,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAyMzk2MQ==",
      "diff_hunk": "@@ -5191,6 +5191,282 @@ std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\n     return std::nullopt;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();",
      "path": "src/validation.cpp",
      "position": 105,
      "original_position": 86,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "c5154cad6c195759409d6eb5134fad635b9aaade",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (c5154cad6c195759409d6eb5134fad635b9aaade)\r\n\r\nCredit to @jnewbery for pointing this out in https://github.com/bitcoin/bitcoin/pull/20749#discussion_r560979259, but the `ChainStateManager::ActiveChainstate` accessor isn't currently [locking cs_main](https://github.com/bitcoin/bitcoin/blob/e77eea5150bd46d2972ec5086b86948df6e73a83/src/validation.cpp#L5470-L5474) or [requiring cs_main to be locked](https://github.com/bitcoin/bitcoin/blob/e77eea5150bd46d2972ec5086b86948df6e73a83/src/validation.h#L887). I think it needs to do one of these things now that the `m_active_chainstate` pointer can change here. It might also be appropriate to add GUARDED_BY annotation to `m_active_chainstate`.",
      "created_at": "2021-01-20T14:56:38Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r561023961",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561023961"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5280,
      "original_line": 5280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561356194",
      "pull_request_review_id": 572712206,
      "id": 561356194,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM1NjE5NA==",
      "diff_hunk": "@@ -5191,6 +5191,282 @@ std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\n     return std::nullopt;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();",
      "path": "src/validation.cpp",
      "position": 105,
      "original_position": 86,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "c5154cad6c195759409d6eb5134fad635b9aaade",
      "in_reply_to_id": 561023961,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm most likely missing something, but I think it'd be sufficient just to lock cs_main in the ActiveChainstate accessor and not burden callers with locking `cs_main`. That way, callers of ActiveChainstate have the choice of either consistently using the chainstate reference they get, or locking cs_main themselves if they want to make sure that the chainstate doesn't change from under them.\r\n\r\nIncidentally, it seems to me that locking `cs_main` in ActiveChainstate may prevent a race condition between the assertion and the return in `ActiveChainstate`",
      "created_at": "2021-01-20T22:43:18Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r561356194",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561356194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5280,
      "original_line": 5280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561691904",
      "pull_request_review_id": 573092064,
      "id": 561691904,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY5MTkwNA==",
      "diff_hunk": "@@ -5191,6 +5191,282 @@ std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\n     return std::nullopt;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();",
      "path": "src/validation.cpp",
      "position": 105,
      "original_position": 86,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "c5154cad6c195759409d6eb5134fad635b9aaade",
      "in_reply_to_id": 561023961,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think eventually we'd like to move away from recursive locking, but that's a long way off for `cs_main`, so there's probably no harm in adding it here. Ultimately both are fine - as long as `cs_main` is held whenever `m_active_chainstate` is read or written to, then we're safe. One thing that you'd need to check for is that none of the callers of the various `Active*()` functions are holding a lower lock (e.g. `mempool.cs` or `g_cs_orphans`) and not `cs_main`. If so, then adding a `LOCK(cs_main)` to `ActiveChainstate()` would be a lock inversion.",
      "created_at": "2021-01-21T08:41:11Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r561691904",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561691904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5280,
      "original_line": 5280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564074755",
      "pull_request_review_id": 575846849,
      "id": 564074755,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA3NDc1NQ==",
      "diff_hunk": "@@ -5191,6 +5191,282 @@ std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\n     return std::nullopt;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();",
      "path": "src/validation.cpp",
      "position": 105,
      "original_position": 86,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "c5154cad6c195759409d6eb5134fad635b9aaade",
      "in_reply_to_id": 561023961,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There appear to be quite a few other locations where `m_active_chainstate` is read/written without holding `cs_main`. One example: https://github.com/bitcoin/bitcoin/blob/52d84a45e2fa3def71853cd31d5582ae31ea85d3/src/validation.cpp#L5145-L5151\r\n\r\nThis violates the conditions in the comment: \"This means it is safe to acquire the contents of this pointer with ::cs_main held, release the lock, and then use the reference without concern of it being deconstructed.\"\r\n\r\nThe earlier part of that comment also seems wrong after this PR: \"Once this pointer is set to a corresponding chainstate, it will not be reset until init.cpp:Shutdown().\" After this PR, the pointer is reset to a different value in `ActivateSnapshot()`.\r\n\r\nI haven't been following the AssumeUTXO project, so perhaps this really is safe once snapshot activation is exposed, but from a quick code read it looks like there's the potential for a data race on `m_active_chainstate`.",
      "created_at": "2021-01-25T22:04:00Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r564074755",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564074755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5280,
      "original_line": 5280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564554289",
      "pull_request_review_id": 576404332,
      "id": 564554289,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU1NDI4OQ==",
      "diff_hunk": "@@ -5191,6 +5191,282 @@ std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\n     return std::nullopt;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();",
      "path": "src/validation.cpp",
      "position": 105,
      "original_position": 86,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "c5154cad6c195759409d6eb5134fad635b9aaade",
      "in_reply_to_id": 561023961,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This violates the conditions in the comment: \"This means it is safe to acquire the contents of this pointer with ::cs_main held, release the lock, and then use the reference without concern of it being deconstructed.\"\r\n\r\nHow so? You can still acquire the pointer and use it without fear of segfault, since the underlying data will always correspond to either `m_idb_chainstate` or `m_snapshot_chainstate`. It may not be semantically what you want (though it may be too), but it will not segfault.\r\n\r\n> The earlier part of that comment also seems wrong after this PR\r\n\r\nYes, this does seem out of date.",
      "created_at": "2021-01-26T14:31:22Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r564554289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564554289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5280,
      "original_line": 5280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564568211",
      "pull_request_review_id": 576422603,
      "id": 564568211,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU2ODIxMQ==",
      "diff_hunk": "@@ -5191,6 +5191,282 @@ std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\n     return std::nullopt;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();",
      "path": "src/validation.cpp",
      "position": 105,
      "original_position": 86,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "c5154cad6c195759409d6eb5134fad635b9aaade",
      "in_reply_to_id": 561023961,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> the underlying data will always correspond to either m_idb_chainstate or m_snapshot_chainstate\r\n\r\nNot necessarily - it's not safe to read the pointer value when it's being written to by another thread since pointers aren't guaranteed to be atomic https://stackoverflow.com/questions/8919818/is-pointer-assignment-atomic-in-c",
      "created_at": "2021-01-26T14:48:35Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r564568211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564568211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5280,
      "original_line": 5280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570275491",
      "pull_request_review_id": 583460788,
      "id": 570275491,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDI3NTQ5MQ==",
      "diff_hunk": "@@ -5191,6 +5191,282 @@ std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\n     return std::nullopt;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 110,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "c5154cad6c195759409d6eb5134fad635b9aaade",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "03e0de1\r\n\r\nI think you can constify `coins_count`?",
      "created_at": "2021-02-04T14:40:16Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570275491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570275491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570308860",
      "pull_request_review_id": 583460788,
      "id": 570308860,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDMwODg2MA==",
      "diff_hunk": "@@ -5191,6 +5191,282 @@ std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\n     return std::nullopt;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+\n+        --coins_left;\n+        ++coins_processed;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                static_cast<float>(coins_processed) * 100 / static_cast<float>(coins_count),\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\n+        --max_secs_to_wait_for_headers;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    auto maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    const AssumeutxoData& au_data = maybe_au_data.value();\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // The remainder of this function requires modifying data protected by cs_main.\n+    LOCK(::cs_main);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries\n+    //       (among other things)\n+    //   - nStatus & BLOCK_OPT_WITNESS: so that RewindBlockIndex() doesn't zealously",
      "path": "src/validation.cpp",
      "position": 283,
      "original_position": 263,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "c5154cad6c195759409d6eb5134fad635b9aaade",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "03e0de1\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/21009 may lands first, will it be still valuable to mark assumed-valid blocks `BLOCK_OPT_WITNESS` ?",
      "created_at": "2021-02-04T15:20:56Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570308860",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570308860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5458,
      "original_line": 5458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570333586",
      "pull_request_review_id": 583460788,
      "id": 570333586,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDMzMzU4Ng==",
      "diff_hunk": "@@ -5219,6 +5219,282 @@ std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\n     return std::nullopt;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+\n+        --coins_left;\n+        ++coins_processed;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                static_cast<float>(coins_processed) * 100 / static_cast<float>(coins_count),\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\n+        --max_secs_to_wait_for_headers;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    auto maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    const AssumeutxoData& au_data = maybe_au_data.value();\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // The remainder of this function requires modifying data protected by cs_main.\n+    LOCK(::cs_main);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries",
      "path": "src/validation.cpp",
      "position": 281,
      "original_position": 261,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "03e0de1409ba7155dd1070ecde0c531f1265fbff",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "03e0de1\r\n\r\n`BlockManager::LoadBlockIndex` only cares about `nTx` to update `nChainTx`. I think you want `nTx` > 0 to pass `CheckBlockIndex` ? See checks L4772 - L4780 ?",
      "created_at": "2021-02-04T15:50:30Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570333586",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570333586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5456,
      "original_line": 5456,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570361268",
      "pull_request_review_id": 583460788,
      "id": 570361268,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2MTI2OA==",
      "diff_hunk": "@@ -24,6 +24,9 @@ static uint64_t GetBogoSize(const CScript& scriptPubKey)\n            scriptPubKey.size() /* scriptPubKey */;\n }\n \n+//! Warning: be very careful when changing this! assumeutxo and UTXO snapshot\n+//! validation commitments are reliant on the hash constructed by this\n+//! function.",
      "path": "src/node/coinstats.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "f3bfa25a24da33bfcfb123b09292bac7e3ac002d",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f3bfa25\r\n\r\nShould you describe more the concerns with any bug slip in in `ApplyStats` ? A bug breaking validation of already committed assume-valid chains and thus leading to their reject is okay. What is really concerning would be to validate a mischievous utxo set under a committed assume-valid chain, it might lead to double-spend against the assumeutxo user.",
      "created_at": "2021-02-04T16:25:05Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570361268",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570361268"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570378037",
      "pull_request_review_id": 583460788,
      "id": 570378037,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM3ODAzNw==",
      "diff_hunk": "@@ -978,4 +979,14 @@ inline bool IsBlockPruned(const CBlockIndex* pblockindex)\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in] Get the assumeutxo value for this height.",
      "path": "src/validation.h",
      "position": 97,
      "original_position": 15,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "f3bfa25a24da33bfcfb123b09292bac7e3ac002d",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f3bfa25\r\n\r\nIs it possible to obtain the same UTXO set hash at the same height but for two different chains ? Your UTXO set at block 100 might be committed with header X or header X'. Assuming a reorg deep enough switching from X-chain to X'-chain, your UTXO snapshot for X would become invalid due to its `base_blockhash`. \r\n\r\nI think we'll loose this property if we reference by block hash here.",
      "created_at": "2021-02-04T16:46:33Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570378037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570378037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1038,
      "original_line": 1038,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570380414",
      "pull_request_review_id": 583460788,
      "id": 570380414,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM4MDQxNA==",
      "diff_hunk": "@@ -163,14 +163,27 @@ class CBlockIndex\n \n     //! Number of transactions in this block.\n     //! Note: in a potential headers-first mode, this number cannot be relied upon\n+    //! Note: this value is faked during UTXO snapshot load to ensure that\n+    //! LoadBlockIndex() will load index entries for blocks that we lack data for.\n+    //! @sa ActivateSnapshot\n     unsigned int nTx{0};\n \n     //! (memory only) Number of transactions in the chain up to and including this block.\n     //! This value will be non-zero only if and only if transactions for this block and all its parents are available.\n     //! Change to 64-bit type when necessary; won't happen before 2030\n+    //!\n+    //! Note: this value is faked during use of a UTXO snapshot because we don't\n+    //! have the underlying block data available during snapshot load.",
      "path": "src/chain.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "03e0de1409ba7155dd1070ecde0c531f1265fbff",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "03e0de1\r\n\r\nIf those values are going to be sanitized during background-IBD maybe you should document it.",
      "created_at": "2021-02-04T16:49:24Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570380414",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570380414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 176,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570382713",
      "pull_request_review_id": 583460788,
      "id": 570382713,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM4MjcxMw==",
      "diff_hunk": "@@ -5219,6 +5219,282 @@ std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\n     return std::nullopt;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+\n+        --coins_left;\n+        ++coins_processed;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                static_cast<float>(coins_processed) * 100 / static_cast<float>(coins_count),\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this",
      "path": "src/validation.cpp",
      "position": 176,
      "original_position": 157,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "03e0de1409ba7155dd1070ecde0c531f1265fbff",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "03e0de1\r\n\r\nMaybe you can document the problem that's the hack is circumventing w.r.t to coin cache requirements.",
      "created_at": "2021-02-04T16:52:18Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570382713",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570382713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5351,
      "original_line": 5351,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570389322",
      "pull_request_review_id": 583460788,
      "id": 570389322,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM4OTMyMg==",
      "diff_hunk": "@@ -5219,6 +5219,282 @@ std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\n     return std::nullopt;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+\n+        --coins_left;\n+        ++coins_processed;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                static_cast<float>(coins_processed) * 100 / static_cast<float>(coins_count),\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\n+        --max_secs_to_wait_for_headers;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    auto maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    const AssumeutxoData& au_data = maybe_au_data.value();\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // The remainder of this function requires modifying data protected by cs_main.\n+    LOCK(::cs_main);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries\n+    //       (among other things)\n+    //   - nStatus & BLOCK_OPT_WITNESS: so that RewindBlockIndex() doesn't zealously\n+    //       unwind the assumed-valid chain.\n+    //\n+    CBlockIndex* index = nullptr;\n+    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+        index = snapshot_chainstate.m_chain[i];\n+\n+        if (!index->nTx) {\n+            index->nTx = 1;\n+        }\n+        index->nChainTx = index->pprev ? index->pprev->nChainTx + index->nTx : 1;\n+\n+        // We need to fake this flag so that CChainState::RewindBlockIndex()\n+        // won't try to rewind the entire assumed-valid chain on startup.\n+        if (index->pprev && ::IsWitnessEnabled(index->pprev, ::Params().GetConsensus())) {\n+            index->nStatus |= BLOCK_OPT_WITNESS;\n+        }\n+    }\n+\n+    assert(index);\n+    index->nChainTx = metadata.m_nchaintx;\n+    snapshot_chainstate.setBlockIndexCandidates.insert(snapshot_start_block);",
      "path": "src/validation.cpp",
      "position": 304,
      "original_position": 284,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "03e0de1409ba7155dd1070ecde0c531f1265fbff",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "03e0de1\r\n\r\n\"Mark snapshot starting block as eligible for the most-work chain\".",
      "created_at": "2021-02-04T17:00:42Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570389322",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570389322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5479,
      "original_line": 5479,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570390099",
      "pull_request_review_id": 583460788,
      "id": 570390099,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM5MDA5OQ==",
      "diff_hunk": "@@ -865,6 +873,22 @@ class ChainstateManager\n     //! Get all chainstates currently being used.\n     std::vector<CChainState*> GetAll();\n \n+    //! Construct and activate a Chainstate on the basis of UTXO snapshot data.\n+    //!\n+    //! Steps:\n+    //!\n+    //! - Initialize an unused CChainState.\n+    //! - Load its `CoinsViews` contents from `coins_file`.\n+    //! - Verify that the hash of the resulting coinsdb matches the expected hash\n+    //!   per assumeutxo chain parameters.\n+    //! - Wait for our headers chain to include the base block of the snapshot.",
      "path": "src/validation.h",
      "position": 79,
      "original_position": 37,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "03e0de1409ba7155dd1070ecde0c531f1265fbff",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "03e0de1\r\n\r\nYou should swap those two steps to be in-order ? Also mentions the `GetUTXOStats` one.",
      "created_at": "2021-02-04T17:01:47Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570390099",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570390099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 913,
      "original_line": 913,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570923901",
      "pull_request_review_id": 584279133,
      "id": 570923901,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDkyMzkwMQ==",
      "diff_hunk": "@@ -2782,14 +2781,12 @@ static bool NotifyHeaderTip(CChainState& chainstate) LOCKS_EXCLUDED(cs_main) {\n \n         if (pindexHeader != pindexHeaderOld) {\n             fNotify = true;\n-            assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n-            fInitialBlockDownload = chainstate.IsInitialBlockDownload();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "2369045c6909bc242b996976d635cd7e6f9c7f62",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: make NotifyHeaderTip not rely on CChainState object\" (2369045c6909bc242b996976d635cd7e6f9c7f62)\r\n\r\nI know this commit came from another reviewer's suggestion, so feel free to ignore this comment, but this commit doesn't seem great to me. It's not simplifying code or semantics, and it seems like it might send a less accurate notification if it is unlocking and relocking `cs_main` between getting `pindexHeader` and `is_in_ibd` values instead of getting both values under the same lock.\r\n",
      "created_at": "2021-02-05T12:08:31Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570923901",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570923901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2775,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571006690",
      "pull_request_review_id": 584389559,
      "id": 571006690,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTAwNjY5MA==",
      "diff_hunk": "@@ -2782,14 +2781,12 @@ static bool NotifyHeaderTip(CChainState& chainstate) LOCKS_EXCLUDED(cs_main) {\n \n         if (pindexHeader != pindexHeaderOld) {\n             fNotify = true;\n-            assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n-            fInitialBlockDownload = chainstate.IsInitialBlockDownload();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "2369045c6909bc242b996976d635cd7e6f9c7f62",
      "in_reply_to_id": 570923901,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I tend to agree. What's the benefit of this commit?\r\n\r\nI haven't looked in great detail, but I imagine we probably want `pindexBestHeader` to move from being a global to being a member of CChainState, guarded by cs_main.",
      "created_at": "2021-02-05T14:31:15Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r571006690",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571006690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2775,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571293050",
      "pull_request_review_id": 584760341,
      "id": 571293050,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTI5MzA1MA==",
      "diff_hunk": "@@ -2782,14 +2781,12 @@ static bool NotifyHeaderTip(CChainState& chainstate) LOCKS_EXCLUDED(cs_main) {\n \n         if (pindexHeader != pindexHeaderOld) {\n             fNotify = true;\n-            assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n-            fInitialBlockDownload = chainstate.IsInitialBlockDownload();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "2369045c6909bc242b996976d635cd7e6f9c7f62",
      "in_reply_to_id": 570923901,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As far as I can tell, this commit is necessary if we both (i) want chainstate usage to be covered by `cs_main` and (ii) want to preserve the lock exclusion annotation on `NotifyHeaderTip`; there is no way to satisfy both while passing in a chainstate as a parameter.\r\n\r\nThat said, I have no problem peeling off the last two commits and deferring locking considerations for another PR. ",
      "created_at": "2021-02-05T22:49:41Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r571293050",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571293050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2775,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571300707",
      "pull_request_review_id": 584769136,
      "id": 571300707,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTMwMDcwNw==",
      "diff_hunk": "@@ -2782,14 +2781,12 @@ static bool NotifyHeaderTip(CChainState& chainstate) LOCKS_EXCLUDED(cs_main) {\n \n         if (pindexHeader != pindexHeaderOld) {\n             fNotify = true;\n-            assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n-            fInitialBlockDownload = chainstate.IsInitialBlockDownload();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "2369045c6909bc242b996976d635cd7e6f9c7f62",
      "in_reply_to_id": 570923901,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/19806#discussion_r571293050\r\n\r\n> As far as I can tell, this commit is necessary if we both (i) want chainstate usage to be covered by `cs_main` and (ii) want to preserve the lock exclusion annotation on `NotifyHeaderTip`; there is no way to satisfy both while passing in a chainstate as a parameter.\r\n> \r\n> That said, I have no problem peeling off the last two commits and deferring locking considerations for another PR.\r\n\r\nUnless there's a specific reason the commits are needed here, I'd peel them off. The original reason to involve locking in this PR according to https://github.com/bitcoin/bitcoin/pull/19806#discussion_r561023961 was to guard `m_active_chainstate`, because at the time it was unguarded, and this PR introduced code changing the `m_active_chainstate` value. But now that `m_active_chainstate` is guarded on master (https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-584279133), I think these commits only complicate things here and would make more sense as a separate PR.\r\n\r\nOn https://github.com/bitcoin/bitcoin/commit/2369045c6909bc242b996976d635cd7e6f9c7f62, I don't think there's a problem continuing to use chainstate inside NotifyHeaderTip regardless of the LOCKS_EXCLUDED annotation, because NotifyHeaderTip is still locking cs_main internally a few lines up above this on line 2779",
      "created_at": "2021-02-05T23:12:24Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r571300707",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571300707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2775,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574577926",
      "pull_request_review_id": 588660879,
      "id": 574577926,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDU3NzkyNg==",
      "diff_hunk": "@@ -5219,6 +5219,282 @@ std::optional<std::reference_wrapper<const AssumeutxoData>> ExpectedAssumeutxo(\n     return std::nullopt;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+\n+        --coins_left;\n+        ++coins_processed;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                static_cast<float>(coins_processed) * 100 / static_cast<float>(coins_count),\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\n+        --max_secs_to_wait_for_headers;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    auto maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    const AssumeutxoData& au_data = maybe_au_data.value();\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // The remainder of this function requires modifying data protected by cs_main.\n+    LOCK(::cs_main);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries",
      "path": "src/validation.cpp",
      "position": 281,
      "original_position": 261,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "03e0de1409ba7155dd1070ecde0c531f1265fbff",
      "in_reply_to_id": 570333586,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You may be right, but it requires more investigation - and certainly changing the logic in `LoadBlockIndex`, which I am hesitant to do. We can make this change later if we find it to be preferable for whatever reason.",
      "created_at": "2021-02-11T15:10:03Z",
      "updated_at": "2021-02-12T14:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r574577926",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574577926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5456,
      "original_line": 5456,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606639204",
      "pull_request_review_id": 556903868,
      "id": 606639204,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjYzOTIwNA==",
      "diff_hunk": "@@ -55,6 +55,18 @@ static void ApplyHash(CCoinsStats& stats, MuHash3072& muhash, const uint256& has\n     muhash.Insert(MakeUCharSpan(ss));\n }\n \n+//! Warning: be very careful when changing this! assumeutxo and UTXO snapshot\n+//! validation commitments are reliant on the hash constructed by this\n+//! function.\n+//!\n+//! If the construction of this hash is changed, it will invalidate\n+//! existing UTXO snapshots. This will not result in any kind of consensus\n+//! failure, but it will force clients that were expecting to make use of\n+//! assumeutxo to do traditional IBD instead.\n+//!\n+//! It is also possible, though very unlikely, that a change in this\n+//! construction could cause a previously invalid (and potentially malicious)\n+//! UTXO snapshot to be considered valid.",
      "path": "src/node/coinstats.cpp",
      "position": 15,
      "original_position": 15,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb: I don't understand this section. Does this assume that the way outputs are applied to the hash_obj is broken? In that case it doesn't require a \"previously\" invalid snapshot. Likely, any invalid snapshot can be generated/modified, so that it is considered valid.\r\n\r\nIf it assumes that the underlying hash function is broken, there is nothing we can do anyway and any invalid snapshot can be generated/modified to be valid, regardless of changing this construction.",
      "created_at": "2021-04-03T08:50:41Z",
      "updated_at": "2021-04-03T13:29:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606639204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606639204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 69,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606639538",
      "pull_request_review_id": 556903868,
      "id": 606639538,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjYzOTUzOA==",
      "diff_hunk": "@@ -20,6 +20,8 @@\n #include <functional>\n #include <unordered_map>\n \n+class ChainstateManager;",
      "path": "src/coins.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "f6e2da5fb7c6406c37612c838c998078ea8d2252",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f6e2da5fb7c6406c37612c838c998078ea8d2252: why is this needed?",
      "created_at": "2021-04-03T08:55:23Z",
      "updated_at": "2021-04-03T13:29:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606639538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606639538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606647986",
      "pull_request_review_id": 556903868,
      "id": 606647986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY0Nzk4Ng==",
      "diff_hunk": "@@ -164,4 +169,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        chainman.SnapshotBlockhash().value_or(uint256()));",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 111,
      "original_position": 78,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4d8de04f32736199e4b41a14a2d29b1a4d0a15d4: Wouldn't it be better to check `!chainman.SnapshotBlockhash()`? Otherwise it can incorrectly return a default constructed uint256 without this test noticing.",
      "created_at": "2021-04-03T10:26:48Z",
      "updated_at": "2021-04-03T13:29:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606647986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606647986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 232,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606648138",
      "pull_request_review_id": 556903868,
      "id": 606648138,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY0ODEzOA==",
      "diff_hunk": "@@ -164,4 +169,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 108,
      "original_position": 75,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wouldn't it be better to have the same interface as for the `SnapshotBlockhash` member function? I.e. return nullopt when there is no hash instead of 0.",
      "created_at": "2021-04-03T10:27:51Z",
      "updated_at": "2021-04-03T13:29:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606648138",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606648138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606655606",
      "pull_request_review_id": 556903868,
      "id": 606655606,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY1NTYwNg==",
      "diff_hunk": "@@ -121,12 +120,21 @@ struct TestChain100Setup : public RegTestingSetup {\n     CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\n                                  const CScript& scriptPubKey);\n \n+    //! Mine a series of new blocks on the active chain.\n+    void mineBlocks(int num_blocks);\n+\n     ~TestChain100Setup();\n \n+    bool m_deterministic;\n     std::vector<CTransactionRef> m_coinbase_txns; // For convenience, coinbase transactions\n     CKey coinbaseKey; // private/public key needed to spend coinbase transactions\n };\n \n+\n+struct TestChain100DeterministicSetup : public TestChain100Setup {\n+    TestChain100DeterministicSetup() : TestChain100Setup(true) { }\n+};",
      "path": "src/test/util/setup_common.h",
      "position": 34,
      "original_position": 34,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any need for this? Seems odd to have an option to make a test non-deterministic",
      "created_at": "2021-04-03T11:52:22Z",
      "updated_at": "2021-04-03T13:29:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606655606",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606655606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 136,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606656271",
      "pull_request_review_id": 556903868,
      "id": 606656271,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY1NjI3MQ==",
      "diff_hunk": "@@ -79,7 +79,6 @@ struct BasicTestingSetup {\n     explicit BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n     ~BasicTestingSetup();\n \n-private:",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "e82498b05634608e59a1d1acc1a8c1b8ece62ffc",
      "in_reply_to_id": 542506377,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could use `GetDataDir()` instead",
      "created_at": "2021-04-03T11:58:42Z",
      "updated_at": "2021-04-03T13:29:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606656271",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606656271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606775877",
      "pull_request_review_id": 627521946,
      "id": 606775877,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjc3NTg3Nw==",
      "diff_hunk": "@@ -121,12 +120,21 @@ struct TestChain100Setup : public RegTestingSetup {\n     CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\n                                  const CScript& scriptPubKey);\n \n+    //! Mine a series of new blocks on the active chain.\n+    void mineBlocks(int num_blocks);\n+\n     ~TestChain100Setup();\n \n+    bool m_deterministic;\n     std::vector<CTransactionRef> m_coinbase_txns; // For convenience, coinbase transactions\n     CKey coinbaseKey; // private/public key needed to spend coinbase transactions\n };\n \n+\n+struct TestChain100DeterministicSetup : public TestChain100Setup {\n+    TestChain100DeterministicSetup() : TestChain100Setup(true) { }\n+};",
      "path": "src/test/util/setup_common.h",
      "position": 34,
      "original_position": 34,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
      "in_reply_to_id": 606655606,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "#21592",
      "created_at": "2021-04-04T09:42:02Z",
      "updated_at": "2021-04-04T09:42:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606775877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606775877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 136,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606775982",
      "pull_request_review_id": 627522013,
      "id": 606775982,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjc3NTk4Mg==",
      "diff_hunk": "@@ -164,4 +169,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 108,
      "original_position": 75,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
      "in_reply_to_id": 606648138,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed in #21584  ",
      "created_at": "2021-04-04T09:42:47Z",
      "updated_at": "2021-04-04T09:42:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606775982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606775982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606775999",
      "pull_request_review_id": 627522028,
      "id": 606775999,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjc3NTk5OQ==",
      "diff_hunk": "@@ -164,4 +169,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        chainman.SnapshotBlockhash().value_or(uint256()));",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 111,
      "original_position": 78,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
      "in_reply_to_id": 606647986,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed in #21584 ",
      "created_at": "2021-04-04T09:43:04Z",
      "updated_at": "2021-04-04T09:43:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606775999",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606775999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 232,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606776172",
      "pull_request_review_id": 627522167,
      "id": 606776172,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjc3NjE3Mg==",
      "diff_hunk": "@@ -20,6 +20,8 @@\n #include <functional>\n #include <unordered_map>\n \n+class ChainstateManager;",
      "path": "src/coins.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "f6e2da5fb7c6406c37612c838c998078ea8d2252",
      "in_reply_to_id": 606639538,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed in #21592\r\n",
      "created_at": "2021-04-04T09:44:49Z",
      "updated_at": "2021-04-04T09:44:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606776172",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606776172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612165410",
      "pull_request_review_id": 634216112,
      "id": 612165410,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjE2NTQxMA==",
      "diff_hunk": "@@ -5192,6 +5194,295 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+const AssumeutxoData* ExpectedAssumeutxo(\n+    const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return &assumeutxo_found->second;\n+    }\n+    return nullptr;\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    const uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+\n+        --coins_left;\n+        ++coins_processed;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                static_cast<float>(coins_processed) * 100 / static_cast<float>(coins_count),\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main,\n+            return m_blockman.LookupBlockIndex(base_blockhash));\n+        --max_secs_to_wait_for_headers;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    auto maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    const AssumeutxoData& au_data = *maybe_au_data;\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // The remainder of this function requires modifying data protected by cs_main.\n+    LOCK(::cs_main);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries\n+    //       (among other things)\n+    //   - nStatus & BLOCK_OPT_WITNESS: so that RewindBlockIndex() doesn't zealously\n+    //       unwind the assumed-valid chain.\n+    //\n+    CBlockIndex* index = nullptr;\n+    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+        index = snapshot_chainstate.m_chain[i];\n+\n+        if (!index->nTx) {\n+            index->nTx = 1;\n+        }\n+        index->nChainTx = index->pprev ? index->pprev->nChainTx + index->nTx : 1;\n+\n+        // We need to fake this flag so that CChainState::RewindBlockIndex()\n+        // won't try to rewind the entire assumed-valid chain on startup.\n+        if (index->pprev && ::IsWitnessEnabled(index->pprev, ::Params().GetConsensus())) {\n+            index->nStatus |= BLOCK_OPT_WITNESS;\n+        }\n+    }\n+\n+    assert(index);\n+    index->nChainTx = metadata.m_nchaintx;",
      "path": "src/validation.cpp",
      "position": 303,
      "original_position": 303,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`metadata.m_nchaintx` is untrusted input, so this lets an attacker pick the value",
      "created_at": "2021-04-13T06:33:32Z",
      "updated_at": "2021-04-13T06:33:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r612165410",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612165410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5478,
      "original_line": 5478,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613412843",
      "pull_request_review_id": 635843068,
      "id": 613412843,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzQxMjg0Mw==",
      "diff_hunk": "@@ -5192,6 +5194,295 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+const AssumeutxoData* ExpectedAssumeutxo(\n+    const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return &assumeutxo_found->second;\n+    }\n+    return nullptr;\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    const uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+\n+        --coins_left;\n+        ++coins_processed;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                static_cast<float>(coins_processed) * 100 / static_cast<float>(coins_count),\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main,\n+            return m_blockman.LookupBlockIndex(base_blockhash));\n+        --max_secs_to_wait_for_headers;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    auto maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    const AssumeutxoData& au_data = *maybe_au_data;\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // The remainder of this function requires modifying data protected by cs_main.\n+    LOCK(::cs_main);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries\n+    //       (among other things)\n+    //   - nStatus & BLOCK_OPT_WITNESS: so that RewindBlockIndex() doesn't zealously\n+    //       unwind the assumed-valid chain.\n+    //\n+    CBlockIndex* index = nullptr;\n+    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+        index = snapshot_chainstate.m_chain[i];\n+\n+        if (!index->nTx) {\n+            index->nTx = 1;\n+        }\n+        index->nChainTx = index->pprev ? index->pprev->nChainTx + index->nTx : 1;\n+\n+        // We need to fake this flag so that CChainState::RewindBlockIndex()\n+        // won't try to rewind the entire assumed-valid chain on startup.\n+        if (index->pprev && ::IsWitnessEnabled(index->pprev, ::Params().GetConsensus())) {\n+            index->nStatus |= BLOCK_OPT_WITNESS;\n+        }\n+    }\n+\n+    assert(index);\n+    index->nChainTx = metadata.m_nchaintx;",
      "path": "src/validation.cpp",
      "position": 303,
      "original_position": 303,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "in_reply_to_id": 612165410,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, yeah, good catch. This is outdated, and should be `... = au_data.nChainTx` instead. This is an artifact from before we moved nChainTx into the hardcoded assumeutxo parameters.",
      "created_at": "2021-04-14T16:47:16Z",
      "updated_at": "2021-04-14T16:47:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r613412843",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613412843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5478,
      "original_line": 5478,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613443306",
      "pull_request_review_id": 635883777,
      "id": 613443306,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzQ0MzMwNg==",
      "diff_hunk": "@@ -5192,6 +5194,295 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+const AssumeutxoData* ExpectedAssumeutxo(\n+    const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return &assumeutxo_found->second;\n+    }\n+    return nullptr;\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    const uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+\n+        --coins_left;\n+        ++coins_processed;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                static_cast<float>(coins_processed) * 100 / static_cast<float>(coins_count),\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main,\n+            return m_blockman.LookupBlockIndex(base_blockhash));\n+        --max_secs_to_wait_for_headers;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    auto maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    const AssumeutxoData& au_data = *maybe_au_data;\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // The remainder of this function requires modifying data protected by cs_main.\n+    LOCK(::cs_main);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries\n+    //       (among other things)\n+    //   - nStatus & BLOCK_OPT_WITNESS: so that RewindBlockIndex() doesn't zealously\n+    //       unwind the assumed-valid chain.\n+    //\n+    CBlockIndex* index = nullptr;\n+    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+        index = snapshot_chainstate.m_chain[i];\n+\n+        if (!index->nTx) {\n+            index->nTx = 1;\n+        }\n+        index->nChainTx = index->pprev ? index->pprev->nChainTx + index->nTx : 1;\n+\n+        // We need to fake this flag so that CChainState::RewindBlockIndex()\n+        // won't try to rewind the entire assumed-valid chain on startup.\n+        if (index->pprev && ::IsWitnessEnabled(index->pprev, ::Params().GetConsensus())) {\n+            index->nStatus |= BLOCK_OPT_WITNESS;\n+        }\n+    }\n+\n+    assert(index);\n+    index->nChainTx = metadata.m_nchaintx;",
      "path": "src/validation.cpp",
      "position": 303,
      "original_position": 303,
      "commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "original_commit_id": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "in_reply_to_id": 612165410,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed here: https://github.com/bitcoin/bitcoin/pull/21681\r\n\r\nThanks for finding this.",
      "created_at": "2021-04-14T17:32:32Z",
      "updated_at": "2021-04-14T17:32:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r613443306",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613443306"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5478,
      "original_line": 5478,
      "side": "RIGHT"
    }
  ]
}