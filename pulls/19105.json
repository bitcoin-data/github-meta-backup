{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "id": 425064651,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDI1MDY0NjUx",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/19105.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/19105.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "number": 19105,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Add Muhash3072 implementation in Python",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is the second in a [series of pull requests](https://github.com/bitcoin/bitcoin/pull/18000) to implement an Index for UTXO set statistics.\r\n\r\nThis pull request adds a Python implementation of Muhash3072, a homomorphic hashing algorithm to be used for hashing the UTXO set. The Python implementation can then be used to compare behavior with the C++ version.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      },
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 1648013533,
        "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
        "name": "Review club",
        "description": "",
        "color": "0052cc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-05-29T12:06:23Z",
    "updated_at": "2022-08-16T17:05:08Z",
    "closed_at": "2020-09-01T15:37:18Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-09-01T15:37:18Z",
    "merge_commit_sha": "48c1083632687a42ac603d4f241e70616a1d3815",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "fjahr:csi-2-muhash-py",
      "ref": "csi-2-muhash-py",
      "sha": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 196253948,
        "node_id": "MDEwOlJlcG9zaXRvcnkxOTYyNTM5NDg=",
        "name": "bitcoin",
        "full_name": "fjahr/bitcoin",
        "owner": {
          "login": "fjahr",
          "id": 1322187,
          "node_id": "MDQ6VXNlcjEzMjIxODc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/fjahr",
          "html_url": "https://github.com/fjahr",
          "followers_url": "https://api.github.com/users/fjahr/followers",
          "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
          "organizations_url": "https://api.github.com/users/fjahr/orgs",
          "repos_url": "https://api.github.com/users/fjahr/repos",
          "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/fjahr/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/fjahr/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/fjahr/bitcoin",
        "archive_url": "https://api.github.com/repos/fjahr/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/fjahr/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/fjahr/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/fjahr/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/fjahr/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/fjahr/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/fjahr/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/fjahr/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/fjahr/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/fjahr/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/fjahr/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/fjahr/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/fjahr/bitcoin/events",
        "forks_url": "https://api.github.com/repos/fjahr/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/fjahr/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/fjahr/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/fjahr/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/fjahr/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/fjahr/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/fjahr/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/fjahr/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/fjahr/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/fjahr/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/fjahr/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/fjahr/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/fjahr/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/fjahr/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/fjahr/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/fjahr/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:fjahr/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/fjahr/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/fjahr/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/fjahr/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/fjahr/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/fjahr/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/fjahr/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/fjahr/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/fjahr/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/fjahr/bitcoin/hooks",
        "svn_url": "https://github.com/fjahr/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 218657,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-24T19:49:55Z",
        "created_at": "2019-07-10T18:11:06Z",
        "updated_at": "2022-02-24T18:41:19Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "1148f3d63094eab788993a9417e5038cfbe5aa77",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T03:51:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 144,
    "deletions": 16,
    "changed_files": 4,
    "commits": 4,
    "review_comments": 54,
    "comments": 11
  },
  "events": [
    {
      "event": "labeled",
      "id": 3387305516,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzODczMDU1MTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3387305516",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T13:59:00Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 3387305519,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzODczMDU1MTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3387305519",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T13:59:00Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 3387305521,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzODczMDU1MjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3387305521",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T13:59:00Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 422602841,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjAyODQx",
      "url": null,
      "actor": null,
      "commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#pullrequestreview-422602841",
      "submitted_at": "2020-06-02T15:36:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
    },
    {
      "event": "commented",
      "id": 637788531,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzc4ODUzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637788531",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-02T20:29:23Z",
      "updated_at": "2020-06-02T20:29:23Z",
      "author_association": "MEMBER",
      "body": "Added a super simple test that reimplements the C++ impl unit test in Python. I am working on more exhaustive tests for the next PR in this series.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-637788531",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3412987046,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQxMjk4NzA0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3412987046",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T19:54:52Z"
    },
    {
      "event": "labeled",
      "id": 3413335011,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM0MTMzMzUwMTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3413335011",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T21:24:29Z",
      "label": {
        "name": "Review club",
        "color": "0052cc"
      }
    },
    {
      "event": "commented",
      "id": 639955477,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTk1NTQ3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639955477",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-06T02:03:40Z",
      "updated_at": "2020-08-28T07:11:42Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19253 (Tests: tidy up address.py and segwit_addr.py by jnewbery)\n* #19145 (Add hash_type MUHASH for gettxoutsetinfo by fjahr)\n* #17977 (Implement BIP 340-342 validation (Schnorr/taproot/tapscript) by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-639955477",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105"
    },
    {
      "event": "reviewed",
      "id": 427158195,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTU4MTk1",
      "url": null,
      "actor": null,
      "commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#pullrequestreview-427158195",
      "submitted_at": "2020-06-09T15:42:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
    },
    {
      "event": "reviewed",
      "id": 428239541,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjM5NTQx",
      "url": null,
      "actor": null,
      "commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "it would be clearer to use the official interfaces defined in `collections.abc` instead of inventing new names.",
      "user": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#pullrequestreview-428239541",
      "submitted_at": "2020-06-10T16:40:28Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3434490621,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQzNDQ5MDYyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3434490621",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T14:40:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3434553120,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQzNDU1MzEyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3434553120",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T14:54:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3434563213,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQzNDU2MzIxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3434563213",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T14:56:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3434581844,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQzNDU4MTg0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3434581844",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T15:01:04Z"
    },
    {
      "event": "commented",
      "id": 642718446,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjcxODQ0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642718446",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T15:02:23Z",
      "updated_at": "2020-06-11T15:09:41Z",
      "author_association": "MEMBER",
      "body": "Rebased and addressed all review comments. This is now also using SHA256 as discussed in #19055 .",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-642718446",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105"
    },
    {
      "event": "labeled",
      "id": 3435281174,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM0MzUyODExNzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3435281174",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T17:49:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3436147936,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQzNjE0NzkzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3436147936",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T22:14:09Z"
    },
    {
      "event": "unlabeled",
      "id": 3436391442,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzQzNjM5MTQ0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3436391442",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T00:04:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 643412969,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzQxMjk2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643412969",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T18:03:16Z",
      "updated_at": "2020-06-12T18:03:16Z",
      "author_association": "MEMBER",
      "body": "The chacha code also deserves its own file (and commit).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-643412969",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105"
    },
    {
      "event": "commented",
      "id": 643415199,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzQxNTE5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643415199",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T18:08:02Z",
      "updated_at": "2020-06-12T18:08:02Z",
      "author_association": "MEMBER",
      "body": "@Sjors I'd agree if it was generically useful ChaCha20 code, but given that's it's a minimal specialized implementation just for 3072-bit outputs with IV 0, I'm less convinced.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-643415199",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105"
    },
    {
      "event": "mentioned",
      "id": 3439449239,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzOTQ0OTIzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3439449239",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T18:08:02Z"
    },
    {
      "event": "subscribed",
      "id": 3439449242,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0Mzk0NDkyNDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3439449242",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T18:08:03Z"
    },
    {
      "event": "commented",
      "id": 643458042,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzQ1ODA0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643458042",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T19:56:55Z",
      "updated_at": "2020-06-12T19:56:55Z",
      "author_association": "MEMBER",
      "body": "We'll need a python chacha implementation when BIP324 lands, and the functionality in `chacha20_doubleround()` could be part of that, but until BIP324 I think it's fine to have it in the same file as the muhash code.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-643458042",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105"
    },
    {
      "event": "reviewed",
      "id": 442976087,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyOTc2MDg3",
      "url": null,
      "actor": null,
      "commit_id": "46c3ef63877b2d53fc0f4fe38d84497011474af6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 88997dd738759ed0e399f0da56bb9937079ffdd4\r\n\r\nYou could add a test framework unit test for the chacha functions.\r\n\r\nI don't mind merging this before the C++ implementation, though it might make sense to wait for #19105.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#pullrequestreview-442976087",
      "submitted_at": "2020-07-06T11:13:11Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3529333669,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzUyOTMzMzY2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3529333669",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-09T11:51:10Z"
    },
    {
      "event": "commented",
      "id": 656082510,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjA4MjUxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656082510",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-09T11:52:31Z",
      "updated_at": "2020-07-09T11:52:31Z",
      "author_association": "MEMBER",
      "body": "Took @Sjors suggestions: moved the TODO comment to the util function and added chacha20 test vectors with nonce 0.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-656082510",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105"
    },
    {
      "event": "mentioned",
      "id": 3529337948,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzUyOTMzNzk0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3529337948",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-09T11:52:31Z"
    },
    {
      "event": "subscribed",
      "id": 3529337951,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1MjkzMzc5NTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3529337951",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-09T11:52:31Z"
    },
    {
      "event": "commented",
      "id": 656132497,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjEzMjQ5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656132497",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-09T13:37:53Z",
      "updated_at": "2020-07-09T13:37:53Z",
      "author_association": "MEMBER",
      "body": "re-ACK 352c702901b369132de109ddf7b6b1addc512b34",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-656132497",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105"
    },
    {
      "event": "reviewed",
      "id": 449580346,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTgwMzQ2",
      "url": null,
      "actor": null,
      "commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks good. Just a few minor comments inline.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#pullrequestreview-449580346",
      "submitted_at": "2020-07-16T07:51:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjMwY2VjZTBlODRhOGI5MTdjYjlhMjE5YzI0NjY1NzQzNjJmMzAw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab30cece0e84a8b917cb9a219c2466574362f300",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ab30cece0e84a8b917cb9a219c2466574362f300",
      "tree": {
        "sha": "262766be502124fd6d5dbfece2788ee4187229d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/262766be502124fd6d5dbfece2788ee4187229d8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 262766be502124fd6d5dbfece2788ee4187229d8\nparent b33136b6ba9887f7db651c4c5264ca7f2f601df7\nauthor Fabian Jahr <fjahr@protonmail.com> 1591880348 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1594915843 +0200\n\ntest: Move modinv to util and add unit test\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl8QfAYVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNE2oP/315pR0+PmDY6UkyTx75Xra0OHw2\nYu5O5Hmd0SmsfkfMIbhl3+fxOI3ZjWYaPGIC+08tuX7V9wqBkEr+3B8w+BURnak5\nnQDh2Xr086iITQK8RX0NAFLfwNy0HmgTOO29KttdMpYFn/cbDJNuErg6Y1Th+Hmw\naEmGvsLw/X4TxJAg9gheRbQfOiON58MmRcjn22KGsZhEYv1URq/nkkpXv0isaBQu\nXeXmsByzmI+R3ZmkMQrTHGhEjCOvj999Zp7oB+nNJi3M4qbhO1Zh5mqCmqL/jJ5+\n/VJJthjESC1qv8svEcY/X8LjxDG3Xh1LeVqKD62az7jo9a2UrXEn7RF9BYaDEORO\nJSwmbeQVJyWM4SreKIo8eu52n3G2BNBkout+0gGCs3JjEt+Tdwpg80Ih/rO/VK4i\noR+BGlBKpXUSBeRIMuC46IaAhRfLnzY79WjXBFs9qZ2CWAup3wEE+l9XGE6E/OTH\nC6azeQpwBbyrTp/9qBw0MNdyEe0pH7g+NT9Jp+Z5NvxzymmQrWuN1NnERq+IXMLh\nkquZxWpDQgbTto6XqEzxvtNjvvMk3T3Ffk/phwUCj5j9bmPzfSAuY+DkC+sHczB2\nLdXi7X/GsMk9f40zJgx486Et5j+BzjJ9sKWk1MjbQKwCyEwnHPQjg6cMSQLm9g4b\n8Hm3opp/q+eSbbuq\n=ifOK\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b33136b6ba9887f7db651c4c5264ca7f2f601df7",
          "sha": "b33136b6ba9887f7db651c4c5264ca7f2f601df7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b33136b6ba9887f7db651c4c5264ca7f2f601df7"
        }
      ],
      "message": "test: Move modinv to util and add unit test",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-07-16T16:10:43Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-06-11T12:59:08Z"
      },
      "sha": "ab30cece0e84a8b917cb9a219c2466574362f300"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODU1NDNjYjczNjFkNmJhMjdjMGVlY2E3NTZlZWM5ZmQ1Mzk1YjM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b85543cb7361d6ba27c0eeca756eec9fd5395b36",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b85543cb7361d6ba27c0eeca756eec9fd5395b36",
      "tree": {
        "sha": "07bbcaaa607b52906d369d09cdbc031b710b502f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07bbcaaa607b52906d369d09cdbc031b710b502f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 07bbcaaa607b52906d369d09cdbc031b710b502f\nparent ab30cece0e84a8b917cb9a219c2466574362f300\nauthor Pieter Wuille <pieter@wuille.net> 1590526980 -0700\ncommitter Fabian Jahr <fjahr@protonmail.com> 1594915848 +0200\n\ntest: Add Python MuHash3072 implementation to test framework\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl8QfAgVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNgjoP/ikmybNMTVSIHl6ZGdzCGdhOLoAE\nBtlYjq4glh0ZuxX3uASkCUuFh8dR8RRJszM2c/3uIvZpgqbrCD7E4pi/4mvdc42c\nQLwfleyKS1Mk+005OKkcswid0ZAz5DKv94AShxgiKpNasDRQGHawbRTuasO5P4+D\nlseoTZEyRwmLQB2C1Ty8yQwuQ8+ZRKVDk6emr/CCk46U9qKdysaTZ2wgqU3FfF5k\nyL96w6c+ulTh0v/LM4ktgNkXrwX9BZg7Ps+n99Bw4QYkf3g2XVgq3IxB3FXM/e5d\nQfL+WXtuhaDX35EQ1HrhNG2kQxzOUEzDQ9u0n5UZZJ3QgXmy/XlfbmWzWRVRsVUi\n83MQA/3qQZENLsbM80B+oIO7vl+gYiDio8fcOhgCrAuAfW8wlPcJBGtDkN1mKKVt\n6qHrO00vfxIXlDyYY1yoMg5aGKiE/Ur1d5QCiacIP0IfNywaBNxnvNOaLscYKERZ\ncTy4gnIJ23SdAAkHkf/xtSq50SMeXZNZOy4DzClyVJJvJSJBu2hvuNes0+C1+d70\ncBhS4qR8D5efV7JT3/+OXISZlVbovL9tnnZtd15DEspThEI9rXEonW8/zNfqiQiT\nbIvfXBKVQpaTLAt2R7NFmIm9sPpwix1SvZ4nIAtTR5Z3Ys1GoL9XKXoF4SdKknhn\n6Y+pJY1Dl1muvUdT\n=l4HX\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab30cece0e84a8b917cb9a219c2466574362f300",
          "sha": "ab30cece0e84a8b917cb9a219c2466574362f300",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ab30cece0e84a8b917cb9a219c2466574362f300"
        }
      ],
      "message": "test: Add Python MuHash3072 implementation to test framework",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-07-16T16:10:48Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-05-26T21:03:00Z"
      },
      "sha": "b85543cb7361d6ba27c0eeca756eec9fd5395b36"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTJiNDAwZmVhODkwZTc2OWI3NWRhNWI1NWZhMTkwMmZkOWY5ODUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e2b400fea890e769b75da5b55fa1902fd9f9851",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0e2b400fea890e769b75da5b55fa1902fd9f9851",
      "tree": {
        "sha": "ee06bec6183254a1bb0452d4abe15105b219bae0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee06bec6183254a1bb0452d4abe15105b219bae0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ee06bec6183254a1bb0452d4abe15105b219bae0\nparent b85543cb7361d6ba27c0eeca756eec9fd5395b36\nauthor Fabian Jahr <fjahr@protonmail.com> 1590949877 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1594915848 +0200\n\ntest: Add basic Python/C++ Muhash implementation parity unit test\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl8QfAgVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNsOAQAJtqDJXxHL0mvjGZLfDpJ62EzMij\nwwZ3F28RgysdYI2pD9Rux2DabFvwNDvSJfHw3hLC7/LcXxpu8T/hJ2ExXZyt349C\np6Viys/fRSbApLXRZFTcHPXplRzeS7in6OjC18YKneUkR9U6kUTHgxrbEixdDosp\nvKRhyDud7Qxup7fgfd7ZslRoAwmBXIak0UpgPIeyDkaT3cjRIFPeJabHXDFxzDEc\npkqI/rcvWvUtr6AjzsBHWB9GopQY8fXWoD+w69bEvP6F0XTLclrmtujHpk014XEH\n1TMenDlY+i91yM654G6/YNHGiiAyWlLm5xugZ2XJ81Z9te1UiSlK6uisJ9rOx6h4\nhlpECn4X2vrNf9AZzkYR727XTvDnOvJW8DRI4bPGu73jo7GFKAZuVbRPGPDTuT7H\niLN2mrZv482h5Ch8XB8/C0OES+kbRT7ey+paFUocp6jtrr8YWT4Ri8q5hYh/3EnR\nbzdNKpb074YI+YJSR/m6lcX1Un9Hp+ZuuM6PJUu6CDaIdazld0xcS+lpRjXy/cL2\nKUkoRnRl4/uCm3XZMQ7Rodi2Egzpev7uRDfSq5fz8rnqj//NXSt9ie+hQ6bpj+Wy\nxAs53rJDacTOd7SIcLNNLVLUURO36oQevXINbQ4SGyBlic+4MymD36uZEHpyMD2a\nAVFKFkwWMr28gAnt\n=V52M\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b85543cb7361d6ba27c0eeca756eec9fd5395b36",
          "sha": "b85543cb7361d6ba27c0eeca756eec9fd5395b36",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b85543cb7361d6ba27c0eeca756eec9fd5395b36"
        }
      ],
      "message": "test: Add basic Python/C++ Muhash implementation parity unit test",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-07-16T16:10:48Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-31T18:31:17Z"
      },
      "sha": "0e2b400fea890e769b75da5b55fa1902fd9f9851"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmVjOTgwMWE0ZWRiOTY2M2VmOWNlOWFkMjk4MjMzNzY2YjkwM2U4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "tree": {
        "sha": "74595e0d0f9420bb966c667412b0c9d655fbc2bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74595e0d0f9420bb966c667412b0c9d655fbc2bc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 74595e0d0f9420bb966c667412b0c9d655fbc2bc\nparent 0e2b400fea890e769b75da5b55fa1902fd9f9851\nauthor Fabian Jahr <fjahr@protonmail.com> 1594295015 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1594915848 +0200\n\ntest: Add chacha20 test vectors in muhash\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl8QfAgVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNelMP/3dsSSCVIT2hlLYRZsnLHEBz5nMj\n8nwcdYMSfNNnfvKgUbM+ACfHsGRCvzAzIQY4bRVKJ9wfjYhTNFkSX4SRd4/mFDLI\n9tkdIs1xpjMyGP2rZ8HKJhO01EHofcbqF8QYt/IUV/a+Jd7Rwa9TbyJjHMTekXBS\nG6mWhEyKn6nxCz3SQZssYdiGtlgAIKHtgVg9GleKddxW1usTf1pNTD04tuXq12SE\ns6eWRMJi12fkaXE8hYEtgds4aGkZ0r74diaJkzclUmbmLTBQaKGiDtWXmLMrfN3D\nwaEm0Steya886w2ly05N/EFw3MS1B0oX7VDvLE3S8AJO6pbnxFbcGp74iOtMGpQ0\n9msUrYt5Pp/wpswvqIXCZ0NzbjDcpLK5Rt1gBClhmOO6lmfr9pcyMpHQgdPdMJyo\ntKUiyoUT++wJTg76ReDQ3pQJ8Sk8oAyRLgr7mYbSGPrvII0Xi5DKz/TWh7IVAcUv\nYubSFtrYBNrpoX3UFjVIif772nlIH5KWPMV0/MjIV9NlJ5wi6dmLX6hX4zZd7H4+\nqzLoB9gLTrG7LofpHfVB4v/hH8m8dkQ4kTLdOnogKt6ntkHVHy+W4/9xUu1wjZ1W\newE9lWxJm2USG7y2O4Jby2CN65N9ejtsPCupk064HIpr505k5yb9yUz9qaKufq+p\noyE3+bgMAgjvUk4B\n=Jw/L\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e2b400fea890e769b75da5b55fa1902fd9f9851",
          "sha": "0e2b400fea890e769b75da5b55fa1902fd9f9851",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0e2b400fea890e769b75da5b55fa1902fd9f9851"
        }
      ],
      "message": "test: Add chacha20 test vectors in muhash",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-07-16T16:10:48Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-07-09T11:43:35Z"
      },
      "sha": "36ec9801a4edb9663ef9ce9ad298233766b903e8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3554075530,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU1NDA3NTUzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3554075530",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-16T16:23:41Z"
    },
    {
      "event": "commented",
      "id": 659522858,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTUyMjg1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659522858",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-16T16:24:55Z",
      "updated_at": "2020-07-16T16:24:55Z",
      "author_association": "MEMBER",
      "body": "Addressed @jnewbery 's review comments.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-659522858",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105"
    },
    {
      "event": "mentioned",
      "id": 3554080603,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU1NDA4MDYwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3554080603",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-16T16:24:55Z"
    },
    {
      "event": "subscribed",
      "id": 3554080607,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1NTQwODA2MDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3554080607",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-16T16:24:55Z"
    },
    {
      "event": "commented",
      "id": 659527434,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTUyNzQzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659527434",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-16T16:32:53Z",
      "updated_at": "2020-07-16T16:32:53Z",
      "author_association": "MEMBER",
      "body": "utACK 36ec9801a",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-659527434",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105"
    },
    {
      "event": "commented",
      "id": 684910000,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDkxMDAwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684910000",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T14:48:26Z",
      "updated_at": "2020-09-01T14:48:26Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-684910000",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105"
    },
    {
      "event": "merged",
      "id": 3715583541,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzcxNTU4MzU0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3715583541",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "48c1083632687a42ac603d4f241e70616a1d3815",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48c1083632687a42ac603d4f241e70616a1d3815",
      "created_at": "2020-09-01T15:37:18Z"
    },
    {
      "event": "closed",
      "id": 3715583564,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzcxNTU4MzU2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3715583564",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-01T15:37:19Z"
    },
    {
      "event": "referenced",
      "id": 3725599261,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM3MjU1OTkyNjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3725599261",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a97b9a02817ea1b9973a07e9ee57df540162916b",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/a97b9a02817ea1b9973a07e9ee57df540162916b",
      "created_at": "2020-09-03T16:31:22Z"
    },
    {
      "event": "reviewed",
      "id": 594746816,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NzQ2ODE2",
      "url": null,
      "actor": null,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "vindard",
        "id": 17693119,
        "node_id": "MDQ6VXNlcjE3NjkzMTE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/17693119?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vindard",
        "html_url": "https://github.com/vindard",
        "followers_url": "https://api.github.com/users/vindard/followers",
        "following_url": "https://api.github.com/users/vindard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vindard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vindard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vindard/subscriptions",
        "organizations_url": "https://api.github.com/users/vindard/orgs",
        "repos_url": "https://api.github.com/users/vindard/repos",
        "events_url": "https://api.github.com/users/vindard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vindard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#pullrequestreview-594746816",
      "submitted_at": "2021-02-20T12:13:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
    },
    {
      "event": "unlabeled",
      "id": 4361203472,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDM2MTIwMzQ3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4361203472",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-22T18:16:15Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "referenced",
      "id": 5334163300,
      "node_id": "REFE_lADOABII584lYqHSzwAAAAE98N9k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5334163300",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8986cfad54b86b17ca7b4b0bc49581c260933e38",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/8986cfad54b86b17ca7b4b0bc49581c260933e38",
      "created_at": "2021-09-21T09:40:27Z"
    },
    {
      "event": "referenced",
      "id": 6144902704,
      "node_id": "REFE_lADOABII584lYqHSzwAAAAFuQ8Yw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6144902704",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3c455b14e5e8c026068f7e980ffa4211000e71ec",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/3c455b14e5e8c026068f7e980ffa4211000e71ec",
      "created_at": "2022-02-26T10:59:45Z"
    },
    {
      "event": "referenced",
      "id": 6144905188,
      "node_id": "REFE_lADOABII584lYqHSzwAAAAFuQ8_k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6144905188",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "65393bbabad0cec3f93eb2d0ee313aee16659737",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/65393bbabad0cec3f93eb2d0ee313aee16659737",
      "created_at": "2022-02-26T11:00:20Z"
    },
    {
      "event": "referenced",
      "id": 6358353779,
      "node_id": "REFE_lADOABII584lYqHSzwAAAAF6_Mdz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6358353779",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "83247663179c2a90276d7d0f3f5e9e562db2c26e",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/83247663179c2a90276d7d0f3f5e9e562db2c26e",
      "created_at": "2022-04-03T14:39:07Z"
    },
    {
      "event": "referenced",
      "id": 6464512012,
      "node_id": "REFE_lADOABII584lYqHSzwAAAAGBUKAM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6464512012",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "757a8cabe8a004c164d15aa79a87e8b14801b4c9",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/757a8cabe8a004c164d15aa79a87e8b14801b4c9",
      "created_at": "2022-04-20T16:14:49Z"
    },
    {
      "event": "referenced",
      "id": 6485724863,
      "node_id": "REFE_lADOABII584lYqHSzwAAAAGClE6_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6485724863",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f3521c334d30b7a440cc2a30dd11e81cff9b224c",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/f3521c334d30b7a440cc2a30dd11e81cff9b224c",
      "created_at": "2022-04-24T11:23:15Z"
    },
    {
      "event": "referenced",
      "id": 6507591811,
      "node_id": "REFE_lADOABII584lYqHSzwAAAAGD4fiD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6507591811",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5afca7f73c4429c6c302f48778f66d254713e14a",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/5afca7f73c4429c6c302f48778f66d254713e14a",
      "created_at": "2022-04-27T14:35:51Z"
    },
    {
      "event": "locked",
      "id": 7199022479,
      "node_id": "LOE_lADOABII584lYqHSzwAAAAGtGF2P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199022479",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:05:08Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433820249",
      "pull_request_review_id": 422602841,
      "id": 433820249,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyMDI0OQ==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 20,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To simplify the code, one could just use [Fermat's little theorem](https://en.wikipedia.org/wiki/Fermat%27s_little_theorem) here to calculate the modular inverse. The drawback is that it's much slower than the extended Euclidean algorithm, calculating the modinv of a random 3072-bit number takes approx. 100-150ms on my machine, which is at least 1 order of magnitude slower. Not sure if that's an issue and in the case of tests whether performance or readability is more important :-)\r\n\r\n```suggestion\r\ndef modinv(a, n):\r\n    \"\"\"Compute the modular inverse of a prime modulo n using Fermat's little theorem.\"\"\"\r\n    return pow(a, n-2, n)\r\n```",
      "created_at": "2020-06-02T11:57:14Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r433820249",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433820249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": 8,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434155051",
      "pull_request_review_id": 423031205,
      "id": 434155051,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1NTA1MQ==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 20,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
      "in_reply_to_id": 433820249,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I see your point, however, given how often these tests run on people's machines and in the CI environment, performance does matter quite a bit. But I think it's a great question to discuss during the PR review club next week :)",
      "created_at": "2020-06-02T20:25:43Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434155051",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434155051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": 8,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434210798",
      "pull_request_review_id": 423101289,
      "id": 434210798,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMDc5OA==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 20,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
      "in_reply_to_id": 433820249,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, if comprehension is a concern, I suspect that people who are familiar with modular inverses will generally understand both the euclidean and the fermat approach; and to people who aren't familiar with it both will look like black magic.",
      "created_at": "2020-06-02T22:31:20Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434210798",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434210798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": 8,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434546037",
      "pull_request_review_id": 423524324,
      "id": 434546037,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0NjAzNw==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 20,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
      "in_reply_to_id": 433820249,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@fjahr @sipa: Fair enough! By the way, Python 3.8 introduced support for negative exponents in the modulo (three argument) `pow()` (see https://bugs.python.org/issue36027, https://github.com/python/cpython/pull/13266), internally calculating the modular inverse via the extended Euclidean algorithm. I.e. somewhere in the future it could be just a very simple:\r\n`return pow(a, -1, n)`",
      "created_at": "2020-06-03T12:57:36Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434546037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434546037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": 8,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437312361",
      "pull_request_review_id": 427012518,
      "id": 437312361,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMxMjM2MQ==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 20,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
      "in_reply_to_id": 433820249,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's worth annotating in a TODO: `// Python 3.8: return pow(a, -1, n)` (tested locally with Python 3.8.2)\r\n \r\nI like having the simpler approach here. It's yet another sanity check that our implementation is correct, given the lack of test vectors. But given the performance impact, if it really matters compared to the rest of the test, better leave that as a TODO.",
      "created_at": "2020-06-09T10:39:29Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437312361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437312361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": 8,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437423868",
      "pull_request_review_id": 427158195,
      "id": 437423868,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyMzg2OA==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 8,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is duplication of the code in `key.py`. Can you move it into `util.py` or a new `crypto_util.py` instead of repeating it?",
      "created_at": "2020-06-09T13:38:51Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437423868",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437423868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437434307",
      "pull_request_review_id": 427158195,
      "id": 437434307,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNDMwNw==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):",
      "path": "test/functional/test_framework/muhash.py",
      "position": 11,
      "original_position": 22,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Calling this function with `bits` < 0 or `bits` > 32  throws. Perhaps call `bits %= 32` to reduce it to a valid value?",
      "created_at": "2020-06-09T13:49:14Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437434307",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437434307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437439515",
      "pull_request_review_id": 427158195,
      "id": 437439515,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTUxNQ==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 27,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suggest you link to the specification for chacha here: https://cr.yp.to/chacha/chacha-20080128.pdf or here: https://tools.ietf.org/html/rfc7539",
      "created_at": "2020-06-09T13:53:57Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437439515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437439515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437444290",
      "pull_request_review_id": 427158195,
      "id": 437444290,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NDI5MA==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 28,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: remove double spaces",
      "created_at": "2020-06-09T13:58:54Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437444290",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437444290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437445217",
      "pull_request_review_id": 427158195,
      "id": 437445217,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTIxNw==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 42,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: this would be slightly easier on the eye with spaces around the operators (see https://www.python.org/dev/peps/pep-0008/#other-recommendations)",
      "created_at": "2020-06-09T14:00:02Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437445217",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437445217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437480100",
      "pull_request_review_id": 427158195,
      "id": 437480100,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MDEwMA==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 28,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Explicitly naming the quarter rounds would make this clearer:\r\n\r\n```suggestion\r\n    QUARTER_ROUNDS = [(0, 4, 8, 12),\r\n                      (1, 5, 9, 13),\r\n                      (2, 6, 10, 14),\r\n                      (3, 7, 11, 15),\r\n                      (0, 5, 10, 15),\r\n                      (1, 6, 11, 12),\r\n                      (2, 7, 8, 13),\r\n                      (3, 4, 9, 14)]\r\n    for a, b, c, d in QUARTER_ROUNDS:\r\n\r\n```",
      "created_at": "2020-06-09T14:45:08Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437480100",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437480100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437503786",
      "pull_request_review_id": 427158195,
      "id": 437503786,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwMzc4Ng==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 42,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Again, being explicitly about where these magic numbers come from would be nice:\r\n\r\n```suggestion\r\n    # See RFC 7539 section 2.3 for chacha20 parameters\r\n    CONSTANTS = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574]\r\n    key_bytes = []\r\n    for i in range(8):\r\n        key_bytes[i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\r\n    INITIALIZATION_VECTOR = [0] * 4\r\n    init = CONSTANTS + key_bytes + INITIALIZATION_VECTOR\r\n```",
      "created_at": "2020-06-09T15:13:03Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437503786",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437503786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": 40,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509272",
      "pull_request_review_id": 427158195,
      "id": 437509272,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwOTI3Mg==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 44,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is `pos`? Would `counter` be a better name, since this value is used as the block counter?",
      "created_at": "2020-06-09T15:17:10Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437509272",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509899",
      "pull_request_review_id": 427158195,
      "id": 437509899,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwOTg5OQ==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 47,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/rnd/round/. `rnd` is often used to mean random, which is confusing here.",
      "created_at": "2020-06-09T15:17:39Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437509899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437513449",
      "pull_request_review_id": 427158195,
      "id": 437513449,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxMzQ0OQ==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 46,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this would be clearer as:\r\n\r\n```suggestion\r\n        s = init.copy()\r\n```",
      "created_at": "2020-06-09T15:20:17Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437513449",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437513449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437529184",
      "pull_request_review_id": 427158195,
      "id": 437529184,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyOTE4NA==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 54,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this docstring should indicate that it's hashing using Chacha20\r\n\r\n```suggestion\r\n    \"\"\"Hash a 32-byte array data to a 3072-bit number using 6 Chacha20 operations.\"\"\"\r\n```",
      "created_at": "2020-06-09T15:39:07Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437529184",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437529184"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437530296",
      "pull_request_review_id": 427158195,
      "id": 437530296,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMDI5Ng==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:\n+    \"\"\"Class representing the MuHash3072 computation of a set.\"\"\"",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 59,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Reference where the algorithm comes from:\r\n\r\n- https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf for the generic algorithm\r\n- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html for the specific parameters (chacha20 and 3072-bit digest)",
      "created_at": "2020-06-09T15:40:45Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437530296",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437530296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437531625",
      "pull_request_review_id": 427158195,
      "id": 437531625,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMTYyNQ==",
      "diff_hunk": "@@ -241,6 +245,15 @@ def _test_gettxoutsetinfo(self):\n         del res['disk_size'], res3['disk_size']\n         assert_equal(res, res3)\n \n+        self.log.info(\"Test that MuHash implementation in Python returns the same result as C++\")",
      "path": "test/functional/rpc_blockchain.py",
      "position": null,
      "original_position": 15,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This should be a unit test in muhash.py. See #18576 for details on the python unit tests.",
      "created_at": "2020-06-09T15:42:30Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437531625",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437531625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 248,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438129563",
      "pull_request_review_id": 428062608,
      "id": 438129563,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyOTU2Mw==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 27,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437439515,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Possibly only the first link.  There are slight differences between those two and https://tools.ietf.org/html/rfc8439.  See #19225 ",
      "created_at": "2020-06-10T13:39:55Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438129563",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438129563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438138648",
      "pull_request_review_id": 428074908,
      "id": 438138648,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzODY0OA==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 46,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437513449,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also `.copy()` is around twice as fast.",
      "created_at": "2020-06-10T13:52:06Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438138648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438138648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438262885",
      "pull_request_review_id": 428239541,
      "id": 438262885,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI2Mjg4NQ==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:",
      "path": "test/functional/test_framework/muhash.py",
      "position": 66,
      "original_position": 58,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this should implement [MutableSet](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes)",
      "created_at": "2020-06-10T16:38:53Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438262885",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438262885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438263145",
      "pull_request_review_id": 428239541,
      "id": 438263145,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI2MzE0NQ==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:\n+    \"\"\"Class representing the MuHash3072 computation of a set.\"\"\"\n+\n+    MODULUS = 2**3072 - 1103717\n+\n+    def __init__(self):\n+        \"\"\"Initialize for an empty set.\"\"\"\n+        self.numerator = 1\n+        self.denominator = 1\n+\n+    def insert(self, data):",
      "path": "test/functional/test_framework/muhash.py",
      "position": 79,
      "original_position": 68,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the method is called `add` in collections.abc.",
      "created_at": "2020-06-10T16:39:21Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438263145",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438263145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 79,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438263309",
      "pull_request_review_id": 428239541,
      "id": 438263309,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI2MzMwOQ==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:\n+    \"\"\"Class representing the MuHash3072 computation of a set.\"\"\"\n+\n+    MODULUS = 2**3072 - 1103717\n+\n+    def __init__(self):\n+        \"\"\"Initialize for an empty set.\"\"\"\n+        self.numerator = 1\n+        self.denominator = 1\n+\n+    def insert(self, data):\n+        \"\"\"Insert a byte array data in the set.\"\"\"\n+        self.numerator = (self.numerator * data_to_num3072(data)) % self.MODULUS\n+\n+    def remove(self, data):",
      "path": "test/functional/test_framework/muhash.py",
      "position": 83,
      "original_position": 72,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the method is called `discard` in collections.abc",
      "created_at": "2020-06-10T16:39:39Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438263309",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438263309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 83,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438303858",
      "pull_request_review_id": 428292251,
      "id": 438303858,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwMzg1OA==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 20,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
      "in_reply_to_id": 433820249,
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be nice to have a unittest to confirm that `modinv(a, n)` produces the same results as using `pow(a, n-2, n)`",
      "created_at": "2020-06-10T17:48:00Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438303858",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438303858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": 8,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837523",
      "pull_request_review_id": 428981162,
      "id": 438837523,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzNzUyMw==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 20,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
      "in_reply_to_id": 433820249,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@narula I added a unit test for this.",
      "created_at": "2020-06-11T14:41:34Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": 8,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837672",
      "pull_request_review_id": 428981350,
      "id": 438837672,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzNzY3Mg==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 8,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437423868,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-11T14:41:46Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837672",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837786",
      "pull_request_review_id": 428981517,
      "id": 438837786,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzNzc4Ng==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):",
      "path": "test/functional/test_framework/muhash.py",
      "position": 11,
      "original_position": 22,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437434307,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-11T14:41:57Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837786",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837885",
      "pull_request_review_id": 428981656,
      "id": 438837885,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzNzg4NQ==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 27,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437439515,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-11T14:42:05Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837885",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838043",
      "pull_request_review_id": 428981877,
      "id": 438838043,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzODA0Mw==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 28,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437444290,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-11T14:42:20Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838043",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838689",
      "pull_request_review_id": 428982720,
      "id": 438838689,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzODY4OQ==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 42,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437445217,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done but also added extra brackets because otherwise it seemed weird to me",
      "created_at": "2020-06-11T14:43:14Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838689",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838791",
      "pull_request_review_id": 428982863,
      "id": 438838791,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzODc5MQ==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 28,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437480100,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-11T14:43:22Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838791",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838905",
      "pull_request_review_id": 428982987,
      "id": 438838905,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzODkwNQ==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 42,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437503786,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-11T14:43:31Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838905",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": 40,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438840916",
      "pull_request_review_id": 428985654,
      "id": 438840916,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MDkxNg==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 47,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437509899,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's not used anyway so I just didn't assign the value to a variable. Since the loop is just one line I think it's still understandable.",
      "created_at": "2020-06-11T14:46:18Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438840916",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438840916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841019",
      "pull_request_review_id": 428985779,
      "id": 438841019,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MTAxOQ==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 46,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437513449,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-11T14:46:26Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841117",
      "pull_request_review_id": 428985910,
      "id": 438841117,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MTExNw==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 54,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437529184,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-11T14:46:34Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841117",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841188",
      "pull_request_review_id": 428986024,
      "id": 438841188,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MTE4OA==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:\n+    \"\"\"Class representing the MuHash3072 computation of a set.\"\"\"",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 59,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437530296,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-11T14:46:40Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841188",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841188"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841270",
      "pull_request_review_id": 428986119,
      "id": 438841270,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MTI3MA==",
      "diff_hunk": "@@ -241,6 +245,15 @@ def _test_gettxoutsetinfo(self):\n         del res['disk_size'], res3['disk_size']\n         assert_equal(res, res3)\n \n+        self.log.info(\"Test that MuHash implementation in Python returns the same result as C++\")",
      "path": "test/functional/rpc_blockchain.py",
      "position": null,
      "original_position": 15,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437531625,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-11T14:46:48Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 248,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438846364",
      "pull_request_review_id": 428993027,
      "id": 438846364,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0NjM2NA==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 44,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 437509272,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah, I think that's better. done",
      "created_at": "2020-06-11T14:54:07Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438846364",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438846364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438847029",
      "pull_request_review_id": 428993922,
      "id": 438847029,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0NzAyOQ==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:",
      "path": "test/functional/test_framework/muhash.py",
      "position": 66,
      "original_position": 58,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 438262885,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for this suggestion, but I am not convinced that this is a good idea. I think it would be confusing because this is not really a Set but a hash representing a Set. So there is no way for example to know about the inclusion of a specific value or the number of values already added. There is also no enforcement here that this is actually a Set. You could add the same value twice and it would work. We are just not sure if this breaks security guarantees and the way MuHash is intended to be used in Bitcoin Core, for now, this should not happen because the UTXO set is a Set. So doing this would send the wrong message I think. And I would also like to keep this class as plain as possible.",
      "created_at": "2020-06-11T14:54:58Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438847029",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438847029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450144820",
      "pull_request_review_id": 442976087,
      "id": 450144820,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NDgyMA==",
      "diff_hunk": "@@ -629,3 +630,33 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n\n+\n+    See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.",
      "path": "test/functional/test_framework/util.py",
      "position": null,
      "original_position": 16,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "46c3ef63877b2d53fc0f4fe38d84497011474af6",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You could add a note here on why we don't use `pow(a, n-2, n)`",
      "created_at": "2020-07-06T10:59:20Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r450144820",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450144820"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 637,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450146053",
      "pull_request_review_id": 442976087,
      "id": 450146053,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NjA1Mw==",
      "diff_hunk": "@@ -0,0 +1,105 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+from .util import (\n+    assert_equal,\n+    modinv,\n+)\n+\n+import hashlib\n+import unittest\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    bits %= 32  # Make sure the term below does not throw an exception\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\n+\n+    See https://cr.yp.to/chacha/chacha-20080128.pdf and https://tools.ietf.org/html/rfc8439\n+    \"\"\"\n+    QUARTER_ROUNDS = [(0, 4, 8, 12),\n+                      (1, 5, 9, 13),\n+                      (2, 6, 10, 14),\n+                      (3, 7, 11, 15),\n+                      (0, 5, 10, 15),\n+                      (1, 6, 11, 12),\n+                      (2, 7, 8, 13),\n+                      (3, 4, 9, 14)]\n+\n+    for a, b, c, d in QUARTER_ROUNDS:\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    # See RFC 8439 section 2.3 for chacha20 parameters\n+    CONSTANTS = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574]\n+\n+    key_bytes = [0]*8\n+    for i in range(8):\n+        key_bytes[i] = int.from_bytes(key32[(4 * i):(4 * (i+1))], 'little')\n+\n+    INITIALIZATION_VECTOR = [0] * 4\n+    init = CONSTANTS + key_bytes + INITIALIZATION_VECTOR\n+    out = bytearray()\n+    for counter in range(6):\n+        init[12] = counter\n+        s = init.copy()\n+        for _ in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Hash a 32-byte array data to a 3072-bit number using 6 Chacha20 operations.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:\n+    \"\"\"Class representing the MuHash3072 computation of a set.\n+\n+    See https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html\n+    \"\"\"\n+\n+    MODULUS = 2**3072 - 1103717\n+\n+    def __init__(self):\n+        \"\"\"Initialize for an empty set.\"\"\"\n+        self.numerator = 1\n+        self.denominator = 1\n+\n+    def insert(self, data):\n+        \"\"\"Insert a byte array data in the set.\"\"\"\n+        self.numerator = (self.numerator * data_to_num3072(data)) % self.MODULUS\n+\n+    def remove(self, data):\n+        \"\"\"Remove a byte array from the set.\"\"\"\n+        self.denominator = (self.denominator * data_to_num3072(data)) % self.MODULUS\n+\n+    def digest(self):\n+        \"\"\"Extract the final hash. Does not modify this object.\"\"\"\n+        # TODO: With Python 3.8 modinv can be replaced with pow(a, -1, n)",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 92,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "88997dd738759ed0e399f0da56bb9937079ffdd4",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: since there's another place that uses `modinv`, the helper function might be a better place to put this TODO. The helper function is useful anyway, because `modinv` is more readable than `pow(a, -1, n)`.",
      "created_at": "2020-07-06T11:01:59Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r450146053",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450146053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455568177",
      "pull_request_review_id": 449580346,
      "id": 455568177,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODE3Nw==",
      "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
      "path": "test/functional/test_framework/util.py",
      "position": null,
      "original_position": 18,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"... uses Fermat's little theorem which is significantly slower\" doesn't really make sense. Fermat's little theorem is that a^p = a (mod p). It's not an algorithm for calculating powers.\r\n\r\nI'd suggest just removing this TODO entirely.",
      "created_at": "2020-07-16T07:31:18Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455568177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455568177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455571889",
      "pull_request_review_id": 449580346,
      "id": 455571889,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3MTg4OQ==",
      "diff_hunk": "@@ -0,0 +1,113 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+from .util import (\n+    assert_equal,\n+    modinv,\n+)\n+\n+import hashlib",
      "path": "test/functional/test_framework/muhash.py",
      "position": 6,
      "original_position": 11,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Normally, standard library modules are imported before local project modules: https://www.python.org/dev/peps/pep-0008/#imports",
      "created_at": "2020-07-16T07:38:20Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455571889",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455571889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455581033",
      "pull_request_review_id": 449580346,
      "id": 455581033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU4MTAzMw==",
      "diff_hunk": "@@ -0,0 +1,113 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+from .util import (\n+    assert_equal,\n+    modinv,\n+)\n+\n+import hashlib\n+import unittest\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    bits %= 32  # Make sure the term below does not throw an exception\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\n+\n+    See https://cr.yp.to/chacha/chacha-20080128.pdf and https://tools.ietf.org/html/rfc8439\n+    \"\"\"\n+    QUARTER_ROUNDS = [(0, 4, 8, 12),\n+                      (1, 5, 9, 13),\n+                      (2, 6, 10, 14),\n+                      (3, 7, 11, 15),\n+                      (0, 5, 10, 15),\n+                      (1, 6, 11, 12),\n+                      (2, 7, 8, 13),\n+                      (3, 4, 9, 14)]\n+\n+    for a, b, c, d in QUARTER_ROUNDS:\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    # See RFC 8439 section 2.3 for chacha20 parameters\n+    CONSTANTS = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574]\n+\n+    key_bytes = [0]*8\n+    for i in range(8):\n+        key_bytes[i] = int.from_bytes(key32[(4 * i):(4 * (i+1))], 'little')\n+\n+    INITIALIZATION_VECTOR = [0] * 4\n+    init = CONSTANTS + key_bytes + INITIALIZATION_VECTOR\n+    out = bytearray()\n+    for counter in range(6):\n+        init[12] = counter\n+        s = init.copy()\n+        for _ in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Hash a 32-byte array data to a 3072-bit number using 6 Chacha20 operations.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:\n+    \"\"\"Class representing the MuHash3072 computation of a set.\n+\n+    See https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html\n+    \"\"\"\n+\n+    MODULUS = 2**3072 - 1103717\n+\n+    def __init__(self):\n+        \"\"\"Initialize for an empty set.\"\"\"\n+        self.numerator = 1\n+        self.denominator = 1\n+\n+    def insert(self, data):\n+        \"\"\"Insert a byte array data in the set.\"\"\"\n+        self.numerator = (self.numerator * data_to_num3072(data)) % self.MODULUS\n+\n+    def remove(self, data):\n+        \"\"\"Remove a byte array from the set.\"\"\"\n+        self.denominator = (self.denominator * data_to_num3072(data)) % self.MODULUS\n+\n+    def digest(self):\n+        \"\"\"Extract the final hash. Does not modify this object.\"\"\"\n+        val = (self.numerator * modinv(self.denominator, self.MODULUS)) % self.MODULUS\n+        bytes384 = val.to_bytes(384, 'little')\n+        return hashlib.sha256(bytes384).digest()\n+\n+class TestFrameworkMuhash(unittest.TestCase):\n+    def test_muhash(self):\n+        muhash = MuHash3072()\n+        muhash.insert([0]*32)\n+        muhash.insert([1] + [0]*31)\n+        muhash.remove([2] + [0]*31)\n+        finalized = muhash.digest()\n+        # This mirrors the result in the C++ MuHash3072 unit test\n+        assert_equal(finalized[::-1].hex(), \"a44e16d5e34d259b349af21c06e65d653915d2e208e4e03f389af750dc0bfdc3\")",
      "path": "test/functional/test_framework/muhash.py",
      "position": null,
      "original_position": 104,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "prefer unittest's `self.assertEqual` to our own version here.",
      "created_at": "2020-07-16T07:50:33Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455581033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455581033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455593199",
      "pull_request_review_id": 449611322,
      "id": 455593199,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU5MzE5OQ==",
      "diff_hunk": "@@ -0,0 +1,113 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+from .util import (\n+    assert_equal,\n+    modinv,\n+)\n+\n+import hashlib",
      "path": "test/functional/test_framework/muhash.py",
      "position": 6,
      "original_position": 11,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
      "in_reply_to_id": 455571889,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, further on this, a couple of Python linters I've been finding useful are pycodestyle (`pip install pycodestyle`) and black (`pip install black`), not necessarily to follow blindly but they do provide helpful suggestions.",
      "created_at": "2020-07-16T08:02:40Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455593199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455593199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455685572",
      "pull_request_review_id": 449719169,
      "id": 455685572,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY4NTU3Mg==",
      "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
      "path": "test/functional/test_framework/util.py",
      "position": null,
      "original_position": 18,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
      "in_reply_to_id": 455568177,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`// TODO: change to pow(a, -1, n)` should be kept though (because it's more readable)\r\n\r\n",
      "created_at": "2020-07-16T10:26:47Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455685572",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455685572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455783867",
      "pull_request_review_id": 449844756,
      "id": 455783867,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc4Mzg2Nw==",
      "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
      "path": "test/functional/test_framework/util.py",
      "position": null,
      "original_position": 18,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
      "in_reply_to_id": 455568177,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "meh. Now that it's implemented, it's implemented. I don't see much benefit to changing it (and in general I don't think we should be leaving TODOs in the code)",
      "created_at": "2020-07-16T13:26:02Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455783867",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455783867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455844758",
      "pull_request_review_id": 449923817,
      "id": 455844758,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0NDc1OA==",
      "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
      "path": "test/functional/test_framework/util.py",
      "position": null,
      "original_position": 18,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
      "in_reply_to_id": 455568177,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My two cents: it almost always makes sense to use what the standard library provides instead of reinventing the wheel with own implementations. Same as C++17 and C++20 substitutes will eventually be replaced when we switch over (e.g. for `std::span` or `std::optional`), the same should be done for Python functions in the future. No need to keep the codebase larger than necessary. \"Now that it's implemented, it's implemented.\" doesn't really sound like a convincing argument to me.",
      "created_at": "2020-07-16T14:48:07Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455844758",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455844758"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455859017",
      "pull_request_review_id": 449942429,
      "id": 455859017,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1OTAxNw==",
      "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
      "path": "test/functional/test_framework/util.py",
      "position": null,
      "original_position": 18,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
      "in_reply_to_id": 455568177,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggest to remove the TODO and open this change as a PR or issue and discuss it there.  Then comments won't get lost, we can show benchmarks, etc.  Eventually this change will need review (with evidence) before it is merged.  We're not just going to blindly trust a TODO, so there's no value in having it.",
      "created_at": "2020-07-16T15:07:14Z",
      "updated_at": "2020-07-16T16:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455859017",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455859017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455912994",
      "pull_request_review_id": 450012835,
      "id": 455912994,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMjk5NA==",
      "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
      "path": "test/functional/test_framework/util.py",
      "position": null,
      "original_position": 18,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
      "in_reply_to_id": 455568177,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For now, I have kept a shortened TODO since personally I have a slight preference to keep it. While I dislike most instances of TODOs in the code, this is an ok one IMO because it is very clear what there is to do and when it should be done. I don't think it's better to open a PR now that will have to stay open for a long time until the min version is bumped. It's just a different kind of clutter in the project.",
      "created_at": "2020-07-16T16:24:01Z",
      "updated_at": "2020-07-16T16:24:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455912994",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455912994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455917231",
      "pull_request_review_id": 450018200,
      "id": 455917231,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNzIzMQ==",
      "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
      "path": "test/functional/test_framework/util.py",
      "position": null,
      "original_position": 18,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
      "in_reply_to_id": 455568177,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok!",
      "created_at": "2020-07-16T16:30:43Z",
      "updated_at": "2020-07-16T16:30:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455917231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455917231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481201334",
      "pull_request_review_id": 479831962,
      "id": 481201334,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIwMTMzNA==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:",
      "path": "test/functional/test_framework/muhash.py",
      "position": 66,
      "original_position": 58,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 438262885,
      "user": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> You could add the same value twice and it would work.\r\n\r\nSets commonly ignore the second insertion. The set in Python also works like this.",
      "created_at": "2020-09-01T14:56:28Z",
      "updated_at": "2020-09-01T14:56:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r481201334",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481201334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481241532",
      "pull_request_review_id": 479876581,
      "id": 481241532,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0MTUzMg==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:",
      "path": "test/functional/test_framework/muhash.py",
      "position": 66,
      "original_position": 58,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
      "in_reply_to_id": 438262885,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, but that is the whole point: Muhash cannot ignore the second insertion. Adding an element the second time changes the internal state because there is no way to tell if an element is already in the Muhash or not.",
      "created_at": "2020-09-01T15:43:41Z",
      "updated_at": "2020-09-01T15:43:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r481241532",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481241532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579648975",
      "pull_request_review_id": 594746816,
      "id": 579648975,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTY0ODk3NQ==",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+import unittest\n+\n+from .util import modinv\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    bits %= 32  # Make sure the term below does not throw an exception\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):",
      "path": "test/functional/test_framework/muhash.py",
      "position": 16,
      "original_position": 16,
      "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "original_commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
      "in_reply_to_id": null,
      "user": {
        "login": "vindard",
        "id": 17693119,
        "node_id": "MDQ6VXNlcjE3NjkzMTE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/17693119?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vindard",
        "html_url": "https://github.com/vindard",
        "followers_url": "https://api.github.com/users/vindard/followers",
        "following_url": "https://api.github.com/users/vindard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vindard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vindard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vindard/subscriptions",
        "organizations_url": "https://api.github.com/users/vindard/orgs",
        "repos_url": "https://api.github.com/users/vindard/repos",
        "events_url": "https://api.github.com/users/vindard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vindard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Adding a little explainer video here for anyone else curious about ChaCha20: https://youtu.be/UeIpq-C-GSA",
      "created_at": "2021-02-20T12:13:53Z",
      "updated_at": "2021-02-20T12:13:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r579648975",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579648975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    }
  ]
}