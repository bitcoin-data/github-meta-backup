{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
    "id": 157353598,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTU3MzUzNTk4",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11857",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/11857.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/11857.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/523dd763bfe39150e369332e415215d33f2a3ef5",
    "number": 11857,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Build tx index in parallel with validation",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This refactors the tx index code to be in it's own class and get built concurrently with validation code. The main benefit is decoupling and moving the txindex into a separate DB. The primary motivation is to lay the groundwork for other indexers that might be desired (such as the [compact filters](https://github.com/bitcoin/bips/pull/636)). The basic idea is that the TxIndex spins up its own thread, which first syncs the txindex to the current block index, then once in sync the BlockConnected ValidationInterface hook writes new blocks.\r\n\r\n### DB changes\r\n\r\nAt the suggestion of some other developers, the txindex has been split out into a separate database. A data migration runs at startup on any nodes with a legacy txindex. Currently the migration blocks node initialization until complete.\r\n\r\n### Open questions\r\n\r\n- Should the migration of txindex data from the old DB to the new DB block in init or should it happen in a background thread? The downside to backgrounding it is that `getrawtransaction` would return an error message saying the txindex is syncing while the migration is running.\r\n\r\n### Impact\r\n\r\nIn a sample size n=1 test where I synced nodes from scratch, the average time [Index writing](https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L1903) was 3.36ms in master and 1.72ms in this branch. The average time between `UpdateTip` log lines for sequential blocks between 400,000 and IBD end on mainnet was 0.297204s in master and 0.286134s in this branch. Most likely this is just variance in IBD times, but I can try with some more trials if people want.",
    "labels": [
      {
        "id": 97470796,
        "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
        "name": "UTXO Db and Indexes",
        "color": "fbca04",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2017-12-08T23:12:40Z",
    "updated_at": "2021-09-08T11:53:20Z",
    "closed_at": "2018-04-20T00:12:41Z",
    "mergeable_state": "unknown",
    "merge_commit_sha": "49a035ec239b598538f29594b67eb32d89f516ee",
    "assignee": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "jimpo:txindex-refactor",
      "ref": "txindex-refactor",
      "sha": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 18502174,
        "node_id": "MDEwOlJlcG9zaXRvcnkxODUwMjE3NA==",
        "name": "bitcoin",
        "full_name": "jimpo/bitcoin",
        "owner": {
          "login": "jimpo",
          "id": 881253,
          "node_id": "MDQ6VXNlcjg4MTI1Mw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jimpo",
          "html_url": "https://github.com/jimpo",
          "followers_url": "https://api.github.com/users/jimpo/followers",
          "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
          "organizations_url": "https://api.github.com/users/jimpo/orgs",
          "repos_url": "https://api.github.com/users/jimpo/repos",
          "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jimpo/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jimpo/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jimpo/bitcoin",
        "archive_url": "https://api.github.com/repos/jimpo/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jimpo/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jimpo/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jimpo/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jimpo/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jimpo/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jimpo/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jimpo/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jimpo/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jimpo/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jimpo/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jimpo/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jimpo/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jimpo/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jimpo/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jimpo/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jimpo/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jimpo/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jimpo/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jimpo/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jimpo/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jimpo/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jimpo/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jimpo/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jimpo/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jimpo/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jimpo/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jimpo/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jimpo/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jimpo/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jimpo/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jimpo/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jimpo/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jimpo/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jimpo/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jimpo/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jimpo/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jimpo/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jimpo/bitcoin/hooks",
        "svn_url": "https://github.com/jimpo/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 126773,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2020-05-04T07:11:12Z",
        "created_at": "2014-04-06T23:53:29Z",
        "updated_at": "2019-08-03T04:25:20Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "615f7c288414a89cd1dec1d67e0f84abe2fb4c6d",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T00:11:53Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 753,
    "deletions": 97,
    "changed_files": 18,
    "commits": 12,
    "review_comments": 145,
    "comments": 35
  },
  "events": [
    {
      "event": "reviewed",
      "id": 82311538,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODIzMTE1Mzg=",
      "url": null,
      "actor": null,
      "commit_id": "ae276cead580e459d881db5b7439b618ec0854a6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-82311538",
      "submitted_at": "2017-12-09T01:32:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "reviewed",
      "id": 82318411,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODIzMTg0MTE=",
      "url": null,
      "actor": null,
      "commit_id": "ae276cead580e459d881db5b7439b618ec0854a6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-82318411",
      "submitted_at": "2017-12-09T06:51:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "commented",
      "id": 350481060,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDQ4MTA2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350481060",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-09T16:03:29Z",
      "updated_at": "2017-12-09T16:03:29Z",
      "author_association": "MEMBER",
      "body": "High-Level Concept ACK. As for your two notes:\r\n\r\n> an alternative would be to split the txindex into a separate DB and do a data migration on upgrade.\r\n\r\nI'd vote strongly for this. Keeping them separate is good.\r\n\r\n> though it may be fine to just do the TxIndex write directly in the BlockConnected method.\r\n\r\nYes, I think you should just do this. I'd like to move the CValidationInterface semantics to no longer be a single thread run on the scheduler but instead multiple scheduler threads that process events and only guarantee order for individual clients instead of globally.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-350481060",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1380124544,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM4MDEyNDU0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1380124544",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-09T19:50:41Z"
    },
    {
      "event": "reviewed",
      "id": 82339759,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODIzMzk3NTk=",
      "url": null,
      "actor": null,
      "commit_id": "41022ec2770d328c55191f8b1bc36b750e46f9a0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-82339759",
      "submitted_at": "2017-12-10T01:58:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1384741202,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM4NDc0MTIwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1384741202",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T01:04:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1384751222,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM4NDc1MTIyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1384751222",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T01:15:16Z"
    },
    {
      "event": "labeled",
      "id": 1385064231,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDEzODUwNjQyMzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1385064231",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T07:31:41Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "commented",
      "id": 351308356,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTMwODM1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351308356",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T07:37:32Z",
      "updated_at": "2017-12-13T07:59:17Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\n> an alternative would be to split the txindex into a separate DB and do a data migration on upgrade.\r\n\r\nI agree that would be preferable (though not necessarily in this PR, I don't think the scope here should be extended further).  The transaction index has a completely different access pattern from the block index. This came up in #10922 and other places.\r\n\r\nAlso for safety and flexibility it would be good to have separate indexers, and to not have it integrated into consensus-critical block handling.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351308356",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "commented",
      "id": 351453993,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ1Mzk5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351453993",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T16:58:52Z",
      "updated_at": "2017-12-13T16:58:52Z",
      "author_association": "MEMBER",
      "body": "I'm not actaully sure that its unrelated - currently txindex is required to be kept in-sync and be present in the block tree DB before the coins for a block are flushed to the utxodb. Moving it to the background without bending over backwards to keep things in-sync would result in \"corrupt\" (I assume just missing entries) tx index in some cases on downgrade. Its not a huge deal, but I think moving the txindex into a separate DB would be really nice to do before (or in the same PR) things are background-flushed.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351453993",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "commented",
      "id": 351467099,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ2NzA5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351467099",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T17:42:44Z",
      "updated_at": "2017-12-13T17:44:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "@TheBlueMatt @laanwj I updated this PR to split the database and added a migration. The migration took ~103 min on an AWS m4.large with data on a gp2 EBS volume (non-local SSD). So that's kind of painful. I could change the migration to happen in the background thread, but the UX might be weird for people upgrading because the RPC endpoint would report that the txindex is catching up. Open to suggestions here.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351467099",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "mentioned",
      "id": 1386133406,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTM4NjEzMzQwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1386133406",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T17:42:44Z"
    },
    {
      "event": "subscribed",
      "id": 1386133407,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEzODYxMzM0MDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1386133407",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T17:42:44Z"
    },
    {
      "event": "mentioned",
      "id": 1386133408,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTM4NjEzMzQwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1386133408",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T17:42:44Z"
    },
    {
      "event": "subscribed",
      "id": 1386133409,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEzODYxMzM0MDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1386133409",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T17:42:44Z"
    },
    {
      "event": "commented",
      "id": 351487094,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ4NzA5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351487094",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T18:54:51Z",
      "updated_at": "2017-12-13T18:54:51Z",
      "author_association": "MEMBER",
      "body": "Seems to be missing migration (forget to push?). Doing migration in the background after start seems fine, better to wait with most things working than it just hanging startup, just have to make sure it doesn't overwrite new entries or you'd end up pointing to a reorg'd-out block's copy (though I think thats probably not technically a problem, it seems strange).\r\n\r\nAs for threading, it would be really nice to have the flushing for new blocks happen directly in the scheduler/validation interface threading, with the upgrade either in the init thread at the end (it just hangs around for the entire program's execution waiting for shutdown to start, so as long as the migration is interruptible that'd be a fine place for it) or a new thread.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351487094",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "commented",
      "id": 351507915,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTUwNzkxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351507915",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T20:10:34Z",
      "updated_at": "2017-12-13T20:10:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "@TheBlueMatt Migration is here: https://github.com/bitcoin/bitcoin/pull/11857/commits/a252d466ca0c44a455051d01c43e50e15643c423#diff-81e4f16a1b5d5b7ca25351a63d07cb80R446. Called from `Start()`, though it could be moved to `ThreadSync` (the dedicated thread for the txindex initial sync).\r\n\r\nI also changed the new block flushing to happen directly in the `BlockConnected` callback as you suggested.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351507915",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "mentioned",
      "id": 1386390916,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTM4NjM5MDkxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1386390916",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T20:10:34Z"
    },
    {
      "event": "subscribed",
      "id": 1386390917,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEzODYzOTA5MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1386390917",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T20:10:34Z"
    },
    {
      "event": "reviewed",
      "id": 83303997,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODMzMDM5OTc=",
      "url": null,
      "actor": null,
      "commit_id": "e95ed5ac89e1393f44c32a3ee5d026c1088477f1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-83303997",
      "submitted_at": "2017-12-13T20:16:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1388260382,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM4ODI2MDM4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1388260382",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-14T18:30:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1390063803,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM5MDA2MzgwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1390063803",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-15T17:58:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1390258174,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM5MDI1ODE3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1390258174",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-15T20:12:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1390276324,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM5MDI3NjMyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1390276324",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-15T20:25:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1410085377,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQxMDA4NTM3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1410085377",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-04T18:47:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1410095338,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQxMDA5NTMzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1410095338",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-04T18:53:38Z"
    },
    {
      "event": "reviewed",
      "id": 86924561,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODY5MjQ1NjE=",
      "url": null,
      "actor": null,
      "commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks great! I reviewed most of this but rushed through the last few commits and want to look more closely before adding ack.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-86924561",
      "submitted_at": "2018-01-05T17:14:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1414683930,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQxNDY4MzkzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1414683930",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-08T23:49:06Z"
    },
    {
      "event": "commented",
      "id": 364211135,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDIxMTEzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364211135",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-08T18:50:54Z",
      "updated_at": "2018-02-08T18:50:54Z",
      "author_association": "MEMBER",
      "body": "Needs rebase (probably a simple one, only init.cpp conflicted).",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364211135",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "assigned",
      "id": 1465234471,
      "node_id": "MDEzOkFzc2lnbmVkRXZlbnQxNDY1MjM0NDcx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1465234471",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-08T18:50:58Z",
      "assignee": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1465256366,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQ2NTI1NjM2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1465256366",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-08T19:02:52Z"
    },
    {
      "event": "reviewed",
      "id": 95437789,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTU0Mzc3ODk=",
      "url": null,
      "actor": null,
      "commit_id": "c4401fc41422daa17df46e5945c35a55c1e0e8bd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. It's very nice to able to add and remove txindex without a full reindex, which takes weeks on my Bitseed node. Worthy of a Performance label?\r\n\r\nIt tested (with testnet3) adding `txindex=1` on this branch, as well as adding `txindex=1` on master and then migrating using this branch.\r\n\r\nPossibly unrelated, but upon switching back to `master`, deleting `/indexes`, launching `src/qt/bitcoin-qt -txindex=1`, confirming that I wanted to do a reindex, it failed with \"Error opening block database\". I then run `bitcoind -txindex=1 -reindex` for a minute, closed it and launched QT again, at which point indexing proceeded as expected.\r\n\r\nIn terms of storage something seems off (testnet3):\r\n\r\n* chainstate without txindex: 968.7 MB\r\n* chainstate with \"legacy\" txindex: 966.8 MB\r\n* chainstate on this branch, after migration: 986.4 MB\r\n* indexes, after migration: 870 MB\r\n* indexes, without migration: 873 MB\r\n\r\nSo it looks like txindex only adds 30 MB on master, but the separate indexes directory adds almost 800 MB. Or I'm doing something wrong. \r\n\r\nCan you expand the progress logger beyond migration? It's also useful for when `txindex=1` is added after IBD.\r\n\r\nWould be nice to have functional tests for the various `getrawtransaction` error messages.\r\n\r\nIt's a bit confusing to call the directory `/indexes` when the block index file isn't there, but maybe that can be moved later (or never, if it's too risky).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-95437789",
      "submitted_at": "2018-02-09T15:46:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "commented",
      "id": 364479759,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDQ3OTc1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364479759",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-09T16:15:56Z",
      "updated_at": "2018-02-09T16:31:08Z",
      "author_association": "MEMBER",
      "body": "I also noticed that `indexes` isn't emptied if you set `txindex=0`. That's probably a good thing, e.g. perhaps someone doesn't want to read / update them for a while, but should be documented.\r\n\r\nI was able to reproduce the \"Error opening block database\" QT error (on master) after a fresh reindex (on this branch). No need to use bitcoind to make it go away, simply launch with `-reindex`. That shouldn't be necessary. \r\n\r\nThis also seems to happens on master so might be unrelated:\r\n\r\n```\r\n2018-02-09 16:23:44 init message: Loading block index...\r\n2018-02-09 16:23:44 Wiping LevelDB in /Users/bitcoin/Library/Application Support/Bitcoin/testnet3/blocks/index\r\n2018-02-09 16:23:44 IO error: lock /Users/bitcoin/Library/Application Support/Bitcoin/testnet3/blocks/index/LOCK: already held by process\r\n2018-02-09 16:23:44 Database I/O error\r\n```",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364479759",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "commented",
      "id": 364527179,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDUyNzE3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364527179",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-09T19:01:07Z",
      "updated_at": "2018-02-09T19:01:07Z",
      "author_association": "MEMBER",
      "body": "I was comparing the wrong directory sizes above. `chainstate` is for the UTXO set, `txindex` is in `blocks/index` (on master).\r\n\r\nAlso the error I was seeing was unrelated, and hopefully fixed in #12401  ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364527179",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1467581456,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQ2NzU4MTQ1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1467581456",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-09T21:43:30Z"
    },
    {
      "event": "commented",
      "id": 364578968,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDU3ODk2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364578968",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-09T21:49:06Z",
      "updated_at": "2018-02-09T21:49:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Sjors Thanks for the review!\r\n\r\nI added f1b8b8d to log the txindex build status periodically while it is catching up.\r\n\r\nI agree functional tests would be nice, but I'm having trouble figuring out how to exercise the case where the txindex is catchup up in the test harness. Could maybe sync a node with a few blocks, stop it, delete the txindex database files, restart and then hit the RPC, but it is going to be racey no matter what. Let me know if you have suggestions.\r\n\r\nI'm curious what other people think, but having the block index database elsewhere doesn't bother me too much, because it is special and required. I am imagining that `indexes/` will be for optional indexes that can be built and synced in the background. Also, it doesn't seem worth it to make a migration just to move around the block index directory path.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364578968",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "mentioned",
      "id": 1467590532,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTQ2NzU5MDUzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1467590532",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-09T21:49:06Z"
    },
    {
      "event": "subscribed",
      "id": 1467590533,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE0Njc1OTA1MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1467590533",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-09T21:49:07Z"
    },
    {
      "event": "commented",
      "id": 364642544,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDY0MjU0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364642544",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-10T10:43:10Z",
      "updated_at": "2018-02-10T10:43:10Z",
      "author_association": "MEMBER",
      "body": "@jnewbery: any thoughts on how to tackle functional tests?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364642544",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "mentioned",
      "id": 1467948604,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTQ2Nzk0ODYwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1467948604",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-10T10:43:10Z"
    },
    {
      "event": "subscribed",
      "id": 1467948605,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE0Njc5NDg2MDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1467948605",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-10T10:43:10Z"
    },
    {
      "event": "referenced",
      "id": 1484584779,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0ODQ1ODQ3Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1484584779",
      "actor": {
        "login": "hkjn",
        "id": 287215,
        "node_id": "MDQ6VXNlcjI4NzIxNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/287215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hkjn",
        "html_url": "https://github.com/hkjn",
        "followers_url": "https://api.github.com/users/hkjn/followers",
        "following_url": "https://api.github.com/users/hkjn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hkjn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hkjn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hkjn/subscriptions",
        "organizations_url": "https://api.github.com/users/hkjn/orgs",
        "repos_url": "https://api.github.com/users/hkjn/repos",
        "events_url": "https://api.github.com/users/hkjn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hkjn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5d33ab6c1150293d2451df2f16a61b4156e04b23",
      "commit_url": "https://api.github.com/repos/hkjn/bitcoin/commits/5d33ab6c1150293d2451df2f16a61b4156e04b23",
      "created_at": "2018-02-21T12:51:58Z"
    },
    {
      "event": "reviewed",
      "id": 101320521,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAxMzIwNTIx",
      "url": null,
      "actor": null,
      "commit_id": "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Mostly style stuff, will do another pass later to review the logic more closely.",
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-101320521",
      "submitted_at": "2018-03-05T20:56:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "referenced",
      "id": 1506768369,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE1MDY3NjgzNjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1506768369",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9903537750aca5c84a06d4157a3c27b7db3169d3",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9903537750aca5c84a06d4157a3c27b7db3169d3",
      "created_at": "2018-03-06T15:29:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1506799091,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTUwNjc5OTA5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1506799091",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-06T15:41:45Z"
    },
    {
      "event": "commented",
      "id": 370887085,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDg4NzA4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/370887085",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-06T18:50:31Z",
      "updated_at": "2018-03-06T18:50:31Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.\r\n\r\nHaving the transaction index as a modular, optional, separate database that gets updated in the background is a major improvement over how things work now.\r\n\r\nIt's also the approach that similar optional indexes or redundant data can take; for example a rolling UTXO set hash or a per-scriptPubKey UTXO index (see #9806) could follow the same approach.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-370887085",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "commented",
      "id": 371170887,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTE3MDg4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371170887",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-07T15:15:35Z",
      "updated_at": "2018-03-07T15:15:35Z",
      "author_association": "MEMBER",
      "body": "Tested adding an index in Bitcoin-QT and it seems to work. I didn't try upgrading an existing index.\r\n\r\nIt doesn't delete the index when you set `txindex=0`. That might actually be better than the current behavior to prevent accidents, but should be explained in the release notes and such.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371170887",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1511751576,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTUxMTc1MTU3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1511751576",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-08T18:24:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1511752762,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTUxMTc1Mjc2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1511752762",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-08T18:25:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1511755752,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTUxMTc1NTc1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1511755752",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-08T18:27:09Z"
    },
    {
      "event": "commented",
      "id": 371579644,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTU3OTY0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371579644",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-08T18:31:44Z",
      "updated_at": "2018-03-08T18:31:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Sjors Thanks for testing. I fixed the issue switching from pruned to unpruned w/o txindex with an amend to 33ebb98. You raise an interesting point about dropping the txindex database. Not sure what the right behavior should be. One approach might be to add a `-dropindex=txindex` flag or to add an RPC and `bitcoin-cli` command that errors if the txindex is active. I like the CLI approach personally, but the downside is it requires the RPC server to be running.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371579644",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "mentioned",
      "id": 1511765041,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTUxMTc2NTA0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1511765041",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-08T18:31:44Z"
    },
    {
      "event": "subscribed",
      "id": 1511765042,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1MTE3NjUwNDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1511765042",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-08T18:31:44Z"
    },
    {
      "event": "commented",
      "id": 371590826,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTU5MDgyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371590826",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-08T19:08:58Z",
      "updated_at": "2018-03-08T19:08:58Z",
      "author_association": "MEMBER",
      "body": "I think your release note is fine. Deleting a directory doesn't seem worth the complexity of another RPC command / command line flag. I don't think it's too much to ask.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371590826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "commented",
      "id": 371679779,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTY3OTc3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371679779",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-09T01:11:06Z",
      "updated_at": "2018-03-09T01:11:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK!\r\n- Is there a reason for the extensive use of the c++11 `auto` specifier (for things like `CBlockIndex*`)?\r\n- Maybe a stupid question, but why blocking the thread / RPC / REST during txindex generation? I just had the thought why not building the txindex reserve (from tip to genesis) and allow access anytime while eventually add a txindex status report call `txindexstatus` (if this makes sense, then probably not in this PR).",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371679779",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "commented",
      "id": 371681871,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTY4MTg3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371681871",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-09T01:23:09Z",
      "updated_at": "2018-03-09T01:35:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jonasschnelli I wrote this before the discussion on #12120. Happy to go through the commits and reduce the usage.\r\n\r\nAs for the RPC behavior, it actually works similar to how you suggest. `BlockUntilSyncedToCurrentChain` only blocks if the txindex is caught up and just waits for the ValidationInterface queue to clear. If the txindex is syncing from genesis, `BlockUntilSyncedToCurrentChain` immediately returns false. The `getrawtransaction` behavior, however, is to optimistically query the index and only if it can't find the tx does it return a not found error saying the index is catching up. Basically, the index has an initial sync phase, then a staying in sync phase, where RPC calls might block for a short amount of time just for consistency with other RPC responses.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371681871",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "mentioned",
      "id": 1512418297,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTUxMjQxODI5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1512418297",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-09T01:23:09Z"
    },
    {
      "event": "subscribed",
      "id": 1512418298,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1MTI0MTgyOTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1512418298",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-09T01:23:09Z"
    },
    {
      "event": "reviewed",
      "id": 102873084,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODczMDg0",
      "url": null,
      "actor": null,
      "commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This looks pretty good. There are some data consistency issues and a null dereference I spotted, but they should be easy to fix.",
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-102873084",
      "submitted_at": "2018-03-11T07:36:20Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1515246254,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTUxNTI0NjI1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1515246254",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-11T23:14:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1515247633,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTUxNTI0NzYzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1515247633",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-11T23:18:10Z"
    },
    {
      "event": "commented",
      "id": 372559696,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjU1OTY5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372559696",
      "actor": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-13T06:25:12Z",
      "updated_at": "2018-03-13T06:25:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "I thought more about the ordering dependency between the block index and the txindex, and I realize now that it might be possible to make them independent of ordering. There's an edge case (that may not be possible in practice) if a reorg happens during crash recovery, so I stand by my original recommendation and maybe we can fix the reorg edge case before 0.17 is released.",
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-372559696",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1519646186,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTUxOTY0NjE4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1519646186",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-13T21:14:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1521492205,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTUyMTQ5MjIwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1521492205",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-14T17:09:44Z"
    },
    {
      "event": "reviewed",
      "id": 88249616,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODgyNDk2MTY=",
      "url": null,
      "actor": null,
      "commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 21f8a3bae27ffbbfe9e5d8a6d3c6b4e8c09045e1. This is really nicely implemented. I left some suggestions below, but they are mostly requests to add comments.\r\n\r\n* On the open question in the PR description: I don't understand the downside to migrating in a background thread. Isn't getrawtransaction unusable during migration whether it's happening in the  foreground or background?\r\n\r\n* Other things could be cleaned up in the PR description: \"its\" spelled \"it's,\" repetition of \"The primary motivation is to lay the groundwork for other indexers\" and \"The real goal is to lay the groundwork for other indexers\"\r\n\r\n* @eklitzke, can you clarify what the broken \"reorg edge case\" is from\r\nhttps://github.com/bitcoin/bitcoin/pull/11857#issuecomment-372559696, so we can at least document it, if not fix it here.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-88249616",
      "submitted_at": "2018-03-14T21:14:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "commented",
      "id": 373459507,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzQ1OTUwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/373459507",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-15T17:30:24Z",
      "updated_at": "2018-03-15T17:30:24Z",
      "author_association": "MEMBER",
      "body": "Two functional tests `rpc_rawtransaction.py` and `wallet_abandonconflict.py` seem to be failing, perhaps due to a bad interaction with #11041. AssertLockHeld is failing with stack trace:\r\n\r\n```\r\n#0  0x00007ffff5411428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007ffff541302a in __GI_abort () at abort.c:89\r\n#2  0x0000555555b617d0 in AssertLockHeldInternal (pszName=0x555555bfe1ff \"cs_main\", pszFile=0x555555bfe1f0 \"./validation.h\", nLine=432, cs=0x55555615d240 <cs_main>) at sync.cpp:157\r\n#3  0x00005555555beae4 in LookupBlockIndex (hash=...) at ./validation.h:432\r\n#4  0x00005555557a487f in TxToJSON (tx=..., hashBlock=..., entry=...) at rpc/rawtransaction.cpp:52\r\n#5  0x00005555557a5835 in getrawtransaction (request=...) at rpc/rawtransaction.cpp:200\r\n#6  0x00005555557d07d6 in CRPCTable::execute (this=0x555556166d80 <tableRPC>, request=...) at rpc/server.cpp:493\r\n#7  0x000055555596ffae in HTTPReq_JSONRPC (req=0x7fffcc0017b0) at httprpc.cpp:188\r\n#8  0x00005555557542ae in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., __args#0=<unknown type in /home/russ/src/bitcoin/src/bitcoind, CU 0x509db3, DIE 0x562965>, __args#1=\"\")\r\n    at /usr/include/c++/5/functional:1857\r\n#9  0x000055555597d64a in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (\r\n    this=0x7fffcc001c10, __args#0=0x7fffcc0017b0, __args#1=\"\") at /usr/include/c++/5/functional:2267\r\n#10 0x000055555597b87b in HTTPWorkItem::operator() (this=0x7fffcc001be0) at httpserver.cpp:53\r\n#11 0x000055555597e7c4 in WorkQueue<HTTPClosure>::Run (this=0x5555562e3ea0) at httpserver.cpp:112\r\n#12 0x00005555559768d7 in HTTPWorkQueueRun (queue=0x5555562e3ea0) at httpserver.cpp:333\r\n#13 0x000055555598ed42 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x5555562e4368) at /usr/include/c++/5/functional:1531\r\n#14 0x000055555598e6f8 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (this=0x5555562e4368) at /usr/include/c++/5/functional:1520\r\n#15 0x000055555598de99 in std::thread::_Impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x5555562e4350) at /usr/include/c++/5/thread:115\r\n#16 0x00007ffff5d82510 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#17 0x00007ffff6d556ba in start_thread (arg=0x7fffc7fff700) at pthread_create.c:333\r\n#18 0x00007ffff54e341d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n```\r\n\r\nThe error is showing up on travis (https://travis-ci.org/bitcoin/bitcoin/jobs/353440060), but I can also reproduce the problem locally building with building with `--enable-debug`.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-373459507",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1527591833,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTUyNzU5MTgzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1527591833",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-19T02:27:05Z"
    },
    {
      "event": "mentioned",
      "id": 1529765600,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTUyOTc2NTYwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1529765600",
      "actor": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-19T23:29:16Z"
    },
    {
      "event": "subscribed",
      "id": 1529765601,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1Mjk3NjU2MDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1529765601",
      "actor": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-19T23:29:16Z"
    },
    {
      "event": "commented",
      "id": 374421493,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDQyMTQ5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/374421493",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-19T23:34:08Z",
      "updated_at": "2018-03-19T23:34:08Z",
      "author_association": "MEMBER",
      "body": "I'll take another look at this tomorrow to re-ack the new changes. Hopefully I responded to wherever there were questions above.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-374421493",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1531730684,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTUzMTczMDY4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1531730684",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-20T18:58:31Z"
    },
    {
      "event": "commented",
      "id": 374767119,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDc2NzExOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/374767119",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-20T21:43:08Z",
      "updated_at": "2018-03-20T21:43:08Z",
      "author_association": "MEMBER",
      "body": "@Sjors\r\n> @jnewbery: any thoughts on how to tackle functional tests?\r\n\r\nMy first thought is that this isn't suitable for a functional test, since it's an implementation change rather than new functionality. Unit tests seem more appropriate.\r\n\r\nWill try to review this week.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-374767119",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "mentioned",
      "id": 1532058498,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTUzMjA1ODQ5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1532058498",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-20T21:43:08Z"
    },
    {
      "event": "subscribed",
      "id": 1532058499,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1MzIwNTg0OTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1532058499",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-20T21:43:08Z"
    },
    {
      "event": "mentioned",
      "id": 1532058500,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTUzMjA1ODUwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1532058500",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-20T21:43:08Z"
    },
    {
      "event": "subscribed",
      "id": 1532058501,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1MzIwNTg1MDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1532058501",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-20T21:43:08Z"
    },
    {
      "event": "commented",
      "id": 375147034,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTE0NzAzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/375147034",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-22T01:18:17Z",
      "updated_at": "2018-03-22T01:18:17Z",
      "author_association": "MEMBER",
      "body": "This seems to introduce a cyclic dependency between `index/txindex` and `validation`. As these usually are a sign of imperfect abstraction boundaries, I would very much like to avoid them. If the current code is only expected to be temporary, I don't want to hold things up just for this, but I don't think it's very hard to avoid; you can move `GetTransaction` from `validation` to `rpc/rawtransaction` or another utility file. It doesn't quite belong in `validation` anyway.\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-375147034",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "commented",
      "id": 375148907,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTE0ODkwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/375148907",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-22T01:29:59Z",
      "updated_at": "2018-03-22T01:29:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa Totally agree `GetTransaction` should be moved. I'd prefer to do it in a follow-up PR as this one is already rather large though.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-375148907",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "mentioned",
      "id": 1534587759,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTUzNDU4Nzc1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1534587759",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-22T01:29:59Z"
    },
    {
      "event": "subscribed",
      "id": 1534587760,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1MzQ1ODc3NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1534587760",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-22T01:29:59Z"
    },
    {
      "event": "added_to_project",
      "id": 1536380414,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQxNTM2MzgwNDE0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1536380414",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-22T19:07:39Z",
      "project_card": {
        "id": 8381955,
        "url": "https://api.github.com/projects/columns/cards/8381955",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "reviewed",
      "id": 107747366,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA3NzQ3MzY2",
      "url": null,
      "actor": null,
      "commit_id": "aee37f2b62c72a0796557b92bf12fde6867dfbc5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Didnt review tests, also note that doc/files.md should be updated with new datadir paths.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-107747366",
      "submitted_at": "2018-03-28T17:50:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "mentioned",
      "id": 1548840301,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU0ODg0MDMwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1548840301",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-29T21:31:55Z"
    },
    {
      "event": "subscribed",
      "id": 1548840302,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1NDg4NDAzMDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1548840302",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-29T21:31:55Z"
    },
    {
      "event": "commented",
      "id": 377421311,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzQyMTMxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377421311",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T01:40:29Z",
      "updated_at": "2018-03-30T01:40:29Z",
      "author_association": "MEMBER",
      "body": "I'd very much like to get rid of the UTXO based block lookup. It's unreliable (depends on having at least one unspent output left for the transaction), is slow (needs to load and scan the entire block) and probably unused. There is an issue for it somewhere, but I think we'll want a deprecation for it first.\n\nOne way to deal with it is introducing a new RPC `getchaintransaction` or so, which strictly only works when txindex is enabled. Then `getrawtransaction` can be deprecated with a warning saying you can use `getmempoolentry` for unconfirmed transactions, and `getchaintransaction` for confirmed ones (if txindex is enabled).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-377421311",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1550036123,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU1MDAzNjEyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1550036123",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T17:07:45Z"
    },
    {
      "event": "commented",
      "id": 377574766,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU3NDc2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377574766",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T17:19:54Z",
      "updated_at": "2018-03-30T17:19:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "@TheBlueMatt @sipa I'd prefer to handle some of your suggestions about getrawtransaction (better error reporting, no UTXO lookup, moving GetTransaction out of validation, etc.) in a follow-up PR because this one is already 700+ lines. Commit https://github.com/jimpo/bitcoin/commit/2b8ee538bf804bcd2d30942d1254d147e65f2ee3 is a starting point.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-377574766",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "mentioned",
      "id": 1550051252,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU1MDA1MTI1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1550051252",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T17:19:54Z"
    },
    {
      "event": "subscribed",
      "id": 1550051253,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1NTAwNTEyNTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1550051253",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T17:19:54Z"
    },
    {
      "event": "mentioned",
      "id": 1550051256,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU1MDA1MTI1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1550051256",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T17:19:54Z"
    },
    {
      "event": "subscribed",
      "id": 1550051257,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1NTAwNTEyNTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1550051257",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T17:19:54Z"
    },
    {
      "event": "commented",
      "id": 377587439,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU4NzQzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377587439",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T18:15:47Z",
      "updated_at": "2018-03-30T18:15:47Z",
      "author_association": "MEMBER",
      "body": "@jimpo Sorry if I was unclear; my message above was just to give some background thoughts and not a request to further change this PR itself.\n\nI'll review the code soon.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-377587439",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "mentioned",
      "id": 1550149750,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU1MDE0OTc1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1550149750",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T18:15:47Z"
    },
    {
      "event": "subscribed",
      "id": 1550149751,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1NTAxNDk3NTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1550149751",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-30T18:15:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1554765351,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU1NDc2NTM1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1554765351",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-03T18:12:45Z"
    },
    {
      "event": "reviewed",
      "id": 109038387,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA5MDM4Mzg3",
      "url": null,
      "actor": null,
      "commit_id": "c3b34b1b62ab034c5d6b6d700ae378291b19fc4b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 297f89cad4808b3499d290bdadb5c4863a94fdd7 with squashed commits. Lots of updates since my previous review, too many to mention, but all in response to comments above.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-109038387",
      "submitted_at": "2018-04-03T18:15:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "commented",
      "id": 378644032,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODY0NDAzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378644032",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-04T15:34:25Z",
      "updated_at": "2018-04-04T15:34:25Z",
      "author_association": "MEMBER",
      "body": "Tested 806b2f1, including interrupting the migration from legacy to the new db.\r\n\r\nIf someone wants to do a partial backport, the migration code that removes txindex without requiring a reindex would be useful for folks who regret having set `txindex=1` on a node with slow hardware.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-378644032",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "reviewed",
      "id": 109454939,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA5NDU0OTM5",
      "url": null,
      "actor": null,
      "commit_id": "806b2f1764b6e5a9c7abec887bfa89cd386648d8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 806b2f1764b6e5a9c7abec887bfa89cd386648d8. Only change since last review is rebase and removing \"Last block synced by txindex is unknown\" error.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-109454939",
      "submitted_at": "2018-04-04T18:50:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1557633094,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU1NzYzMzA5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1557633094",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-04T23:14:27Z"
    },
    {
      "event": "commented",
      "id": 379062978,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTA2Mjk3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379062978",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-05T20:16:38Z",
      "updated_at": "2018-04-05T20:16:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-379062978",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "commented",
      "id": 379063844,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTA2Mzg0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379063844",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-05T20:20:00Z",
      "updated_at": "2018-04-05T20:20:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "> warning saying you can use getmempoolentry for unconfirmed transactions\r\n@sipa But getmempoolentry doesn't give you the same data as getrawtransaction (I guess it could be extended to do so optionally).\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-379063844",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "mentioned",
      "id": 1559625844,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU1OTYyNTg0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1559625844",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-05T20:20:00Z"
    },
    {
      "event": "subscribed",
      "id": 1559625846,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1NTk2MjU4NDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1559625846",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-05T20:20:00Z"
    },
    {
      "event": "mentioned",
      "id": 1569194832,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU2OTE5NDgzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1569194832",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-11T17:51:12Z"
    },
    {
      "event": "subscribed",
      "id": 1569194834,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1NjkxOTQ4MzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1569194834",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-11T17:51:12Z"
    },
    {
      "event": "mentioned",
      "id": 1569579943,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU2OTU3OTk0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1569579943",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-11T21:02:35Z"
    },
    {
      "event": "subscribed",
      "id": 1569579945,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1Njk1Nzk5NDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1569579945",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-11T21:02:35Z"
    },
    {
      "event": "reviewed",
      "id": 111401714,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTExNDAxNzE0",
      "url": null,
      "actor": null,
      "commit_id": "ea8be45ace75b649584c163deca3051c4f33aa16",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-111401714",
      "submitted_at": "2018-04-11T21:02:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "reviewed",
      "id": 111336513,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTExMzM2NTEz",
      "url": null,
      "actor": null,
      "commit_id": "ea8be45ace75b649584c163deca3051c4f33aa16",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Partially through a review: I've finished looking at `TxIndex` and some related parts of `TxIndexDB`. Looks great so far, very excited for this change.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-111336513",
      "submitted_at": "2018-04-11T21:06:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "reviewed",
      "id": 111682712,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTExNjgyNzEy",
      "url": null,
      "actor": null,
      "commit_id": "ea8be45ace75b649584c163deca3051c4f33aa16",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested ACK https://github.com/bitcoin/bitcoin/pull/11857/commits/ea8be45ace75b649584c163deca3051c4f33aa16\r\n\r\nThis change is really nicely implemented. My comments are non-blocking - the code as-is reads well and represents a big improvement. `txindex` usage while testing this branch has been pleasant relative to its normally fickle behavior; I like that the index doesn't get blown away when toggling `txindex=`.\r\n\r\nHere's the manual test plan I followed:\r\n\r\n- [x] Start migration of existing (legacy) `blocks/index` database, interrupt it (on testnet)\r\n  - [x] Continue interrupted migration of legacy `blocks/index` database (on testnet)\r\n- [x] Build `indexes/txindex` from scratch (on testnet)\r\n- [x] Retrieve a testnet transaction:\r\n    ```sh\r\n    $ which rpct\r\n\r\n    rpct () {\r\n      ./src/bitcoin-cli -rpcuser=foo -rpcpassword=xxx -rpcport=18332 \"$@\"\r\n    }\r\n\r\n    $ rpct getrawtransaction 9c86ecad5ecc447ef1540e13911f6b917b771d1780693613889f14efa7d6fc01\r\n\r\n    020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff23030eb91304ac8bcf5a2f44504f4f4c2e544f502f484e2f0202f6d36693010000000000ffffffff028a910405000000001976a9140ac82b91aa7ff1b07c9673f28c8ced6c7045c41388ac0000000000000000266a24aa21a9eda00067c4917832fb72c8db625395da31e0e9e66d32d8385bf3d5bc1b036880e00120000000000000000000000000000000000000000000000000000000000000000000000000\r\n    ```\r\n- [x] After building `indexes/txindex`, retrieve a transaction from [a recent testnet block](https://live.blockcypher.com/btc-testnet/block/00000000000001cf81d8715947d225734d01fc2ff6f98257a745c516ac5b11d2/): \r\n    ```sh\r\n     $ rpct getrawtransaction $(rpct getblock $(rpct getbestblockhash) | jq -r \".tx[0]\")\r\n\r\n     020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff230310b913042791cf5a2f44504f4f4c2e544f502f484e2f0202f6d3dea9010000000000ffffffff029d61af04000000001976a9140ac82b91aa7ff1b07c9673f28c8ced6c7045c41388ac0000000000000000266a24aa21a9edbdf213b3f829be29346dece981a7b90bad893358a0d7d95163887b6960760d150120000000000000000000000000000000000000000000000000000000000000000000000000\r\n     ```\r\n- [x] After building `indexes/txindex`, retrieve a transaction from [an older testnet block](https://live.blockcypher.com/btc-testnet/block/000000000000015db03f2c2690e2479a5a9a675298a76df0d759f04bd45bd71b/):\r\n    ```sh\r\n     $ rpct getrawtransaction $(rpct getblock $(rpct getblockhash 2) | jq -r \".tx[0]\")\r\n     \r\n     01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0e0432e7494d010e062f503253482fffffffff0100f2052a010000002321038a7f6ef1c8ca0c588aa53fa860128077c9e6c11e6830f4d7ee4e763a56b7718fac00000000\r\n     ```\r\n- [x] Flip txindex from `1` to `0` and back to `1`, ensure full reindexing doesn't happen (on mainnet)\r\n- [x] Do migration of existing legacy `blocks/index` database (on mainnet)\r\n- [x] After building `indexes/txindex`, set txindex=0, restart, and run (on mainnet)\r\n    ```sh\r\n    $ rpc getrawtransaction 1242739fa76fe5f84fdcf2a7557cd059bc89969a0e9b43ded8f01a97ecd8f2db\r\n\r\n    020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff4b03c7e607048413cf5a622f4254432e434f4d2ffabe6d6d37bccddf8230a0579980821ee6ad826521097fa2f3041c7492c1988eab282fc7010000000000000038014b294f56000000000000ffffffff02502ddd4a000000001976a91478ce48f88c94df3762da89dc8498205373a8ce6f88ac0000000000000000266a24aa21a9ed5a272ba104178bac1a18f9af13f1f13a8f727d2726f58f582d08d4b7076b8b7f0120000000000000000000000000000000000000000000000000000000000000000000000000\r\n\r\n    $ rpc getrawtransaction 1242739fa76fe5f84fdcf2a7557cd059bc89969a0e9b43ded8f01a97ecd8f2db | sha256sum\r\n\r\n    7ef9d4596788ca7bbc51bc0e82a0588c78d0115af91d3f73632085716af10cbf  -\r\n    ```\r\n- [x] Set txindex back to 1, restart, ensure no full reindexing happens, and run (on mainnet)\r\n    ```sh\r\n    $ rpc getrawtransaction 1242739fa76fe5f84fdcf2a7557cd059bc89969a0e9b43ded8f01a97ecd8f2db | sha256sum\r\n\r\n    7ef9d4596788ca7bbc51bc0e82a0588c78d0115af91d3f73632085716af10cbf  -\r\n    ``` \r\n- [x] Run `-reindex` after having built `indexes/txindex` (on testnet)",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-111682712",
      "submitted_at": "2018-04-12T21:01:06Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "commented",
      "id": 381697777,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTY5Nzc3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381697777",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-16T18:09:55Z",
      "updated_at": "2018-04-16T18:10:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "@TheBlueMatt Can you please take a look at the last few commits?\r\n",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-381697777",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "mentioned",
      "id": 1576956103,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU3Njk1NjEwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1576956103",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-16T18:09:55Z"
    },
    {
      "event": "subscribed",
      "id": 1576956104,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1NzY5NTYxMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1576956104",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-16T18:09:55Z"
    },
    {
      "event": "commented",
      "id": 382070773,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjA3MDc3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/382070773",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-17T17:11:07Z",
      "updated_at": "2018-04-17T17:11:07Z",
      "author_association": "MEMBER",
      "body": "The fixup commits look fine, I think, except that you should probably add a commit to FlushStateToDisk to call SetBestChain in sync with fDoFullFlush always instead of it having its own timer. This shouldn't effect the wallet as in !fDoFullFlush cases we'll be replaying the blocks on restart anyway, but for this stuff would otherwise mean you still have a race.\r\n\r\nWill do a full re-review when things are squashed/rebased.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-382070773",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "commented",
      "id": 382297921,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjI5NzkyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/382297921",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-18T07:53:49Z",
      "updated_at": "2018-04-18T07:53:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Needs rebase",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-382297921",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzZiNzIwMTlhNzdjNDliMzEyZmMzMjU4ZTE0NWNhNzg4OGU5ZDJj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/236b72019a77c49b312fc3258e145ca7888e9d2c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/236b72019a77c49b312fc3258e145ca7888e9d2c",
      "tree": {
        "sha": "fc4407074a45120929bbb13e85401566d6ac397e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc4407074a45120929bbb13e85401566d6ac397e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/615f7c288414a89cd1dec1d67e0f84abe2fb4c6d",
          "sha": "615f7c288414a89cd1dec1d67e0f84abe2fb4c6d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/615f7c288414a89cd1dec1d67e0f84abe2fb4c6d"
        }
      ],
      "message": "[db] Create separate database for txindex.\n\nThe new TxIndexDB class will be used by a future commit in this\nchange set.",
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-18T19:06:20Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-12T00:58:25Z"
      },
      "sha": "236b72019a77c49b312fc3258e145ca7888e9d2c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1582205802,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU4MjIwNTgwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1582205802",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-18T19:08:32Z"
    },
    {
      "event": "commented",
      "id": 382499614,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjQ5OTYxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/382499614",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-18T19:19:44Z",
      "updated_at": "2018-04-18T19:19:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "@TheBlueMatt While that sounds reasonable, I don't think there's a race here because we are writing a locator and the TxIndex will sync from the locator fork point to the chain tip on restart. Am I missing something?\r\n\r\nI'd like to not expand the scope of the this PR further to modifying flushing logic.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-382499614",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "mentioned",
      "id": 1582227206,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU4MjIyNzIwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1582227206",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-18T19:19:44Z"
    },
    {
      "event": "subscribed",
      "id": 1582227208,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1ODIyMjcyMDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1582227208",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-18T19:19:44Z"
    },
    {
      "event": "commented",
      "id": 382500777,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjUwMDc3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/382500777",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-18T19:23:48Z",
      "updated_at": "2018-04-18T19:23:48Z",
      "author_association": "MEMBER",
      "body": "Indeed, that shouldn't be a real race, but could cuase needless additional sync on startup. Feel free to put it in a second PR, but lets not forget about it.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-382500777",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1582982298,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU4Mjk4MjI5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1582982298",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-19T05:54:55Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2MwNzRlZWRkOGFhNDE0MzM4MzMxNWRhZWU4NmJiYmVhMDBhNWQ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcc074eedd8aa4143383315daee86bbbea00a5d5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fcc074eedd8aa4143383315daee86bbbea00a5d5",
      "tree": {
        "sha": "c8ff65cd6edde5dd57eed6217d3c8beb8f7d7737",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8ff65cd6edde5dd57eed6217d3c8beb8f7d7737"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/236b72019a77c49b312fc3258e145ca7888e9d2c",
          "sha": "236b72019a77c49b312fc3258e145ca7888e9d2c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/236b72019a77c49b312fc3258e145ca7888e9d2c"
        }
      ],
      "message": "[db] Migration for txindex data to new, separate database.",
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-19T07:05:27Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-12T00:58:25Z"
      },
      "sha": "fcc074eedd8aa4143383315daee86bbbea00a5d5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODdhMWQ2YmU5MGMzZDFhZDQ4ODAzNWJmMTU1OTk3NGYwNjY5ZTFi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/387a1d6be90c3d1ad488035bf1559974f0669e1b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/387a1d6be90c3d1ad488035bf1559974f0669e1b",
      "tree": {
        "sha": "5489c44c753bf1ff940126c49c15008a2fe5a5db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5489c44c753bf1ff940126c49c15008a2fe5a5db"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcc074eedd8aa4143383315daee86bbbea00a5d5",
          "sha": "fcc074eedd8aa4143383315daee86bbbea00a5d5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fcc074eedd8aa4143383315daee86bbbea00a5d5"
        }
      ],
      "message": "[index] Create new TxIndex class.\n\nThe TxIndex will be responsible for building the transaction index\nconcurrently with the main validation thread by implementing\nValidationInterface. This does not process blocks concurrently yet.",
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-19T07:09:02Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T18:19:57Z"
      },
      "sha": "387a1d6be90c3d1ad488035bf1559974f0669e1b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDU2YTA3MTEyYTNmNTY5YzNjYWY0OTUxMDBjZmNjNjBkMjU0NmYx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7056a07112a3f569c3caf495100cfcc60d2546f1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7056a07112a3f569c3caf495100cfcc60d2546f1",
      "tree": {
        "sha": "3e8f8318459947cb17297e2e544d993e94529831",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e8f8318459947cb17297e2e544d993e94529831"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/387a1d6be90c3d1ad488035bf1559974f0669e1b",
          "sha": "387a1d6be90c3d1ad488035bf1559974f0669e1b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/387a1d6be90c3d1ad488035bf1559974f0669e1b"
        }
      ],
      "message": "[index] TxIndex initial sync thread.\n\nTxIndex starts up a background thread to get in sync with the block\nindex before blocks are processed through the ValidationInterface.",
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-19T07:09:03Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T18:42:31Z"
      },
      "sha": "7056a07112a3f569c3caf495100cfcc60d2546f1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzlkMWFmMDdlYWRmNmVmZmZmMGVhMWFjNGU3M2ViYTBjOTVmNDc5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/239d1af07eadf6effff0ea1ac4e73eba0c95f479",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/239d1af07eadf6effff0ea1ac4e73eba0c95f479",
      "tree": {
        "sha": "3029dc246ec73b5c7e2fb54b1a1e560cc98cfc6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3029dc246ec73b5c7e2fb54b1a1e560cc98cfc6b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7056a07112a3f569c3caf495100cfcc60d2546f1",
          "sha": "7056a07112a3f569c3caf495100cfcc60d2546f1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7056a07112a3f569c3caf495100cfcc60d2546f1"
        }
      ],
      "message": "[index] Allow TxIndex sync thread to be interrupted.",
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-19T07:09:06Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T18:52:42Z"
      },
      "sha": "239d1af07eadf6effff0ea1ac4e73eba0c95f479"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWM3YmJhZTlmOTU2ZDFlMDM2ZThhZjU1NmE2ZWE1Zjc3MjdjNmZm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ec7bbae9f956d1e036e8af556a6ea5f7727c6ff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec7bbae9f956d1e036e8af556a6ea5f7727c6ff",
      "tree": {
        "sha": "452e4fc397551c2d38be15c247155398e24e0e07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/452e4fc397551c2d38be15c247155398e24e0e07"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/239d1af07eadf6effff0ea1ac4e73eba0c95f479",
          "sha": "239d1af07eadf6effff0ea1ac4e73eba0c95f479",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/239d1af07eadf6effff0ea1ac4e73eba0c95f479"
        }
      ],
      "message": "[index] TxIndex method to wait until caught up.\n\nIn order to preserve getrawtransaction RPC behavior, there needs to be\na way for a thread to ensure the transaction index is in sync with the\ncurrent state of the blockchain.",
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-19T07:09:08Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T19:20:10Z"
      },
      "sha": "0ec7bbae9f956d1e036e8af556a6ea5f7727c6ff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGRhZDBmYTczMDUxNjUxNWZhNmMyYWEwM2JkMDJlNGEyZGNiNzdh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8dad0fa730516515fa6c2aa03bd02e4a2dcb77a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c8dad0fa730516515fa6c2aa03bd02e4a2dcb77a",
      "tree": {
        "sha": "bed4d203f5c8dccb027271f09a4f9c109e511c63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bed4d203f5c8dccb027271f09a4f9c109e511c63"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ec7bbae9f956d1e036e8af556a6ea5f7727c6ff",
          "sha": "0ec7bbae9f956d1e036e8af556a6ea5f7727c6ff",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec7bbae9f956d1e036e8af556a6ea5f7727c6ff"
        }
      ],
      "message": "[init] Initialize and start TxIndex in init code.",
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-19T07:09:10Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T19:29:59Z"
      },
      "sha": "c8dad0fa730516515fa6c2aa03bd02e4a2dcb77a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTIwM2Q0YWY1MDI1MzcxMGE4NTcyN2Q1MGQzYmMxNTA1ZmM3MDE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a203d4af50253710a85727d50d3bc1505fc7017",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3a203d4af50253710a85727d50d3bc1505fc7017",
      "tree": {
        "sha": "0323de2a7e41f0bceb77b13c484819e42b5a3c22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0323de2a7e41f0bceb77b13c484819e42b5a3c22"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8dad0fa730516515fa6c2aa03bd02e4a2dcb77a",
          "sha": "c8dad0fa730516515fa6c2aa03bd02e4a2dcb77a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c8dad0fa730516515fa6c2aa03bd02e4a2dcb77a"
        }
      ],
      "message": "[validation] Replace tx index code in validation code with TxIndex.",
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-19T07:09:12Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T19:41:35Z"
      },
      "sha": "3a203d4af50253710a85727d50d3bc1505fc7017"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTgxOTJiOTU4NmNhYjkyNTk4ODc1NWIwNGY4Y2Q2ZTI3YWFjYjhm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a8192b9586cab925988755b04f8cd6e27aacb8f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1a8192b9586cab925988755b04f8cd6e27aacb8f",
      "tree": {
        "sha": "5163f4ede24722afd423fc64bb4fa4b68cd29ec9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5163f4ede24722afd423fc64bb4fa4b68cd29ec9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a203d4af50253710a85727d50d3bc1505fc7017",
          "sha": "3a203d4af50253710a85727d50d3bc1505fc7017",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3a203d4af50253710a85727d50d3bc1505fc7017"
        }
      ],
      "message": "[index] Move disk IO logic from GetTransaction to TxIndex::FindTx.",
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-19T07:09:15Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-03-30T07:39:08Z"
      },
      "sha": "1a8192b9586cab925988755b04f8cd6e27aacb8f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTM4YjZiZDNmMGQwOGI0OWMyMDBhODhlZGNiZDM3NTExNGRmMTQx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce38b6bd3f0d08b49c200a88edcbd375114df141",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ce38b6bd3f0d08b49c200a88edcbd375114df141",
      "tree": {
        "sha": "ac7c865703c057cc115db99b71b6004d21b13af4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac7c865703c057cc115db99b71b6004d21b13af4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a8192b9586cab925988755b04f8cd6e27aacb8f",
          "sha": "1a8192b9586cab925988755b04f8cd6e27aacb8f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1a8192b9586cab925988755b04f8cd6e27aacb8f"
        }
      ],
      "message": "[rpc] Public interfaces to GetTransaction block until synced.\n\nNow that the transaction index is updated asynchronously, in order to\npreserve the current behavior of public interfaces, the code blocks\nuntil the transaction index is caught up with the current state of the\nblockchain.",
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-19T07:09:17Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T19:49:08Z"
      },
      "sha": "ce38b6bd3f0d08b49c200a88edcbd375114df141"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTUzM2QwNjg0ZWZkMjM3OTdmYTQ5MmQyZjVlNmYxMjBiZTZhZjBh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15533d0684efd23797fa492d2f5e6f120be6af0a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/15533d0684efd23797fa492d2f5e6f120be6af0a",
      "tree": {
        "sha": "1ac6bfbe5b57ba3de60bd3ab49ea9ac0383e8e12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ac6bfbe5b57ba3de60bd3ab49ea9ac0383e8e12"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce38b6bd3f0d08b49c200a88edcbd375114df141",
          "sha": "ce38b6bd3f0d08b49c200a88edcbd375114df141",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ce38b6bd3f0d08b49c200a88edcbd375114df141"
        }
      ],
      "message": "[test] Simple unit test for TxIndex.",
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-19T07:09:19Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T20:00:13Z"
      },
      "sha": "15533d0684efd23797fa492d2f5e6f120be6af0a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjNkZDc2M2JmZTM5MTUwZTM2OTMzMmU0MTUyMTVkMzNmMmEzZWY1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/523dd763bfe39150e369332e415215d33f2a3ef5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/523dd763bfe39150e369332e415215d33f2a3ef5",
      "tree": {
        "sha": "4ce7170e7375abd65651050b671c79517ec651ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ce7170e7375abd65651050b671c79517ec651ce"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15533d0684efd23797fa492d2f5e6f120be6af0a",
          "sha": "15533d0684efd23797fa492d2f5e6f120be6af0a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/15533d0684efd23797fa492d2f5e6f120be6af0a"
        }
      ],
      "message": "[doc] Include txindex changes in the release notes.",
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-19T07:09:22Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-03-08T18:57:26Z"
      },
      "sha": "523dd763bfe39150e369332e415215d33f2a3ef5"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1583074570,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTU4MzA3NDU3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1583074570",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-19T07:09:32Z"
    },
    {
      "event": "reviewed",
      "id": 113649547,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTEzNjQ5NTQ3",
      "url": null,
      "actor": null,
      "commit_id": "fcc074eedd8aa4143383315daee86bbbea00a5d5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 523dd763bfe39150e369332e415215d33f2a3ef5 despite the comments. I think its correct as-is now, but there's a few things that I think are rough API edges that would be nice to get cleanup on.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#pullrequestreview-113649547",
      "submitted_at": "2018-04-19T18:06:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
    },
    {
      "event": "commented",
      "id": 382920577,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjkyMDU3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/382920577",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-20T00:12:41Z",
      "updated_at": "2018-04-20T00:12:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Closing and re-opening in #13033 because this has stopped loading for people.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-382920577",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11857"
    },
    {
      "event": "closed",
      "id": 1585062608,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTU4NTA2MjYwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1585062608",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-20T00:12:41Z"
    },
    {
      "event": "removed_from_project",
      "id": 1585186104,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50MTU4NTE4NjEwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1585186104",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-20T02:14:22Z",
      "project_card": {
        "id": 8381955,
        "url": "https://api.github.com/projects/columns/cards/8381955",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 1595444423,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE1OTU0NDQ0MjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1595444423",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a07e8caa5d5000286604458e6887f57fec7fdcbb",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a07e8caa5d5000286604458e6887f57fec7fdcbb",
      "created_at": "2018-04-26T01:48:52Z"
    },
    {
      "event": "referenced",
      "id": 1605203516,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE2MDUyMDM1MTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1605203516",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "598db389c33e5e90783ef1223df2eeab095ed622",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/598db389c33e5e90783ef1223df2eeab095ed622",
      "created_at": "2018-05-02T11:13:07Z"
    },
    {
      "event": "referenced",
      "id": 3431716046,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MzE3MTYwNDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3431716046",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d1193cf4c4705c3b4317b89f4409f3d5c166d20b",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/d1193cf4c4705c3b4317b89f4409f3d5c166d20b",
      "created_at": "2020-06-10T22:38:05Z"
    },
    {
      "event": "referenced",
      "id": 3440033952,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NDAwMzM5NTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3440033952",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "49089b77486b504f6ee858ad7e0a3186d2bfc43d",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/49089b77486b504f6ee858ad7e0a3186d2bfc43d",
      "created_at": "2020-06-12T21:47:05Z"
    },
    {
      "event": "referenced",
      "id": 3441031851,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NDEwMzE4NTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3441031851",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3a7480f7c571ffb06bd7413dea120b08ae2f2523",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/3a7480f7c571ffb06bd7413dea120b08ae2f2523",
      "created_at": "2020-06-13T18:29:29Z"
    },
    {
      "event": "referenced",
      "id": 3441841346,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NDE4NDEzNDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3441841346",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f25b9a74479dc827a0d1eda17f75e260887f2431",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/f25b9a74479dc827a0d1eda17f75e260887f2431",
      "created_at": "2020-06-14T16:37:02Z"
    },
    {
      "event": "referenced",
      "id": 3441844712,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0NDE4NDQ3MTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3441844712",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9b825c8bb73d4eea6a0d18ff39075a14ad6b0bf2",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/9b825c8bb73d4eea6a0d18ff39075a14ad6b0bf2",
      "created_at": "2020-06-14T16:41:31Z"
    },
    {
      "event": "referenced",
      "id": 4780989814,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ3ODA5ODk4MTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4780989814",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "29244249245c4a625a8210b24235a14601d73e7c",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/29244249245c4a625a8210b24235a14601d73e7c",
      "created_at": "2021-05-21T19:20:42Z"
    },
    {
      "event": "referenced",
      "id": 4780989846,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ3ODA5ODk4NDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4780989846",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6f4ea3388e0e92008190d66a9ec96ca4233895ec",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/6f4ea3388e0e92008190d66a9ec96ca4233895ec",
      "created_at": "2021-05-21T19:20:42Z"
    },
    {
      "event": "referenced",
      "id": 4791306344,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ3OTEzMDYzNDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4791306344",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f3ce0156a1edb8378dc4415700b4d0ca25b1ff78",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/f3ce0156a1edb8378dc4415700b4d0ca25b1ff78",
      "created_at": "2021-05-25T09:13:11Z"
    },
    {
      "event": "referenced",
      "id": 4791837104,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ3OTE4MzcxMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4791837104",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7ff6515c8814210010bc4f4f02f32cf22d20e9d6",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/7ff6515c8814210010bc4f4f02f32cf22d20e9d6",
      "created_at": "2021-05-25T10:50:48Z"
    },
    {
      "event": "referenced",
      "id": 4847056021,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4NDcwNTYwMjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4847056021",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0f9f133f7803bc531341bf7ef5691ce7428c0af2",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/0f9f133f7803bc531341bf7ef5691ce7428c0af2",
      "created_at": "2021-06-05T18:49:34Z"
    },
    {
      "event": "referenced",
      "id": 4847056030,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4NDcwNTYwMzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4847056030",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "531bc38e59f9e2ca0350cec5d7145f506e16dfb5",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/531bc38e59f9e2ca0350cec5d7145f506e16dfb5",
      "created_at": "2021-06-05T18:49:34Z"
    },
    {
      "event": "referenced",
      "id": 4847082684,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4NDcwODI2ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4847082684",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "56bd5aea1b7267a6077dd06cf31088bc16290ec8",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/56bd5aea1b7267a6077dd06cf31088bc16290ec8",
      "created_at": "2021-06-05T19:13:43Z"
    },
    {
      "event": "referenced",
      "id": 4937155173,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ5MzcxNTUxNzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4937155173",
      "actor": {
        "login": "gades",
        "id": 4200730,
        "node_id": "MDQ6VXNlcjQyMDA3MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4200730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gades",
        "html_url": "https://github.com/gades",
        "followers_url": "https://api.github.com/users/gades/followers",
        "following_url": "https://api.github.com/users/gades/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gades/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gades/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gades/subscriptions",
        "organizations_url": "https://api.github.com/users/gades/orgs",
        "repos_url": "https://api.github.com/users/gades/repos",
        "events_url": "https://api.github.com/users/gades/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gades/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "23fa5cdc7bee27eb5922ebba7373d62357dbcea0",
      "commit_url": "https://api.github.com/repos/cosanta/cosanta-core/commits/23fa5cdc7bee27eb5922ebba7373d62357dbcea0",
      "created_at": "2021-06-24T22:44:44Z"
    },
    {
      "event": "locked",
      "id": 5271798525,
      "node_id": "LOE_lADOABII584QukuyzwAAAAE6OUL9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271798525",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T11:53:20Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155908730",
      "pull_request_review_id": 82311538,
      "id": 155908730,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTkwODczMA==",
      "diff_hunk": "@@ -350,6 +351,10 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n+    if (g_txindex) {\n+        g_txindex->BlockUntilSyncedToCurrentChain();",
      "path": "src/rest.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ae276cead580e459d881db5b7439b618ec0854a6",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Instead of blocking, give 503?",
      "created_at": "2017-12-09T01:32:57Z",
      "updated_at": "2018-04-19T07:09:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r155908730",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155908730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155915071",
      "pull_request_review_id": 82318411,
      "id": 155915071,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTkxNTA3MQ==",
      "diff_hunk": "@@ -1426,9 +1433,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 if (fRequestShutdown) break;\n \n-                // LoadBlockIndex will load fTxIndex from the db, or set it if\n+                // LoadBlockIndex will load fHavePruned if we've ever removed a",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ae276cead580e459d881db5b7439b618ec0854a6",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Comment incomplete or outdated?",
      "created_at": "2017-12-09T06:51:20Z",
      "updated_at": "2018-04-19T07:09:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r155915071",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155915071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1471,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155936523",
      "pull_request_review_id": 82339759,
      "id": 155936523,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTkzNjUyMw==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <future>\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(const std::shared_ptr<CBlockTreeDB>& db) :\n+    m_db(db), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadTxIndexBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (!best_block_hash.IsNull()) {\n+        auto it = mapBlockIndex.find(best_block_hash);\n+        if (it == mapBlockIndex.end()) {\n+            FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+            return false;\n+        }\n+\n+        const auto pindex = it->second;\n+        m_best_block_index = pindex;\n+\n+        auto chain_tip = chainActive.Tip();\n+        if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            m_synced = true;\n+        }\n+\n+        return true;\n+    }\n+\n+    auto chain_tip = chainActive.Tip();\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index;\n+    m_db->ReadFlag(\"txindex\", f_migrate_index);\n+    if (f_migrate_index) {\n+        m_best_block_index = chain_tip;\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        LogPrintf(\"Syncing txindex with block chain from height %d\\n\",\n+                  pindex ? pindex->nHeight + 1 : 0);\n+\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxIndex(vPos, pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    {\n+        LOCK(cs_main);\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip()...\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    // ...otherwise put a callback in the validation interface queue and wait\n+    // for the queue to drain enough to execute it (indicating we are caught up\n+    // at least with the time we entered this function).\n+    std::promise<void> promise;\n+    CallFunctionInValidationInterfaceQueue([&promise] {\n+        promise.set_value();\n+    });\n+    promise.get_future().wait();\n+\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n+{\n+    return m_db->ReadTxIndex(txid, pos);\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    RegisterValidationInterface(this);",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 226,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "41022ec2770d328c55191f8b1bc36b750e46f9a0",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Move after Init?",
      "created_at": "2017-12-10T01:58:23Z",
      "updated_at": "2018-04-19T07:09:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r155936523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155936523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156239136",
      "pull_request_review_id": 82684125,
      "id": 156239136,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjIzOTEzNg==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <future>\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(const std::shared_ptr<CBlockTreeDB>& db) :\n+    m_db(db), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadTxIndexBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (!best_block_hash.IsNull()) {\n+        auto it = mapBlockIndex.find(best_block_hash);\n+        if (it == mapBlockIndex.end()) {\n+            FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+            return false;\n+        }\n+\n+        const auto pindex = it->second;\n+        m_best_block_index = pindex;\n+\n+        auto chain_tip = chainActive.Tip();\n+        if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            m_synced = true;\n+        }\n+\n+        return true;\n+    }\n+\n+    auto chain_tip = chainActive.Tip();\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index;\n+    m_db->ReadFlag(\"txindex\", f_migrate_index);\n+    if (f_migrate_index) {\n+        m_best_block_index = chain_tip;\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        LogPrintf(\"Syncing txindex with block chain from height %d\\n\",\n+                  pindex ? pindex->nHeight + 1 : 0);\n+\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxIndex(vPos, pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    {\n+        LOCK(cs_main);\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip()...\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    // ...otherwise put a callback in the validation interface queue and wait\n+    // for the queue to drain enough to execute it (indicating we are caught up\n+    // at least with the time we entered this function).\n+    std::promise<void> promise;\n+    CallFunctionInValidationInterfaceQueue([&promise] {\n+        promise.set_value();\n+    });\n+    promise.get_future().wait();\n+\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n+{\n+    return m_db->ReadTxIndex(txid, pos);\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    RegisterValidationInterface(this);",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 226,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "41022ec2770d328c55191f8b1bc36b750e46f9a0",
      "in_reply_to_id": 155936523,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, this has to be registered before `m_synced` is set to true in Init.",
      "created_at": "2017-12-12T00:11:43Z",
      "updated_at": "2018-04-19T07:09:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156239136",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156239136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156239250",
      "pull_request_review_id": 82684252,
      "id": 156239250,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjIzOTI1MA==",
      "diff_hunk": "@@ -350,6 +351,10 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n+    if (g_txindex) {\n+        g_txindex->BlockUntilSyncedToCurrentChain();",
      "path": "src/rest.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ae276cead580e459d881db5b7439b618ec0854a6",
      "in_reply_to_id": 155908730,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's not really unavailable, just that the background process needs to catch up, which should happen quickly.",
      "created_at": "2017-12-12T00:12:34Z",
      "updated_at": "2018-04-19T07:09:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156239250",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156239250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156541766",
      "pull_request_review_id": 83036066,
      "id": 156541766,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU0MTc2Ng==",
      "diff_hunk": "@@ -1426,9 +1433,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 if (fRequestShutdown) break;\n \n-                // LoadBlockIndex will load fTxIndex from the db, or set it if\n+                // LoadBlockIndex will load fHavePruned if we've ever removed a",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ae276cead580e459d881db5b7439b618ec0854a6",
      "in_reply_to_id": 155915071,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed.",
      "created_at": "2017-12-13T01:14:22Z",
      "updated_at": "2018-04-19T07:09:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156541766",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156541766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1471,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156770888",
      "pull_request_review_id": 83303997,
      "id": 156770888,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njc3MDg4OA==",
      "diff_hunk": "@@ -424,3 +425,129 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n+    if (Read(DB_BEST_BLOCK, hash)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        hash.SetNull();\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool TxIndexDB::WriteBestBlockHash(const uint256& hash) {\n+    return Write(DB_BEST_BLOCK, hash);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            break;\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+            int percentage_done = (int)(high * 100.0 / 65536.0 + 0.5);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"[%d%%]...\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!pcursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size) {\n+            WriteBatch(batch_newdb);\n+            batch_newdb.Clear();\n+            CompactRange(prev_key_newdb, key);\n+            prev_key_newdb = key;\n+        }\n+        if (batch_olddb.SizeEstimate() > batch_size) {",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 110,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "e95ed5ac89e1393f44c32a3ee5d026c1088477f1",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Separating these if statements loses coherency - if we crash we may have a bogus txindex and no way to detect it. Should likely instead do if (batch_newdb.SizeEstimate() + batch_olddb.SizeEstimate() > batch_size)........",
      "created_at": "2017-12-13T20:16:59Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156770888",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156770888"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 526,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156804378",
      "pull_request_review_id": 83341524,
      "id": 156804378,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjgwNDM3OA==",
      "diff_hunk": "@@ -424,3 +425,129 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n+    if (Read(DB_BEST_BLOCK, hash)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        hash.SetNull();\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool TxIndexDB::WriteBestBlockHash(const uint256& hash) {\n+    return Write(DB_BEST_BLOCK, hash);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            break;\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+            int percentage_done = (int)(high * 100.0 / 65536.0 + 0.5);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"[%d%%]...\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!pcursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size) {\n+            WriteBatch(batch_newdb);\n+            batch_newdb.Clear();\n+            CompactRange(prev_key_newdb, key);\n+            prev_key_newdb = key;\n+        }\n+        if (batch_olddb.SizeEstimate() > batch_size) {",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 110,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "e95ed5ac89e1393f44c32a3ee5d026c1088477f1",
      "in_reply_to_id": 156770888,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch.",
      "created_at": "2017-12-13T22:26:59Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156804378",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156804378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 526,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159895945",
      "pull_request_review_id": 86924561,
      "id": 159895945,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg5NTk0NQ==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[db] Create separate database for txindex.\"\r\n\r\nMaybe change to `const auto& tuple` to avoid a copy while iterating.\r\n  ",
      "created_at": "2018-01-05T15:01:03Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159895945",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159895945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159897305",
      "pull_request_review_id": 86924561,
      "id": 159897305,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg5NzMwNQ==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[db] Create separate database for txindex.\"\r\n\r\nMaybe declare const and add comment (16MiB).",
      "created_at": "2018-01-05T15:06:43Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159897305",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159897305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159897839",
      "pull_request_review_id": 86924561,
      "id": 159897839,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg5NzgzOQ==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[db] Create separate database for txindex.\"\r\n\r\nMaybe log an error in this case. I don't think it would be expected for pcursor->Valid() to return true but pcursor->GetKey to fail.",
      "created_at": "2018-01-05T15:09:28Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159897839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159897839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 495,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159900328",
      "pull_request_review_id": 86924561,
      "id": 159900328,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkwMDMyOA==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            break;\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+            int percentage_done = (int)(high * 100.0 / 65536.0 + 0.5);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"[%d%%]...\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!pcursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size || batch_olddb.SizeEstimate() > batch_size) {\n+            WriteBatch(batch_newdb);\n+            batch_newdb.Clear();\n+            CompactRange(prev_key_newdb, key);\n+            prev_key_newdb = key;\n+\n+            block_tree_db.WriteBatch(batch_olddb);\n+            batch_olddb.Clear();\n+            block_tree_db.CompactRange(prev_key_olddb, key);\n+            prev_key_olddb = key;\n+        }\n+    }\n+\n+    WriteBatch(batch_newdb);\n+    CompactRange(begin_key, key);\n+    block_tree_db.WriteBatch(batch_olddb);\n+    block_tree_db.CompactRange(begin_key, key);",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[db] Create separate database for txindex.\"\r\n\r\nThis is duplicating code inside the for loop, and also skipping the last compact range on the old db. Maybe just flush and compact once at the top of the loop:\r\n\r\n```c++\r\nfor (pcursor->Seek(begin_key);; pcursor->Next()) {\r\n    if (!pcursor->Valid() || batch_newdb.SizeEstimate()...) {\r\n        ...flush and compact...\r\n    }\r\n    if (!pcursor->Valid()) break;\r\n    ...move entry at cursor...\r\n}\r\n```\r\n  ",
      "created_at": "2018-01-05T15:20:13Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159900328",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159900328"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 540,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159901942",
      "pull_request_review_id": 86924561,
      "id": 159901942,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkwMTk0Mg==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[db] Create separate database for txindex.\"\r\n\r\nUnclear why migration should be tied to txindex flag. At first glance, it would seem simpler to reason about possible states and also more robust if the code just always moved DB_TXINDEX entries from the old location to the new location independent of the flag. Maybe add a code comment here to clarify rationale.\r\n  ",
      "created_at": "2018-01-05T15:26:46Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159901942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159901942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159904033",
      "pull_request_review_id": 86924561,
      "id": 159904033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkwNDAzMw==",
      "diff_hunk": "@@ -142,9 +142,15 @@ class TxIndexDB : public CDBWrapper\n     /// Write a batch of transaction positions to the DB.\n     bool WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos);\n \n+    /// Read the best block hash of the chain that the txindex is in sync with.\n+    bool ReadBestBlockHash(uint256& hash) const;\n+\n+    /// Write the best block hash of the chain that the txindex is in sync with.\n+    bool WriteBestBlockHash(const uint256& block_hash);\n+\n     /// Migrate txindex data from the block tree DB, where it may be for older nodes that have not\n     /// been upgraded yet to the new database.\n-    bool MigrateData(CBlockTreeDB& block_tree_db);\n+    bool MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash);",
      "path": "src/txdb.h",
      "position": null,
      "original_position": 13,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "0f77eab3cedfbf9e75ce8c15fc837da09a1cb952",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[db] Methods on TxIndexDB to persist best block hash. \"\r\n\r\nIs this a mistake? Probably shouldn't be adding an unused parameter to an unrelated method in this commit.\r\n  \r\n  ",
      "created_at": "2018-01-05T15:34:31Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159904033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159904033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159912603",
      "pull_request_review_id": 86924561,
      "id": 159912603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkxMjYwMw==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] Create new TxIndex class.\"\r\n\r\nMaybe restructure the code to get rid of this early successful return. It's a little confusing, and also not clear if it's 100% correct. For example I would think that if best_block_hash and chain_tip are both null, m_synced should still be set to true below.\r\n  ",
      "created_at": "2018-01-05T16:07:29Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159912603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159912603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159913072",
      "pull_request_review_id": 86924561,
      "id": 159913072,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkxMzA3Mg==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (!chain_tip || pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] Create new TxIndex class.\"\r\n\r\nCould `const auto&` to avoid a copy.",
      "created_at": "2018-01-05T16:09:29Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159913072",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159913072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159915333",
      "pull_request_review_id": 86924561,
      "id": 159915333,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkxNTMzMw==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (!chain_tip || pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] Create new TxIndex class.\"\r\n\r\nConsider moving WriteBestBlockHash call out to caller so the stored best block and m_best_block_index get updated together. It's a little unexpected to see one value written without the other. Might want to rename this method to `WriteBlockTxns` if you do this.\r\n  ",
      "created_at": "2018-01-05T16:19:07Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159915333",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159915333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159915638",
      "pull_request_review_id": 86924561,
      "id": 159915638,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkxNTYzOA==",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <future>\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(const std::shared_ptr<CBlockTreeDB>& db) :\n+    m_db(db), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadTxIndexBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (!best_block_hash.IsNull()) {\n+        auto it = mapBlockIndex.find(best_block_hash);\n+        if (it == mapBlockIndex.end()) {\n+            FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+            return false;\n+        }\n+\n+        const auto pindex = it->second;\n+        m_best_block_index = pindex;\n+\n+        auto chain_tip = chainActive.Tip();\n+        if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            m_synced = true;\n+        }\n+\n+        return true;\n+    }\n+\n+    auto chain_tip = chainActive.Tip();\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index;\n+    m_db->ReadFlag(\"txindex\", f_migrate_index);\n+    if (f_migrate_index) {\n+        m_best_block_index = chain_tip;\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        LogPrintf(\"Syncing txindex with block chain from height %d\\n\",\n+                  pindex ? pindex->nHeight + 1 : 0);\n+\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxIndex(vPos, pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    {\n+        LOCK(cs_main);\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip()...\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    // ...otherwise put a callback in the validation interface queue and wait\n+    // for the queue to drain enough to execute it (indicating we are caught up\n+    // at least with the time we entered this function).\n+    std::promise<void> promise;\n+    CallFunctionInValidationInterfaceQueue([&promise] {\n+        promise.set_value();\n+    });\n+    promise.get_future().wait();\n+\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n+{\n+    return m_db->ReadTxIndex(txid, pos);\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    RegisterValidationInterface(this);",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 226,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "41022ec2770d328c55191f8b1bc36b750e46f9a0",
      "in_reply_to_id": 155936523,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] Create new TxIndex class.\"\r\n\r\n>No, this has to be registered before m_synced is set to true in Init.\r\n\r\nDefinitely worth noting this in a code comment. Also maybe m_synced should be called m_initialized or m_started to be clearer that it changes from false to true just once on startup, and isn't updated in an ongoing way.\r\n\r\n  \r\n  ",
      "created_at": "2018-01-05T16:20:16Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159915638",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159915638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159917226",
      "pull_request_review_id": 86924561,
      "id": 159917226,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkxNzIyNg==",
      "diff_hunk": "@@ -29,6 +29,7 @@ static const char DB_HEAD_BLOCKS = 'H';\n static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n+static const char DB_TXINDEX_BEST_BLOCK = 'T';",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] Create new TxIndex class.\"\r\n\r\nWhy use a different code for DB_TXINDEX_BEST_BLOCK than DB_BEST_BLOCK? Why even define a new constant at all? It seems strange that the new txindex format would diverge unnecessarily from the old format here when it isn't doing do that in other places. Should add a code comment explaining if there is a reason.",
      "created_at": "2018-01-05T16:27:02Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159917226",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159917226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159923255",
      "pull_request_review_id": 86924561,
      "id": 159923255,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkyMzI1NQ==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (!chain_tip || pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    auto best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] Create new TxIndex class.\"\r\n\r\nI'm not sure this case and the one above should be errors given that BlockConnected calls are queued up in the notification thread and may not be up to date with chainActive (which is what ThreadSync syncs toward). Seems like it would be right (and simpler) to just call WriteBlock unconditionally here.\r\n  \r\n  ",
      "created_at": "2018-01-05T16:50:18Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159923255",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159923255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160286747",
      "pull_request_review_id": 87376715,
      "id": 160286747,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDI4Njc0Nw==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "in_reply_to_id": 159912603,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I moved the check for null `chain_tip` up to fix that case. However, I still think the early return here is necessary.",
      "created_at": "2018-01-08T23:50:25Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160286747",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160286747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160286762",
      "pull_request_review_id": 87376736,
      "id": 160286762,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDI4Njc2Mg==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (!chain_tip || pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "in_reply_to_id": 159913072,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2018-01-08T23:50:32Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160286762",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160286762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287005",
      "pull_request_review_id": 87376999,
      "id": 160287005,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDI4NzAwNQ==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (!chain_tip || pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    auto best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "in_reply_to_id": 159923255,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This isn't checking against chainActive, it is just asserting that BlockConnected gets called with blocks in order (even if chainActive is ahead). It's important to note that if the BlockConnected callbacks are running, then `m_synced` is true an `ThreadSync` has exited. I added more comments to these fields/methods in the header file to hopefully make that more clear.",
      "created_at": "2018-01-08T23:52:05Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287005",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287005"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287130",
      "pull_request_review_id": 87377151,
      "id": 160287130,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDI4NzEzMA==",
      "diff_hunk": "@@ -29,6 +29,7 @@ static const char DB_HEAD_BLOCKS = 'H';\n static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n+static const char DB_TXINDEX_BEST_BLOCK = 'T';",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "in_reply_to_id": 159917226,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, that wasn't even used. Left over from a previous version where the database wasn't split out.",
      "created_at": "2018-01-08T23:52:59Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287130",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287161",
      "pull_request_review_id": 87377189,
      "id": 160287161,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDI4NzE2MQ==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": 159895945,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2018-01-08T23:53:09Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287161",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287161"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287269",
      "pull_request_review_id": 87377320,
      "id": 160287269,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDI4NzI2OQ==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": 159901942,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I elaborated on the comment. I think this is the best way to determine whether a migration is necessary. LMK if you think it needs further explanation.",
      "created_at": "2018-01-08T23:54:02Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287269",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287269"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287498",
      "pull_request_review_id": 87377606,
      "id": 160287498,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDI4NzQ5OA==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": 159897305,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2018-01-08T23:55:47Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287498",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287605",
      "pull_request_review_id": 87377744,
      "id": 160287605,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDI4NzYwNQ==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": 159897839,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you are right that this should never happen, so I opted to return an error instead of logging and completing the migration.",
      "created_at": "2018-01-08T23:56:38Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287605",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 495,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287986",
      "pull_request_review_id": 87378208,
      "id": 160287986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDI4Nzk4Ng==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            break;\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+            int percentage_done = (int)(high * 100.0 / 65536.0 + 0.5);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"[%d%%]...\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!pcursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size || batch_olddb.SizeEstimate() > batch_size) {\n+            WriteBatch(batch_newdb);\n+            batch_newdb.Clear();\n+            CompactRange(prev_key_newdb, key);\n+            prev_key_newdb = key;\n+\n+            block_tree_db.WriteBatch(batch_olddb);\n+            batch_olddb.Clear();\n+            block_tree_db.CompactRange(prev_key_olddb, key);\n+            prev_key_olddb = key;\n+        }\n+    }\n+\n+    WriteBatch(batch_newdb);\n+    CompactRange(begin_key, key);\n+    block_tree_db.WriteBatch(batch_olddb);\n+    block_tree_db.CompactRange(begin_key, key);",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": 159900328,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, the logic gets kind of tricky since there's also the early break if the cursor is valid but iterates past the DB_TXINDEX range. Also the CompactRange after the loop compacts over the entire range, not just from the previous batch write point. What do you mean that it skips the last compact range on the old DB? It shouldn't.\r\n\r\nThis code was mostly copied from `CCoinsViewDB::Upgrade` if that wasn't clear.\r\n  ",
      "created_at": "2018-01-08T23:59:25Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287986",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 540,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160288280",
      "pull_request_review_id": 87378587,
      "id": 160288280,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDI4ODI4MA==",
      "diff_hunk": "@@ -142,9 +142,15 @@ class TxIndexDB : public CDBWrapper\n     /// Write a batch of transaction positions to the DB.\n     bool WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos);\n \n+    /// Read the best block hash of the chain that the txindex is in sync with.\n+    bool ReadBestBlockHash(uint256& hash) const;\n+\n+    /// Write the best block hash of the chain that the txindex is in sync with.\n+    bool WriteBestBlockHash(const uint256& block_hash);\n+\n     /// Migrate txindex data from the block tree DB, where it may be for older nodes that have not\n     /// been upgraded yet to the new database.\n-    bool MigrateData(CBlockTreeDB& block_tree_db);\n+    bool MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash);",
      "path": "src/txdb.h",
      "position": null,
      "original_position": 13,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "0f77eab3cedfbf9e75ce8c15fc837da09a1cb952",
      "in_reply_to_id": 159904033,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It does get used. The `MigrateData` implementation is modified to write the block hash in this commit before deleting the txindex flag from the old DB.",
      "created_at": "2018-01-09T00:01:43Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160288280",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160288280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160288890",
      "pull_request_review_id": 87379326,
      "id": 160288890,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDI4ODg5MA==",
      "diff_hunk": "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (!chain_tip || pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "in_reply_to_id": 159915333,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I kind of prefer to keep the DB writes together. I'd hoped that the access pattern would make it clear:\r\n\r\n```c++\r\nif (WriteBlock(*block, pindex)) {\r\n    m_best_block_index = pindex;\r\n}\r\n```",
      "created_at": "2018-01-09T00:06:21Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160288890",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160288890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161027360",
      "pull_request_review_id": 88249616,
      "id": 161027360,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTAyNzM2MA==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": 159901942,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[db] Create separate database for txindex.\"\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/11857#discussion_r159901942\r\n\r\n>> Unclear why migration should be tied to txindex flag. At first glance, it would seem simpler to reason about possible states and also more robust if the code just always moved DB_TXINDEX entries from the old location to the new location independent of the flag. Maybe add a code comment here to clarify rationale.\r\n\r\n> I elaborated on the comment. I think this is the best way to determine whether a migration is necessary. LMK if you think it needs further explanation.\r\n\r\nThis still doesn't seem to be saying why the flag needs to be checked. Maybe add \"Do not migrate data if the txindex flag is false, because any data that is found will be stale and not in sync with DB_BEST_BLOCK\" to the comment if that's the explanation.",
      "created_at": "2018-01-11T17:49:21Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r161027360",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161027360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167242419",
      "pull_request_review_id": 95437789,
      "id": 167242419,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzI0MjQxOQ==",
      "diff_hunk": "@@ -177,10 +183,12 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n             }\n             errmsg = \"No such transaction found in the provided block\";\n+        } else if (!g_txindex) {\n+            errmsg = \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n+        } else if (!f_txindex_ready) {\n+            errmsg = \"No such mempool transaction. Blockchain transactions are still in the process of being indexed\";",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 54,
      "original_position": 45,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "c4401fc41422daa17df46e5945c35a55c1e0e8bd",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this have a distinct error code, rather than `RPC_INVALID_ADDRESS_OR_KEY`? If I understand correctly, an RPC consumer should wait a little and try again if this happens. ",
      "created_at": "2018-02-09T14:35:04Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167242419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167242419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167244773",
      "pull_request_review_id": 95437789,
      "id": 167244773,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzI0NDc3Mw==",
      "diff_hunk": "@@ -424,3 +424,132 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n+    if (Read(DB_BEST_BLOCK, hash)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        hash.SetNull();\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool TxIndexDB::WriteBestBlockHash(const uint256& hash) {\n+    return Write(DB_BEST_BLOCK, hash);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. If the flag is not\n+    // set, txindex did not exist or was already migrated.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            return error(\"%s: cannot get key from valid cursor\", __func__);\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.",
      "path": "src/txdb.cpp",
      "position": 130,
      "original_position": 81,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "c4401fc41422daa17df46e5945c35a55c1e0e8bd",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If it really takes 103 minutes on a fast EC2 instance, maybe make it 1%? Or once a minute? QT already shows 1% intervals during the upgrade.",
      "created_at": "2018-02-09T14:43:16Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167244773",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167244773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 546,
      "original_line": 546,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167342688",
      "pull_request_review_id": 95558369,
      "id": 167342688,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzM0MjY4OA==",
      "diff_hunk": "@@ -177,10 +183,12 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n             }\n             errmsg = \"No such transaction found in the provided block\";\n+        } else if (!g_txindex) {\n+            errmsg = \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n+        } else if (!f_txindex_ready) {\n+            errmsg = \"No such mempool transaction. Blockchain transactions are still in the process of being indexed\";",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 54,
      "original_position": 45,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "c4401fc41422daa17df46e5945c35a55c1e0e8bd",
      "in_reply_to_id": 167242419,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, that's right, an RPC consumer should wait until the index is built. Using the `RPC_INVALID_ADDRESS_OR_KEY` error code for the `\"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"` clause also seems odd to me.\r\n\r\nPerhaps the `RPC_IN_WARMUP` makes sense here, or perhaps a new `RPC_INDEX_UNAVAILABLE` error code.",
      "created_at": "2018-02-09T20:50:19Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167342688",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167342688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167346079",
      "pull_request_review_id": 95562771,
      "id": 167346079,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzM0NjA3OQ==",
      "diff_hunk": "@@ -424,3 +424,132 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n+    if (Read(DB_BEST_BLOCK, hash)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        hash.SetNull();\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool TxIndexDB::WriteBestBlockHash(const uint256& hash) {\n+    return Write(DB_BEST_BLOCK, hash);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. If the flag is not\n+    // set, txindex did not exist or was already migrated.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            return error(\"%s: cannot get key from valid cursor\", __func__);\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.",
      "path": "src/txdb.cpp",
      "position": 130,
      "original_position": 81,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "c4401fc41422daa17df46e5945c35a55c1e0e8bd",
      "in_reply_to_id": 167244773,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The percentage shown in the UI is updated with every percent, it's just the log line that shows increments of 10, as it appends to the same line: `[0%]...[10%]...[20%...]`. Alternatively, it could log progress on a separate line every 30 seconds or something like: \"Upgrading txindex database: n% complete\\n\". I kind of prefer that approach, but I copied how it was done for CCoinsViewDB upgrade.",
      "created_at": "2018-02-09T21:07:28Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167346079",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167346079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 546,
      "original_line": 546,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172322571",
      "pull_request_review_id": 101320521,
      "id": 172322571,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjMyMjU3MQ==",
      "diff_hunk": "@@ -1568,6 +1574,12 @@ bool AppInitMain()\n                 return InitError(strLoadError);\n             }\n         }\n+\n+        if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+            auto txindex_db = MakeUnique<TxIndexDB>(nTxIndexCache, false, fReset);\n+            g_txindex.reset(new TxIndex(std::move(txindex_db)));",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "in_reply_to_id": null,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is a lot of moves, since you already move TxIndex::TxIndex. Can you change to create the unique_ptr in the constructor call, e.g.:\r\n\r\n```\r\ng_txindex.reset(new TxIndex(MakeUnique<...>(....));\r\n```\r\n\r\nOr even better, use argument forwarding.",
      "created_at": "2018-03-05T20:45:48Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172322571",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172322571"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1589,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172322782",
      "pull_request_review_id": 101320521,
      "id": 172322782,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjMyMjc4Mg==",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <threadinterrupt.h>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a keyspace in the block index database and records\n+ * the filesystem location of each transaction by transaction hash.\n+ */\n+class TxIndex final : public CValidationInterface\n+{\n+private:\n+    const std::unique_ptr<TxIndexDB> m_db;\n+\n+    /// Whether the index is in sync with the main chain. The flag is flipped\n+    /// from false to true once, after which point this starts processing\n+    /// ValidationInterface notifications to stay in sync.\n+    std::atomic<bool> m_synced;\n+\n+    /// The last block in the chain that the TxIndex is in sync with.\n+    std::atomic<const CBlockIndex*> m_best_block_index;\n+\n+    std::thread m_thread_sync;\n+    CThreadInterrupt m_interrupt;\n+\n+    /// Initialize internal state from the database and block index.\n+    bool Init();\n+\n+    /// Sync the tx index with the block index starting from the current best\n+    /// block. Intended to be run in its own thread, m_thread_sync, and can be\n+    /// interrupted with m_interrupt. Once the txindex gets in sync, the\n+    /// m_synced flag is set and the BlockConnected ValidationInterface callback\n+    /// takes over and the sync thread exits.\n+    void ThreadSync();\n+\n+    /// Write update index entries for a newly connected block.\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex);\n+\n+protected:\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                        const std::vector<CTransactionRef>& txn_conflicted) override;\n+\n+public:\n+    explicit TxIndex(std::unique_ptr<TxIndexDB> db);",
      "path": "src/index/txindex.h",
      "position": null,
      "original_position": 54,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "in_reply_to_id": null,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you make this forwardable?\r\n\r\n```\r\nTxIndex(std::unique_ptr<TxIndexDB> &&db);\r\n```\r\n\r\nOr just create the unique_ptr here, see my other comment regarding g_txindex.reset()",
      "created_at": "2018-03-05T20:46:40Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172322782",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172322782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172323530",
      "pull_request_review_id": 101320521,
      "id": 172323530,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjMyMzUzMA==",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    auto best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    SyncWithValidationInterfaceQueue();",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 217,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "in_reply_to_id": null,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it makes sense to add a logging statement in the path here where the method actually blocks.",
      "created_at": "2018-03-05T20:49:33Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172323530",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172323530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172324778",
      "pull_request_review_id": 101320521,
      "id": 172324778,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjMyNDc3OA==",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    auto best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    SyncWithValidationInterfaceQueue();\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n+{\n+    return m_db->ReadTxPos(txid, pos);\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    // Need to register this ValidationInterface before running Init(), so that\n+    // callbacks are not missed if Init sets m_synced to true.\n+    RegisterValidationInterface(this);\n+    if (!Init()) {\n+        return;\n+    }\n+\n+    m_thread_sync = std::thread(&TraceThread<std::function<void()>>, \"txindex\",\n+                                std::function<void()>(std::bind(&TxIndex::ThreadSync, this)));",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 241,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "in_reply_to_id": null,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Doesn't std::bind already return the right type here?",
      "created_at": "2018-03-05T20:54:10Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172324778",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172324778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172325383",
      "pull_request_review_id": 101320521,
      "id": 172325383,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjMyNTM4Mw==",
      "diff_hunk": "@@ -424,3 +424,132 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);",
      "path": "src/txdb.cpp",
      "position": 19,
      "original_position": 11,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "in_reply_to_id": null,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe you can do `{DB_TXINDEX, txid}` in C++11.",
      "created_at": "2018-03-05T20:56:15Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172325383",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172325383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 435,
      "original_line": 435,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172538666",
      "pull_request_review_id": 101570901,
      "id": 172538666,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjUzODY2Ng==",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    auto best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    SyncWithValidationInterfaceQueue();\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n+{\n+    return m_db->ReadTxPos(txid, pos);\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    // Need to register this ValidationInterface before running Init(), so that\n+    // callbacks are not missed if Init sets m_synced to true.\n+    RegisterValidationInterface(this);\n+    if (!Init()) {\n+        return;\n+    }\n+\n+    m_thread_sync = std::thread(&TraceThread<std::function<void()>>, \"txindex\",\n+                                std::function<void()>(std::bind(&TxIndex::ThreadSync, this)));",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 241,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "in_reply_to_id": 172324778,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch. This came from a copy-paste.",
      "created_at": "2018-03-06T14:47:27Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172538666",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172538666"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172538847",
      "pull_request_review_id": 101571131,
      "id": 172538847,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjUzODg0Nw==",
      "diff_hunk": "@@ -424,3 +424,132 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);",
      "path": "src/txdb.cpp",
      "position": 19,
      "original_position": 11,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "in_reply_to_id": 172325383,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That doesn't seem to work because `Read` is templated and can't infer that the initializer list should be cast to a `std::pair`.",
      "created_at": "2018-03-06T14:48:02Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172538847",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172538847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 435,
      "original_line": 435,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172552215",
      "pull_request_review_id": 101587488,
      "id": 172552215,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjU1MjIxNQ==",
      "diff_hunk": "@@ -1568,6 +1574,12 @@ bool AppInitMain()\n                 return InitError(strLoadError);\n             }\n         }\n+\n+        if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+            auto txindex_db = MakeUnique<TxIndexDB>(nTxIndexCache, false, fReset);\n+            g_txindex.reset(new TxIndex(std::move(txindex_db)));",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "in_reply_to_id": 172322571,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd rather have them on separate lines because I think otherwise there is too much happening on one line (and it would get pretty long).\r\n\r\nRegarding argument forwarding, even if `TxIndex` takes an rvalue-ref, the `std::move` is necessary.",
      "created_at": "2018-03-06T15:25:28Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172552215",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172552215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1589,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172552923",
      "pull_request_review_id": 101588357,
      "id": 172552923,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjU1MjkyMw==",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <threadinterrupt.h>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a keyspace in the block index database and records\n+ * the filesystem location of each transaction by transaction hash.\n+ */\n+class TxIndex final : public CValidationInterface\n+{\n+private:\n+    const std::unique_ptr<TxIndexDB> m_db;\n+\n+    /// Whether the index is in sync with the main chain. The flag is flipped\n+    /// from false to true once, after which point this starts processing\n+    /// ValidationInterface notifications to stay in sync.\n+    std::atomic<bool> m_synced;\n+\n+    /// The last block in the chain that the TxIndex is in sync with.\n+    std::atomic<const CBlockIndex*> m_best_block_index;\n+\n+    std::thread m_thread_sync;\n+    CThreadInterrupt m_interrupt;\n+\n+    /// Initialize internal state from the database and block index.\n+    bool Init();\n+\n+    /// Sync the tx index with the block index starting from the current best\n+    /// block. Intended to be run in its own thread, m_thread_sync, and can be\n+    /// interrupted with m_interrupt. Once the txindex gets in sync, the\n+    /// m_synced flag is set and the BlockConnected ValidationInterface callback\n+    /// takes over and the sync thread exits.\n+    void ThreadSync();\n+\n+    /// Write update index entries for a newly connected block.\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex);\n+\n+protected:\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                        const std::vector<CTransactionRef>& txn_conflicted) override;\n+\n+public:\n+    explicit TxIndex(std::unique_ptr<TxIndexDB> db);",
      "path": "src/index/txindex.h",
      "position": null,
      "original_position": 54,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "in_reply_to_id": 172322782,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I find it clearer to pass by value here, as is recommended by [this StackOverflow post](https://stackoverflow.com/a/8114913). Is there a big benefit to changing the parameter to an rvalue-ref?",
      "created_at": "2018-03-06T15:27:27Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172552923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172552923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172552991",
      "pull_request_review_id": 101588441,
      "id": 172552991,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjU1Mjk5MQ==",
      "diff_hunk": "@@ -0,0 +1,251 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    auto best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    SyncWithValidationInterfaceQueue();",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 217,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "in_reply_to_id": 172323530,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2018-03-06T15:27:38Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172552991",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172552991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173250283",
      "pull_request_review_id": 102409576,
      "id": 173250283,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzI1MDI4Mw==",
      "diff_hunk": "@@ -424,3 +424,132 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n+    if (Read(DB_BEST_BLOCK, hash)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        hash.SetNull();\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool TxIndexDB::WriteBestBlockHash(const uint256& hash) {\n+    return Write(DB_BEST_BLOCK, hash);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. If the flag is not\n+    // set, txindex did not exist or was already migrated.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            return error(\"%s: cannot get key from valid cursor\", __func__);\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.",
      "path": "src/txdb.cpp",
      "position": 130,
      "original_position": 81,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "c4401fc41422daa17df46e5945c35a55c1e0e8bd",
      "in_reply_to_id": 167244773,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I opted to log every 30s.",
      "created_at": "2018-03-08T18:37:00Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173250283",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173250283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 546,
      "original_line": 546,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645421",
      "pull_request_review_id": 102873084,
      "id": 173645421,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0NTQyMQ==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": null,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "remove `static`, that's the opposite of what you want (it reserves `.bss` space)",
      "created_at": "2018-03-11T07:14:40Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645421",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645439",
      "pull_request_review_id": 102873084,
      "id": 173645439,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0NTQzOQ==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": null,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "typo, \"in the old database\"",
      "created_at": "2018-03-11T07:15:53Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645439",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645463",
      "pull_request_review_id": 102873084,
      "id": 173645463,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0NTQ2Mw==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 149,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": null,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is wrong, you have an extra argument that dereferences a nullptr.",
      "created_at": "2018-03-11T07:17:56Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645474",
      "pull_request_review_id": 102873084,
      "id": 173645474,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0NTQ3NA==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());",
      "path": "src/index/txindex.cpp",
      "position": 135,
      "original_position": 157,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": null,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: move this to the ctor (it can take a size to reserve)",
      "created_at": "2018-03-11T07:18:50Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645474",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645479",
      "pull_request_review_id": 102873084,
      "id": 173645479,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0NTQ3OQ==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": null,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: emplace_back",
      "created_at": "2018-03-11T07:19:14Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645479",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645497",
      "pull_request_review_id": 102873084,
      "id": 173645497,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0NTQ5Nw==",
      "diff_hunk": "@@ -126,4 +126,31 @@ class CBlockTreeDB : public CDBWrapper\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n+/** Access to the block database (blocks/index/) */\n+class TxIndexDB : public CDBWrapper\n+{\n+public:\n+    explicit TxIndexDB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    TxIndexDB(const TxIndexDB&) = delete;\n+    TxIndexDB& operator=(const TxIndexDB&) = delete;\n+\n+    /// Read the disk location of the transaction data with the given hash. Returns false if the\n+    /// transaction hash is not indexed.\n+    bool ReadTxPos(const uint256& txid, CDiskTxPos& pos) const;\n+\n+    /// Write a batch of transaction positions to the DB.\n+    bool WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos);",
      "path": "src/txdb.h",
      "position": null,
      "original_position": 27,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": null,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IMO it's weird to mix tx and txn, I would just use tx (and txs) throughout. Up to you though, purely a style thing.",
      "created_at": "2018-03-11T07:20:19Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645497",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645530",
      "pull_request_review_id": 102873084,
      "id": 173645530,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0NTUzMA==",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <threadinterrupt.h>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a keyspace in the block index database and records\n+ * the filesystem location of each transaction by transaction hash.\n+ */\n+class TxIndex final : public CValidationInterface\n+{\n+private:\n+    const std::unique_ptr<TxIndexDB> m_db;\n+\n+    /// Whether the index is in sync with the main chain. The flag is flipped\n+    /// from false to true once, after which point this starts processing\n+    /// ValidationInterface notifications to stay in sync.\n+    std::atomic<bool> m_synced;\n+\n+    /// The last block in the chain that the TxIndex is in sync with.\n+    std::atomic<const CBlockIndex*> m_best_block_index;\n+\n+    std::thread m_thread_sync;\n+    CThreadInterrupt m_interrupt;\n+\n+    /// Initialize internal state from the database and block index.\n+    bool Init();\n+\n+    /// Sync the tx index with the block index starting from the current best\n+    /// block. Intended to be run in its own thread, m_thread_sync, and can be\n+    /// interrupted with m_interrupt. Once the txindex gets in sync, the\n+    /// m_synced flag is set and the BlockConnected ValidationInterface callback\n+    /// takes over and the sync thread exits.\n+    void ThreadSync();\n+\n+    /// Write update index entries for a newly connected block.\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex);\n+\n+protected:\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                        const std::vector<CTransactionRef>& txn_conflicted) override;\n+\n+public:\n+    explicit TxIndex(std::unique_ptr<TxIndexDB> db);",
      "path": "src/index/txindex.h",
      "position": null,
      "original_position": 54,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "in_reply_to_id": 172322782,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right, disregard.",
      "created_at": "2018-03-11T07:22:36Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645530",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645676",
      "pull_request_review_id": 102873084,
      "id": 173645676,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0NTY3Ng==",
      "diff_hunk": "@@ -424,3 +424,132 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n+    if (Read(DB_BEST_BLOCK, hash)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        hash.SetNull();\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool TxIndexDB::WriteBestBlockHash(const uint256& hash) {\n+    return Write(DB_BEST_BLOCK, hash);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. If the flag is not\n+    // set, txindex did not exist or was already migrated.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            return error(\"%s: cannot get key from valid cursor\", __func__);\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+            int percentage_done = (int)(high * 100.0 / 65536.0 + 0.5);\n+            uiInterface.ShowProgress(_(\"Upgrading txindex database\"), percentage_done, true);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"[%d%%]...\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!pcursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size || batch_olddb.SizeEstimate() > batch_size) {\n+            WriteBatch(batch_newdb);",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": null,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The transaction logic throughout is wrong here because there's a data ordering dependency.\r\n\r\nDuring the data migration:\r\n * Write to new new with `fsync = True`\r\n * After new write finishes, you can erase from old db (fsync setting can be left false)\r\n\r\nThis ensures that you can can always scan through the old database and catch up to what's in the new database if there's a crash or you are interrupted. During the non-migration path I think it's fine to have fsync disabled.",
      "created_at": "2018-03-11T07:29:51Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645676",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 523,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645805",
      "pull_request_review_id": 102873084,
      "id": 173645805,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0NTgwNQ==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 162,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": null,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These should both be done in a single `WriteBatch()` call to make them atomic.",
      "created_at": "2018-03-11T07:34:18Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645805",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173645805"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173671296",
      "pull_request_review_id": 102897865,
      "id": 173671296,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY3MTI5Ng==",
      "diff_hunk": "@@ -126,4 +126,31 @@ class CBlockTreeDB : public CDBWrapper\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n+/** Access to the block database (blocks/index/) */\n+class TxIndexDB : public CDBWrapper\n+{\n+public:\n+    explicit TxIndexDB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    TxIndexDB(const TxIndexDB&) = delete;\n+    TxIndexDB& operator=(const TxIndexDB&) = delete;\n+\n+    /// Read the disk location of the transaction data with the given hash. Returns false if the\n+    /// transaction hash is not indexed.\n+    bool ReadTxPos(const uint256& txid, CDiskTxPos& pos) const;\n+\n+    /// Write a batch of transaction positions to the DB.\n+    bool WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos);",
      "path": "src/txdb.h",
      "position": null,
      "original_position": 27,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": 173645497,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree, will change.",
      "created_at": "2018-03-11T21:53:55Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173671296",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173671296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173671927",
      "pull_request_review_id": 102898419,
      "id": 173671927,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY3MTkyNw==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());",
      "path": "src/index/txindex.cpp",
      "position": 135,
      "original_position": 157,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": 173645474,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm pretty sure the `std::vector` constructor that takes a `size_t` creates the vector with `n` elements rather than having a size of 0 and a capacity of `n`.",
      "created_at": "2018-03-11T22:12:03Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173671927",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173671927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173671931",
      "pull_request_review_id": 102898425,
      "id": 173671931,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY3MTkzMQ==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 149,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": 173645463,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks.",
      "created_at": "2018-03-11T22:12:18Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173671931",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173671931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173672075",
      "pull_request_review_id": 102898565,
      "id": 173672075,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY3MjA3NQ==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 162,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": 173645805,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will do.",
      "created_at": "2018-03-11T22:15:48Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173672075",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173672075"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174025542",
      "pull_request_review_id": 103307558,
      "id": 174025542,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDAyNTU0Mg==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());",
      "path": "src/index/txindex.cpp",
      "position": 135,
      "original_position": 157,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": 173645474,
      "user": {
        "login": "eklitzke",
        "id": 2734,
        "node_id": "MDQ6VXNlcjI3MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eklitzke",
        "html_url": "https://github.com/eklitzke",
        "followers_url": "https://api.github.com/users/eklitzke/followers",
        "following_url": "https://api.github.com/users/eklitzke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/eklitzke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/eklitzke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
        "organizations_url": "https://api.github.com/users/eklitzke/orgs",
        "repos_url": "https://api.github.com/users/eklitzke/repos",
        "events_url": "https://api.github.com/users/eklitzke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/eklitzke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's not strictly accurate:\r\n\r\n```\r\n$ g++ --version\r\ng++ (GCC) 7.3.1 20180303 (Red Hat 7.3.1-5)\r\nCopyright (C) 2017 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n$ cat reserve.cc \r\n#include <iostream>\r\n#include <vector>\r\n\r\nstruct Foo {\r\n    int x;\r\n    Foo() :x(1) {}\r\n};\r\n\r\nint main(int argc, char **argv) {\r\n    std::vector<Foo> foovec;\r\n    foovec.reserve(10);\r\n    std::cout << foovec[5].x << std::endl;\r\n    std::cout << foovec.at(5).x << std::endl;\r\n    return 0;\r\n}\r\n\r\n$ g++ reserve.cc \r\n\r\n$ ./a.out \r\n0\r\nterminate called after throwing an instance of 'std::out_of_range'\r\n  what():  vector::_M_range_check: __n (which is 5) >= this->size() (which is 0)\r\nAborted (core dumped)\r\n```\r\n\r\nIn this test `Foo` has a constructor that sets `x` to 1, but as you can see from the first line of output it prints 0 implying that the ctor wasn't actually called. The `.at()` check fails because the element is out of bounds compared to the true size. The standard calls this [\"default insertable\"](http://en.cppreference.com/w/cpp/concept/DefaultInsertable) which I think just means \"not allocator aware\" in which case the default allocator is allowed to just create space for the item.\r\n\r\nEither way it's a nit that you can ignore, but I think the suggestion I made is safe and slightly faster, assuming you actually initialize the elements before accessing them.",
      "created_at": "2018-03-13T06:20:02Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174025542",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174025542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174491001",
      "pull_request_review_id": 88249616,
      "id": 174491001,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDQ5MTAwMQ==",
      "diff_hunk": "@@ -126,4 +126,25 @@ class CBlockTreeDB : public CDBWrapper\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n+/** Access to the block database (blocks/index/) */\n+class TxIndexDB : public CDBWrapper",
      "path": "src/txdb.h",
      "position": null,
      "original_position": 5,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "3c37a4b86232b12ecc15a5a6efde2276a8273735",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[db] Create separate database for txindex.\"\r\n\r\nCommit title could be changed to something like \"Add (unused) TxIndexDB class\" to be more specific. Current title is a little misleading about what the actual change is.",
      "created_at": "2018-03-14T15:03:06Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174491001",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174491001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174494166",
      "pull_request_review_id": 88249616,
      "id": 174494166,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDQ5NDE2Ng==",
      "diff_hunk": "@@ -126,4 +126,25 @@ class CBlockTreeDB : public CDBWrapper\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n+/** Access to the block database (blocks/index/) */\n+class TxIndexDB : public CDBWrapper\n+{\n+public:\n+    explicit TxIndexDB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    TxIndexDB(const TxIndexDB&) = delete;",
      "path": "src/txdb.h",
      "position": null,
      "original_position": 10,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "3c37a4b86232b12ecc15a5a6efde2276a8273735",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[db] Create separate database for txindex.\"\r\n\r\nI think it'd be better to disable copying in `CDBWrapper` instead of here, since the state that's actually unsafe to copy is in that class, not this one.",
      "created_at": "2018-03-14T15:11:45Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174494166",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174494166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174499186",
      "pull_request_review_id": 88249616,
      "id": 174499186,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDQ5OTE4Ng==",
      "diff_hunk": "@@ -424,3 +424,113 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. If the flag is not\n+    // set, txindex did not exist or was already migrated.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "3c37a4b86232b12ecc15a5a6efde2276a8273735",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[db] Create separate database for txindex.\"\r\n\r\nCould say cursor instead of pcursor to avoid more hungarian names.",
      "created_at": "2018-03-14T15:24:23Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174499186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174499186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 489,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174512461",
      "pull_request_review_id": 88249616,
      "id": 174512461,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDUxMjQ2MQ==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            break;\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+            int percentage_done = (int)(high * 100.0 / 65536.0 + 0.5);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"[%d%%]...\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!pcursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size || batch_olddb.SizeEstimate() > batch_size) {\n+            WriteBatch(batch_newdb);\n+            batch_newdb.Clear();\n+            CompactRange(prev_key_newdb, key);\n+            prev_key_newdb = key;\n+\n+            block_tree_db.WriteBatch(batch_olddb);\n+            batch_olddb.Clear();\n+            block_tree_db.CompactRange(prev_key_olddb, key);\n+            prev_key_olddb = key;\n+        }\n+    }\n+\n+    WriteBatch(batch_newdb);\n+    CompactRange(begin_key, key);\n+    block_tree_db.WriteBatch(batch_olddb);\n+    block_tree_db.CompactRange(begin_key, key);",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": 159900328,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159900328\r\n\r\nIn commit \"[db] Create separate database for txindex.\"\r\n\r\n> Hmm, the logic gets kind of tricky since there's also the early break. \r\n\r\nThis doesn't seem that bad in light of the code duplication in the current version of this code, and the fact that the originally duplicated code had a bug that needed to be fixed two places instead of one (missing the \"Sync new DB changes to disk before deleting from old DB\" behavior). \r\n\r\nI think adding new `done` bool variable set to as `!pcursor->Valid() || key.first != DB_TXINDEX`, would make the code change I suggested above even shorter and clearer.\r\n\r\n> What do you mean that it skips the last compact range on the old DB? It shouldn't.\r\n\r\nMy mistake, I don't think I saw the actual line of code I was commenting on.",
      "created_at": "2018-03-14T15:58:11Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174512461",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174512461"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 540,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174521474",
      "pull_request_review_id": 88249616,
      "id": 174521474,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDUyMTQ3NA==",
      "diff_hunk": "@@ -142,9 +142,15 @@ class TxIndexDB : public CDBWrapper\n     /// Write a batch of transaction positions to the DB.\n     bool WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos);\n \n+    /// Read the best block hash of the chain that the txindex is in sync with.\n+    bool ReadBestBlockHash(uint256& hash) const;\n+\n+    /// Write the best block hash of the chain that the txindex is in sync with.\n+    bool WriteBestBlockHash(const uint256& block_hash);\n+\n     /// Migrate txindex data from the block tree DB, where it may be for older nodes that have not\n     /// been upgraded yet to the new database.\n-    bool MigrateData(CBlockTreeDB& block_tree_db);\n+    bool MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash);",
      "path": "src/txdb.h",
      "position": null,
      "original_position": 13,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "0f77eab3cedfbf9e75ce8c15fc837da09a1cb952",
      "in_reply_to_id": 159904033,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159904033\r\n\r\nIn commit \"[db] Methods on TxIndexDB to persist best block hash. \"\r\n\r\n> It does get used.\r\n\r\nMy mistake. IMO, it would make review a little easier if this commit were squashed into the previous commit. I don't think there's benefit to adding the new TxIndexDB class in one commit, and then modifying it to add this simple feature separately.",
      "created_at": "2018-03-14T16:22:53Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174521474",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174521474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174529236",
      "pull_request_review_id": 88249616,
      "id": 174529236,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDUyOTIzNg==",
      "diff_hunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a keyspace in the block index database and records",
      "path": "src/index/txindex.h",
      "position": null,
      "original_position": 16,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "478e5db2d740ba31d1176d8670b3dacfebb5f5fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] Create new TxIndex class.\"\r\n\r\nNot really the \"block index database\" now, but a separate database (unless I'm misinterpreting)?",
      "created_at": "2018-03-14T16:45:34Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174529236",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174529236"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174529930",
      "pull_request_review_id": 88249616,
      "id": 174529930,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDUyOTkzMA==",
      "diff_hunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a keyspace in the block index database and records\n+ * the filesystem location of each transaction by transaction hash.\n+ */\n+class TxIndex final : public CValidationInterface\n+{\n+private:\n+    const std::unique_ptr<TxIndexDB> m_db;\n+\n+    /// Whether the index is in sync with the main chain. The flag is flipped\n+    /// from false to true once, after which point this starts processing\n+    /// ValidationInterface notifications to stay in sync.\n+    std::atomic<bool> m_synced;",
      "path": "src/index/txindex.h",
      "position": 30,
      "original_position": 27,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "478e5db2d740ba31d1176d8670b3dacfebb5f5fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] Create new TxIndex class.\"\r\n\r\nMaybe set to this false here to simplify initialization in the constructor. Similarly for atomic member below.",
      "created_at": "2018-03-14T16:47:35Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174529930",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174529930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 30,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174530719",
      "pull_request_review_id": 88249616,
      "id": 174530719,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDUzMDcxOQ==",
      "diff_hunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a keyspace in the block index database and records\n+ * the filesystem location of each transaction by transaction hash.\n+ */\n+class TxIndex final : public CValidationInterface\n+{\n+private:\n+    const std::unique_ptr<TxIndexDB> m_db;\n+\n+    /// Whether the index is in sync with the main chain. The flag is flipped\n+    /// from false to true once, after which point this starts processing\n+    /// ValidationInterface notifications to stay in sync.\n+    std::atomic<bool> m_synced;\n+\n+    /// The last block in the chain that the TxIndex is in sync with.\n+    std::atomic<const CBlockIndex*> m_best_block_index;\n+\n+    /// Initialize internal state from the database and block index.\n+    bool Init();\n+\n+    /// Write update index entries for a newly connected block.\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex);\n+\n+protected:\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                        const std::vector<CTransactionRef>& txn_conflicted) override;\n+\n+public:\n+    explicit TxIndex(std::unique_ptr<TxIndexDB> db);",
      "path": "src/index/txindex.h",
      "position": null,
      "original_position": 43,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "478e5db2d740ba31d1176d8670b3dacfebb5f5fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] Create new TxIndex class.\"\r\n\r\nMaybe add comment about initialization sequence given the three initialization methods in this class (constructor, `Init`, and `Start`).",
      "created_at": "2018-03-14T16:49:50Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174530719",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174530719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174534066",
      "pull_request_review_id": 88249616,
      "id": 174534066,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDUzNDA2Ng==",
      "diff_hunk": "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    const CBlockIndex* chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    const CBlockIndex* pindex = LookupBlockIndex(best_block_hash);",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "478e5db2d740ba31d1176d8670b3dacfebb5f5fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] Create new TxIndex class.\"\r\n\r\nIt seems hungarian notation can never go away even in new code, given how sticky the `pindex` convention seems to be, but maybe consider calling this `block` or `best_block_index` instead.",
      "created_at": "2018-03-14T16:59:27Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174534066",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174534066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174537635",
      "pull_request_review_id": 88249616,
      "id": 174537635,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDUzNzYzNQ==",
      "diff_hunk": "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    const CBlockIndex* chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    const CBlockIndex* pindex = LookupBlockIndex(best_block_hash);\n+    if (!pindex) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;",
      "path": "src/index/txindex.cpp",
      "position": 134,
      "original_position": 78,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "478e5db2d740ba31d1176d8670b3dacfebb5f5fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] Create new TxIndex class.\"\r\n\r\nIt seems needlessly inefficient and complicated to be creating a vector just to be able to pass a sequence of txids to the `TxIndexDB::WriteTxs` method, which is only called from this one place. It seems like a simpler design might inline the WriteTx method, or pass a block to it, or just not have separate `TxIndexDB` and `TxIndex` classes.",
      "created_at": "2018-03-14T17:09:55Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174537635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174537635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174577538",
      "pull_request_review_id": 88249616,
      "id": 174577538,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDU3NzUzOA==",
      "diff_hunk": "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    const CBlockIndex* chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    const CBlockIndex* pindex = LookupBlockIndex(best_block_hash);\n+    if (!pindex) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos, pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "478e5db2d740ba31d1176d8670b3dacfebb5f5fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] Create new TxIndex class.\"\r\n\r\nWould expand this comment to mention what could actually trigger these errors. Maybe add \"If the errors below are triggered, it means a BlockConnected call has been received for a new block which has ancestor blocks that might never have been added to the transaction index. This could happen if a bug causes BlockConnected notifications to be sent in the wrong order, or if there's an unfortunately timed reorg or invalidateblock call that causes the first BlockConnection notification after shutdown of the initial sync thread to not be an ancestor or direct descendant of chainActive at the time the sync completed.\"",
      "created_at": "2018-03-14T19:05:04Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174577538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174577538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174594791",
      "pull_request_review_id": 88249616,
      "id": 174594791,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDU5NDc5MQ==",
      "diff_hunk": "@@ -10,6 +11,8 @@\n #include <validation.h>\n #include <warnings.h>\n \n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "b381ec3672d6de1b0aeb25ae7b466c4ec079528a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] TxIndex initial sync thread.\"\r\n\r\nCould declare static to avoid creating a linker symbol.",
      "created_at": "2018-03-14T20:10:20Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174594791",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174594791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174596700",
      "pull_request_review_id": 88249616,
      "id": 174596700,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDU5NjcwMA==",
      "diff_hunk": "@@ -1598,15 +1610,22 @@ bool AppInitMain()\n         ::feeEstimator.Read(est_filein);\n     fFeeEstimatesInitialized = true;\n \n-    // ********************************************************* Step 8: load wallet\n+    // ********************************************************* Step 8: start indexers\n+    if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+        auto txindex_db = MakeUnique<TxIndexDB>(nTxIndexCache, false, fReindex);\n+        g_txindex.reset(new TxIndex(std::move(txindex_db)));",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "0ffbc19451a24185e128c42338315e19ebbfe361",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[init] Initialize and start TxIndex in init code.\"\r\n\r\nMight be more consistent to use MakeUnique here too.",
      "created_at": "2018-03-14T20:17:31Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174596700",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174596700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1616,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174598230",
      "pull_request_review_id": 88249616,
      "id": 174598230,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDU5ODIzMA==",
      "diff_hunk": "@@ -1404,16 +1411,22 @@ bool AppInitMain()\n     int64_t nTotalCache = (gArgs.GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = nTotalCache / 8;\n-    nBlockTreeDBCache = std::min(nBlockTreeDBCache, (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxBlockDBAndTxIndexCache : nMaxBlockDBCache) << 20);\n+    int64_t nBlockTreeDBCache = nTotalCache / 16;\n+    nBlockTreeDBCache = std::min(nBlockTreeDBCache, nMaxBlockDBCache << 20);\n     nTotalCache -= nBlockTreeDBCache;\n+    int64_t nTxIndexCache = nTotalCache / 8;\n+    nTxIndexCache = std::min(nTxIndexCache, gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "0ffbc19451a24185e128c42338315e19ebbfe361",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[init] Initialize and start TxIndex in init code.\"\r\n\r\nCould combine lines and shorten by just passing `nTotalCache / 8` directly to min. Same for nBlockTreeDBCache above. ",
      "created_at": "2018-03-14T20:23:12Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174598230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174598230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1418,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174598693",
      "pull_request_review_id": 88249616,
      "id": 174598693,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDU5ODY5Mw==",
      "diff_hunk": "@@ -1404,16 +1411,22 @@ bool AppInitMain()\n     int64_t nTotalCache = (gArgs.GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = nTotalCache / 8;\n-    nBlockTreeDBCache = std::min(nBlockTreeDBCache, (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxBlockDBAndTxIndexCache : nMaxBlockDBCache) << 20);\n+    int64_t nBlockTreeDBCache = nTotalCache / 16;",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "0ffbc19451a24185e128c42338315e19ebbfe361",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[init] Initialize and start TxIndex in init code.\"\r\n\r\nWhat's the reason for halving this even if txindex is disabled?",
      "created_at": "2018-03-14T20:24:58Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174598693",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174598693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1414,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174601865",
      "pull_request_review_id": 88249616,
      "id": 174601865,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYwMTg2NQ==",
      "diff_hunk": "@@ -56,6 +56,10 @@ class TxIndex final : public CValidationInterface\n     /// Destructor interrupts sync thread if running and blocks until it exits.\n     ~TxIndex();\n \n+    /// Blocks the current thread until the transaction index is caught up to\n+    /// the current state of the block chain.\n+    bool BlockUntilSyncedToCurrentChain();",
      "path": "src/index/txindex.h",
      "position": null,
      "original_position": 6,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "e4523cf480273b1ce1677107b5ed53751f9cd6ee",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "[index] TxIndex method to wait until caught up.\r\n\r\nDescription above and function name seem a little misleading since this will only wait to be caught up with validation notifications, and will actually return false immediately during startup. This is probably worth mentioning in the comment above, and maybe in an additional comment where this is called. Could also give this this a less reassuring name like `FinishProcessingCurrentBlock.`",
      "created_at": "2018-03-14T20:37:00Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174601865",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174601865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174604126",
      "pull_request_review_id": 88249616,
      "id": 174604126,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYwNDEyNg==",
      "diff_hunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n+#include <util.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txindex_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n+{\n+    TxIndex txindex(MakeUnique<TxIndexDB>(1 << 20, true));\n+    txindex.Start();\n+\n+    // Allow tx index to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!txindex.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    for (const auto& txn : coinbaseTxns) {\n+        CDiskTxPos postx;\n+        BOOST_CHECK(txindex.FindTx(txn.GetHash(), postx));",
      "path": "src/test/txindex_tests.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f89575ec9f29c0e53e2bf86c00f7227708c5002",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[test] Simple unit test for TxIndex.\"\r\n\r\nWould be good to validate `postx` variable contents here and below.\r\n\r\n",
      "created_at": "2018-03-14T20:45:05Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174604126",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174604126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174606064",
      "pull_request_review_id": 88249616,
      "id": 174606064,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYwNjA2NA==",
      "diff_hunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n+#include <util.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txindex_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n+{\n+    TxIndex txindex(MakeUnique<TxIndexDB>(1 << 20, true));\n+    txindex.Start();\n+\n+    // Allow tx index to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!txindex.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    for (const auto& txn : coinbaseTxns) {\n+        CDiskTxPos postx;\n+        BOOST_CHECK(txindex.FindTx(txn.GetHash(), postx));\n+    }\n+\n+    for (int i = 0; i < 10; i++) {\n+        CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+        std::vector<CMutableTransaction> no_txns;\n+        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+        const CTransaction& txn = *block.vtx[0];\n+\n+        txindex.BlockUntilSyncedToCurrentChain();\n+\n+        CDiskTxPos actual_postx;\n+        BOOST_CHECK(txindex.FindTx(txn.GetHash(), actual_postx));",
      "path": "src/test/txindex_tests.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f89575ec9f29c0e53e2bf86c00f7227708c5002",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[test] Simple unit test for TxIndex.\"\r\n\r\nWould suggest adding a few more simple checks:\r\n\r\n* Test that sync thread actually works. I.e. that if new transactions are added before calling `Start()`, they don't show up, and that they do show up after calling `Start()`.\r\n* Check that transactions are persistent and reloaded correctly if txindex is closed and reopened.\r\n* Check BlockUntilSyncedToCurrentChain return value. Should be false before started, true after.",
      "created_at": "2018-03-14T20:52:28Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174606064",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174606064"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175310704",
      "pull_request_review_id": 104817916,
      "id": 175310704,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTMxMDcwNA==",
      "diff_hunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a keyspace in the block index database and records",
      "path": "src/index/txindex.h",
      "position": null,
      "original_position": 16,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "478e5db2d740ba31d1176d8670b3dacfebb5f5fb",
      "in_reply_to_id": 174529236,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, outdated comment, will fix. An earlier version of this refactor didn't split the DB out, just the logic.",
      "created_at": "2018-03-19T00:04:00Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175310704",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175310704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175312803",
      "pull_request_review_id": 104820170,
      "id": 175312803,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTMxMjgwMw==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            break;\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+            int percentage_done = (int)(high * 100.0 / 65536.0 + 0.5);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"[%d%%]...\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!pcursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size || batch_olddb.SizeEstimate() > batch_size) {\n+            WriteBatch(batch_newdb);\n+            batch_newdb.Clear();\n+            CompactRange(prev_key_newdb, key);\n+            prev_key_newdb = key;\n+\n+            block_tree_db.WriteBatch(batch_olddb);\n+            batch_olddb.Clear();\n+            block_tree_db.CompactRange(prev_key_olddb, key);\n+            prev_key_olddb = key;\n+        }\n+    }\n+\n+    WriteBatch(batch_newdb);\n+    CompactRange(begin_key, key);\n+    block_tree_db.WriteBatch(batch_olddb);\n+    block_tree_db.CompactRange(begin_key, key);",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": 159900328,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have tried a few things, and the approach you describe is not worth the additional control flow complexity IMO. Consider also that the CompactRange calls are over a different range inside and outside of the loop (as noted above) and the newest version of the code adds an additional write to the batch outside of the loop to write the block hash.\r\n\r\nHowever, I understand the argument against duplication, so I instead added a private method extracting the logic:\r\n\r\n```c++\r\nstatic void WriteTxIndexMigrationBatches(TxIndexDB& newdb, CBlockTreeDB& olddb,\r\n                                         CDBBatch& batch_newdb, CDBBatch& batch_olddb,\r\n                                         const std::pair<unsigned char, uint256>& begin_key,\r\n                                         const std::pair<unsigned char, uint256>& end_key)\r\n{\r\n    ...\r\n}\r\n```\r\n\r\nHow do you feel about this approach?",
      "created_at": "2018-03-19T00:49:51Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175312803",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175312803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 540,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175314357",
      "pull_request_review_id": 104820170,
      "id": 175314357,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTMxNDM1Nw==",
      "diff_hunk": "@@ -126,4 +126,25 @@ class CBlockTreeDB : public CDBWrapper\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n+/** Access to the block database (blocks/index/) */\n+class TxIndexDB : public CDBWrapper",
      "path": "src/txdb.h",
      "position": null,
      "original_position": 5,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "3c37a4b86232b12ecc15a5a6efde2276a8273735",
      "in_reply_to_id": 174491001,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2018-03-19T01:20:05Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175314357",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175314357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175314366",
      "pull_request_review_id": 104821859,
      "id": 175314366,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTMxNDM2Ng==",
      "diff_hunk": "@@ -126,4 +126,25 @@ class CBlockTreeDB : public CDBWrapper\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n+/** Access to the block database (blocks/index/) */\n+class TxIndexDB : public CDBWrapper\n+{\n+public:\n+    explicit TxIndexDB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    TxIndexDB(const TxIndexDB&) = delete;",
      "path": "src/txdb.h",
      "position": null,
      "original_position": 10,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "3c37a4b86232b12ecc15a5a6efde2276a8273735",
      "in_reply_to_id": 174494166,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2018-03-19T01:20:14Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175314366",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175314366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175314377",
      "pull_request_review_id": 104821873,
      "id": 175314377,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTMxNDM3Nw==",
      "diff_hunk": "@@ -424,3 +424,113 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. If the flag is not\n+    // set, txindex did not exist or was already migrated.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "3c37a4b86232b12ecc15a5a6efde2276a8273735",
      "in_reply_to_id": 174499186,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2018-03-19T01:20:21Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175314377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175314377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 489,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175314900",
      "pull_request_review_id": 104822453,
      "id": 175314900,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTMxNDkwMA==",
      "diff_hunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a keyspace in the block index database and records\n+ * the filesystem location of each transaction by transaction hash.\n+ */\n+class TxIndex final : public CValidationInterface\n+{\n+private:\n+    const std::unique_ptr<TxIndexDB> m_db;\n+\n+    /// Whether the index is in sync with the main chain. The flag is flipped\n+    /// from false to true once, after which point this starts processing\n+    /// ValidationInterface notifications to stay in sync.\n+    std::atomic<bool> m_synced;\n+\n+    /// The last block in the chain that the TxIndex is in sync with.\n+    std::atomic<const CBlockIndex*> m_best_block_index;\n+\n+    /// Initialize internal state from the database and block index.\n+    bool Init();\n+\n+    /// Write update index entries for a newly connected block.\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex);\n+\n+protected:\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                        const std::vector<CTransactionRef>& txn_conflicted) override;\n+\n+public:\n+    explicit TxIndex(std::unique_ptr<TxIndexDB> db);",
      "path": "src/index/txindex.h",
      "position": null,
      "original_position": 43,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "478e5db2d740ba31d1176d8670b3dacfebb5f5fb",
      "in_reply_to_id": 174530719,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2018-03-19T01:28:22Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175314900",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175314900"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175315199",
      "pull_request_review_id": 104822784,
      "id": 175315199,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTMxNTE5OQ==",
      "diff_hunk": "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    const CBlockIndex* chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    const CBlockIndex* pindex = LookupBlockIndex(best_block_hash);\n+    if (!pindex) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;",
      "path": "src/index/txindex.cpp",
      "position": 134,
      "original_position": 78,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "478e5db2d740ba31d1176d8670b3dacfebb5f5fb",
      "in_reply_to_id": 174537635,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, it could be more efficient, but I feel that this produces the cleanest separation of responsibilities. Another way to do it might be to add a `TxIndexDB::AddTxToBatch(CDBBatch& batch, const uint256& txid, const CDiskTxPos& tx_pos)` method. Would you prefer that?",
      "created_at": "2018-03-19T01:33:16Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175315199",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175315199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175315594",
      "pull_request_review_id": 104823205,
      "id": 175315594,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTMxNTU5NA==",
      "diff_hunk": "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    const CBlockIndex* chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    const CBlockIndex* pindex = LookupBlockIndex(best_block_hash);\n+    if (!pindex) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos, pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "478e5db2d740ba31d1176d8670b3dacfebb5f5fb",
      "in_reply_to_id": 174577538,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll elaborate on the comment, but I don't understand the case you are describing. These checks should always pass as long as the ValidationInterface BlockConnected notifications are sent in order. If there is a race you can think of in the presence of reorgs or shutdowns, we should fix that.",
      "created_at": "2018-03-19T01:39:28Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175315594",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175315594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175316500",
      "pull_request_review_id": 104824172,
      "id": 175316500,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTMxNjUwMA==",
      "diff_hunk": "@@ -10,6 +11,8 @@\n #include <validation.h>\n #include <warnings.h>\n \n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "b381ec3672d6de1b0aeb25ae7b466c4ec079528a",
      "in_reply_to_id": 174594791,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Correct me if I'm wrong, but I assume this could be inlined or something by the compiler if it were not declared static. I tried looking it up briefly and it said something along those lines, but then I got bored because I don't care all that much (something, something ODR-rule?). Will change if you still want.\r\n\r\nAlso, see https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645421.",
      "created_at": "2018-03-19T01:52:36Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175316500",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175316500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175316827",
      "pull_request_review_id": 104824529,
      "id": 175316827,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTMxNjgyNw==",
      "diff_hunk": "@@ -56,6 +56,10 @@ class TxIndex final : public CValidationInterface\n     /// Destructor interrupts sync thread if running and blocks until it exits.\n     ~TxIndex();\n \n+    /// Blocks the current thread until the transaction index is caught up to\n+    /// the current state of the block chain.\n+    bool BlockUntilSyncedToCurrentChain();",
      "path": "src/index/txindex.h",
      "position": null,
      "original_position": 6,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "e4523cf480273b1ce1677107b5ed53751f9cd6ee",
      "in_reply_to_id": 174601865,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, updated comment.",
      "created_at": "2018-03-19T01:57:09Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175316827",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175316827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175316948",
      "pull_request_review_id": 104824682,
      "id": 175316948,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTMxNjk0OA==",
      "diff_hunk": "@@ -1598,15 +1610,22 @@ bool AppInitMain()\n         ::feeEstimator.Read(est_filein);\n     fFeeEstimatesInitialized = true;\n \n-    // ********************************************************* Step 8: load wallet\n+    // ********************************************************* Step 8: start indexers\n+    if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+        auto txindex_db = MakeUnique<TxIndexDB>(nTxIndexCache, false, fReindex);\n+        g_txindex.reset(new TxIndex(std::move(txindex_db)));",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "0ffbc19451a24185e128c42338315e19ebbfe361",
      "in_reply_to_id": 174596700,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2018-03-19T01:58:56Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175316948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175316948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1616,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175317104",
      "pull_request_review_id": 104824887,
      "id": 175317104,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTMxNzEwNA==",
      "diff_hunk": "@@ -1404,16 +1411,22 @@ bool AppInitMain()\n     int64_t nTotalCache = (gArgs.GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = nTotalCache / 8;\n-    nBlockTreeDBCache = std::min(nBlockTreeDBCache, (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxBlockDBAndTxIndexCache : nMaxBlockDBCache) << 20);\n+    int64_t nBlockTreeDBCache = nTotalCache / 16;",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "0ffbc19451a24185e128c42338315e19ebbfe361",
      "in_reply_to_id": 174598693,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right, will revert. I was just kind of making up values here.",
      "created_at": "2018-03-19T02:01:37Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175317104",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175317104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1414,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175492787",
      "pull_request_review_id": 105030585,
      "id": 175492787,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTQ5Mjc4Nw==",
      "diff_hunk": "@@ -0,0 +1,252 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());",
      "path": "src/index/txindex.cpp",
      "position": 135,
      "original_position": 157,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "in_reply_to_id": 173645474,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Have you tried that code sample with `std::vector<Foo> foovec(10);` instead of `std::vector<Foo> foovec; foovec.reserve(10);`? The behavior is different. I assume that is the suggestion you are making, though maybe I misunderstood.",
      "created_at": "2018-03-19T16:11:30Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175492787",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175492787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175609305",
      "pull_request_review_id": 105166914,
      "id": 175609305,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTYwOTMwNQ==",
      "diff_hunk": "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            break;\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+            int percentage_done = (int)(high * 100.0 / 65536.0 + 0.5);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"[%d%%]...\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!pcursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size || batch_olddb.SizeEstimate() > batch_size) {\n+            WriteBatch(batch_newdb);\n+            batch_newdb.Clear();\n+            CompactRange(prev_key_newdb, key);\n+            prev_key_newdb = key;\n+\n+            block_tree_db.WriteBatch(batch_olddb);\n+            batch_olddb.Clear();\n+            block_tree_db.CompactRange(prev_key_olddb, key);\n+            prev_key_olddb = key;\n+        }\n+    }\n+\n+    WriteBatch(batch_newdb);\n+    CompactRange(begin_key, key);\n+    block_tree_db.WriteBatch(batch_olddb);\n+    block_tree_db.CompactRange(begin_key, key);",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "in_reply_to_id": 159900328,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159900328\r\n\r\n> How do you feel about this approach?\r\n\r\nBetter, I'm still not sure why my suggestion doesn't work out, but this takes care of my concern.\r\n\r\n",
      "created_at": "2018-03-19T22:45:16Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175609305",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175609305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 540,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175610366",
      "pull_request_review_id": 105168131,
      "id": 175610366,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTYxMDM2Ng==",
      "diff_hunk": "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    const CBlockIndex* chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    const CBlockIndex* pindex = LookupBlockIndex(best_block_hash);\n+    if (!pindex) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;",
      "path": "src/index/txindex.cpp",
      "position": 134,
      "original_position": 78,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "478e5db2d740ba31d1176d8670b3dacfebb5f5fb",
      "in_reply_to_id": 174537635,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174537635\r\n\r\n> Yes, it could be more efficient, but I feel that this produces the cleanest separation of responsibilities.\r\n\r\nI'm not sure what the separation of responsibilities is actually. If it's important to avoid a more direct write, can you say somewhere in a comment what the separation is supposed to be, and what benefits it provides? This just seems a little more complicated than I would expect it to be.",
      "created_at": "2018-03-19T22:50:48Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175610366",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175610366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175614840",
      "pull_request_review_id": 105173079,
      "id": 175614840,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTYxNDg0MA==",
      "diff_hunk": "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    const CBlockIndex* chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    const CBlockIndex* pindex = LookupBlockIndex(best_block_hash);\n+    if (!pindex) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos, pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "478e5db2d740ba31d1176d8670b3dacfebb5f5fb",
      "in_reply_to_id": 174577538,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174577538\r\n\r\n> I'll elaborate on the comment, but I don't understand the case you are describing\r\n\r\nThe `BlockConnected` handler will drop any notifications as long as `m_synced` is false, but when `m_synced` becomes true, there is no code to clear out the queue, which could be backlogged. So if `m_synced` is set to true after a reorg but before `BlockConnected` calls from the reorg arrive, some initial `BlockConnected` notifications about blocks that aren't descendants of the synced best block could fail.",
      "created_at": "2018-03-19T23:16:21Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175614840",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175614840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175617070",
      "pull_request_review_id": 105175558,
      "id": 175617070,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTYxNzA3MA==",
      "diff_hunk": "@@ -10,6 +11,8 @@\n #include <validation.h>\n #include <warnings.h>\n \n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "b381ec3672d6de1b0aeb25ae7b466c4ec079528a",
      "in_reply_to_id": 174594791,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174594791\r\n\r\n> Correct me if I'm wrong, but I assume this could be inlined or something by the compiler if it were not declared static. I tried looking it up briefly and it said something along those lines, but then I got bored because I don't care all that much (something, something ODR-rule?). Will change if you still want.\r\n\r\nHmm, I guess you and @eklitzke are making me question my sanity, but why would adding `static` here prevent inlining, or \"reserve .bss space\" or do anything along these lines?\r\n\r\nIf this isn't declared static, the compiler doesn't know that there isn't some code in another object file that will access the SYNC_LOG_INTERVAL variable or take its address. So there will necessarily be a SYNC_LOG_INTERVAL symbol in the object file. If it's static, it can just be internal to the object.",
      "created_at": "2018-03-19T23:29:16Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175617070",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175617070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175886450",
      "pull_request_review_id": 105492226,
      "id": 175886450,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTg4NjQ1MA==",
      "diff_hunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n+#include <util.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txindex_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n+{\n+    TxIndex txindex(MakeUnique<TxIndexDB>(1 << 20, true));\n+    txindex.Start();\n+\n+    // Allow tx index to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!txindex.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    for (const auto& txn : coinbaseTxns) {\n+        CDiskTxPos postx;\n+        BOOST_CHECK(txindex.FindTx(txn.GetHash(), postx));",
      "path": "src/test/txindex_tests.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f89575ec9f29c0e53e2bf86c00f7227708c5002",
      "in_reply_to_id": 174604126,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2018-03-20T18:58:59Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175886450",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175886450"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175887350",
      "pull_request_review_id": 105493364,
      "id": 175887350,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTg4NzM1MA==",
      "diff_hunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n+#include <util.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txindex_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n+{\n+    TxIndex txindex(MakeUnique<TxIndexDB>(1 << 20, true));\n+    txindex.Start();\n+\n+    // Allow tx index to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!txindex.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    for (const auto& txn : coinbaseTxns) {\n+        CDiskTxPos postx;\n+        BOOST_CHECK(txindex.FindTx(txn.GetHash(), postx));\n+    }\n+\n+    for (int i = 0; i < 10; i++) {\n+        CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+        std::vector<CMutableTransaction> no_txns;\n+        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+        const CTransaction& txn = *block.vtx[0];\n+\n+        txindex.BlockUntilSyncedToCurrentChain();\n+\n+        CDiskTxPos actual_postx;\n+        BOOST_CHECK(txindex.FindTx(txn.GetHash(), actual_postx));",
      "path": "src/test/txindex_tests.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "1f89575ec9f29c0e53e2bf86c00f7227708c5002",
      "in_reply_to_id": 174606064,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I added checks for 1 & 3. With regards to persistence, the DB in the test environment currently uses the in-memory LevelDB environment rather than actually writing to disk, which makes cleanup nicer and probably makes the test marginally faster.\r\n\r\nHow important do you think it is to test the persistence at this layer? My feeling is that it's probably not adding much since it's just using the common CDBWrapper abstraction.",
      "created_at": "2018-03-20T19:02:11Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175887350",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175887350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177805608",
      "pull_request_review_id": 107747366,
      "id": 177805608,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzgwNTYwOA==",
      "diff_hunk": "@@ -458,3 +458,116 @@ bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n     }\n     return false;\n }\n+\n+/*\n+ * Safely persist a transfer of data from the old txindex database to the new one, and compact the\n+ * range of keys updated. This is used internally by MigrateData.\n+ */\n+static void WriteTxIndexMigrationBatches(TxIndexDB& newdb, CBlockTreeDB& olddb,\n+                                         CDBBatch& batch_newdb, CDBBatch& batch_olddb,\n+                                         const std::pair<unsigned char, uint256>& begin_key,\n+                                         const std::pair<unsigned char, uint256>& end_key)\n+{\n+    // Sync new DB changes to disk before deleting from old DB.\n+    newdb.WriteBatch(batch_newdb, /*fSync=*/ true);\n+    olddb.WriteBatch(batch_olddb);\n+\n+    batch_newdb.Clear();\n+    batch_olddb.Clear();\n+\n+    newdb.CompactRange(begin_key, end_key);",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "aee37f2b62c72a0796557b92bf12fde6867dfbc5",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why compact the newdb?",
      "created_at": "2018-03-28T16:13:06Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177805608",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177805608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 478,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177805735",
      "pull_request_review_id": 107747366,
      "id": 177805735,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzgwNTczNQ==",
      "diff_hunk": "@@ -458,3 +458,116 @@ bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n     }\n     return false;\n }\n+\n+/*\n+ * Safely persist a transfer of data from the old txindex database to the new one, and compact the\n+ * range of keys updated. This is used internally by MigrateData.\n+ */\n+static void WriteTxIndexMigrationBatches(TxIndexDB& newdb, CBlockTreeDB& olddb,\n+                                         CDBBatch& batch_newdb, CDBBatch& batch_olddb,\n+                                         const std::pair<unsigned char, uint256>& begin_key,\n+                                         const std::pair<unsigned char, uint256>& end_key)\n+{\n+    // Sync new DB changes to disk before deleting from old DB.\n+    newdb.WriteBatch(batch_newdb, /*fSync=*/ true);\n+    olddb.WriteBatch(batch_olddb);\n+\n+    batch_newdb.Clear();\n+    batch_olddb.Clear();\n+\n+    newdb.CompactRange(begin_key, end_key);\n+    olddb.CompactRange(begin_key, end_key);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. The flag signals\n+    // whether any txindex data is present in the block_tree_db. If the flag is\n+    // not set, either the txindex did not exist or was already migrated.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);",
      "path": "src/txdb.cpp",
      "position": 108,
      "original_position": 45,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "aee37f2b62c72a0796557b92bf12fde6867dfbc5",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should probably do something to the old DB so that any old versions refuse to start when the txindex data is partially-migrated (not sure how to do it, or if its really possible, but it'd be nice to sidestep the inevitable \"I started the new version, and it took forever to start, so I killed it, downgraded again, and now my getrawtransaction-based scripts are all failing\" issues).",
      "created_at": "2018-03-28T16:13:26Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177805735",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177805735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 524,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177812638",
      "pull_request_review_id": 107747366,
      "id": 177812638,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzgxMjYzOA==",
      "diff_hunk": "@@ -0,0 +1,139 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    const CBlockIndex* chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    const CBlockIndex* pindex = LookupBlockIndex(best_block_hash);\n+    if (!pindex) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ae578cbee79f46d1b3b683ea46638ac997730bff",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This check is too strict for the BlockConnected validationinterface callback - you really want some variant of the SetBestChain validationinterface callback (which is called when new blocks/header tree is flushed to disik). Practically, I'm not sure what the best way to sovle this is:\r\n * You could move txindex stuff to a cache ala pcoinsTip and then flush it on some SetBestChain variant (which would need to be tweaked to not have its own timer, which I think we should do anyway, and use the fPeriodicWrite bool or so), but then you'd need to plumb the txindex cache usage back into the FlushStateToDisk flush condition. I think this is probably the easiest approach, but people will probably not be too happy with the circular dependency here. You could get around that with some higher-level \"total memory usage tracking\" interface, but scope creep....\r\n * You could move to storing a locator in the txindex DB like the wallet does and then reconnect from that on startup from whatever the locator can find. This has a super weird edge-case where you may have dangling entries pointing to blocks which were stale, which were connected, (ie \"written\" to disk) but then lost as they were not flushed to disk, but that should be rare enough the overhead of DB entries isnt a big deal, as long as you handle such failed reads appropriately.",
      "created_at": "2018-03-28T16:36:58Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177812638",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177812638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177828216",
      "pull_request_review_id": 107747366,
      "id": 177828216,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzgyODIxNg==",
      "diff_hunk": "@@ -13,6 +13,8 @@\n \n constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n \n+std::unique_ptr<TxIndex> g_txindex;",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "8ac5ed122e45cae6081bd3fc4c243ca4135cccbe",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It'd be nice to keep these kinds of globals in the same place. At least g_connman is in init.cpp and exposed as extern in net.h, so you could duplicate that (which is \"correct\" in that init \"owns\" the object).",
      "created_at": "2018-03-28T17:27:10Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177828216",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177828216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177831648",
      "pull_request_review_id": 107747366,
      "id": 177831648,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzgzMTY0OA==",
      "diff_hunk": "@@ -350,6 +351,10 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n+    if (g_txindex) {\n+        g_txindex->BlockUntilSyncedToCurrentChain();",
      "path": "src/rest.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ae276cead580e459d881db5b7439b618ec0854a6",
      "in_reply_to_id": 155908730,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should we not check the return of BlockUntilSyncedToCurrentChain and maybe always return an error before its even gotten close to caught up?",
      "created_at": "2018-03-28T17:37:55Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177831648",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177831648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177834651",
      "pull_request_review_id": 107747366,
      "id": 177834651,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzgzNDY1MQ==",
      "diff_hunk": "@@ -177,10 +183,12 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n             }\n             errmsg = \"No such transaction found in the provided block\";\n+        } else if (!g_txindex) {\n+            errmsg = \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n+        } else if (!f_txindex_ready) {\n+            errmsg = \"No such mempool transaction. Blockchain transactions are still in the process of being indexed\";",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 54,
      "original_position": 45,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "c4401fc41422daa17df46e5945c35a55c1e0e8bd",
      "in_reply_to_id": 167242419,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A distinct error code may make sense, though no opinion on what. Further, I'm not sure we should let GetTransaction call into the g_txindex if !f_txindex_ready (as it may return data from a stale block, but its also just generally not so useful). Maybe GetTransaction/FindTx can check if we're in sync yet.",
      "created_at": "2018-03-28T17:47:02Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177834651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177834651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177835267",
      "pull_request_review_id": 107747366,
      "id": 177835267,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzgzNTI2Nw==",
      "diff_hunk": "@@ -229,29 +238,36 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n        oneTxid = hash;\n     }\n \n-    LOCK(cs_main);\n-\n     CBlockIndex* pblockindex = nullptr;\n-\n     uint256 hashBlock;\n-    if (!request.params[1].isNull())\n     {\n-        hashBlock = uint256S(request.params[1].get_str());\n-        pblockindex = LookupBlockIndex(hashBlock);\n-        if (!pblockindex) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-        }\n-    } else {\n-        // Loop through txids and try to find which block they're in. Exit loop once a block is found.\n-        for (const auto& tx : setTxids) {\n-            const Coin& coin = AccessByTxid(*pcoinsTip, tx);\n-            if (!coin.IsSpent()) {\n-                pblockindex = chainActive[coin.nHeight];\n-                break;\n+        LOCK(cs_main);\n+\n+        if (!request.params[1].isNull()) {\n+            hashBlock = uint256S(request.params[1].get_str());\n+            pblockindex = LookupBlockIndex(hashBlock);\n+            if (!pblockindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+        } else {\n+            // Loop through txids and try to find which block they're in. Exit loop once a block is found.\n+            for (const auto& tx : setTxids) {\n+                const Coin& coin = AccessByTxid(*pcoinsTip, tx);\n+                if (!coin.IsSpent()) {\n+                    pblockindex = chainActive[coin.nHeight];\n+                    break;\n+                }\n             }\n         }\n     }\n \n+    // Allow txindex to catch up if we need to query it and before we acquire cs_main.\n+    if (g_txindex && !pblockindex) {\n+        g_txindex->BlockUntilSyncedToCurrentChain();",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 108,
      "original_position": 93,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "013716e1f5f65ba8dcc24f2d5fbe26ac7e3743c5",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also here - should report a different error of some kind if we're not in sync yet.",
      "created_at": "2018-03-28T17:49:14Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177835267",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177835267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 267,
      "original_line": 267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177858240",
      "pull_request_review_id": 107810560,
      "id": 177858240,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzg1ODI0MA==",
      "diff_hunk": "@@ -13,6 +13,8 @@\n \n constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n \n+std::unique_ptr<TxIndex> g_txindex;",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "8ac5ed122e45cae6081bd3fc4c243ca4135cccbe",
      "in_reply_to_id": 177828216,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's what I did originally, but that caused problems when building tests. The test binary is not linked against init.cpp, it's linked against test_bitcoin_main.cpp, which is why `g_connman` is also defined there. That took me an annoying amount of time to figure out, and by the time I did I was so pissed off I decided to move it to `txindex.cpp`.\r\n\r\nThis whole thing where stuff in init has to get redefined in `test_bitcoin_main.cpp` if it's used in the tests seems pretty gross. Do you really thing that's the right way to do it?",
      "created_at": "2018-03-28T19:05:49Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177858240",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177858240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177860703",
      "pull_request_review_id": 107813561,
      "id": 177860703,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzg2MDcwMw==",
      "diff_hunk": "@@ -13,6 +13,8 @@\n \n constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n \n+std::unique_ptr<TxIndex> g_txindex;",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "8ac5ed122e45cae6081bd3fc4c243ca4135cccbe",
      "in_reply_to_id": 177828216,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, yea, thats a bit gross. Still, if thats what we have now, maybe add a comment noting that in both places and at least be consistent?",
      "created_at": "2018-03-28T19:15:01Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177860703",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177860703"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178184558",
      "pull_request_review_id": 108208042,
      "id": 178184558,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODE4NDU1OA==",
      "diff_hunk": "@@ -0,0 +1,139 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    const CBlockIndex* chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    const CBlockIndex* pindex = LookupBlockIndex(best_block_hash);\n+    if (!pindex) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ae578cbee79f46d1b3b683ea46638ac997730bff",
      "in_reply_to_id": 177812638,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand. This line is in the `Init` method, not the BlockConnected callback. As long as we never prune entries from the block index, I don't see when this check would fail.",
      "created_at": "2018-03-29T21:20:34Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178184558",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178184558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178187241",
      "pull_request_review_id": 108211243,
      "id": 178187241,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODE4NzI0MQ==",
      "diff_hunk": "@@ -13,6 +13,8 @@\n \n constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n \n+std::unique_ptr<TxIndex> g_txindex;",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "8ac5ed122e45cae6081bd3fc4c243ca4135cccbe",
      "in_reply_to_id": 177828216,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd prefer to just move the definition of `g_connman` to `net.cpp` or define them in the respective header files. Any reason they need to be `extern`? @theuni ",
      "created_at": "2018-03-29T21:31:55Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178187241",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178187241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178188635",
      "pull_request_review_id": 108212902,
      "id": 178188635,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODE4ODYzNQ==",
      "diff_hunk": "@@ -458,3 +458,116 @@ bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n     }\n     return false;\n }\n+\n+/*\n+ * Safely persist a transfer of data from the old txindex database to the new one, and compact the\n+ * range of keys updated. This is used internally by MigrateData.\n+ */\n+static void WriteTxIndexMigrationBatches(TxIndexDB& newdb, CBlockTreeDB& olddb,\n+                                         CDBBatch& batch_newdb, CDBBatch& batch_olddb,\n+                                         const std::pair<unsigned char, uint256>& begin_key,\n+                                         const std::pair<unsigned char, uint256>& end_key)\n+{\n+    // Sync new DB changes to disk before deleting from old DB.\n+    newdb.WriteBatch(batch_newdb, /*fSync=*/ true);\n+    olddb.WriteBatch(batch_olddb);\n+\n+    batch_newdb.Clear();\n+    batch_olddb.Clear();\n+\n+    newdb.CompactRange(begin_key, end_key);",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "aee37f2b62c72a0796557b92bf12fde6867dfbc5",
      "in_reply_to_id": 177805608,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, that's not necessary.",
      "created_at": "2018-03-29T21:38:24Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178188635",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178188635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 478,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178217315",
      "pull_request_review_id": 108246501,
      "id": 178217315,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODIxNzMxNQ==",
      "diff_hunk": "@@ -177,10 +183,12 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n             }\n             errmsg = \"No such transaction found in the provided block\";\n+        } else if (!g_txindex) {\n+            errmsg = \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n+        } else if (!f_txindex_ready) {\n+            errmsg = \"No such mempool transaction. Blockchain transactions are still in the process of being indexed\";",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 54,
      "original_position": 45,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "c4401fc41422daa17df46e5945c35a55c1e0e8bd",
      "in_reply_to_id": 167242419,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, it's best effort, just like the lookup from CCoinsCacheView. If there's a response, great, otherwise the error message says that the not found may be inclusive. I agree that's kind of a weird behavior for the RPC, but if we change it, I could make the same argument for just removing the CCoinsCacheView lookup.",
      "created_at": "2018-03-30T01:23:47Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178217315",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178217315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178323651",
      "pull_request_review_id": 108371943,
      "id": 178323651,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODMyMzY1MQ==",
      "diff_hunk": "@@ -0,0 +1,139 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    const CBlockIndex* chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    const CBlockIndex* pindex = LookupBlockIndex(best_block_hash);\n+    if (!pindex) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ae578cbee79f46d1b3b683ea46638ac997730bff",
      "in_reply_to_id": 177812638,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A block may be connected, but the block index may not be written to disk until much later. Thus, we can run far ahead here. Specifically, we flush in the following order:\r\n* Blocks are written to disk before connecting them (but not fsync'd, so not guarantees here!). At the same time entries are added to mapBlockIndex/CBlockIndex*s are created, but not flushed to disk)\r\n* Blocks are validated/connected, generating BlockConnected callbacks.\r\n* At some point in the future, flushing happens, where we first fsync the blocks written to disk, then write out the mapBlockIndex changes, then write out pcoinsTip/UTXO DB.",
      "created_at": "2018-03-30T16:34:58Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178323651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178323651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178329846",
      "pull_request_review_id": 108379405,
      "id": 178329846,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODMyOTg0Ng==",
      "diff_hunk": "@@ -458,3 +458,116 @@ bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n     }\n     return false;\n }\n+\n+/*\n+ * Safely persist a transfer of data from the old txindex database to the new one, and compact the\n+ * range of keys updated. This is used internally by MigrateData.\n+ */\n+static void WriteTxIndexMigrationBatches(TxIndexDB& newdb, CBlockTreeDB& olddb,\n+                                         CDBBatch& batch_newdb, CDBBatch& batch_olddb,\n+                                         const std::pair<unsigned char, uint256>& begin_key,\n+                                         const std::pair<unsigned char, uint256>& end_key)\n+{\n+    // Sync new DB changes to disk before deleting from old DB.\n+    newdb.WriteBatch(batch_newdb, /*fSync=*/ true);\n+    olddb.WriteBatch(batch_olddb);\n+\n+    batch_newdb.Clear();\n+    batch_olddb.Clear();\n+\n+    newdb.CompactRange(begin_key, end_key);\n+    olddb.CompactRange(begin_key, end_key);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. The flag signals\n+    // whether any txindex data is present in the block_tree_db. If the flag is\n+    // not set, either the txindex did not exist or was already migrated.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);",
      "path": "src/txdb.cpp",
      "position": 108,
      "original_position": 45,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "aee37f2b62c72a0796557b92bf12fde6867dfbc5",
      "in_reply_to_id": 177805735,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What do you think of this approach? https://github.com/bitcoin/bitcoin/pull/11857/commits/c3b34b1b62ab034c5d6b6d700ae378291b19fc4b",
      "created_at": "2018-03-30T17:10:14Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178329846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178329846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 524,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178331224",
      "pull_request_review_id": 108381018,
      "id": 178331224,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODMzMTIyNA==",
      "diff_hunk": "@@ -229,29 +238,36 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n        oneTxid = hash;\n     }\n \n-    LOCK(cs_main);\n-\n     CBlockIndex* pblockindex = nullptr;\n-\n     uint256 hashBlock;\n-    if (!request.params[1].isNull())\n     {\n-        hashBlock = uint256S(request.params[1].get_str());\n-        pblockindex = LookupBlockIndex(hashBlock);\n-        if (!pblockindex) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-        }\n-    } else {\n-        // Loop through txids and try to find which block they're in. Exit loop once a block is found.\n-        for (const auto& tx : setTxids) {\n-            const Coin& coin = AccessByTxid(*pcoinsTip, tx);\n-            if (!coin.IsSpent()) {\n-                pblockindex = chainActive[coin.nHeight];\n-                break;\n+        LOCK(cs_main);\n+\n+        if (!request.params[1].isNull()) {\n+            hashBlock = uint256S(request.params[1].get_str());\n+            pblockindex = LookupBlockIndex(hashBlock);\n+            if (!pblockindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+        } else {\n+            // Loop through txids and try to find which block they're in. Exit loop once a block is found.\n+            for (const auto& tx : setTxids) {\n+                const Coin& coin = AccessByTxid(*pcoinsTip, tx);\n+                if (!coin.IsSpent()) {\n+                    pblockindex = chainActive[coin.nHeight];\n+                    break;\n+                }\n             }\n         }\n     }\n \n+    // Allow txindex to catch up if we need to query it and before we acquire cs_main.\n+    if (g_txindex && !pblockindex) {\n+        g_txindex->BlockUntilSyncedToCurrentChain();",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 108,
      "original_position": 93,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "013716e1f5f65ba8dcc24f2d5fbe26ac7e3743c5",
      "in_reply_to_id": 177835267,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The error here already is not that useful and does not even indicate if the txindex is disabled. I'd like to fix this in a follow-up PR.",
      "created_at": "2018-03-30T17:17:41Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178331224",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178331224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 267,
      "original_line": 267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178703570",
      "pull_request_review_id": 108803916,
      "id": 178703570,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODcwMzU3MA==",
      "diff_hunk": "@@ -0,0 +1,139 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    const CBlockIndex* chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    const CBlockIndex* pindex = LookupBlockIndex(best_block_hash);\n+    if (!pindex) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ae578cbee79f46d1b3b683ea46638ac997730bff",
      "in_reply_to_id": 177812638,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See last two commits (c837c6c & 297f89c) for fix.",
      "created_at": "2018-04-03T03:12:27Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178703570",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178703570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178897768",
      "pull_request_review_id": 109038387,
      "id": 178897768,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODg5Nzc2OA==",
      "diff_hunk": "@@ -471,23 +472,41 @@ static void WriteTxIndexMigrationBatches(TxIndexDB& newdb, CBlockTreeDB& olddb,\n     // Sync new DB changes to disk before deleting from old DB.\n     newdb.WriteBatch(batch_newdb, /*fSync=*/ true);\n     olddb.WriteBatch(batch_olddb);\n+    olddb.CompactRange(begin_key, end_key);\n \n     batch_newdb.Clear();\n     batch_olddb.Clear();\n-\n-    newdb.CompactRange(begin_key, end_key);\n-    olddb.CompactRange(begin_key, end_key);\n }\n \n-bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& tip_hash)\n {\n     // The prior implementation of txindex was always in sync with block index\n-    // and presence was indicated with a boolean DB flag. The flag signals\n-    // whether any txindex data is present in the block_tree_db. If the flag is\n-    // not set, either the txindex did not exist or was already migrated.\n-    bool f_migrate_index = false;\n-    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n-    if (!f_migrate_index) {\n+    // and presence was indicated with a boolean DB flag. If the flag is set,\n+    // this means the txindex from a previous version is valid and in sync with\n+    // the chain tip. The first step of the migration is to unset the flag and\n+    // write the chain hash to a separate key, DB_TXINDEX_BLOCK. After that, the\n+    // index entries are copied over in batches to the new database. Finally,\n+    // DB_TXINDEX_BLOCK is erased from the old database and the block hash is\n+    // written to the new database.\n+    //\n+    // Unsetting the boolean flag ensures that if the node is downgraded to a\n+    // previous version, it will not see a corrupted, partially migrated index\n+    // -- it will see that the txindex is disabled. When the node is upgraded\n+    // again, the migration will pick up where it left off and sync to the block\n+    // with hash DB_TXINDEX_BLOCK.\n+    bool f_legacy_flag = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_legacy_flag);\n+    if (f_legacy_flag) {\n+        if (!block_tree_db.Write(DB_TXINDEX_BLOCK, tip_hash)) {",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "c3b34b1b62ab034c5d6b6d700ae378291b19fc4b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"!fixup Migration to handle downgrades gracefully.\"\r\n\r\nI really like this `DB_TXINDEX_BLOCK` solution to the problem of recovering from an interrupted upgrade. It's surprisingly simple.\r\n\r\nNot sure if it's worth the additional work, but it seems it'd be possible to write some simple unit tests that exercise this code by running it on databases with known states (with \"txindex\", with both \"txindex\" and BLOCK, with BLOCK but no txindex, etc) and checking the results.",
      "created_at": "2018-04-03T17:13:54Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178897768",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178897768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 500,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178907241",
      "pull_request_review_id": 109038387,
      "id": 178907241,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODkwNzI0MQ==",
      "diff_hunk": "@@ -195,6 +183,16 @@ void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const C\n     }\n }\n \n+void TxIndex::SetBestChain(const CBlockLocator& locator)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+    if (!m_db->WriteBestBlock(locator)) {",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "297f89cad4808b3499d290bdadb5c4863a94fdd7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"!fixup Change TxIndexDB to read/write locators instead of hashes.\"\r\n\r\nWould it make sense to assert `locator.front() == m_best_block_index.GetBlockHash()` as a sanity check on event ordering?",
      "created_at": "2018-04-03T17:45:49Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178907241",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178907241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178913914",
      "pull_request_review_id": 109038387,
      "id": 178913914,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODkxMzkxNA==",
      "diff_hunk": "@@ -0,0 +1,271 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    const CBlockIndex* pindex = FindForkInGlobalIndex(chainActive, locator);\n+    if (!pindex) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = pindex;\n+    if (pindex == chainActive.Tip()) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    if (!m_db->WriteBestBlock(chainActive.GetLocator())) {\n+                        error(\"%s: Failed to write locator to disk\", __func__);\n+                    }\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\");\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos);\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block. This should always be the\n+    // case assuming BlockConnected is called on the ValidationInterfaces in the proper order.",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 160,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "297f89cad4808b3499d290bdadb5c4863a94fdd7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[index] Create new TxIndex class.\"\r\n\r\nIt still seems to me like it would be possible (though unlikely) for these errors to trigger spuriously, even when the events arrive in the right order, but the notification queue gets backlogged: https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175614840\r\n\r\nIf this is true, the current comment seems misleading, and could mention the edge case.",
      "created_at": "2018-04-03T18:08:11Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178913914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178913914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179296749",
      "pull_request_review_id": 109516588,
      "id": 179296749,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5Njc0OQ==",
      "diff_hunk": "@@ -195,6 +183,16 @@ void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const C\n     }\n }\n \n+void TxIndex::SetBestChain(const CBlockLocator& locator)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+    if (!m_db->WriteBestBlock(locator)) {",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "297f89cad4808b3499d290bdadb5c4863a94fdd7",
      "in_reply_to_id": 178907241,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, that's a good idea.",
      "created_at": "2018-04-04T22:02:29Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r179296749",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179296749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179297158",
      "pull_request_review_id": 109517053,
      "id": 179297158,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5NzE1OA==",
      "diff_hunk": "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    const CBlockIndex* chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    const CBlockIndex* pindex = LookupBlockIndex(best_block_hash);\n+    if (!pindex) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos, pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "478e5db2d740ba31d1176d8670b3dacfebb5f5fb",
      "in_reply_to_id": 174577538,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, got it. Will update the comment and make this a warning log instead of a fatal error.",
      "created_at": "2018-04-04T22:04:26Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r179297158",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179297158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179310578",
      "pull_request_review_id": 109532406,
      "id": 179310578,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTMxMDU3OA==",
      "diff_hunk": "@@ -0,0 +1,271 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    const CBlockIndex* pindex = FindForkInGlobalIndex(chainActive, locator);\n+    if (!pindex) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = pindex;\n+    if (pindex == chainActive.Tip()) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    if (!m_db->WriteBestBlock(chainActive.GetLocator())) {\n+                        error(\"%s: Failed to write locator to disk\", __func__);\n+                    }\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\");\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos);\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block. This should always be the\n+    // case assuming BlockConnected is called on the ValidationInterfaces in the proper order.",
      "path": "src/index/txindex.cpp",
      "position": null,
      "original_position": 160,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "297f89cad4808b3499d290bdadb5c4863a94fdd7",
      "in_reply_to_id": 178913914,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed the comment and error handling.",
      "created_at": "2018-04-04T23:14:55Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r179310578",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179310578"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180842468",
      "pull_request_review_id": 111336513,
      "id": 180842468,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDg0MjQ2OA==",
      "diff_hunk": "@@ -424,3 +425,171 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlock(CBlockLocator& locator) const\n+{\n+    if (Read(DB_BEST_BLOCK, locator)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        locator.SetNull();\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool TxIndexDB::WriteBestBlock(const CBlockLocator& locator)\n+{\n+    return Write(DB_BEST_BLOCK, locator);\n+}\n+\n+/*\n+ * Safely persist a transfer of data from the old txindex database to the new one, and compact the\n+ * range of keys updated. This is used internally by MigrateData.\n+ */\n+static void WriteTxIndexMigrationBatches(TxIndexDB& newdb, CBlockTreeDB& olddb,\n+                                         CDBBatch& batch_newdb, CDBBatch& batch_olddb,\n+                                         const std::pair<unsigned char, uint256>& begin_key,\n+                                         const std::pair<unsigned char, uint256>& end_key)\n+{\n+    // Sync new DB changes to disk before deleting from old DB.\n+    newdb.WriteBatch(batch_newdb, /*fSync=*/ true);\n+    olddb.WriteBatch(batch_olddb);\n+    olddb.CompactRange(begin_key, end_key);\n+\n+    batch_newdb.Clear();\n+    batch_olddb.Clear();\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator& best_locator)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. If the flag is set,\n+    // this means the txindex from a previous version is valid and in sync with\n+    // the chain tip. The first step of the migration is to unset the flag and\n+    // write the chain hash to a separate key, DB_TXINDEX_BLOCK. After that, the\n+    // index entries are copied over in batches to the new database. Finally,\n+    // DB_TXINDEX_BLOCK is erased from the old database and the block hash is\n+    // written to the new database.\n+    //\n+    // Unsetting the boolean flag ensures that if the node is downgraded to a\n+    // previous version, it will not see a corrupted, partially migrated index\n+    // -- it will see that the txindex is disabled. When the node is upgraded\n+    // again, the migration will pick up where it left off and sync to the block\n+    // with hash DB_TXINDEX_BLOCK.\n+    bool f_legacy_flag = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_legacy_flag);\n+    if (f_legacy_flag) {\n+        if (!block_tree_db.Write(DB_TXINDEX_BLOCK, best_locator)) {\n+            return error(\"%s: cannot write block indicator\", __func__);\n+        }\n+        if (!block_tree_db.WriteFlag(\"txindex\", false)) {\n+            return error(\"%s: cannot write block index db flag\", __func__);\n+        }\n+    }\n+\n+    CBlockLocator locator;\n+    if (!block_tree_db.Read(DB_TXINDEX_BLOCK, locator)) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key = begin_key;\n+\n+    bool interrupted = false;\n+    std::unique_ptr<CDBIterator> cursor(block_tree_db.NewIterator());\n+    for (cursor->Seek(begin_key); cursor->Valid(); cursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            interrupted = true;\n+            break;\n+        }\n+\n+        if (!cursor->GetKey(key)) {\n+            return error(\"%s: cannot get key from valid cursor\", __func__);\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);",
      "path": "src/txdb.cpp",
      "position": null,
      "original_position": 133,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ea8be45ace75b649584c163deca3051c4f33aa16",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you end up having to change this PR for other reasons, might be worth leaving a comment to note that this works because leveldb is sorted by key and that you're making use of the first two bytes of the txid here. It took me a little head-scratching to see what was going on here (thanks to @ryanofsky for the help).",
      "created_at": "2018-04-11T17:51:12Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r180842468",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180842468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 549,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180884263",
      "pull_request_review_id": 111336513,
      "id": 180884263,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDg4NDI2Mw==",
      "diff_hunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    if (!m_db->WriteBestBlock(chainActive.GetLocator())) {\n+                        error(\"%s: Failed to write locator to disk\", __func__);\n+                    }\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\");\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos);\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        // Ensure block connects to an ancestor of the current best block. This should be the case\n+        // most of the time, but may not be immediately after the the sync thread catches up and sets\n+        // m_synced. Consider the case where there is a reorg and the blocks on the stale branch are\n+        // in the ValidationInterface queue backlog even after the sync thread has caught up to the\n+        // new chain tip. In this unlikely event, log a warning and let the queue clear.\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            LogPrintf(\"%s: WARNING: Block %s does not connect to an ancestor of known best chain \"\n+                      \"(tip=%s); not updating txindex\\n\",\n+                      __func__, pindex->GetBlockHash().ToString(),\n+                      best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+void TxIndex::SetBestChain(const CBlockLocator& locator)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const uint256& locator_tip_hash = locator.vHave.front();\n+    const CBlockIndex* locator_tip_index;\n+    {\n+        LOCK(cs_main);\n+        locator_tip_index = LookupBlockIndex(locator_tip_hash);\n+    }\n+\n+    if (!locator_tip_index) {\n+        FatalError(\"%s: First block (hash=%s) in locator was not found\",\n+                   __func__, locator_tip_hash.ToString());\n+        return;\n+    }\n+\n+    // This checks that SetBestChain callbacks are received after BlockConnected. The check may fail\n+    // immediately after the the sync thread catches up and sets m_synced. Consider the case where\n+    // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n+    // backlog even after the sync thread has caught up to the new chain tip. In this unlikely\n+    // event, log a warning and let the queue clear.\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (best_block_index->GetAncestor(locator_tip_index->nHeight) != locator_tip_index) {\n+        LogPrintf(\"%s: WARNING: Locator contains block (hash=%s) not on known best chain \"\n+                  \"(tip=%s); not writing txindex locator\\n\",\n+                  __func__, locator_tip_hash.ToString(),\n+                  best_block_index->GetBlockHash().ToString());\n+        return;\n+    }\n+\n+    if (!m_db->WriteBestBlock(locator)) {",
      "path": "src/index/txindex.cpp",
      "position": 214,
      "original_position": 214,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ea8be45ace75b649584c163deca3051c4f33aa16",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we made this call in `TxIndex::BlockConnected` it seems like we could avoid defining this entire function. Is the reason you're not doing it there for efficiency's sake (e.g. maybe you're worried about the expense of constructing a locator)?",
      "created_at": "2018-04-11T20:16:57Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r180884263",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180884263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180885992",
      "pull_request_review_id": 111336513,
      "id": 180885992,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDg4NTk5Mg==",
      "diff_hunk": "@@ -126,4 +124,36 @@ class CBlockTreeDB : public CDBWrapper\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n+/**\n+ * Access to the txindex database (indexes/txindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the TxIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class TxIndexDB : public CDBWrapper\n+{\n+public:\n+    explicit TxIndexDB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    /// Read the disk location of the transaction data with the given hash. Returns false if the\n+    /// transaction hash is not indexed.\n+    bool ReadTxPos(const uint256& txid, CDiskTxPos& pos) const;\n+\n+    /// Write a batch of transaction positions to the DB.\n+    bool WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos);\n+\n+    /// Read block locator of the chain that the txindex is in sync with.\n+    bool ReadBestBlock(CBlockLocator& hash) const;\n+\n+    /// Write block locator of the chain that the txindex is in sync with.\n+    bool WriteBestBlock(const CBlockLocator& locator);",
      "path": "src/txdb.h",
      "position": null,
      "original_position": 56,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ea8be45ace75b649584c163deca3051c4f33aa16",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since you're only ever using the tip of this locator to populate `m_best_block_index` in `TxIndex::Init()`, have you considered storing a single blockhash instead of a locator here? I guess there may be some beneficial future-proofing to having a locator on hand, but it's a bit more expensive to maintain (c.f. my comment on possibly eliminating `TxIndex::SetBestChain`).",
      "created_at": "2018-04-11T20:22:55Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r180885992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180885992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180888339",
      "pull_request_review_id": 111336513,
      "id": 180888339,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDg4ODMzOQ==",
      "diff_hunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    if (!m_db->WriteBestBlock(chainActive.GetLocator())) {\n+                        error(\"%s: Failed to write locator to disk\", __func__);\n+                    }\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\");\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos);\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        // Ensure block connects to an ancestor of the current best block. This should be the case\n+        // most of the time, but may not be immediately after the the sync thread catches up and sets\n+        // m_synced. Consider the case where there is a reorg and the blocks on the stale branch are\n+        // in the ValidationInterface queue backlog even after the sync thread has caught up to the\n+        // new chain tip. In this unlikely event, log a warning and let the queue clear.\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            LogPrintf(\"%s: WARNING: Block %s does not connect to an ancestor of known best chain \"\n+                      \"(tip=%s); not updating txindex\\n\",\n+                      __func__, pindex->GetBlockHash().ToString(),\n+                      best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+void TxIndex::SetBestChain(const CBlockLocator& locator)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const uint256& locator_tip_hash = locator.vHave.front();\n+    const CBlockIndex* locator_tip_index;\n+    {\n+        LOCK(cs_main);\n+        locator_tip_index = LookupBlockIndex(locator_tip_hash);\n+    }\n+\n+    if (!locator_tip_index) {\n+        FatalError(\"%s: First block (hash=%s) in locator was not found\",\n+                   __func__, locator_tip_hash.ToString());\n+        return;\n+    }\n+\n+    // This checks that SetBestChain callbacks are received after BlockConnected. The check may fail\n+    // immediately after the the sync thread catches up and sets m_synced. Consider the case where\n+    // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n+    // backlog even after the sync thread has caught up to the new chain tip. In this unlikely\n+    // event, log a warning and let the queue clear.\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (best_block_index->GetAncestor(locator_tip_index->nHeight) != locator_tip_index) {\n+        LogPrintf(\"%s: WARNING: Locator contains block (hash=%s) not on known best chain \"\n+                  \"(tip=%s); not writing txindex locator\\n\",\n+                  __func__, locator_tip_hash.ToString(),\n+                  best_block_index->GetBlockHash().ToString());\n+        return;\n+    }\n+\n+    if (!m_db->WriteBestBlock(locator)) {\n+        error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        const CBlockIndex* chain_tip = chainActive.Tip();\n+        const CBlockIndex* best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {",
      "path": "src/index/txindex.cpp",
      "position": 233,
      "original_position": 233,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ea8be45ace75b649584c163deca3051c4f33aa16",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just curious: under what circumstances would a chainActive `best_block_index` have ever surpassed `chainActive.Tip()`?",
      "created_at": "2018-04-11T20:30:57Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r180888339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180888339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 233,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180897285",
      "pull_request_review_id": 111401714,
      "id": 180897285,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDg5NzI4NQ==",
      "diff_hunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    if (!m_db->WriteBestBlock(chainActive.GetLocator())) {\n+                        error(\"%s: Failed to write locator to disk\", __func__);\n+                    }\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\");\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos);\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        // Ensure block connects to an ancestor of the current best block. This should be the case\n+        // most of the time, but may not be immediately after the the sync thread catches up and sets\n+        // m_synced. Consider the case where there is a reorg and the blocks on the stale branch are\n+        // in the ValidationInterface queue backlog even after the sync thread has caught up to the\n+        // new chain tip. In this unlikely event, log a warning and let the queue clear.\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            LogPrintf(\"%s: WARNING: Block %s does not connect to an ancestor of known best chain \"\n+                      \"(tip=%s); not updating txindex\\n\",\n+                      __func__, pindex->GetBlockHash().ToString(),\n+                      best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+void TxIndex::SetBestChain(const CBlockLocator& locator)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const uint256& locator_tip_hash = locator.vHave.front();\n+    const CBlockIndex* locator_tip_index;\n+    {\n+        LOCK(cs_main);\n+        locator_tip_index = LookupBlockIndex(locator_tip_hash);\n+    }\n+\n+    if (!locator_tip_index) {\n+        FatalError(\"%s: First block (hash=%s) in locator was not found\",\n+                   __func__, locator_tip_hash.ToString());\n+        return;\n+    }\n+\n+    // This checks that SetBestChain callbacks are received after BlockConnected. The check may fail\n+    // immediately after the the sync thread catches up and sets m_synced. Consider the case where\n+    // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n+    // backlog even after the sync thread has caught up to the new chain tip. In this unlikely\n+    // event, log a warning and let the queue clear.\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (best_block_index->GetAncestor(locator_tip_index->nHeight) != locator_tip_index) {\n+        LogPrintf(\"%s: WARNING: Locator contains block (hash=%s) not on known best chain \"\n+                  \"(tip=%s); not writing txindex locator\\n\",\n+                  __func__, locator_tip_hash.ToString(),\n+                  best_block_index->GetBlockHash().ToString());\n+        return;\n+    }\n+\n+    if (!m_db->WriteBestBlock(locator)) {\n+        error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        const CBlockIndex* chain_tip = chainActive.Tip();\n+        const CBlockIndex* best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    LogPrintf(\"%s: txindex is catching up on block notifications\\n\", __func__);\n+    SyncWithValidationInterfaceQueue();\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& tx_hash, uint256& block_hash, CTransactionRef& tx) const\n+{\n+    CDiskTxPos postx;\n+    if (!m_db->ReadTxPos(tx_hash, postx)) {\n+        return false;\n+    }\n+\n+    CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n+    }\n+    CBlockHeader header;\n+    try {\n+        file >> header;\n+        fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n+        file >> tx;\n+    } catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    if (tx->GetHash() != tx_hash) {\n+        return error(\"%s: txid mismatch\", __func__);\n+    }\n+    block_hash = header.GetHash();\n+    return true;\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    // Need to register this ValidationInterface before running Init(), so that\n+    // callbacks are not missed if Init sets m_synced to true.\n+    RegisterValidationInterface(this);\n+    if (!Init()) {\n+        return;\n+    }\n+\n+    m_thread_sync = std::thread(&TraceThread<std::function<void()>>, \"txindex\",\n+                                std::bind(&TxIndex::ThreadSync, this));\n+}\n+\n+void TxIndex::Stop()\n+{\n+    UnregisterValidationInterface(this);",
      "path": "src/index/txindex.cpp",
      "position": 289,
      "original_position": 289,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ea8be45ace75b649584c163deca3051c4f33aa16",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@jamesob got me looking into this code, but since Stop() is called from the destructor, is it ok to call this here, or is there a problem like https://github.com/bitcoin/bitcoin/pull/12647#discussion_r179790601?",
      "created_at": "2018-04-11T21:02:35Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r180897285",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180897285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 289,
      "original_line": 289,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181131048",
      "pull_request_review_id": 111682712,
      "id": 181131048,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTEzMTA0OA==",
      "diff_hunk": "@@ -424,3 +425,171 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlock(CBlockLocator& locator) const\n+{\n+    if (Read(DB_BEST_BLOCK, locator)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        locator.SetNull();\n+        return true;",
      "path": "src/txdb.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ea8be45ace75b649584c163deca3051c4f33aa16",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think this return value is a bit confusing; if we didn't actually read the best block, why would we return true (regardless of the reason)?",
      "created_at": "2018-04-12T15:48:16Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r181131048",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181131048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 457,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181175539",
      "pull_request_review_id": 111736425,
      "id": 181175539,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTE3NTUzOQ==",
      "diff_hunk": "@@ -126,4 +124,36 @@ class CBlockTreeDB : public CDBWrapper\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n+/**\n+ * Access to the txindex database (indexes/txindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the TxIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class TxIndexDB : public CDBWrapper\n+{\n+public:\n+    explicit TxIndexDB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    /// Read the disk location of the transaction data with the given hash. Returns false if the\n+    /// transaction hash is not indexed.\n+    bool ReadTxPos(const uint256& txid, CDiskTxPos& pos) const;\n+\n+    /// Write a batch of transaction positions to the DB.\n+    bool WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos);\n+\n+    /// Read block locator of the chain that the txindex is in sync with.\n+    bool ReadBestBlock(CBlockLocator& hash) const;\n+\n+    /// Write block locator of the chain that the txindex is in sync with.\n+    bool WriteBestBlock(const CBlockLocator& locator);",
      "path": "src/txdb.h",
      "position": null,
      "original_position": 56,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ea8be45ace75b649584c163deca3051c4f33aa16",
      "in_reply_to_id": 180885992,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So `TxIndex::Init()` uses `FindForkInGlobalIndex` to populate `m_best_block_index`, which may not necessarily be the tip of the locator. One case where it might not be is when the active chain locator is written at the end of ThreadSync, which may contain locator entries for blocks that have not been flushed to disk.",
      "created_at": "2018-04-12T18:16:17Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r181175539",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181175539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181177572",
      "pull_request_review_id": 111738822,
      "id": 181177572,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTE3NzU3Mg==",
      "diff_hunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    if (!m_db->WriteBestBlock(chainActive.GetLocator())) {\n+                        error(\"%s: Failed to write locator to disk\", __func__);\n+                    }\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\");\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos);\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        // Ensure block connects to an ancestor of the current best block. This should be the case\n+        // most of the time, but may not be immediately after the the sync thread catches up and sets\n+        // m_synced. Consider the case where there is a reorg and the blocks on the stale branch are\n+        // in the ValidationInterface queue backlog even after the sync thread has caught up to the\n+        // new chain tip. In this unlikely event, log a warning and let the queue clear.\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            LogPrintf(\"%s: WARNING: Block %s does not connect to an ancestor of known best chain \"\n+                      \"(tip=%s); not updating txindex\\n\",\n+                      __func__, pindex->GetBlockHash().ToString(),\n+                      best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+void TxIndex::SetBestChain(const CBlockLocator& locator)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const uint256& locator_tip_hash = locator.vHave.front();\n+    const CBlockIndex* locator_tip_index;\n+    {\n+        LOCK(cs_main);\n+        locator_tip_index = LookupBlockIndex(locator_tip_hash);\n+    }\n+\n+    if (!locator_tip_index) {\n+        FatalError(\"%s: First block (hash=%s) in locator was not found\",\n+                   __func__, locator_tip_hash.ToString());\n+        return;\n+    }\n+\n+    // This checks that SetBestChain callbacks are received after BlockConnected. The check may fail\n+    // immediately after the the sync thread catches up and sets m_synced. Consider the case where\n+    // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n+    // backlog even after the sync thread has caught up to the new chain tip. In this unlikely\n+    // event, log a warning and let the queue clear.\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (best_block_index->GetAncestor(locator_tip_index->nHeight) != locator_tip_index) {\n+        LogPrintf(\"%s: WARNING: Locator contains block (hash=%s) not on known best chain \"\n+                  \"(tip=%s); not writing txindex locator\\n\",\n+                  __func__, locator_tip_hash.ToString(),\n+                  best_block_index->GetBlockHash().ToString());\n+        return;\n+    }\n+\n+    if (!m_db->WriteBestBlock(locator)) {\n+        error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        const CBlockIndex* chain_tip = chainActive.Tip();\n+        const CBlockIndex* best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {",
      "path": "src/index/txindex.cpp",
      "position": 233,
      "original_position": 233,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ea8be45ace75b649584c163deca3051c4f33aa16",
      "in_reply_to_id": 180888339,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "One scenario is if `ActivateBestChainStep` attempts to reorg to an invalid chain. So it would disconnect a few blocks, then realize that one of the blocks it tries to connect is invalid, leaving the tip at a lower height than it started. I suppose `InvalidateBlock` could cause this too.",
      "created_at": "2018-04-12T18:23:09Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r181177572",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181177572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 233,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181180587",
      "pull_request_review_id": 111742304,
      "id": 181180587,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTE4MDU4Nw==",
      "diff_hunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    if (!m_db->WriteBestBlock(chainActive.GetLocator())) {\n+                        error(\"%s: Failed to write locator to disk\", __func__);\n+                    }\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\");\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos);\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        // Ensure block connects to an ancestor of the current best block. This should be the case\n+        // most of the time, but may not be immediately after the the sync thread catches up and sets\n+        // m_synced. Consider the case where there is a reorg and the blocks on the stale branch are\n+        // in the ValidationInterface queue backlog even after the sync thread has caught up to the\n+        // new chain tip. In this unlikely event, log a warning and let the queue clear.\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            LogPrintf(\"%s: WARNING: Block %s does not connect to an ancestor of known best chain \"\n+                      \"(tip=%s); not updating txindex\\n\",\n+                      __func__, pindex->GetBlockHash().ToString(),\n+                      best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+void TxIndex::SetBestChain(const CBlockLocator& locator)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const uint256& locator_tip_hash = locator.vHave.front();\n+    const CBlockIndex* locator_tip_index;\n+    {\n+        LOCK(cs_main);\n+        locator_tip_index = LookupBlockIndex(locator_tip_hash);\n+    }\n+\n+    if (!locator_tip_index) {\n+        FatalError(\"%s: First block (hash=%s) in locator was not found\",\n+                   __func__, locator_tip_hash.ToString());\n+        return;\n+    }\n+\n+    // This checks that SetBestChain callbacks are received after BlockConnected. The check may fail\n+    // immediately after the the sync thread catches up and sets m_synced. Consider the case where\n+    // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n+    // backlog even after the sync thread has caught up to the new chain tip. In this unlikely\n+    // event, log a warning and let the queue clear.\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (best_block_index->GetAncestor(locator_tip_index->nHeight) != locator_tip_index) {\n+        LogPrintf(\"%s: WARNING: Locator contains block (hash=%s) not on known best chain \"\n+                  \"(tip=%s); not writing txindex locator\\n\",\n+                  __func__, locator_tip_hash.ToString(),\n+                  best_block_index->GetBlockHash().ToString());\n+        return;\n+    }\n+\n+    if (!m_db->WriteBestBlock(locator)) {",
      "path": "src/index/txindex.cpp",
      "position": 214,
      "original_position": 214,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ea8be45ace75b649584c163deca3051c4f33aa16",
      "in_reply_to_id": 180884263,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, there's a few reasons. 1) It's how CWallet works, which I looked at as a model. 2) I'd rather not `LOCK(cs_main)` on every `BlockConnected` if avoidable. We wouldn't even need the lock in this method if `SetBestChain` was called with the tip block index as an argument. 3) I think this gives better efficiency of block locator hits. So if the tip of the block locator is always the best block index entry that has been flushed to disk, when the TxIndex restarts, it always picks up from the best possible point. Whereas if the locator is written on every BlockConnected call, because there are exponentially increasing jumps in the locator, you might only find a block that is further back than that one. (Hopefully that makes sense).",
      "created_at": "2018-04-12T18:32:47Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r181180587",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181180587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181624675",
      "pull_request_review_id": 112282322,
      "id": 181624675,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTYyNDY3NQ==",
      "diff_hunk": "@@ -424,3 +425,171 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlock(CBlockLocator& locator) const\n+{\n+    if (Read(DB_BEST_BLOCK, locator)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        locator.SetNull();\n+        return true;",
      "path": "src/txdb.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ea8be45ace75b649584c163deca3051c4f33aa16",
      "in_reply_to_id": 181131048,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because we successfully read from the database -- there was just no locator written, which in this case means no blocks have been written to the index yet.",
      "created_at": "2018-04-16T05:25:16Z",
      "updated_at": "2018-04-19T07:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r181624675",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181624675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 457,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182781418",
      "pull_request_review_id": 113649547,
      "id": 182781418,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjc4MTQxOA==",
      "diff_hunk": "@@ -22,6 +22,7 @@ static const char DB_COIN = 'C';\n static const char DB_COINS = 'c';\n static const char DB_BLOCK_FILES = 'f';\n static const char DB_TXINDEX = 't';\n+static const char DB_TXINDEX_BLOCK = 'T';",
      "path": "src/txdb.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "fcc074eedd8aa4143383315daee86bbbea00a5d5",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can we get a better name here?",
      "created_at": "2018-04-19T15:09:37Z",
      "updated_at": "2018-04-19T18:06:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182781418",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182781418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182792508",
      "pull_request_review_id": 113649547,
      "id": 182792508,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjc5MjUwOA==",
      "diff_hunk": "@@ -462,3 +463,138 @@ bool TxIndexDB::WriteBestBlock(const CBlockLocator& locator)\n {\n     return Write(DB_BEST_BLOCK, locator);\n }\n+\n+/*\n+ * Safely persist a transfer of data from the old txindex database to the new one, and compact the\n+ * range of keys updated. This is used internally by MigrateData.\n+ */\n+static void WriteTxIndexMigrationBatches(TxIndexDB& newdb, CBlockTreeDB& olddb,\n+                                         CDBBatch& batch_newdb, CDBBatch& batch_olddb,\n+                                         const std::pair<unsigned char, uint256>& begin_key,\n+                                         const std::pair<unsigned char, uint256>& end_key)\n+{\n+    // Sync new DB changes to disk before deleting from old DB.\n+    newdb.WriteBatch(batch_newdb, /*fSync=*/ true);\n+    olddb.WriteBatch(batch_olddb);\n+    olddb.CompactRange(begin_key, end_key);\n+\n+    batch_newdb.Clear();\n+    batch_olddb.Clear();\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator& best_locator)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. If the flag is set,\n+    // this means the txindex from a previous version is valid and in sync with\n+    // the chain tip. The first step of the migration is to unset the flag and\n+    // write the chain hash to a separate key, DB_TXINDEX_BLOCK. After that, the\n+    // index entries are copied over in batches to the new database. Finally,\n+    // DB_TXINDEX_BLOCK is erased from the old database and the block hash is\n+    // written to the new database.\n+    //\n+    // Unsetting the boolean flag ensures that if the node is downgraded to a\n+    // previous version, it will not see a corrupted, partially migrated index\n+    // -- it will see that the txindex is disabled. When the node is upgraded\n+    // again, the migration will pick up where it left off and sync to the block\n+    // with hash DB_TXINDEX_BLOCK.\n+    bool f_legacy_flag = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_legacy_flag);\n+    if (f_legacy_flag) {\n+        if (!block_tree_db.Write(DB_TXINDEX_BLOCK, best_locator)) {\n+            return error(\"%s: cannot write block indicator\", __func__);\n+        }\n+        if (!block_tree_db.WriteFlag(\"txindex\", false)) {\n+            return error(\"%s: cannot write block index db flag\", __func__);\n+        }\n+    }\n+\n+    CBlockLocator locator;\n+    if (!block_tree_db.Read(DB_TXINDEX_BLOCK, locator)) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database... [0%%]\\n\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key = begin_key;\n+\n+    bool interrupted = false;\n+    std::unique_ptr<CDBIterator> cursor(block_tree_db.NewIterator());\n+    for (cursor->Seek(begin_key); cursor->Valid(); cursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            interrupted = true;\n+            break;\n+        }\n+\n+        if (!cursor->GetKey(key)) {\n+            return error(\"%s: cannot get key from valid cursor\", __func__);\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            // Since txids are uniformly random and traversed in increasing order, the high 16 bits\n+            // of the hash can be used to estimate the current progress.\n+            const uint256& txid = key.second;\n+            uint32_t high_nibble =\n+                (static_cast<uint32_t>(*(txid.begin() + 0)) << 8) +\n+                (static_cast<uint32_t>(*(txid.begin() + 1)) << 0);\n+            int percentage_done = (int)(high_nibble * 100.0 / 65536.0 + 0.5);\n+\n+            uiInterface.ShowProgress(_(\"Upgrading txindex database\"), percentage_done, true);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"Upgrading txindex database... [%d%%]\\n\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!cursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size || batch_olddb.SizeEstimate() > batch_size) {\n+            WriteTxIndexMigrationBatches(*this, block_tree_db,",
      "path": "src/txdb.cpp",
      "position": 155,
      "original_position": 117,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "fcc074eedd8aa4143383315daee86bbbea00a5d5",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Writing a batch deleting the thing the iterator is pointing to before calling Next() just feels broken to me. It should be fine cause iterators appear to always take a snapshot, but could you at least add a comment noting that we rely on this being safe (and also do in CCoinsViewDB::Upgrade).",
      "created_at": "2018-04-19T15:41:17Z",
      "updated_at": "2018-04-19T18:06:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182792508",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182792508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 571,
      "original_line": 571,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182802604",
      "pull_request_review_id": 113649547,
      "id": 182802604,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjgwMjYwNA==",
      "diff_hunk": "@@ -424,3 +424,41 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlock(CBlockLocator& locator) const\n+{\n+    if (Read(DB_BEST_BLOCK, locator)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {",
      "path": "src/txdb.cpp",
      "position": 39,
      "original_position": 31,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "236b72019a77c49b312fc3258e145ca7888e9d2c",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I dont think this is right - if Read fails due to a DB error it will throw a dbwrapper_error, so we'll never get here anyway. It also makes the return value super confusing. Can we just make it have return semantics the same as every other DB function?",
      "created_at": "2018-04-19T16:11:10Z",
      "updated_at": "2018-04-19T18:06:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182802604",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182802604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 455,
      "original_line": 454,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182820878",
      "pull_request_review_id": 113649547,
      "id": 182820878,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjgyMDg3OA==",
      "diff_hunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);",
      "path": "src/index/txindex.cpp",
      "position": 57,
      "original_position": 57,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It'd be nice to check that the genesis block matches (if locator was non-null) as the locator will always have it. Not a big deal since users shouldnt be moving the txinded db to anothter datadir, but...users love to do crazy things and break things.",
      "created_at": "2018-04-19T17:13:56Z",
      "updated_at": "2018-04-19T18:06:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182820878",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182820878"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182823381",
      "pull_request_review_id": 113649547,
      "id": 182823381,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjgyMzM4MQ==",
      "diff_hunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {",
      "path": "src/index/txindex.cpp",
      "position": 85,
      "original_position": 85,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It'd be really nice to write the locator out at various points during this loop, as otherwise if you start a txindex sync and then kill your bitcoind while it takes its hour building the txindex you'll have to start against from scratch on next startup.",
      "created_at": "2018-04-19T17:22:46Z",
      "updated_at": "2018-04-19T18:06:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182823381",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182823381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182834715",
      "pull_request_review_id": 113649547,
      "id": 182834715,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjgzNDcxNQ==",
      "diff_hunk": "@@ -350,6 +351,10 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n+    if (g_txindex) {\n+        g_txindex->BlockUntilSyncedToCurrentChain();",
      "path": "src/rest.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ae276cead580e459d881db5b7439b618ec0854a6",
      "in_reply_to_id": 155908730,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Still needs to be addressed.",
      "created_at": "2018-04-19T18:01:11Z",
      "updated_at": "2018-04-19T18:06:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182834715",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182834715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182894391",
      "pull_request_review_id": 113789247,
      "id": 182894391,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjg5NDM5MQ==",
      "diff_hunk": "@@ -350,6 +351,10 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n+    if (g_txindex) {\n+        g_txindex->BlockUntilSyncedToCurrentChain();",
      "path": "src/rest.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "ae276cead580e459d881db5b7439b618ec0854a6",
      "in_reply_to_id": 155908730,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-377574766",
      "created_at": "2018-04-19T21:47:53Z",
      "updated_at": "2018-04-19T21:47:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182894391",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182894391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182894886",
      "pull_request_review_id": 113789844,
      "id": 182894886,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjg5NDg4Ng==",
      "diff_hunk": "@@ -22,6 +22,7 @@ static const char DB_COIN = 'C';\n static const char DB_COINS = 'c';\n static const char DB_BLOCK_FILES = 'f';\n static const char DB_TXINDEX = 't';\n+static const char DB_TXINDEX_BLOCK = 'T';",
      "path": "src/txdb.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "fcc074eedd8aa4143383315daee86bbbea00a5d5",
      "in_reply_to_id": 182781418,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggest one.",
      "created_at": "2018-04-19T21:50:20Z",
      "updated_at": "2018-04-19T21:50:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182894886",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182894886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182896475",
      "pull_request_review_id": 113791704,
      "id": 182896475,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjg5NjQ3NQ==",
      "diff_hunk": "@@ -424,3 +424,41 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlock(CBlockLocator& locator) const\n+{\n+    if (Read(DB_BEST_BLOCK, locator)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {",
      "path": "src/txdb.cpp",
      "position": 39,
      "original_position": 31,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "236b72019a77c49b312fc3258e145ca7888e9d2c",
      "in_reply_to_id": 182802604,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll change it, but I think the return value of `CDBWrapper::Read()` is super confusing on it's own. It means either that the key was not found or that the value at that key could not be deserialized into the provided struct (and that the return value is now in an unspecified state).",
      "created_at": "2018-04-19T21:57:45Z",
      "updated_at": "2018-04-19T22:04:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182896475",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182896475"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 455,
      "original_line": 454,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182901309",
      "pull_request_review_id": 113797258,
      "id": 182901309,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjkwMTMwOQ==",
      "diff_hunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {",
      "path": "src/index/txindex.cpp",
      "position": 85,
      "original_position": 85,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "in_reply_to_id": 182823381,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, done.",
      "created_at": "2018-04-19T22:21:22Z",
      "updated_at": "2018-04-19T22:21:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182901309",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182901309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182901581",
      "pull_request_review_id": 113797558,
      "id": 182901581,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjkwMTU4MQ==",
      "diff_hunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);",
      "path": "src/index/txindex.cpp",
      "position": 57,
      "original_position": 57,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "in_reply_to_id": 182820878,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Eh, what's the right behavior in that case? Seems to me like it would be to sync the txindex from genesis, which is exactly what this does.",
      "created_at": "2018-04-19T22:22:33Z",
      "updated_at": "2018-04-19T22:22:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182901581",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182901581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182901963",
      "pull_request_review_id": 113798008,
      "id": 182901963,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjkwMTk2Mw==",
      "diff_hunk": "@@ -462,3 +463,138 @@ bool TxIndexDB::WriteBestBlock(const CBlockLocator& locator)\n {\n     return Write(DB_BEST_BLOCK, locator);\n }\n+\n+/*\n+ * Safely persist a transfer of data from the old txindex database to the new one, and compact the\n+ * range of keys updated. This is used internally by MigrateData.\n+ */\n+static void WriteTxIndexMigrationBatches(TxIndexDB& newdb, CBlockTreeDB& olddb,\n+                                         CDBBatch& batch_newdb, CDBBatch& batch_olddb,\n+                                         const std::pair<unsigned char, uint256>& begin_key,\n+                                         const std::pair<unsigned char, uint256>& end_key)\n+{\n+    // Sync new DB changes to disk before deleting from old DB.\n+    newdb.WriteBatch(batch_newdb, /*fSync=*/ true);\n+    olddb.WriteBatch(batch_olddb);\n+    olddb.CompactRange(begin_key, end_key);\n+\n+    batch_newdb.Clear();\n+    batch_olddb.Clear();\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator& best_locator)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. If the flag is set,\n+    // this means the txindex from a previous version is valid and in sync with\n+    // the chain tip. The first step of the migration is to unset the flag and\n+    // write the chain hash to a separate key, DB_TXINDEX_BLOCK. After that, the\n+    // index entries are copied over in batches to the new database. Finally,\n+    // DB_TXINDEX_BLOCK is erased from the old database and the block hash is\n+    // written to the new database.\n+    //\n+    // Unsetting the boolean flag ensures that if the node is downgraded to a\n+    // previous version, it will not see a corrupted, partially migrated index\n+    // -- it will see that the txindex is disabled. When the node is upgraded\n+    // again, the migration will pick up where it left off and sync to the block\n+    // with hash DB_TXINDEX_BLOCK.\n+    bool f_legacy_flag = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_legacy_flag);\n+    if (f_legacy_flag) {\n+        if (!block_tree_db.Write(DB_TXINDEX_BLOCK, best_locator)) {\n+            return error(\"%s: cannot write block indicator\", __func__);\n+        }\n+        if (!block_tree_db.WriteFlag(\"txindex\", false)) {\n+            return error(\"%s: cannot write block index db flag\", __func__);\n+        }\n+    }\n+\n+    CBlockLocator locator;\n+    if (!block_tree_db.Read(DB_TXINDEX_BLOCK, locator)) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database... [0%%]\\n\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key = begin_key;\n+\n+    bool interrupted = false;\n+    std::unique_ptr<CDBIterator> cursor(block_tree_db.NewIterator());\n+    for (cursor->Seek(begin_key); cursor->Valid(); cursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            interrupted = true;\n+            break;\n+        }\n+\n+        if (!cursor->GetKey(key)) {\n+            return error(\"%s: cannot get key from valid cursor\", __func__);\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            // Since txids are uniformly random and traversed in increasing order, the high 16 bits\n+            // of the hash can be used to estimate the current progress.\n+            const uint256& txid = key.second;\n+            uint32_t high_nibble =\n+                (static_cast<uint32_t>(*(txid.begin() + 0)) << 8) +\n+                (static_cast<uint32_t>(*(txid.begin() + 1)) << 0);\n+            int percentage_done = (int)(high_nibble * 100.0 / 65536.0 + 0.5);\n+\n+            uiInterface.ShowProgress(_(\"Upgrading txindex database\"), percentage_done, true);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"Upgrading txindex database... [%d%%]\\n\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!cursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size || batch_olddb.SizeEstimate() > batch_size) {\n+            WriteTxIndexMigrationBatches(*this, block_tree_db,",
      "path": "src/txdb.cpp",
      "position": 155,
      "original_position": 117,
      "commit_id": "523dd763bfe39150e369332e415215d33f2a3ef5",
      "original_commit_id": "fcc074eedd8aa4143383315daee86bbbea00a5d5",
      "in_reply_to_id": 182792508,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like overkill to me to leave a comment for documented LevelDB behavior, but sure.",
      "created_at": "2018-04-19T22:24:37Z",
      "updated_at": "2018-04-19T22:24:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182901963",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182901963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 571,
      "original_line": 571,
      "side": "RIGHT"
    }
  ]
}