{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
    "id": 366334961,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzY2MzM0OTYx",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17989",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/17989.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/17989.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
    "number": 17989,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "tests: Add fuzzing harness for ProcessMessage(...). Enables high-level fuzzing of the P2P layer.",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Add fuzzing harness for `ProcessMessage(...)`. Enables high-level fuzzing of the P2P layer.\r\n\r\nAll code paths reachable from this fuzzer can be assumed to be reachable for an untrusted peer.\r\n\r\nSeeded from thin air (an empty corpus) this fuzzer reaches roughly 20 000 lines of code.\r\n\r\nTo test this PR:\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ CC=clang CXX=clang++ ./configure --enable-fuzz \\\r\n      --with-sanitizers=address,fuzzer,undefined\r\n$ make\r\n$ src/test/fuzz/process_message\r\n…\r\n```\r\n\r\nWorth noting about this fuzzing harness:\r\n* To achieve a reasonable number of executions per seconds the state of the fuzzer is unfortunately not entirely reset between `test_one_input` calls. The set-up (`FuzzingSetup` ctor) and tear-down (`~FuzzingSetup`) work is simply too costly to be run on every iteration. There is a trade-off to handle here between a.) achieving high executions/second and b.) giving the fuzzer a totally blank slate for each call. Please let me know if you have any suggestion on how to improve this situation while maintaining >1000 executions/second. \r\n* To achieve optimal results when using coverage-guided fuzzing I've chosen to create one specialised fuzzing binary per message type (`process_message_addr`, `process_message_block`, `process_message_blocktxn `, etc.) and one general fuzzing binary (`process_message`) which handles all messages types. The latter general fuzzer can be seeded with inputs generated by the former specialised fuzzers.\r\n\r\nHappy fuzzing friends!",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-01-23T12:22:44Z",
    "updated_at": "2022-08-18T18:22:32Z",
    "closed_at": "2020-03-11T12:53:01Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-03-11T12:53:01Z",
    "merge_commit_sha": "f1064c1b0d102ad669c04099bb474f71d797fce8",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "practicalswift:fuzzers-net-process_message",
      "ref": "fuzzers-net-process_message",
      "sha": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 78569642,
        "node_id": "MDEwOlJlcG9zaXRvcnk3ODU2OTY0Mg==",
        "name": "bitcoin",
        "full_name": "practicalswift/bitcoin",
        "owner": {
          "login": "practicalswift",
          "id": 7826565,
          "node_id": "MDQ6VXNlcjc4MjY1NjU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/practicalswift",
          "html_url": "https://github.com/practicalswift",
          "followers_url": "https://api.github.com/users/practicalswift/followers",
          "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
          "organizations_url": "https://api.github.com/users/practicalswift/orgs",
          "repos_url": "https://api.github.com/users/practicalswift/repos",
          "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/practicalswift/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/practicalswift/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/practicalswift/bitcoin",
        "archive_url": "https://api.github.com/repos/practicalswift/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/practicalswift/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/practicalswift/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/practicalswift/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/practicalswift/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/practicalswift/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/practicalswift/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/practicalswift/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/practicalswift/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/practicalswift/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/practicalswift/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/practicalswift/bitcoin/events",
        "forks_url": "https://api.github.com/repos/practicalswift/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/practicalswift/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/practicalswift/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/practicalswift/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/practicalswift/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/practicalswift/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/practicalswift/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/practicalswift/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/practicalswift/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/practicalswift/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/practicalswift/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/practicalswift/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/practicalswift/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:practicalswift/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/practicalswift/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/practicalswift/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/practicalswift/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/practicalswift/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/practicalswift/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/practicalswift/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/practicalswift/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/practicalswift/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/practicalswift/bitcoin/hooks",
        "svn_url": "https://github.com/practicalswift/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 164685,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2021-10-01T13:54:08Z",
        "created_at": "2017-01-10T20:09:24Z",
        "updated_at": "2022-08-28T15:39:12Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "b5c7665e3083f5daaf2b9f247a59a008f2d689a4",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 277,
    "deletions": 3,
    "changed_files": 4,
    "commits": 2,
    "review_comments": 28,
    "comments": 14
  },
  "events": [
    {
      "event": "labeled",
      "id": 2973531590,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI5NzM1MzE1OTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2973531590",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-23T12:23:13Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2973564904,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk3MzU2NDkwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2973564904",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-23T12:35:32Z"
    },
    {
      "event": "commented",
      "id": 577712875,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzcxMjg3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577712875",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-23T14:47:13Z",
      "updated_at": "2020-03-10T22:29:29Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18134 (Replace std::to_string with locale-independent alternative by Empact)\n* #17997 (refactor: Remove mempool global from net by MarcoFalke)\n* #16442 (Serve BIP 157 compact filters by jimpo)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-577712875",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2977681223,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk3NzY4MTIyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2977681223",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-24T15:44:51Z"
    },
    {
      "event": "commented",
      "id": 584215068,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDIxNTA2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584215068",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-10T16:42:09Z",
      "updated_at": "2020-02-10T16:42:09Z",
      "author_association": "MEMBER",
      "body": "code review ACK 1b67435bccb8e159130ee8dc558c039cbcc5767c",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-584215068",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "commented",
      "id": 584285257,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDI4NTI1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584285257",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-10T18:36:26Z",
      "updated_at": "2020-02-10T18:36:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "@laanwj Thanks for reviewing. Pushed a commit which removes the tinyformat dependency from `ToString(…)`. Please re-review :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-584285257",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "mentioned",
      "id": 3023887716,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzAyMzg4NzcxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3023887716",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-10T18:36:26Z"
    },
    {
      "event": "subscribed",
      "id": 3023887717,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMwMjM4ODc3MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3023887717",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-10T18:36:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3111112250,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExMTExMjI1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3111112250",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T15:19:10Z"
    },
    {
      "event": "commented",
      "id": 596594877,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjU5NDg3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596594877",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T15:19:26Z",
      "updated_at": "2020-03-09T15:19:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased! :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-596594877",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3111172998,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExMTE3Mjk5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3111172998",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T15:32:20Z"
    },
    {
      "event": "labeled",
      "id": 3112055524,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMxMTIwNTU1MjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3112055524",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T19:15:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3112093537,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExMjA5MzUzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3112093537",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T19:27:28Z"
    },
    {
      "event": "commented",
      "id": 596735801,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjczNTgwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596735801",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T19:27:30Z",
      "updated_at": "2020-03-09T19:27:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-596735801",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "unlabeled",
      "id": 3112446153,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzExMjQ0NjE1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3112446153",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T21:19:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 372083928,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDgzOTI4",
      "url": null,
      "actor": null,
      "commit_id": "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. Is there a reason to both allow all message types and then add some fuzzers that only allow one message type?",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#pullrequestreview-372083928",
      "submitted_at": "2020-03-10T15:55:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3115391055,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExNTM5MTA1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3115391055",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T16:05:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3115704788,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExNTcwNDc4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3115704788",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T17:23:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3115920596,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExNTkyMDU5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3115920596",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T18:23:25Z"
    },
    {
      "event": "reviewed",
      "id": 372216336,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjE2MzM2",
      "url": null,
      "actor": null,
      "commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 4d4f38ee5a 🔒\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 4d4f38ee5a 🔒\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjV/gwAyGMYagoM2OCSoUvGaS0o3rBEIIUJ6lt8R/i91LUEuc46NitcJk/GH61o\r\nfH0lnYi3lmLxRxk2BUvwxY7aS+0lHExqcz/O2VBd7A7A8iqQ4TVUcMibXcJMdNrO\r\nC3b+8ndKv18XuYvSaoSWOAG1E9smnB824klvz6gQoF45Ku6qgAd1b/05D85lQf1D\r\n8t5ovpvjN6et1jWoRR5VTL6UeUdtDcwM/HatJ/S6hHqDqbtYlV0HWhqXwt+DqmvY\r\n6Tl6w2yKRXrvrAaLwSFmD+iEQOYSkiEGJgxchjGuy6lo4rQPUQBCwKSZtOEGobLO\r\nqlC1iVhjKHWVflitLkC6u1oW/4domq/ahqkt+PMg9uJMMsMt9L1UtC1t9gqqC7qk\r\nLDAQihxRnYF5jWN5Is25/Qp5OsVRQU8VZQAQ8EpxBHVWkHWIloT+lvXVSp0xbNyJ\r\nKnwQtKxpZ+cSGqd/8nX4aLwTMXo+v5H9+5DudrZ4gpQLdZKp4RqMOyrwWRTdsCfn\r\nvdu0tFx9\r\n=aujQ\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `730802cd0481d1a196758386a01e5111c8d68b5c12c7079e969bf05a0cec0a02  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108730802cd0481d1a196758386a01e5111c8d68b5c12c7079e969bf05a0cec0a02f010c82a4e984eb09fc4df880d205823be7b08fff010a16ec985950ebd81e2e736f78f8b386908f1045e67e0c9f0087e18980f0a6980c80083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010b840327608c6b3f82408f7de12cabb0e08f1045e67e0c9f008ac97d3ecbab9457c0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff010d9f2811921a7dfeb3c24a7153181b3f008f1045e67e0c9f00886d417c68ce3e0280083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010f4955e7a4d7bde7871a7ffb32c4266b608f1045e67e0caf008ec9fb19009049c8f0083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#pullrequestreview-372216336",
      "submitted_at": "2020-03-10T18:47:51Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
    },
    {
      "event": "commented",
      "id": 597254875,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzI1NDg3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597254875",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T18:53:39Z",
      "updated_at": "2020-03-10T18:53:39Z",
      "author_association": "MEMBER",
      "body": "Also, travis is failing ",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597254875",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "commented",
      "id": 597257649,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzI1NzY0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597257649",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T18:59:48Z",
      "updated_at": "2020-03-10T18:59:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Concept ACK. Is there a reason to both allow all message types and then add some fuzzers that only allow one message type?\r\n\r\nYes there is :)\r\n\r\n1. The reason to allow all message types in one of the fuzzers: this allows auto-detection and thus fuzzing of newly introduced messages types without updating the fuzzer. See https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596803815 for a real-world example of that :)\r\n\r\n2. The reason to have also have per-message-type fuzzers is largely for the same reason that we have one fuzzing binary per deserialization: to make it relatively easier for coverage guided fuzzers to reach deep. See sipa's rationale [here](https://github.com/bitcoin/bitcoin/issues/11045#issuecomment-323108021) and kcc's confirmation [here](https://github.com/bitcoin/bitcoin/issues/11045#issuecomment-323198955). Note that @kcc is the one of the libFuzzer authors :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597257649",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "mentioned",
      "id": 3116044597,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzExNjA0NDU5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3116044597",
      "actor": {
        "login": "kcc",
        "id": 1789297,
        "node_id": "MDQ6VXNlcjE3ODkyOTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1789297?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcc",
        "html_url": "https://github.com/kcc",
        "followers_url": "https://api.github.com/users/kcc/followers",
        "following_url": "https://api.github.com/users/kcc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcc/subscriptions",
        "organizations_url": "https://api.github.com/users/kcc/orgs",
        "repos_url": "https://api.github.com/users/kcc/repos",
        "events_url": "https://api.github.com/users/kcc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T18:59:48Z"
    },
    {
      "event": "subscribed",
      "id": 3116044602,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMTYwNDQ2MDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3116044602",
      "actor": {
        "login": "kcc",
        "id": 1789297,
        "node_id": "MDQ6VXNlcjE3ODkyOTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1789297?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcc",
        "html_url": "https://github.com/kcc",
        "followers_url": "https://api.github.com/users/kcc/followers",
        "following_url": "https://api.github.com/users/kcc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcc/subscriptions",
        "organizations_url": "https://api.github.com/users/kcc/orgs",
        "repos_url": "https://api.github.com/users/kcc/repos",
        "events_url": "https://api.github.com/users/kcc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T18:59:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3116110608,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExNjExMDYwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3116110608",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T19:19:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3116113125,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExNjExMzEyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3116113125",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T19:20:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3116268148,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExNjI2ODE0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3116268148",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T20:09:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3116312622,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExNjMxMjYyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3116312622",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T20:22:48Z"
    },
    {
      "event": "commented",
      "id": 597309905,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzMwOTkwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597309905",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T20:55:16Z",
      "updated_at": "2020-03-10T20:55:16Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. This seems super-useful.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597309905",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "commented",
      "id": 597340705,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzM0MDcwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597340705",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T22:06:14Z",
      "updated_at": "2020-03-10T22:06:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "@MarcoFalke After applying the suggested patch and switching to `RegTestingSetup` I'm running in to this issue on fuzzer exit:\r\n\r\n```\r\n$ touch dummy_file\r\n$ src/test/fuzz/process_message dummy_file\r\nprocess_message: /usr/include/boost/thread/pthread/condition_variable_fwd.hpp:116: boost::condition_variable::~condition_variable(): Assertion `!ret' failed.\r\n==12861== ERROR: libFuzzer: deadly signal\r\n    #0 0x5654b00081c1 in __sanitizer_print_stack_trace llvm-project/compiler-rt/lib/asan/asan_stack.cpp:86:3\r\n    #1 0x5654aff47738 in fuzzer::PrintStackTrace() llvm-project/compiler-rt/lib/fuzzer/FuzzerUtil.cpp:205:5\r\n    #2 0x5654aff2b3d6 in fuzzer::Fuzzer::CrashCallback() llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:232:3\r\n    #3 0x7f87e1a8e88f  (/lib/x86_64-linux-gnu/libpthread.so.0+0x1288f)\r\n    #4 0x7f87e06aee96 in __libc_signal_restore_set /build/glibc-OTsEL5/glibc-2.27/signal/../sysdeps/unix/sysv/linux/nptl-signals.h:80\r\n    #5 0x7f87e06aee96 in raise /build/glibc-OTsEL5/glibc-2.27/signal/../sysdeps/unix/sysv/linux/raise.c:48\r\n    #6 0x7f87e06b0800 in abort /build/glibc-OTsEL5/glibc-2.27/stdlib/abort.c:79\r\n    #7 0x7f87e06a0399 in __assert_fail_base /build/glibc-OTsEL5/glibc-2.27/assert/assert.c:92\r\n    #8 0x7f87e06a0411 in __assert_fail /build/glibc-OTsEL5/glibc-2.27/assert/assert.c:101\r\n    #9 0x5654b077009f in boost::condition_variable::~condition_variable() /usr/include/boost/thread/pthread/condition_variable_fwd.hpp:116:13\r\n    #10 0x5654b0620ef0 in CCheckQueue<CScriptCheck>::~CCheckQueue() src/./checkqueue.h:161:5\r\n    #11 0x7f87e06b3040 in __run_exit_handlers /build/glibc-OTsEL5/glibc-2.27/stdlib/exit.c:108\r\n    #12 0x7f87e06b3139 in exit /build/glibc-OTsEL5/glibc-2.27/stdlib/exit.c:139\r\n    #13 0x5654aff1cf98 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:783:8\r\n    #14 0x5654aff47e32 in main llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10\r\n    #15 0x7f87e0691b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\r\n    #16 0x5654afef0119 in _start (src/test/fuzz/process_message+0x1859119)\r\n```\r\n\r\nSeems like `RegTestingSetup` is missing some part of the teardown logic I provided in the previous custom setup :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597340705",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "mentioned",
      "id": 3116619415,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzExNjYxOTQxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3116619415",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T22:06:14Z"
    },
    {
      "event": "subscribed",
      "id": 3116619417,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMTY2MTk0MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3116619417",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T22:06:14Z"
    },
    {
      "event": "commented",
      "id": 597366595,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzM2NjU5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597366595",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T23:19:36Z",
      "updated_at": "2020-03-10T23:19:36Z",
      "author_association": "MEMBER",
      "body": "@practicalswift C++ is a shitshow when it comes to static initialization (order). You might have to manually set up everything in the \"right\" order:\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/process_message.cpp b/src/test/fuzz/process_message.cpp\r\nindex dcf0809e52..92bbc2681e 100644\r\n--- a/src/test/fuzz/process_message.cpp\r\n+++ b/src/test/fuzz/process_message.cpp\r\n@@ -80,15 +80,16 @@ const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCE\r\n     {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\r\n };\r\n \r\n-std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\r\n+const RegTestingSetup* g_setup;\r\n } // namespace\r\n \r\n void initialize()\r\n {\r\n-    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\r\n+    static RegTestingSetup setup{};\r\n+    g_setup = &setup;\r\n \r\n     for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\r\n-        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\r\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\r\n     }\r\n     SyncWithValidationInterfaceQueue();\r\n     assert(ChainActive().Tip() != nullptr);\r\n@@ -116,9 +117,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\r\n     p2p_node.fSuccessfullyConnected = true;\r\n     p2p_node.nVersion = PROTOCOL_VERSION;\r\n     p2p_node.SetSendVersion(PROTOCOL_VERSION);\r\n-    g_fuzzing_setup->m_node.peer_logic->InitializeNode(&p2p_node);\r\n+    g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\r\n     try {\r\n-        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), g_fuzzing_setup->m_node.connman.get(), g_fuzzing_setup->m_node.banman.get(), std::atomic<bool>{false});\r\n+        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), g_setup->m_node.connman.get(), g_setup->m_node.banman.get(), std::atomic<bool>{false});\r\n     } catch (const std::ios_base::failure& e) {\r\n         const std::string exception_message{e.what()};\r\n         const auto p = EXPECTED_DESERIALIZATION_EXCEPTIONS.find(exception_message);\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597366595",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "mentioned",
      "id": 3116789338,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzExNjc4OTMzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3116789338",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T23:19:36Z"
    },
    {
      "event": "subscribed",
      "id": 3116789341,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMTY3ODkzNDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3116789341",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T23:19:37Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDFkYWUxMGI0YTU0OWJhOTI5MmQ4MzcyMzVkNTliZDllZWJiZWQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd1dae10b4a549ba9292d837235d59bd9eebbed3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fd1dae10b4a549ba9292d837235d59bd9eebbed3",
      "tree": {
        "sha": "0fffb609637f4517228a2ada894d9fa9fa314598",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fffb609637f4517228a2ada894d9fa9fa314598"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5518eeec2727d40e1105901a8751bf584ab69402",
          "sha": "5518eeec2727d40e1105901a8751bf584ab69402",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5518eeec2727d40e1105901a8751bf584ab69402"
        }
      ],
      "message": "tests: Add fuzzing harness for ProcessMessage(...)",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-11T06:57:55Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-22T20:23:48Z"
      },
      "sha": "fd1dae10b4a549ba9292d837235d59bd9eebbed3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjIwYTBmZGQwZjNkYzJjOGRkN2NiZWVmYWM3ZDExMTA2NDUxYjUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "tree": {
        "sha": "ae345dfd9c1ecb1800e55210d3a7ad510c2ccf90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae345dfd9c1ecb1800e55210d3a7ad510c2ccf90"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd1dae10b4a549ba9292d837235d59bd9eebbed3",
          "sha": "fd1dae10b4a549ba9292d837235d59bd9eebbed3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fd1dae10b4a549ba9292d837235d59bd9eebbed3"
        }
      ],
      "message": "tests: Add one specialized ProcessMessage(...) fuzzing binary per message type for optimal results when using coverage-guided fuzzing",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-11T06:57:55Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-23T11:47:12Z"
      },
      "sha": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51"
    },
    {
      "event": "commented",
      "id": 597475525,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzQ3NTUyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597475525",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T07:02:34Z",
      "updated_at": "2020-03-11T07:02:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "@MarcoFalke Indeed :) Thanks for the patch - that fixed the issue!\r\n\r\nPlease re-review - I think we should be ready to go :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597475525",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "mentioned",
      "id": 3117544617,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzExNzU0NDYxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3117544617",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T07:02:34Z"
    },
    {
      "event": "subscribed",
      "id": 3117544620,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMTc1NDQ2MjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3117544620",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T07:02:34Z"
    },
    {
      "event": "commented",
      "id": 597590051,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzU5MDA1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597590051",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T11:55:16Z",
      "updated_at": "2020-03-11T11:55:16Z",
      "author_association": "MEMBER",
      "body": "@practicalswift pls push your local branch to GitHub, thx",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597590051",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "mentioned",
      "id": 3118476097,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzExODQ3NjA5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3118476097",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T11:55:16Z"
    },
    {
      "event": "subscribed",
      "id": 3118476099,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMTg0NzYwOTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3118476099",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T11:55:16Z"
    },
    {
      "event": "commented",
      "id": 597595100,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzU5NTEwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597595100",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T12:07:51Z",
      "updated_at": "2020-03-11T12:07:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "@MarcoFalke Sorry! Done! :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597595100",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "mentioned",
      "id": 3118515877,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzExODUxNTg3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3118515877",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T12:07:51Z"
    },
    {
      "event": "subscribed",
      "id": 3118515879,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMTg1MTU4Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3118515879",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T12:07:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3118516001,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExODUxNjAwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3118516001",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T12:07:54Z"
    },
    {
      "event": "commented",
      "id": 597613039,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzYxMzAzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597613039",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T12:49:21Z",
      "updated_at": "2020-03-11T12:50:08Z",
      "author_association": "MEMBER",
      "body": "ACK 9220a0fdd0 🏊\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 9220a0fdd0 🏊\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjT1QwAhjXDNbw5aYFTlg68glVfl5CPdMNZ4gKbD/RkTp3bWXzxo7f/RvRh1WCc\r\n+ifotMLe4Ihdj2r6H6guhYy46Damnk+qPhaDfLxGQAc2mwZrJ4gHiS2LDiZsvckD\r\nX6+SMgJK2uHEy9u5zjXLEFOoHArGb2J73XloMTmJR7HTLlFy53hEMJsYqu9+Fmo+\r\nsxzXBF1Mn40I+NnHr9bEPe66fgw6Nf3PiM9CIbJLQRBhCXRLAnkurO6Ai7gK71a+\r\nDjxaCie+KBcpupVdbHPTRIyRO98jSndZYzK9ksSDshh2ifxGhrUQGSKRQ3e6CGtZ\r\nfgZsB3o+TKmMPKIawyxU1oAfpuCmWC/seqoLPvR7ymoYgd+gsNZGjp7w+hVbiku9\r\n6SwRrQSRqGg5cio4qWbqqlyqmzGBpDrs9MjcY3/NF/mJrafarZ2UB+BKQ5IrXkZj\r\nBidwPFy4zJS+8hPUGeRqH8igHzG3cY5xkB1Q+Wpy2McjDguh1qkzWJcU/9ifRqnj\r\n2DQxCmcw\r\n=VmPE\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `11743d3aff704a992c2abdf56c51b9f75f57199d2d9b269edff015d74f3fe9c3  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010811743d3aff704a992c2abdf56c51b9f75f57199d2d9b269edff015d74f3fe9c3f010e01341c2b0bfe8ce3a90fdf73a431aa508fff01002983f3c9f137b09ac6611d8aea05aa508f1045e68de70f0089357c329825c675c0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff0103692e1ac0f3bc671bddcd989d1c5031008f1045e68de70f008300cb06bde33dfc60083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff010d2f9a7014293b7f14070534a40f5315e08f1045e68de70f008c33a7c2594c07c460083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010f1cdf71bc2fcead3ec92d4911d58e32308f1045e68de70f00895e1427478902c910083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597613039",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17989"
    },
    {
      "event": "merged",
      "id": 3118664229,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzExODY2NDIyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3118664229",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f1064c1b0d102ad669c04099bb474f71d797fce8",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1064c1b0d102ad669c04099bb474f71d797fce8",
      "created_at": "2020-03-11T12:53:01Z"
    },
    {
      "event": "closed",
      "id": 3118664235,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzExODY2NDIzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3118664235",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T12:53:02Z"
    },
    {
      "event": "referenced",
      "id": 3900101741,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5MDAxMDE3NDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3900101741",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "946eb500935b5da9ed4036ab3629d242b366f9ee",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/946eb500935b5da9ed4036ab3629d242b366f9ee",
      "created_at": "2020-10-20T18:05:08Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 4577819695,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQ0NTc3ODE5Njk1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4577819695",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-10T19:40:05Z"
    },
    {
      "event": "referenced",
      "id": 5862609453,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAFdcFIt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5862609453",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c8470e7d1eb5102d4b5a536e8664ec9d028775fb",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/c8470e7d1eb5102d4b5a536e8664ec9d028775fb",
      "created_at": "2022-01-09T18:19:52Z"
    },
    {
      "event": "referenced",
      "id": 5873540826,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAFeFx7a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5873540826",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "097771279c8ab9a6d0ae54efdf86a2b5b710d58d",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/097771279c8ab9a6d0ae54efdf86a2b5b710d58d",
      "created_at": "2022-01-11T13:50:15Z"
    },
    {
      "event": "referenced",
      "id": 5947775702,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAFig9rW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5947775702",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "16afcfcba05ab1254f84ea15c7f89499ad88eb61",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/16afcfcba05ab1254f84ea15c7f89499ad88eb61",
      "created_at": "2022-01-25T07:48:09Z"
    },
    {
      "event": "referenced",
      "id": 6106237907,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAFr9cvT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6106237907",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a5292ea5a09ccb79616ecd4da489970db0d55fa8",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/a5292ea5a09ccb79616ecd4da489970db0d55fa8",
      "created_at": "2022-02-19T17:52:46Z"
    },
    {
      "event": "referenced",
      "id": 6303730297,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAF3u0p5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6303730297",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "86069b7982385ef576fc0c3da731b3e8182bab69",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/86069b7982385ef576fc0c3da731b3e8182bab69",
      "created_at": "2022-03-25T00:20:34Z"
    },
    {
      "event": "referenced",
      "id": 6336987255,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAF5tsB3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6336987255",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6c1bc4d507c0cde95baea012c9d2eb077d8dc8e5",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/6c1bc4d507c0cde95baea012c9d2eb077d8dc8e5",
      "created_at": "2022-03-30T17:20:33Z"
    },
    {
      "event": "referenced",
      "id": 6358184763,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAF6-jM7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6358184763",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7dddeedd2feb0e75a98bcb1ab51705f820c1da1a",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/7dddeedd2feb0e75a98bcb1ab51705f820c1da1a",
      "created_at": "2022-04-03T12:19:36Z"
    },
    {
      "event": "referenced",
      "id": 6358187093,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAF6-jxV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6358187093",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "84c9f759f2269788783b5252a65df599d9a22099",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/84c9f759f2269788783b5252a65df599d9a22099",
      "created_at": "2022-04-03T12:21:41Z"
    },
    {
      "event": "referenced",
      "id": 6369367376,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAF7pNVQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6369367376",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a2f7e179c03a6cb389a60915bb9b68bc0ee6e11b",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/a2f7e179c03a6cb389a60915bb9b68bc0ee6e11b",
      "created_at": "2022-04-05T09:00:35Z"
    },
    {
      "event": "referenced",
      "id": 6369543268,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAF7p4Rk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6369543268",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bc429080e1e1ebfa63b8df8430898d863d916c54",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/bc429080e1e1ebfa63b8df8430898d863d916c54",
      "created_at": "2022-04-05T09:24:48Z"
    },
    {
      "event": "referenced",
      "id": 6381086571,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAF8V6dr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6381086571",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0499ddb6b2689a4cb5e3f55c067094b707d5dca4",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/0499ddb6b2689a4cb5e3f55c067094b707d5dca4",
      "created_at": "2022-04-06T15:20:04Z"
    },
    {
      "event": "referenced",
      "id": 6381153970,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAF8WK6y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6381153970",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2d4d2fe9c581e34f092cd6415bf6b43611635075",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/2d4d2fe9c581e34f092cd6415bf6b43611635075",
      "created_at": "2022-04-06T15:28:51Z"
    },
    {
      "event": "referenced",
      "id": 6381190447,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAF8WT0v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6381190447",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a379752786ce7f7ace6998c625524163d146dc90",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/a379752786ce7f7ace6998c625524163d146dc90",
      "created_at": "2022-04-06T15:33:39Z"
    },
    {
      "event": "referenced",
      "id": 6388426752,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAF8x6gA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6388426752",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d76308ece9d71ca77b99933499de92b82e71ac18",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/d76308ece9d71ca77b99933499de92b82e71ac18",
      "created_at": "2022-04-07T13:11:31Z"
    },
    {
      "event": "referenced",
      "id": 6389752666,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAF82-Na",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6389752666",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "dfb238a6c387e93a5e8e39c03a9b3790ff93a2b6",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/dfb238a6c387e93a5e8e39c03a9b3790ff93a2b6",
      "created_at": "2022-04-07T15:48:42Z"
    },
    {
      "event": "referenced",
      "id": 6444406305,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAGAHdYh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6444406305",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "061d82c03bdf9fbd226c20b881fc45dfb4a54732",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/061d82c03bdf9fbd226c20b881fc45dfb4a54732",
      "created_at": "2022-04-17T10:54:03Z"
    },
    {
      "event": "referenced",
      "id": 6457703206,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAGA6Lsm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6457703206",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f0263a362930f02973fac1622f683c53b9f31040",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/f0263a362930f02973fac1622f683c53b9f31040",
      "created_at": "2022-04-19T19:08:13Z"
    },
    {
      "event": "referenced",
      "id": 6463229571,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAGBPQ6D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6463229571",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f2704eae34706b884eb38701dd30e664395ad33a",
      "commit_url": "https://api.github.com/repos/dashpay/dash/commits/f2704eae34706b884eb38701dd30e664395ad33a",
      "created_at": "2022-04-20T13:34:03Z"
    },
    {
      "event": "referenced",
      "id": 6944422053,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAGd63il",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6944422053",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "764e2c7a5f86cb5a8f3aee25bb4c543de51050b6",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/764e2c7a5f86cb5a8f3aee25bb4c543de51050b6",
      "created_at": "2022-07-06T16:45:15Z"
    },
    {
      "event": "referenced",
      "id": 6945610958,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAGd_ZzO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6945610958",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "778800649e8e3999d0ca1c2a85f92e992f47c2ea",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/778800649e8e3999d0ca1c2a85f92e992f47c2ea",
      "created_at": "2022-07-06T19:32:05Z"
    },
    {
      "event": "referenced",
      "id": 6982537420,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAGgMRDM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6982537420",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4129098940d82499551675862242b6dc2467409a",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/4129098940d82499551675862242b6dc2467409a",
      "created_at": "2022-07-13T03:45:23Z"
    },
    {
      "event": "referenced",
      "id": 6986410548,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAGgbCo0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6986410548",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "10e55b306792bf23c761e277ebccc8cd065e4921",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/10e55b306792bf23c761e277ebccc8cd065e4921",
      "created_at": "2022-07-13T14:13:24Z"
    },
    {
      "event": "referenced",
      "id": 7002942407,
      "node_id": "REFE_lADOABII584hB0SwzwAAAAGhaGvH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7002942407",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "38781fc11478bb2fe1cffae51f964d2fa1a8de50",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/38781fc11478bb2fe1cffae51f964d2fa1a8de50",
      "created_at": "2022-07-15T15:54:42Z"
    },
    {
      "event": "locked",
      "id": 7216530273,
      "node_id": "LOE_lADOABII584hB0SwzwAAAAGuI4Nh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7216530273",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T18:22:32Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390418127",
      "pull_request_review_id": 372083928,
      "id": 390418127,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxODEyNw==",
      "diff_hunk": "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 110,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this needed and why does it reimplement stuff that could be inherited from `RegTestingSetup`?",
      "created_at": "2020-03-10T15:50:40Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390418127",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390418127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390421010",
      "pull_request_review_id": 372083928,
      "id": 390421010,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyMTAxMA==",
      "diff_hunk": "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup\n+{\n+    boost::thread_group m_thread_group;\n+    const fs::path m_path;\n+    std::unique_ptr<PeerLogicValidation> m_peer_logic_validation;\n+\n+public:\n+    CScheduler m_scheduler;\n+    NodeContext m_node_context;\n+    std::unique_ptr<CNode> m_dummy_p2p_node;\n+\n+    FuzzingSetup(const std::string& fuzzer_name) : m_path{fs::temp_directory_path() / \"fuzzers\" / fuzzer_name / ToString(FastRandomContext().rand64())}\n+    {\n+        SelectParams(CBaseChainParams::REGTEST);\n+        fs::remove_all(m_path);\n+        fs::create_directories(m_path);\n+        ::gArgs.ForceSetArg(\"-datadir\", m_path.string());\n+        InitLogging();\n+        LogInstance().m_print_to_console = false;\n+        LogInstance().StartLogging();\n+        ::g_chainstate = MakeUnique<CChainState>();\n+        ::pblocktree = MakeUnique<CBlockTreeDB>(1 << 20, true);\n+        m_dummy_p2p_node = MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false);\n+        m_dummy_p2p_node->fSuccessfullyConnected = true;\n+        m_dummy_p2p_node->nVersion = PROTOCOL_VERSION;\n+        m_dummy_p2p_node->SetSendVersion(PROTOCOL_VERSION);\n+        m_node_context.mempool = &::mempool;\n+        m_node_context.mempool->setSanityCheck(1.0);\n+        m_node_context.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+        m_node_context.connman = MakeUnique<CConnman>(0x1337, 0x1337);\n+        m_thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &m_scheduler));\n+        GetMainSignals().RegisterBackgroundSignalScheduler(m_scheduler);\n+        ChainstateActive().InitCoinsDB(1 << 23, true, false);\n+        ChainstateActive().InitCoinsCache();\n+        if (!LoadGenesisBlock(Params())) {\n+            throw std::runtime_error(\"LoadGenesisBlock(...) failed.\");\n+        }\n+        BlockValidationState block_validation_state;\n+        if (!ActivateBestChain(block_validation_state, Params())) {\n+            throw std::runtime_error(\"ActivateBestChain(...) failed.\");\n+        }\n+        for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+            CreateAndProcessNextBlock(*m_node_context.mempool);\n+            SleepUntilSchedulerCompletion(m_scheduler);\n+        }\n+        assert(ChainActive().Tip() != nullptr);\n+        m_peer_logic_validation = MakeUnique<PeerLogicValidation>(m_node_context.connman.get(), nullptr, m_scheduler);\n+        m_peer_logic_validation->InitializeNode(m_dummy_p2p_node.get());\n+        assert(GetMainSignals().CallbacksPending() == 0);\n+        SleepUntilSchedulerCompletion(m_scheduler, 1);\n+        LogInstance().m_print_to_console = true;\n+    }\n+\n+    ~FuzzingSetup()\n+    {\n+        LogInstance().DisconnectTestLogger();\n+        fs::remove_all(m_path);\n+        m_thread_group.interrupt_all();\n+        m_thread_group.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    }\n+};\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<FuzzingSetup> fuzzing_setup;",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 185,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nstd::unique_ptr<FuzzingSetup> g_fuzzing_setup;\r\n```\r\n\r\nThis should be prefixed with `g_` to convey this is global state that is shared between fuzz calls and might lead to non-determinism.",
      "created_at": "2020-03-10T15:54:32Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390421010",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390421010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390429237",
      "pull_request_review_id": 372098117,
      "id": 390429237,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyOTIzNw==",
      "diff_hunk": "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup\n+{\n+    boost::thread_group m_thread_group;\n+    const fs::path m_path;\n+    std::unique_ptr<PeerLogicValidation> m_peer_logic_validation;\n+\n+public:\n+    CScheduler m_scheduler;\n+    NodeContext m_node_context;\n+    std::unique_ptr<CNode> m_dummy_p2p_node;\n+\n+    FuzzingSetup(const std::string& fuzzer_name) : m_path{fs::temp_directory_path() / \"fuzzers\" / fuzzer_name / ToString(FastRandomContext().rand64())}\n+    {\n+        SelectParams(CBaseChainParams::REGTEST);\n+        fs::remove_all(m_path);\n+        fs::create_directories(m_path);\n+        ::gArgs.ForceSetArg(\"-datadir\", m_path.string());\n+        InitLogging();\n+        LogInstance().m_print_to_console = false;\n+        LogInstance().StartLogging();\n+        ::g_chainstate = MakeUnique<CChainState>();\n+        ::pblocktree = MakeUnique<CBlockTreeDB>(1 << 20, true);\n+        m_dummy_p2p_node = MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false);\n+        m_dummy_p2p_node->fSuccessfullyConnected = true;\n+        m_dummy_p2p_node->nVersion = PROTOCOL_VERSION;\n+        m_dummy_p2p_node->SetSendVersion(PROTOCOL_VERSION);\n+        m_node_context.mempool = &::mempool;\n+        m_node_context.mempool->setSanityCheck(1.0);\n+        m_node_context.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+        m_node_context.connman = MakeUnique<CConnman>(0x1337, 0x1337);\n+        m_thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &m_scheduler));\n+        GetMainSignals().RegisterBackgroundSignalScheduler(m_scheduler);\n+        ChainstateActive().InitCoinsDB(1 << 23, true, false);\n+        ChainstateActive().InitCoinsCache();\n+        if (!LoadGenesisBlock(Params())) {\n+            throw std::runtime_error(\"LoadGenesisBlock(...) failed.\");\n+        }\n+        BlockValidationState block_validation_state;\n+        if (!ActivateBestChain(block_validation_state, Params())) {\n+            throw std::runtime_error(\"ActivateBestChain(...) failed.\");\n+        }\n+        for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+            CreateAndProcessNextBlock(*m_node_context.mempool);\n+            SleepUntilSchedulerCompletion(m_scheduler);\n+        }\n+        assert(ChainActive().Tip() != nullptr);\n+        m_peer_logic_validation = MakeUnique<PeerLogicValidation>(m_node_context.connman.get(), nullptr, m_scheduler);\n+        m_peer_logic_validation->InitializeNode(m_dummy_p2p_node.get());\n+        assert(GetMainSignals().CallbacksPending() == 0);\n+        SleepUntilSchedulerCompletion(m_scheduler, 1);\n+        LogInstance().m_print_to_console = true;\n+    }\n+\n+    ~FuzzingSetup()\n+    {\n+        LogInstance().DisconnectTestLogger();\n+        fs::remove_all(m_path);\n+        m_thread_group.interrupt_all();\n+        m_thread_group.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    }\n+};\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<FuzzingSetup> fuzzing_setup;",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 185,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "in_reply_to_id": 390421010,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point! Fixed!",
      "created_at": "2020-03-10T16:05:28Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390429237",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390429237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390441097",
      "pull_request_review_id": 372113227,
      "id": 390441097,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0MTA5Nw==",
      "diff_hunk": "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 110,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "in_reply_to_id": 390418127,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The setup requirements for the fuzzers are a bit different from the requirements for the unit tests. To name one thing I wanted `FastRandomContext().rand64()` instead of `g_insecure_rand_ctx_temp_path.rand32()` to guarantee unique directory names. I ran in to a few such issues until I gave up on inheriting from `RegTestingSetup` which was my initial plan :)",
      "created_at": "2020-03-10T16:22:04Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390441097",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390441097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390493966",
      "pull_request_review_id": 372178850,
      "id": 390493966,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5Mzk2Ng==",
      "diff_hunk": "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 110,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "in_reply_to_id": 390418127,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry, I don't understand.\r\n\r\n* The fuzzing setup here is a single global, so it is one datadir per process that does not change. Assuming 60 processes or so, 32 bits of randomness should be sufficient. Though, feel free to change it to 256 bits of randomness.\r\n\r\n* Why are the requirements different? There are different `*TestingSetup`s to accommodate for different needs, but they are mostly inheriting from each other. Why is this not possible for FuzzingSetup? I can replace it with a plain `RegTestingSetup` and everything works just fine. Please explain the issues you are running into.\r\n\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/process_message.cpp b/src/test/fuzz/process_message.cpp\r\nindex 3048b09564..ffb7a78b5b 100644\r\n--- a/src/test/fuzz/process_message.cpp\r\n+++ b/src/test/fuzz/process_message.cpp\r\n@@ -28,6 +28,7 @@\r\n #include <test/fuzz/FuzzedDataProvider.h>\r\n #include <test/fuzz/fuzz.h>\r\n #include <test/util/setup_common.h>\r\n+#include <test/util/mining.h>\r\n #include <txdb.h>\r\n #include <txmempool.h>\r\n #include <util/memory.h>\r\n@@ -58,23 +59,6 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\r\n \r\n namespace {\r\n \r\n-size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\r\n-{\r\n-    std::chrono::system_clock::time_point first, last;\r\n-    return scheduler.getQueueInfo(first, last);\r\n-}\r\n-\r\n-void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\r\n-{\r\n-    for (int i = 0; i < 10; ++i) {\r\n-        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\r\n-            return;\r\n-        }\r\n-        UninterruptibleSleep(std::chrono::milliseconds{10});\r\n-    }\r\n-    assert(false);\r\n-}\r\n-\r\n #ifdef MESSAGE_TYPE\r\n #define TO_STRING_(s) #s\r\n #define TO_STRING(s) TO_STRING_(s)\r\n@@ -83,94 +67,6 @@ const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\r\n const std::string LIMIT_TO_MESSAGE_TYPE;\r\n #endif\r\n \r\n-void CreateAndProcessNextBlock(const CTxMemPool& mempool)\r\n-{\r\n-    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\r\n-    CBlock& block = block_template->block;\r\n-    {\r\n-        LOCK(cs_main);\r\n-        unsigned int extra_nonce;\r\n-        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\r\n-    }\r\n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\r\n-        ++block.nNonce;\r\n-    }\r\n-    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\r\n-}\r\n-\r\n-template <typename T>\r\n-std::string ToString(const T t)\r\n-{\r\n-    std::ostringstream oss;\r\n-    oss.imbue(std::locale::classic());\r\n-    oss << t;\r\n-    return oss.str();\r\n-}\r\n-\r\n-class FuzzingSetup\r\n-{\r\n-    boost::thread_group m_thread_group;\r\n-    const fs::path m_path;\r\n-    std::unique_ptr<PeerLogicValidation> m_peer_logic_validation;\r\n-\r\n-public:\r\n-    CScheduler m_scheduler;\r\n-    NodeContext m_node_context;\r\n-    std::unique_ptr<CNode> m_dummy_p2p_node;\r\n-\r\n-    FuzzingSetup(const std::string& fuzzer_name) : m_path{fs::temp_directory_path() / \"fuzzers\" / fuzzer_name / ToString(FastRandomContext().rand64())}\r\n-    {\r\n-        SelectParams(CBaseChainParams::REGTEST);\r\n-        fs::remove_all(m_path);\r\n-        fs::create_directories(m_path);\r\n-        ::gArgs.ForceSetArg(\"-datadir\", m_path.string());\r\n-        InitLogging();\r\n-        LogInstance().m_print_to_console = false;\r\n-        LogInstance().StartLogging();\r\n-        ::g_chainstate = MakeUnique<CChainState>();\r\n-        ::pblocktree = MakeUnique<CBlockTreeDB>(1 << 20, true);\r\n-        m_dummy_p2p_node = MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false);\r\n-        m_dummy_p2p_node->fSuccessfullyConnected = true;\r\n-        m_dummy_p2p_node->nVersion = PROTOCOL_VERSION;\r\n-        m_dummy_p2p_node->SetSendVersion(PROTOCOL_VERSION);\r\n-        m_node_context.mempool = &::mempool;\r\n-        m_node_context.mempool->setSanityCheck(1.0);\r\n-        m_node_context.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\r\n-        m_node_context.connman = MakeUnique<CConnman>(0x1337, 0x1337);\r\n-        m_thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &m_scheduler));\r\n-        GetMainSignals().RegisterBackgroundSignalScheduler(m_scheduler);\r\n-        ChainstateActive().InitCoinsDB(1 << 23, true, false);\r\n-        ChainstateActive().InitCoinsCache();\r\n-        if (!LoadGenesisBlock(Params())) {\r\n-            throw std::runtime_error(\"LoadGenesisBlock(...) failed.\");\r\n-        }\r\n-        BlockValidationState block_validation_state;\r\n-        if (!ActivateBestChain(block_validation_state, Params())) {\r\n-            throw std::runtime_error(\"ActivateBestChain(...) failed.\");\r\n-        }\r\n-        for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\r\n-            CreateAndProcessNextBlock(*m_node_context.mempool);\r\n-            SleepUntilSchedulerCompletion(m_scheduler);\r\n-        }\r\n-        assert(ChainActive().Tip() != nullptr);\r\n-        m_peer_logic_validation = MakeUnique<PeerLogicValidation>(m_node_context.connman.get(), nullptr, m_scheduler);\r\n-        m_peer_logic_validation->InitializeNode(m_dummy_p2p_node.get());\r\n-        assert(GetMainSignals().CallbacksPending() == 0);\r\n-        SleepUntilSchedulerCompletion(m_scheduler, 1);\r\n-        LogInstance().m_print_to_console = true;\r\n-    }\r\n-\r\n-    ~FuzzingSetup()\r\n-    {\r\n-        LogInstance().DisconnectTestLogger();\r\n-        fs::remove_all(m_path);\r\n-        m_thread_group.interrupt_all();\r\n-        m_thread_group.join_all();\r\n-        GetMainSignals().FlushBackgroundCallbacks();\r\n-        GetMainSignals().UnregisterBackgroundSignalScheduler();\r\n-    }\r\n-};\r\n-\r\n const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\r\n     {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\r\n     {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\r\n@@ -182,12 +78,20 @@ const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCE\r\n     {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\r\n };\r\n \r\n-std::unique_ptr<FuzzingSetup> g_fuzzing_setup;\r\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\r\n } // namespace\r\n \r\n void initialize()\r\n {\r\n-    g_fuzzing_setup = MakeUnique<FuzzingSetup>(\"process_message-\" + (LIMIT_TO_MESSAGE_TYPE.empty() ? \"all\" : LIMIT_TO_MESSAGE_TYPE));\r\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\r\n+\r\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\r\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\r\n+    }\r\n+    SyncWithValidationInterfaceQueue();\r\n+    assert(ChainActive().Tip() != nullptr);\r\n+    assert(GetMainSignals().CallbacksPending() == 0);\r\n+    LogInstance().m_print_to_console = true;\r\n }\r\n \r\n void test_one_input(const std::vector<uint8_t>& buffer)\r\n@@ -206,9 +110,13 @@ void test_one_input(const std::vector<uint8_t>& buffer)\r\n         return;\r\n     }\r\n     CDataStream random_bytes_data_stream{fuzzed_data_provider.ConsumeRemainingBytes<unsigned char>(), SER_NETWORK, PROTOCOL_VERSION};\r\n-    CNode& p2p_node = *g_fuzzing_setup->m_dummy_p2p_node;\r\n+    CNode p2p_node{0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false};\r\n+    p2p_node.fSuccessfullyConnected = true;\r\n+    p2p_node.nVersion = PROTOCOL_VERSION;\r\n+    p2p_node.SetSendVersion(PROTOCOL_VERSION);\r\n+    g_fuzzing_setup->m_node.peer_logic->InitializeNode(&p2p_node);\r\n     try {\r\n-        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), g_fuzzing_setup->m_node_context.connman.get(), g_fuzzing_setup->m_node_context.banman.get(), std::atomic<bool>{false});\r\n+        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), g_fuzzing_setup->m_node.connman.get(), g_fuzzing_setup->m_node.banman.get(), std::atomic<bool>{false});\r\n     } catch (const std::ios_base::failure& e) {\r\n         const std::string exception_message{e.what()};\r\n         const auto p = EXPECTED_DESERIALIZATION_EXCEPTIONS.find(exception_message);\r\n@@ -219,18 +127,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\r\n     } catch (...) {\r\n         assert(false);\r\n     }\r\n-    p2p_node.fDisconnect = false;\r\n-    p2p_node.fPauseSend = false;\r\n-    p2p_node.nSendSize = 0;\r\n-    {\r\n-        LOCK(p2p_node.cs_inventory);\r\n-        p2p_node.vInventoryBlockToSend.clear();\r\n-    }\r\n-    p2p_node.vRecvGetData.clear();\r\n-    {\r\n-        LOCK(p2p_node.cs_vSend);\r\n-        p2p_node.vSendMsg.clear();\r\n-    }\r\n     assert(GetMainSignals().CallbacksPending() == 0);\r\n-    SleepUntilSchedulerCompletion(g_fuzzing_setup->m_scheduler, 1);\r\n+    SyncWithValidationInterfaceQueue();\r\n }\r\ndiff --git a/src/test/util/setup_common.cpp b/src/test/util/setup_common.cpp\r\nindex 53eb9ff43b..7fdbbdfd1d 100644\r\n--- a/src/test/util/setup_common.cpp\r\n+++ b/src/test/util/setup_common.cpp\r\n@@ -7,6 +7,7 @@\r\n #include <banman.h>\r\n #include <chainparams.h>\r\n #include <consensus/consensus.h>\r\n+#include <net_processing.h>\r\n #include <consensus/params.h>\r\n #include <consensus/validation.h>\r\n #include <crypto/sha256.h>\r\n@@ -62,7 +63,7 @@ std::ostream& operator<<(std::ostream& os, const uint256& num)\r\n }\r\n \r\n BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\r\n-    : m_path_root{fs::temp_directory_path() / \"test_common_\" PACKAGE_NAME / std::to_string(g_insecure_rand_ctx_temp_path.rand32())}\r\n+    : m_path_root{fs::temp_directory_path() / \"test_common_\" PACKAGE_NAME / g_insecure_rand_ctx_temp_path.rand256().ToString()}\r\n {\r\n     fs::create_directories(m_path_root);\r\n     gArgs.ForceSetArg(\"-datadir\", m_path_root.string());\r\n@@ -136,6 +137,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\r\n     m_node.mempool->setSanityCheck(1.0);\r\n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\r\n     m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\r\n+    m_node.peer_logic = MakeUnique<PeerLogicValidation>(m_node.connman.get(), m_node.banman.get(), *m_node.scheduler);\r\n }\r\n \r\n TestingSetup::~TestingSetup()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2020-03-10T17:39:56Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390493966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390493966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390494749",
      "pull_request_review_id": 372179796,
      "id": 390494749,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5NDc0OQ==",
      "diff_hunk": "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 110,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "in_reply_to_id": 390418127,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "100 lines of undocumented code without a given reason are even too much for unit or fuzz tests. This makes it harder to understand and change the tests in the future.",
      "created_at": "2020-03-10T17:41:08Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390494749",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390494749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390514338",
      "pull_request_review_id": 372203351,
      "id": 390514338,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxNDMzOA==",
      "diff_hunk": "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 110,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "in_reply_to_id": 390418127,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> The fuzzing setup here is a single global, so it is one datadir per process that does not change. Assuming 60 processes or so, 32 bits of randomness should be sufficient.\r\n\r\nOh, true. I experimented with having the fuzzing setup non-global to start with (one setup per `test_one_input`). That's probably when `FastRandomContext().rand64()` was thought to be needed IIRC.\r\n\r\nI'll try your patch: if we can get it working with `RegTestingSetup` then that's great :)",
      "created_at": "2020-03-10T18:11:37Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390514338",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390514338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390524897",
      "pull_request_review_id": 372216336,
      "id": 390524897,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNDg5Nw==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unused?",
      "created_at": "2020-03-10T18:29:13Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390524897",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390524897"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390525259",
      "pull_request_review_id": 372216336,
      "id": 390525259,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNTI1OQ==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unused?",
      "created_at": "2020-03-10T18:29:51Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390525259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390525259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390525911",
      "pull_request_review_id": 372216336,
      "id": 390525911,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNTkxMQ==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unused?",
      "created_at": "2020-03-10T18:30:52Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390525911",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390525911"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": 5,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390526189",
      "pull_request_review_id": 372216336,
      "id": 390526189,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNjE4OQ==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unused?",
      "created_at": "2020-03-10T18:31:17Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390526189",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390526189"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": 19,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390526318",
      "pull_request_review_id": 372216336,
      "id": 390526318,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNjMxOA==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unused?",
      "created_at": "2020-03-10T18:31:29Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390526318",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390526318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": 22,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390526557",
      "pull_request_review_id": 372216336,
      "id": 390526557,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNjU1Nw==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unused?",
      "created_at": "2020-03-10T18:31:55Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390526557",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390526557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": 32,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390527256",
      "pull_request_review_id": 372216336,
      "id": 390527256,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNzI1Ng==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unused except for map, set, assert and string?",
      "created_at": "2020-03-10T18:33:12Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390527256",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390527256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": 41,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390528317",
      "pull_request_review_id": 372216336,
      "id": 390528317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyODMxNw==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};",
      "path": "src/test/fuzz/process_message.cpp",
      "position": 77,
      "original_position": 105,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE)};\r\n```",
      "created_at": "2020-03-10T18:35:07Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390528317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390528317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390529390",
      "pull_request_review_id": 372216336,
      "id": 390529390,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyOTM5MA==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (LIMIT_TO_MESSAGE_TYPE.empty()) {\n+        const std::vector<std::string>& valid_message_types = getAllNetMessageTypes();\n+        if (std::find(valid_message_types.begin(), valid_message_types.end(), random_message_type) == valid_message_types.end()) {\n+            return;",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 109,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why? Bitcoin Core should just drop the message on the floor itself",
      "created_at": "2020-03-10T18:36:56Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390529390",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390529390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390530482",
      "pull_request_review_id": 372223160,
      "id": 390530482,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzMDQ4Mg==",
      "diff_hunk": "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 110,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "in_reply_to_id": 390418127,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated. Now using `RegTestingSetup`. Thanks for the patch!",
      "created_at": "2020-03-10T18:38:45Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390530482",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390530482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390530731",
      "pull_request_review_id": 372216336,
      "id": 390530731,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzMDczMQ==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why? Seems a bit verbose to have everything interleaved with the libfuzzer log.\r\n\r\nFor debugging a specific failure, this can always be enabled.",
      "created_at": "2020-03-10T18:39:08Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390530731",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390530731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390533597",
      "pull_request_review_id": 372216336,
      "id": 390533597,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzMzU5Nw==",
      "diff_hunk": "@@ -7,6 +7,7 @@\n #include <banman.h>\n #include <chainparams.h>\n #include <consensus/consensus.h>\n+#include <net_processing.h>",
      "path": "src/test/util/setup_common.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "pls sort",
      "created_at": "2020-03-10T18:43:38Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390533597",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390533597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390534051",
      "pull_request_review_id": 372216336,
      "id": 390534051,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNDA1MQ==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (LIMIT_TO_MESSAGE_TYPE.empty()) {\n+        const std::vector<std::string>& valid_message_types = getAllNetMessageTypes();\n+        if (std::find(valid_message_types.begin(), valid_message_types.end(), random_message_type) == valid_message_types.end()) {\n+            return;\n+        }\n+    } else if (random_message_type != LIMIT_TO_MESSAGE_TYPE) {\n+        return;\n+    }\n+    CDataStream random_bytes_data_stream{fuzzed_data_provider.ConsumeRemainingBytes<unsigned char>(), SER_NETWORK, PROTOCOL_VERSION};\n+    CNode p2p_node{0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false};\n+    p2p_node.fSuccessfullyConnected = true;\n+    p2p_node.nVersion = PROTOCOL_VERSION;\n+    p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+    g_fuzzing_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+    try {\n+        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), g_fuzzing_setup->m_node.connman.get(), g_fuzzing_setup->m_node.banman.get(), std::atomic<bool>{false});\n+    } catch (const std::ios_base::failure& e) {\n+        const std::string exception_message{e.what()};\n+        const auto p = EXPECTED_DESERIALIZATION_EXCEPTIONS.find(exception_message);\n+        if (p == EXPECTED_DESERIALIZATION_EXCEPTIONS.cend() || p->second.count(random_message_type) == 0) {\n+            std::cout << \"Unexpected exception when processing message type \\\"\" << random_message_type << \"\\\": \" << exception_message << std::endl;\n+            assert(false);\n+        }\n+    } catch (...) {\n+        assert(false);",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 130,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why?\r\n\r\nThis will erase the whole bt",
      "created_at": "2020-03-10T18:44:29Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390534051",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390534051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390535156",
      "pull_request_review_id": 372216336,
      "id": 390535156,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNTE1Ng==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this needed, given that we synced with the queue?",
      "created_at": "2020-03-10T18:46:16Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390535156",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390535156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390535217",
      "pull_request_review_id": 372216336,
      "id": 390535217,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNTIxNw==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (LIMIT_TO_MESSAGE_TYPE.empty()) {\n+        const std::vector<std::string>& valid_message_types = getAllNetMessageTypes();\n+        if (std::find(valid_message_types.begin(), valid_message_types.end(), random_message_type) == valid_message_types.end()) {\n+            return;\n+        }\n+    } else if (random_message_type != LIMIT_TO_MESSAGE_TYPE) {\n+        return;\n+    }\n+    CDataStream random_bytes_data_stream{fuzzed_data_provider.ConsumeRemainingBytes<unsigned char>(), SER_NETWORK, PROTOCOL_VERSION};\n+    CNode p2p_node{0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false};\n+    p2p_node.fSuccessfullyConnected = true;\n+    p2p_node.nVersion = PROTOCOL_VERSION;\n+    p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+    g_fuzzing_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+    try {\n+        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), g_fuzzing_setup->m_node.connman.get(), g_fuzzing_setup->m_node.banman.get(), std::atomic<bool>{false});\n+    } catch (const std::ios_base::failure& e) {\n+        const std::string exception_message{e.what()};\n+        const auto p = EXPECTED_DESERIALIZATION_EXCEPTIONS.find(exception_message);\n+        if (p == EXPECTED_DESERIALIZATION_EXCEPTIONS.cend() || p->second.count(random_message_type) == 0) {\n+            std::cout << \"Unexpected exception when processing message type \\\"\" << random_message_type << \"\\\": \" << exception_message << std::endl;\n+            assert(false);\n+        }\n+    } catch (...) {\n+        assert(false);\n+    }\n+    assert(GetMainSignals().CallbacksPending() == 0);",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 132,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this needed, given that we synced with the queue?",
      "created_at": "2020-03-10T18:46:23Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390535217",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390535217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390555860",
      "pull_request_review_id": 372253491,
      "id": 390555860,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NTg2MA==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": 390524897,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks. Purged unused includes.",
      "created_at": "2020-03-10T19:22:16Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390555860",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390555860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390556242",
      "pull_request_review_id": 372253967,
      "id": 390556242,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NjI0Mg==",
      "diff_hunk": "@@ -7,6 +7,7 @@\n #include <banman.h>\n #include <chainparams.h>\n #include <consensus/consensus.h>\n+#include <net_processing.h>",
      "path": "src/test/util/setup_common.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": 390533597,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done!",
      "created_at": "2020-03-10T19:23:00Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390556242",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390556242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390572745",
      "pull_request_review_id": 372274546,
      "id": 390572745,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3Mjc0NQ==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};",
      "path": "src/test/fuzz/process_message.cpp",
      "position": 77,
      "original_position": 105,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": 390528317,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This was intentional to truncate at first `\\0` :)",
      "created_at": "2020-03-10T19:54:17Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390572745",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390572745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390573020",
      "pull_request_review_id": 372274918,
      "id": 390573020,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3MzAyMA==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (LIMIT_TO_MESSAGE_TYPE.empty()) {\n+        const std::vector<std::string>& valid_message_types = getAllNetMessageTypes();\n+        if (std::find(valid_message_types.begin(), valid_message_types.end(), random_message_type) == valid_message_types.end()) {\n+            return;",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 109,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": 390529390,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This was intentional to maximize fuzzer throughput :)",
      "created_at": "2020-03-10T19:54:51Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390573020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390573020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390580279",
      "pull_request_review_id": 372283659,
      "id": 390580279,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4MDI3OQ==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (LIMIT_TO_MESSAGE_TYPE.empty()) {\n+        const std::vector<std::string>& valid_message_types = getAllNetMessageTypes();\n+        if (std::find(valid_message_types.begin(), valid_message_types.end(), random_message_type) == valid_message_types.end()) {\n+            return;",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 109,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": 390529390,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps it was a premature optimization. Skipping!",
      "created_at": "2020-03-10T20:08:17Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390580279",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390580279"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390580531",
      "pull_request_review_id": 372283990,
      "id": 390580531,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4MDUzMQ==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;",
      "path": "src/test/fuzz/process_message.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "original_commit_id": "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "in_reply_to_id": 390530731,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. Now skipping.",
      "created_at": "2020-03-10T20:08:48Z",
      "updated_at": "2020-03-11T12:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390580531",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390580531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    }
  ]
}