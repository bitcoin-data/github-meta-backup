{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149",
    "id": 831306784,
    "node_id": "PR_kwDOABII584xjLwg",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/24149",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/24149.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/24149.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/6c7a17a8e0eec377f83ed1399f003ae70b898270",
    "number": 24149,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Signing support for Miniscript Descriptors",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This makes the Miniscript descriptors solvable.\r\n\r\nNote this introduces signing support for much more complex scripts than the wallet was previously able to solve, and the whole tooling isn't provided for a complete Miniscript integration in the wallet. Particularly, the PSBT<->Miniscript integration isn't entirely covered in this PR.",
    "labels": [
      {
        "id": 61889416,
        "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
        "name": "Build system",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 1482182044,
        "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
        "name": "Descriptors",
        "description": "",
        "color": "e9f76c",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/56",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/56",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/56/labels",
      "id": 7733968,
      "node_id": "MI_kwDOABII584AdgLQ",
      "number": 56,
      "state": "closed",
      "title": "25.0",
      "description": "",
      "creator": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 38,
      "created_at": "2022-03-03T18:51:29Z",
      "updated_at": "2023-05-25T13:24:42Z",
      "closed_at": "2023-05-25T13:24:42Z"
    },
    "created_at": "2022-01-25T10:31:23Z",
    "updated_at": "2023-02-17T11:43:08Z",
    "closed_at": "2023-02-16T10:01:57Z",
    "mergeable_state": "unknown",
    "merged_at": "2023-02-16T10:01:57Z",
    "merge_commit_sha": "fb82d91a9c34761f23be7649370106d9cc49e66f",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "darosior:miniscript_wallet_signing",
      "ref": "miniscript_wallet_signing",
      "sha": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 168868367,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjg4NjgzNjc=",
        "name": "bitcoin",
        "full_name": "darosior/bitcoin",
        "owner": {
          "login": "darosior",
          "id": 22457751,
          "node_id": "MDQ6VXNlcjIyNDU3NzUx",
          "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/darosior",
          "html_url": "https://github.com/darosior",
          "followers_url": "https://api.github.com/users/darosior/followers",
          "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
          "organizations_url": "https://api.github.com/users/darosior/orgs",
          "repos_url": "https://api.github.com/users/darosior/repos",
          "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/darosior/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/darosior/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/darosior/bitcoin",
        "archive_url": "https://api.github.com/repos/darosior/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/darosior/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/darosior/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/darosior/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/darosior/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/darosior/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/darosior/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/darosior/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/darosior/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/darosior/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/darosior/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/darosior/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/darosior/bitcoin/events",
        "forks_url": "https://api.github.com/repos/darosior/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/darosior/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/darosior/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/darosior/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/darosior/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/darosior/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/darosior/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/darosior/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/darosior/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/darosior/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/darosior/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/darosior/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/darosior/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/darosior/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/darosior/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/darosior/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:darosior/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/darosior/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/darosior/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/darosior/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/darosior/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/darosior/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/darosior/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/darosior/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/darosior/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/darosior/bitcoin/hooks",
        "svn_url": "https://github.com/darosior/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 216031,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-16T18:02:44Z",
        "created_at": "2019-02-02T19:20:27Z",
        "updated_at": "2023-05-05T11:25:14Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "8126551d54ffd290ed5767248be4b3d19243787b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1879,
    "deletions": 58,
    "changed_files": 17,
    "commits": 12,
    "review_comments": 59,
    "comments": 20
  },
  "events": [
    {
      "event": "labeled",
      "id": 5948976423,
      "node_id": "LE_lADOABII585CYdnBzwAAAAFili0n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5948976423",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T10:58:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5949298750,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAFimxg-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5949298750",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T11:54:53Z"
    },
    {
      "event": "unlabeled",
      "id": 5949700007,
      "node_id": "UNLE_lADOABII585CYdnBzwAAAAFioTen",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5949700007",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T13:04:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5949807873,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAFiot0B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5949807873",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T13:21:26Z"
    },
    {
      "event": "labeled",
      "id": 5950217012,
      "node_id": "LE_lADOABII585CYdnBzwAAAAFiqRs0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5950217012",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T14:20:54Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 5950217013,
      "node_id": "LE_lADOABII585CYdnBzwAAAAFiqRs1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5950217013",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T14:20:54Z",
      "label": {
        "name": "Consensus",
        "color": "009800"
      }
    },
    {
      "event": "labeled",
      "id": 5950217017,
      "node_id": "LE_lADOABII585CYdnBzwAAAAFiqRs5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5950217017",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T14:20:54Z",
      "label": {
        "name": "Descriptors",
        "color": "e9f76c"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5951838080,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAFiwdeA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5951838080",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T18:03:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5952703320,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAFizwtY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5952703320",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T20:41:46Z"
    },
    {
      "event": "commented",
      "id": 1021731369,
      "node_id": "IC_kwDOABII58485mIp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1021731369",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-26T00:17:55Z",
      "updated_at": "2023-02-14T21:30:51Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [sipa](https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-1296428327), [achow101](https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1430404755) |\n| Stale ACK | [instagibbs](https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-1295765939) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26756](https://github.com/bitcoin/bitcoin/pull/26756) (wallet: Replace `GetBalance()` logic with `AvailableCoins()` by w0xlt)\n* [#26627](https://github.com/bitcoin/bitcoin/pull/26627) (wallet: Migrate non-HD keys with single combo containing a list of keys by achow101)\n* [#26626](https://github.com/bitcoin/bitcoin/pull/26626) (descriptors: Add a KEY expression representing a list of individual keys by achow101)\n* [#26573](https://github.com/bitcoin/bitcoin/pull/26573) (Wallet: don't underestimate the fees when spending a Taproot output by darosior)\n* [#26567](https://github.com/bitcoin/bitcoin/pull/26567) (Wallet: estimate the size of signed inputs using descriptors by darosior)\n* [#26101](https://github.com/bitcoin/bitcoin/pull/26101) (script: create V1SigVersion for functions which should only accept taproot/tapscript by theuni)\n* [#26076](https://github.com/bitcoin/bitcoin/pull/26076) (Switch hardened derivation marker to h (in normalized descriptors and new wallets) by Sjors)\n* [#22838](https://github.com/bitcoin/bitcoin/pull/22838) (descriptors: Be able to specify change and receiving in a single descriptor string by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1021731369",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "labeled",
      "id": 5954964255,
      "node_id": "LE_lADOABII585CYdnBzwAAAAFi8Ysf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5954964255",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-26T08:11:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 5965591052,
      "node_id": "UNLE_lADOABII585CYdnBzwAAAAFjk7IM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5965591052",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-27T17:31:26Z",
      "label": {
        "name": "Consensus",
        "color": "009800"
      }
    },
    {
      "event": "reviewed",
      "id": 882103227,
      "node_id": "PRR_kwDOABII5840k9O7",
      "url": null,
      "actor": null,
      "commit_id": "c226ee3075ed059060051276d3ef815f756602e9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "> Particularly, the PSBT<->Miniscript integration isn't part of this PR.\r\n\r\nI don't think it would be particularly hard considering that you're already using `SignatureData` for non-wallet data lookups. I think all that would really need to be done is to update `FillSignatureData` to include the preimages from the PSBT.\r\n\r\nEdit: This diff does the trick\r\n\r\n```diff\r\ndiff --git a/src/psbt.cpp b/src/psbt.cpp\r\nindex 8248609ba6..9e09ccf15d 100644\r\n--- a/src/psbt.cpp\r\n+++ b/src/psbt.cpp\r\n@@ -113,6 +113,18 @@ void PSBTInput::FillSignatureData(SignatureData& sigdata) const\r\n     for (const auto& key_pair : hd_keypaths) {\r\n         sigdata.misc_pubkeys.emplace(key_pair.first.GetID(), key_pair);\r\n     }\r\n+    for (const auto& [hash, preimage] : ripemd160_preimages) {\r\n+        sigdata.hash_preimages.emplace(std::vector<unsigned char>(hash.begin(), hash.end()), preimage);\r\n+    }\r\n+    for (const auto& [hash, preimage] : sha256_preimages) {\r\n+        sigdata.hash_preimages.emplace(std::vector<unsigned char>(hash.begin(), hash.end()), preimage);\r\n+    }\r\n+    for (const auto& [hash, preimage] : hash160_preimages) {\r\n+        sigdata.hash_preimages.emplace(std::vector<unsigned char>(hash.begin(), hash.end()), preimage);\r\n+    }\r\n+    for (const auto& [hash, preimage] : hash256_preimages) {\r\n+        sigdata.hash_preimages.emplace(std::vector<unsigned char>(hash.begin(), hash.end()), preimage);\r\n+    }\r\n }\r\n \r\n void PSBTInput::FromSignatureData(const SignatureData& sigdata)\r\n```",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-882103227",
      "submitted_at": "2022-02-14T20:49:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6112035835,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAFsTkP7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6112035835",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-21T14:29:32Z"
    },
    {
      "event": "commented",
      "id": 1046944178,
      "node_id": "IC_kwDOABII584-Zxmy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1046944178",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-21T14:35:07Z",
      "updated_at": "2022-02-21T14:35:07Z",
      "author_association": "MEMBER",
      "body": "Rebased, addressed Andrew's comments, added some cleanups from @sipa, and added a `miniscript_random` fuzz target which generates a random Miniscript node based on a binary encoding. We might eventually add another one which tries to be smart, either here or in a follow-up.\r\n\r\n> I don't think it would be particularly hard considering that you're already using SignatureData for non-wallet data lookups. I think all that would really need to be done is to update FillSignatureData to include the preimages from the PSBT.\r\n\r\nYeah, but i figured it would be cleaner to have this as part of a PR which'd also update the various PSBT RPCs and test it using those.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1046944178",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "mentioned",
      "id": 6112074307,
      "node_id": "MEE_lADOABII585CYdnBzwAAAAFsTtpD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6112074307",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-21T14:35:07Z"
    },
    {
      "event": "subscribed",
      "id": 6112074321,
      "node_id": "SE_lADOABII585CYdnBzwAAAAFsTtpR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6112074321",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-21T14:35:07Z"
    },
    {
      "event": "unlabeled",
      "id": 6112129199,
      "node_id": "UNLE_lADOABII585CYdnBzwAAAAFsT7Cv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6112129199",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-21T14:43:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1049973037,
      "node_id": "IC_kwDOABII584-lVEt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1049973037",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-24T15:25:58Z",
      "updated_at": "2022-03-17T13:57:28Z",
      "author_association": "MEMBER",
      "body": "Fixed the fuzzer crash on integer overflow, and pushed another bunch of updates to the satisfaction code:\r\n- merge the malleable and non-malleable satisfaction\r\n- rename `Choose` to `operator|`\r\n- many improvements to the unit and fuzz tests\r\n\r\nSee https://github.com/sipa/miniscript/pull/102 for details.\r\n\r\nI also pushed an initial corpus for `miniscript_random` fuzz target at https://github.com/bitcoin-core/qa-assets/pull/87",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1049973037",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6133018398,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAFtjm8e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6133018398",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-24T15:26:30Z"
    },
    {
      "event": "labeled",
      "id": 6185181411,
      "node_id": "LE_lADOABII585CYdnBzwAAAAFwqmDj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6185181411",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-04T13:30:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6260994176,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAF1LzCA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6260994176",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-17T17:49:18Z"
    },
    {
      "event": "commented",
      "id": 1071145456,
      "node_id": "IC_kwDOABII584_2GHw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1071145456",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-17T17:49:45Z",
      "updated_at": "2022-03-17T17:49:45Z",
      "author_association": "MEMBER",
      "body": "Rebased.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1071145456",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "unlabeled",
      "id": 6261108922,
      "node_id": "UNLE_lADOABII585CYdnBzwAAAAF1MPC6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6261108922",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-17T18:07:48Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 6370381440,
      "node_id": "REFE_lADOABII585CYdnBzwAAAAF7tE6A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6370381440",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d492dc1cdaabdc52b0766bf4cba4bd73178325d0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d492dc1cdaabdc52b0766bf4cba4bd73178325d0",
      "created_at": "2022-04-05T11:22:40Z"
    },
    {
      "event": "reviewed",
      "id": 934850577,
      "node_id": "PRR_kwDOABII5843uLAR",
      "url": null,
      "actor": null,
      "commit_id": "8cd2c3c45ecefdd6659b81c9a5dd6a85a2711b01",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-934850577",
      "submitted_at": "2022-04-07T10:37:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6462849187,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAGBN0Cj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6462849187",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-20T12:43:35Z"
    },
    {
      "event": "commented",
      "id": 1103889372,
      "node_id": "IC_kwDOABII585BzAPc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1103889372",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-20T12:44:50Z",
      "updated_at": "2022-04-20T12:44:50Z",
      "author_association": "MEMBER",
      "body": "Rebased, and fixed named args for clang-tidy. This contains the latest iteration of our work on fuzz targets for Miniscript (the `miniscript_stable` and `miniscript_smart` targets introduced in the last two commits, see the commit messages for details).",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1103889372",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6464466680,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAGBT-74",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6464466680",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-20T16:08:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6471644169,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAGBvXQJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6471644169",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-21T14:34:39Z"
    },
    {
      "event": "labeled",
      "id": 6634358130,
      "node_id": "LE_lADOABII585CYdnBzwAAAAGLcEVy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6634358130",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-18T17:39:09Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6686565316,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAGOjOPE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6686565316",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-26T15:34:27Z"
    },
    {
      "event": "unlabeled",
      "id": 6686604192,
      "node_id": "UNLE_lADOABII585CYdnBzwAAAAGOjXug",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6686604192",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-26T15:40:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1139436967,
      "node_id": "IC_kwDOABII585D6m2n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1139436967",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-27T09:17:22Z",
      "updated_at": "2022-05-27T09:17:22Z",
      "author_association": "MEMBER",
      "body": "Rebased on master and #24148.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1139436967",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "referenced",
      "id": 6742387804,
      "node_id": "REFE_lADOABII585CYdnBzwAAAAGR4Kxc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6742387804",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "695ca641a4e3ae065121815a968c769198aa73de",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/695ca641a4e3ae065121815a968c769198aa73de",
      "created_at": "2022-06-04T19:54:33Z"
    },
    {
      "event": "labeled",
      "id": 6742418942,
      "node_id": "LE_lADOABII585CYdnBzwAAAAGR4SX-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6742418942",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-04T20:33:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 6749201137,
      "node_id": "REFE_lADOABII585CYdnBzwAAAAGSSKLx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6749201137",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "da822e008351349fb5db4b9c846a191d76afb559",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/da822e008351349fb5db4b9c846a191d76afb559",
      "created_at": "2022-06-05T20:15:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6754340975,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAGSlxBv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6754340975",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-06T16:15:25Z"
    },
    {
      "event": "commented",
      "id": 1147642846,
      "node_id": "IC_kwDOABII585EZ6Pe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1147642846",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-06T16:29:13Z",
      "updated_at": "2022-06-06T16:29:13Z",
      "author_association": "MEMBER",
      "body": "Rebased.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1147642846",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "unlabeled",
      "id": 6755125418,
      "node_id": "UNLE_lADOABII585CYdnBzwAAAAGSowiq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6755125418",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-06T18:18:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 6895570022,
      "node_id": "LE_lADOABII585CYdnBzwAAAAGbAgxm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6895570022",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-28T16:26:54Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1183382594,
      "node_id": "IC_kwDOABII585GiPxC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1183382594",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-13T15:41:05Z",
      "updated_at": "2022-07-13T15:47:39Z",
      "author_association": "MEMBER",
      "body": "> > I don't think it would be particularly hard considering that you're already using SignatureData for non-wallet data lookups. I think all that would really need to be done is to update FillSignatureData to include the preimages from the PSBT.\r\n> \r\n> Yeah, but i figured it would be cleaner to have this as part of a PR which'd also update the various PSBT RPCs and test it using those.\r\n\r\nI created a watch-only wallet for testing miniscript, which relies on the private keys from other wallets. I might be nice to have a (draft) PSBT-enabled PR on top of this for easier testing.\r\n\r\nI'm testing with something of the form `wsh(or_d(pk(A),and_v(v:pkh(B),older(3))))`. I'm able to create a PSBT in the watch-only wallet and sign it with wallet B. But then `analyzepsbt` still complains that signature A is missing (and `finalizepsbt` refuses to give me the hex transaction). Sounds like that's expected behaviour for now.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1183382594",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6993381213,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAGg1odd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6993381213",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-14T11:20:08Z"
    },
    {
      "event": "commented",
      "id": 1184328490,
      "node_id": "IC_kwDOABII585Gl2sq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1184328490",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-14T11:24:15Z",
      "updated_at": "2022-07-14T11:24:15Z",
      "author_association": "MEMBER",
      "body": "Rebased on latest #24148. I'll look into a draft PR for PSBT support.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1184328490",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "unlabeled",
      "id": 6994246924,
      "node_id": "UNLE_lADOABII585CYdnBzwAAAAGg470M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6994246924",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-14T13:25:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 6996670638,
      "node_id": "REFE_lADOABII585CYdnBzwAAAAGhCLiu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6996670638",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "85b601e04363664eae1b4b802cd8dde942761939",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85b601e04363664eae1b4b802cd8dde942761939",
      "created_at": "2022-07-14T18:54:40Z"
    },
    {
      "event": "referenced",
      "id": 7015105159,
      "node_id": "REFE_lADOABII585CYdnBzwAAAAGiIgKH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7015105159",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2a8811a52a75cefbbc06f47ed00bca4a54d80532",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/2a8811a52a75cefbbc06f47ed00bca4a54d80532",
      "created_at": "2022-07-18T19:43:52Z"
    },
    {
      "event": "reviewed",
      "id": 1042429269,
      "node_id": "PRR_kwDOABII584-IjVV",
      "url": null,
      "actor": null,
      "commit_id": "8c2d83dbd1ce81d6650fd80c6459f4d74ea39bf7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-1042429269",
      "submitted_at": "2022-07-18T19:57:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
    },
    {
      "event": "labeled",
      "id": 7018644125,
      "node_id": "LE_lADOABII585CYdnBzwAAAAGiWAKd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7018644125",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T08:38:45Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7020919259,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAGiernb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7020919259",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T13:49:57Z"
    },
    {
      "event": "unlabeled",
      "id": 7021522040,
      "node_id": "UNLE_lADOABII585CYdnBzwAAAAGig-x4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7021522040",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T14:58:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7022001702,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAGiiz4m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7022001702",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T15:53:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7022241069,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAGijuUt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7022241069",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T16:26:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7022425692,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAGikbZc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7022425692",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T16:53:39Z"
    },
    {
      "event": "reviewed",
      "id": 1043915829,
      "node_id": "PRR_kwDOABII584-OOQ1",
      "url": null,
      "actor": null,
      "commit_id": "26cd5992d59c52529a6c261315fd0353803a7901",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-1043915829",
      "submitted_at": "2022-07-19T18:35:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
    },
    {
      "event": "referenced",
      "id": 7173644916,
      "node_id": "REFE_lADOABII585CYdnBzwAAAAGrlSJ0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7173644916",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e078ee9d9d0a7505c38cf22ee4cc757bf31b62c0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e078ee9d9d0a7505c38cf22ee4cc757bf31b62c0",
      "created_at": "2022-08-11T17:42:11Z"
    },
    {
      "event": "labeled",
      "id": 7174152240,
      "node_id": "LE_lADOABII585CYdnBzwAAAAGrnOAw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7174152240",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-11T18:51:09Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 7174384764,
      "node_id": "REFE_lADOABII585CYdnBzwAAAAGroGx8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7174384764",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "003f94abf771a658fd2e3170d77dbd029a7d03cb",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/003f94abf771a658fd2e3170d77dbd029a7d03cb",
      "created_at": "2022-08-11T19:29:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7179025780,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAGr5z10",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7179025780",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-12T13:03:27Z"
    },
    {
      "event": "commented",
      "id": 1213092373,
      "node_id": "IC_kwDOABII585ITlIV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213092373",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-12T13:08:00Z",
      "updated_at": "2022-11-25T10:11:48Z",
      "author_association": "MEMBER",
      "body": "Rebased. Dropped the commit modifying the interpreter, not needed after #25664. This PR does not touch consensus code anymore.\r\n\r\nNote however that since we can't mock the preimage check, we can't estimate the input size when spending from a Miniscript descriptor with a hash preimage challenge in all spending paths. Ideally, i think we should estimate the input size for spending a coin using the descriptors (no need to run the signature producer, we have this information already).\r\nRelatedly, i added a commit for determining solvability using an inferred descriptor in AvailableCoins, as the optimization introduced in 8a105ecd1aeff15f84c3883e2762bf71ad59d920 of using the result of `CalculateMaximumSignedInputSize` would not work for descriptors with hash preimage challenges.\r\n\r\nI didn't forget about the draft PR for PSBT support. :) But i'll look first into using descriptors for determining input size.\r\n\r\nEDIT: the switch to using descriptors for estimating input satisfaction size in the wallet is implemented in #26567.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1213092373",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "unlabeled",
      "id": 7179302904,
      "node_id": "UNLE_lADOABII585CYdnBzwAAAAGr63f4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7179302904",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-12T13:44:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 7209837748,
      "node_id": "LE_lADOABII585CYdnBzwAAAAGtvWS0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7209837748",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T23:50:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7223293373,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAGuirW9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7223293373",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T15:54:29Z"
    },
    {
      "event": "unlabeled",
      "id": 7224069366,
      "node_id": "UNLE_lADOABII585CYdnBzwAAAAGuloz2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7224069366",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T17:51:59Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1079318735,
      "node_id": "PRR_kwDOABII585AVRjP",
      "url": null,
      "actor": null,
      "commit_id": "84cd88642fd9fc542593c9253fec4038408c2802",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-1079318735",
      "submitted_at": "2022-08-19T20:18:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
    },
    {
      "event": "reviewed",
      "id": 1079335882,
      "node_id": "PRR_kwDOABII585AVVvK",
      "url": null,
      "actor": null,
      "commit_id": "84cd88642fd9fc542593c9253fec4038408c2802",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-1079335882",
      "submitted_at": "2022-08-19T20:40:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
    },
    {
      "event": "labeled",
      "id": 7252934197,
      "node_id": "LE_lADOABII585CYdnBzwAAAAGwTv41",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7252934197",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T17:24:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7288072859,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAGyZyqb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7288072859",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-30T14:18:57Z"
    },
    {
      "event": "commented",
      "id": 1231744442,
      "node_id": "IC_kwDOABII585Jau26",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1231744442",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-30T14:25:45Z",
      "updated_at": "2022-08-30T14:25:45Z",
      "author_association": "MEMBER",
      "body": "Rebased (quite verbose, following #25863) and removed needless commit 1af2145ef6 (\"descriptor_tests: use clang-tidy verifiable syntax for argument comment\").\r\n\r\nI changed the commit introducing hashlock satisfaction to use a mapping per hash type, since there might be collisions between hash types (thanks sipa!). I kept a single mapping in the unit tests that is copied in order to not introduce 4 new arguments to the function.\r\nI also changed this commit to not expose `SignatureData` to the `SignatureCreator` anymore. I might change it soon to use a `SigningProvider` to hold the preimages instead, depending on the outcome of the discussion in https://github.com/bitcoin/bitcoin/pull/24149#discussion_r950532827.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1231744442",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "unlabeled",
      "id": 7288166515,
      "node_id": "UNLE_lADOABII585CYdnBzwAAAAGyaJhz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7288166515",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-30T14:28:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 7415170899,
      "node_id": "LE_lADOABII585CYdnBzwAAAAG5-odT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7415170899",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-19T16:23:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7851916103,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAHUArtH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7851916103",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-20T17:52:11Z"
    },
    {
      "event": "unlabeled",
      "id": 7852039441,
      "node_id": "UNLE_lADOABII585CYdnBzwAAAAHUBJ0R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7852039441",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-20T19:17:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7857966129,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAHUXwwx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7857966129",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-21T14:24:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7859370196,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAHUdHjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7859370196",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-21T16:56:07Z"
    },
    {
      "event": "commented",
      "id": 1322508046,
      "node_id": "IC_kwDOABII585O098O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1322508046",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-21T18:54:26Z",
      "updated_at": "2022-11-21T18:54:26Z",
      "author_association": "MEMBER",
      "body": "Rebased.\r\n\r\nThere was a spurious (apparently build?) failure in the Windows CI, had to force-pushed to re-kick it.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1322508046",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "commented",
      "id": 1327435276,
      "node_id": "IC_kwDOABII585PHw4M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1327435276",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-25T12:50:03Z",
      "updated_at": "2022-11-25T12:50:03Z",
      "author_association": "MEMBER",
      "body": "I have implemented in #26567 the signed input size estimation based on descriptor rather than on a dry run of the signing logic. This would allow the wallet to estimate the fees (and therefore do coin selection) for transactions spending Miniscript outputs.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1327435276",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "reviewed",
      "id": 1254129729,
      "node_id": "PRR_kwDOABII585KwIBB",
      "url": null,
      "actor": null,
      "commit_id": "75eee1679a081fe5b6d236af3449b459b0723625",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-1254129729",
      "submitted_at": "2023-01-18T20:49:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
    },
    {
      "event": "reviewed",
      "id": 1269401970,
      "node_id": "PRR_kwDOABII585LqYly",
      "url": null,
      "actor": null,
      "commit_id": "75eee1679a081fe5b6d236af3449b459b0723625",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-1269401970",
      "submitted_at": "2023-01-25T13:57:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8366311343,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAHyq8ev",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8366311343",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-26T17:32:29Z"
    },
    {
      "event": "commented",
      "id": 1405452971,
      "node_id": "IC_kwDOABII585TxYKr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1405452971",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-26T18:52:06Z",
      "updated_at": "2023-02-11T15:52:29Z",
      "author_association": "MEMBER",
      "body": "Thanks @sipa for the review and @benma for having a look. I addressed your comments in the latest push.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1405452971",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "mentioned",
      "id": 8366910997,
      "node_id": "MEE_lADOABII585CYdnBzwAAAAHytO4V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8366910997",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-26T18:52:06Z"
    },
    {
      "event": "subscribed",
      "id": 8366911011,
      "node_id": "SE_lADOABII585CYdnBzwAAAAHytO4j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8366911011",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-26T18:52:06Z"
    },
    {
      "event": "mentioned",
      "id": 8366911037,
      "node_id": "MEE_lADOABII585CYdnBzwAAAAHytO49",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8366911037",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-26T18:52:06Z"
    },
    {
      "event": "subscribed",
      "id": 8366911075,
      "node_id": "SE_lADOABII585CYdnBzwAAAAHytO5j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8366911075",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-26T18:52:07Z"
    },
    {
      "event": "commented",
      "id": 1416334727,
      "node_id": "IC_kwDOABII585Ua42H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1416334727",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-03T19:53:05Z",
      "updated_at": "2023-02-03T19:53:05Z",
      "author_association": "MEMBER",
      "body": "light ACK 33d30d1edd85a0110cbd9e3e29cc832f1cb6dab2\r\n\r\nThe satisfaction code looks good to me, as do the fixed tests. I didn't delve too deeply into the fuzz and random tests though.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1416334727",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "review_requested",
      "id": 8447605342,
      "node_id": "RRE_lADOABII585CYdnBzwAAAAH3hDpe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8447605342",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-06T13:45:17Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1285541393,
      "node_id": "PRR_kwDOABII585Mn84R",
      "url": null,
      "actor": null,
      "commit_id": "33d30d1edd85a0110cbd9e3e29cc832f1cb6dab2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I'd like to boost the tests a bit.\r\n\r\nOne general case I'd like covered is the one where the PSBT cannot be finalized. Also, I think it'd be useful to assert things like how many partial signatures you expect the wallet to make, which finalization paths it takes depending on nsequence value, things like that.\r\n\r\nsome examples I found illuminating\r\n```\r\n    # We have one key on each branch; Core signs both (can't finalize)\r\n    {\r\n        \"ms\": f\"c:andor(pk({tprv1}),pk_k({tpubs[0]}),and_v(v:pk({tprv2}),pk_k({tpubs[1]})))\",\r\n        \"sequence\": None,\r\n        \"locktime\": None,\r\n    },\r\n    # We have all the keys, wallet selects the timeout path to sign since it's smaller and sequence is set\r\n    {\r\n        \"ms\": f\"andor(pk({tprv1}),pk({tprv3}),and_v(v:pk({tprv2}),older(10)))\",\r\n        \"sequence\": 10,\r\n        \"locktime\": None,\r\n    },\r\n    # We have all the keys, wallet selects the primary path to sign unconditionally since nsequence wasn't set to be valid for timeout path\r\n    {\r\n        \"ms\": f\"andor(pk({tprv1}),pk({tprv3}),and_v(v:pk({tprv2}),older(10)))\",\r\n        \"sequence\": None,\r\n        \"locktime\": None,\r\n    },\r\n    # Finalizes to the smallest valid witness, regardless of sequence\r\n    {\r\n        \"ms\": f\"or_d(pk({tprv1}),and_v(v:pk({tprv2}),and_v(v:pk({tprv3}),older(10))))\",\r\n        \"sequence\": None,\r\n        \"locktime\": None,\r\n    },\r\n    # Liquid-like federated pegin with emergency recovery privkeys\r\n    {\r\n        \"ms\": f\"or_i(and_b(pk({tpubs[0]}),a:and_b(pk({tpubs[1]}),a:and_b(pk({tpubs[2]}),a:and_b(pk({tpubs[3]}),s:pk({pk}))))),and_v(v:thresh(2,pkh({tprv1}),a:pkh({tprv2}),a:pkh({tpubs[4]})),older(420)))\",\r\n        \"sequence\": 420,\r\n        \"locktime\": None,\r\n    },\r\n```\r\n\r\nThis feature will likely need to be explained in the various PSBT calls as well.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-1285541393",
      "submitted_at": "2023-02-06T17:54:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
    },
    {
      "event": "commented",
      "id": 1424369931,
      "node_id": "IC_kwDOABII585U5ikL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1424369931",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-09T15:27:06Z",
      "updated_at": "2023-02-09T15:27:06Z",
      "author_association": "MEMBER",
      "body": "I've created a few commits in https://github.com/sipa/bitcoin/commits/202302_miniscript_improve. They're a bunch of small improvements that address some things @darosior and @benma noticed. No behavior changes that matter, but I hope it's closer to the website, and more easy to follow. Feel free to include, ignore, or squash (not all of it necessarily belongs in this PR).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1424369931",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "mentioned",
      "id": 8480670484,
      "node_id": "MEE_lADOABII585CYdnBzwAAAAH5fMMU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8480670484",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-09T15:27:06Z"
    },
    {
      "event": "subscribed",
      "id": 8480670503,
      "node_id": "SE_lADOABII585CYdnBzwAAAAH5fMMn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8480670503",
      "actor": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-09T15:27:06Z"
    },
    {
      "event": "mentioned",
      "id": 8480670535,
      "node_id": "MEE_lADOABII585CYdnBzwAAAAH5fMNH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8480670535",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-09T15:27:07Z"
    },
    {
      "event": "subscribed",
      "id": 8480670558,
      "node_id": "SE_lADOABII585CYdnBzwAAAAH5fMNe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8480670558",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-09T15:27:07Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIyYzViMDAzNDUwNjNiZGViOGI2ZDNkYThiNTY5MmQxOGY5MmJmYjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22c5b00345063bdeb8b6d3da8b5692d18f92bfb7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/22c5b00345063bdeb8b6d3da8b5692d18f92bfb7",
      "tree": {
        "sha": "fe2b395a2da1b3bc93d0ab2bcc140d73713e1480",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe2b395a2da1b3bc93d0ab2bcc140d73713e1480"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fe2b395a2da1b3bc93d0ab2bcc140d73713e1480\nparent d0b1f613c2a20b2de2878be2de19f827347dcc24\nauthor Antoine Poinsot <darosior@protonmail.com> 1629812387 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1676121129 +0100\n\nminiscript: satisfaction support\n\nThis introduces the logic to \"sign for\" a Miniscript.\n\nCo-Authored-By: Pieter Wuille <pieter.wuille@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmPnlCkACgkQ4T/BRc0/\nQwRCFwwArKYCrklDaEzHZq08uApeH0KJZ03FYnfnutn5NWiTG+ayFLhFlaknh3Wu\nbDz1z3ra09axqPuHMJhnUJkqZBshddBlWxfebAzyQGTK+XYQWkiRQP3EOlVkIzLm\ng7z4u2bhqx78lZFpkyczT1tcH/lPvLwGYk7znWQHMmlP6K3KsfawHjc/ylfLv9A+\npSsC2osezZ4oE95tNIqJEBNW2K2rtBiahJuCNZ3JIYVcRxE4g2+mu4s67HMd8gDs\nPlLnqK36fj2Bv+XaxpnN2OB7bhNoluHonNy6vuRK9/9sYZf1ClORue9zC7HogugY\n6UhnPP1gImtYx9Kffdo850429mCoFSpolOKYISxnut6B+wiGX8MWdu5k3CgliW9S\ncwhBMwGMqwSIFD5JMcfsABPVC6AzpH69m50C2sqbhbJgWd14qJj6iPj3usvb+bLI\nzkhDIJd8h5b37Om7Ot4y91THcjjucMip0iDBcMj5NwULHK86f4w+9u8h1YjPY15w\n25ldnO2I\n=Ad0m\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0b1f613c2a20b2de2878be2de19f827347dcc24",
          "sha": "d0b1f613c2a20b2de2878be2de19f827347dcc24",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d0b1f613c2a20b2de2878be2de19f827347dcc24"
        }
      ],
      "message": "miniscript: satisfaction support\n\nThis introduces the logic to \"sign for\" a Miniscript.\n\nCo-Authored-By: Pieter Wuille <pieter.wuille@gmail.com>",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-11T13:12:09Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-08-24T13:39:47Z"
      },
      "sha": "22c5b00345063bdeb8b6d3da8b5692d18f92bfb7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY1ZGViNDE3ODA0YjlmMjY3ODMwYmQ0MDE3NzY3Nzk4N2RmNDUyNmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5deb417804b9f267830bd40177677987df4526d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f5deb417804b9f267830bd40177677987df4526d",
      "tree": {
        "sha": "6ce2ecdd0404d6f0f0573c1794035dd4dd8ac8d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ce2ecdd0404d6f0f0573c1794035dd4dd8ac8d4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6ce2ecdd0404d6f0f0573c1794035dd4dd8ac8d4\nparent 22c5b00345063bdeb8b6d3da8b5692d18f92bfb7\nauthor Pieter Wuille <pieter@wuille.net> 1675897579 -0500\ncommitter Antoine Poinsot <darosior@protonmail.com> 1676121129 +0100\n\nVarious additional explanations of the satisfaction logic from Pieter\n\nCherry-picked and squashed from\nhttps://github.com/sipa/bitcoin/commits/202302_miniscript_improve.\n\n- Explain thresh() and multi() satisfaction algorithms\n- Comment on and_v dissatisfaction\n- Mark overcomplete thresh() dissats as malleable and explain\n- Add comment on unnecessity of Malleable() in and_b dissat\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmPnlCkACgkQ4T/BRc0/\nQwS3fwv+MakTkaK6Z6QuDrKjHeTSWdz/9wiUA26WYXzWxjeqixQLCeBLqvEhSDoJ\nS3jk2UBE2XRSMFpnPQhyDmoc9Fg+j+doopR2jAvqiM0D6UGdn1kb8mv0UmTz5Wio\nZ981EZs3NaYmAl6H6rbjD8OjjFYw550VKXa0V6w8SVhdmT31s3iOdLY5CsQ8wVFm\nOW+x1Kik7sl/UXkQL98R1onywyC+vdEnvdAsGd22ZyAkwlKSmoW6HUkQLy3k5xVL\nnSA5LDnAruwYNCorp6gZa878xvUCS+C891VFcS43fPxAS8vXZQkEsRXaWHPdfKdq\nScsxEfHtBQ9lizIgsciK+BFbB8DlfXmCgcEniSPdjFjOcX7K+SojgsIfpoSHLquT\nJnhnmcTQ0P/ZJfHeclvV2+QkIZ2nlBnWg0dAXUUdKAbY3Uyz0zeFlFzm5D8r8hha\nCqdi90LWARSIO5TX/Ebk3WYiCA5j/d+Z32k+IOtssO5pGyVsQZ8u7cG5PAbO9A/O\nr4eOW282\n=Kkrf\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22c5b00345063bdeb8b6d3da8b5692d18f92bfb7",
          "sha": "22c5b00345063bdeb8b6d3da8b5692d18f92bfb7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/22c5b00345063bdeb8b6d3da8b5692d18f92bfb7"
        }
      ],
      "message": "Various additional explanations of the satisfaction logic from Pieter\n\nCherry-picked and squashed from\nhttps://github.com/sipa/bitcoin/commits/202302_miniscript_improve.\n\n- Explain thresh() and multi() satisfaction algorithms\n- Comment on and_v dissatisfaction\n- Mark overcomplete thresh() dissats as malleable and explain\n- Add comment on unnecessity of Malleable() in and_b dissat",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-11T13:12:09Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-02-08T23:06:19Z"
      },
      "sha": "f5deb417804b9f267830bd40177677987df4526d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQyNDJjMWM1MjEyN2RmM2EyNGJlMGMxNWI4OGQ0ZmM0NjNhZjA0ZmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4242c1c52127df3a24be0c15b88d4fc463af04fc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4242c1c52127df3a24be0c15b88d4fc463af04fc",
      "tree": {
        "sha": "0f28a49730baebd7e83d14fcf62726b8a40a172f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f28a49730baebd7e83d14fcf62726b8a40a172f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0f28a49730baebd7e83d14fcf62726b8a40a172f\nparent f5deb417804b9f267830bd40177677987df4526d\nauthor Pieter Wuille <pieter@wuille.net> 1675896173 -0500\ncommitter Antoine Poinsot <darosior@protonmail.com> 1676121130 +0100\n\nAlign 'e' property of or_d and andor with website spec\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmPnlCoACgkQ4T/BRc0/\nQwQAUQwApG/8KL7nZ5A9BQ+vAKqB2UO68iQb1tMetJH9+roAX/qIZmtuo+aJXstE\nVp3otcRii4k6UOzX3ntSg2NzLAwx1RikZKMOGKeJi1OI27vRYJqjT27dZXYY5yr9\n//9Wk2SU64ZVJv6UAkiYL/h3pJhExvkT1IWwUWw5nfHHaquGQWwoJODfs+/I6ZTV\n9qIpH045j62fdoFuQGWk9beizFfslArRbAi9mzp28Pz6ibxKJ95QqvxgCLrKF8Ee\nDhsR+E787nv1D/wQQmxoVgWvYx8NzMQ97C6WSYrRPW878qf/rt9/yzCGIsPcAR9B\nbsIiZB7vB/4BhmcXyuIkYhpknMhtT4/vaB3HJHWd68QFMYuZFcj7+bQ0nP35Rpsi\ngobRgVn+F/oaLqm5P7Nk9oCtEYGvPUjANNSxbQOrg+wy/rqiGfiCiLBMBYq6+uvV\nG8vnyi4I97eDWjqRmKOXmhHJvYO4QtXNVzKCJR3k311A4H+M7lWpZ9rPl9NHQb5i\nDUGaTcGM\n=NSPm\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5deb417804b9f267830bd40177677987df4526d",
          "sha": "f5deb417804b9f267830bd40177677987df4526d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f5deb417804b9f267830bd40177677987df4526d"
        }
      ],
      "message": "Align 'e' property of or_d and andor with website spec",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-11T13:12:10Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-02-08T22:42:53Z"
      },
      "sha": "4242c1c52127df3a24be0c15b88d4fc463af04fc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYxYzZkMWE4NDQwZGIwOWM0NGQ3ZmQzNjdhNmYyYzY0MWVhOTNkNDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61c6d1a8440db09c44d7fd367a6f2c641ea93d40",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/61c6d1a8440db09c44d7fd367a6f2c641ea93d40",
      "tree": {
        "sha": "dc51ebd424e857250f30dcf7549f38796de727d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc51ebd424e857250f30dcf7549f38796de727d5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree dc51ebd424e857250f30dcf7549f38796de727d5\nparent 4242c1c52127df3a24be0c15b88d4fc463af04fc\nauthor Antoine Poinsot <darosior@protonmail.com> 1638398733 +0100\ncommitter Antoine Poinsot <darosior@protonmail.com> 1676121130 +0100\n\nscript/sign: basic signing support for Miniscript descriptors\n\nTry to solve a script using the Miniscript satisfier if the legacy\nsolver fails under P2WSH context. Only solve public key and public key\nhash challenges for now.\n\nWe don't entirely replace the raw solver and especially rule out trying to\nsolve CHECKMULTISIG-based multisigs with the Miniscript satisfier since\nsome features, such as the transaction input combiner, rely on the\nspecific behaviour of the former.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmPnlCoACgkQ4T/BRc0/\nQwRcKgv/etKC26FdRckt3lqCSHuy+JFVuSDsL3B1twQKTAJgFNy0Ilhc6OOOCEJe\nRr14J3zdbbFMOi6P/mSnn8LecH98KjlgVk3te0n/TCqWsvc8Xz64oJowxYXX9ZwZ\n2pUZH7C+exx+V+NI1QeTthQ0lAxifplba+ZbnxWZOQ3XaqMCVe5qIDHFhSLnLZC7\nx5AEDWO5Q5sO6fW18ck6WZBJGzTUUSTJwbCRLlN5Yn3CsRMUgPLXZkXE4ak9B5t3\n+gwhk3zCmDyYcOYcxFtW0IVjEatyCVHh+5g/bLSlJx/BRve0H8GJmhRdjrQw/aoo\nUq6dpJvigO+XAdXc1sV7YPOrpd2q7tJ1UHXqaPMN/b4nOHytg+GdXjRnmpSAAicj\nj4u02f875Rb3V8z65YpW8IIMH9Ly9V2GMho0xDeY2IxIPHJ/knjMbTF0n5pXhtC3\nsID+qFz45I6IAHcJdaWjPV3mNuOQo/sUHQgewS56YwmHqBc9niYIvBhuTSF9EEPE\nTsNsvQFz\n=foKb\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4242c1c52127df3a24be0c15b88d4fc463af04fc",
          "sha": "4242c1c52127df3a24be0c15b88d4fc463af04fc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4242c1c52127df3a24be0c15b88d4fc463af04fc"
        }
      ],
      "message": "script/sign: basic signing support for Miniscript descriptors\n\nTry to solve a script using the Miniscript satisfier if the legacy\nsolver fails under P2WSH context. Only solve public key and public key\nhash challenges for now.\n\nWe don't entirely replace the raw solver and especially rule out trying to\nsolve CHECKMULTISIG-based multisigs with the Miniscript satisfier since\nsome features, such as the transaction input combiner, rely on the\nspecific behaviour of the former.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-11T13:12:10Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-12-01T22:45:33Z"
      },
      "sha": "61c6d1a8440db09c44d7fd367a6f2c641ea93d40"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGEyZjgxYjZhOGYxZmYzYjA3NTA3MTE0MDljNzUzODgxMmE1MmVmNDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2f81b6a8f1ff3b0750711409c7538812a52ef40",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a2f81b6a8f1ff3b0750711409c7538812a52ef40",
      "tree": {
        "sha": "7f85539fb10b544a9221e3eabf756fbb69dff45f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f85539fb10b544a9221e3eabf756fbb69dff45f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7f85539fb10b544a9221e3eabf756fbb69dff45f\nparent 61c6d1a8440db09c44d7fd367a6f2c641ea93d40\nauthor Antoine Poinsot <darosior@protonmail.com> 1638462020 +0100\ncommitter Antoine Poinsot <darosior@protonmail.com> 1676121131 +0100\n\nscript/sign: signing support for Miniscript with timelocks\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmPnlCsACgkQ4T/BRc0/\nQwRyvwwA1LgQ9wyWuSLYxJ9VOjDU6sR1uiBtwsknVJV2mAAJeaxJJJX2mw/pn0YU\niZ879ykafpR0JnXkUGWrkF9Po/2oq2/24Qt8KOcKhCWw7SQsZ+GyWklAyW1MXKBu\nwE7Ol2YCmOck+zfVh/lU2LRoHsechMRWXpA9EcPHosn8Nb3/9QhH6G4K2OPDffPf\nJt1beeSRrf1xWr4ama4LsfSK7PH08RD6wwh0FchbKxyX6h+rQjhEAEPx5/Abpx2F\nhyYiThPmje1dIQMCO6nw1aibHWsyhtwZ2B4JIQUg6y/B5X/Su0bAtQ/lVFWfHM6I\nZGPf0oH80+j87DkvhGG59OyCXkCjwnPFBYvDhLxAaU74HhI8cuh4x7SeooKfF/0w\ntfS8j1TsiOAuuTSovt5KOrn3cvDtcB1W/sT7zocAKWw9CGtzD0tMSv2ZvnA7y6Zs\nvM6oJllSk4cSZF7sf28Cr6gK1OzUiEFmqQW00jLy1P6Pvz9gQqyLojZwgzdNH3jk\nInk5MzoK\n=sYWD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61c6d1a8440db09c44d7fd367a6f2c641ea93d40",
          "sha": "61c6d1a8440db09c44d7fd367a6f2c641ea93d40",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/61c6d1a8440db09c44d7fd367a6f2c641ea93d40"
        }
      ],
      "message": "script/sign: signing support for Miniscript with timelocks",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-11T13:12:11Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-12-02T16:20:20Z"
      },
      "sha": "a2f81b6a8f1ff3b0750711409c7538812a52ef40"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU2MGU2MmIxZTIyMTgzMmFlOTlmZjg2ODQ1NTlhN2I4ZjlkZjg0YTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/560e62b1e221832ae99ff8684559a7b8f9df84a7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/560e62b1e221832ae99ff8684559a7b8f9df84a7",
      "tree": {
        "sha": "97ccc912e8d13fa05db1183bd320eeaffdc1db1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97ccc912e8d13fa05db1183bd320eeaffdc1db1f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 97ccc912e8d13fa05db1183bd320eeaffdc1db1f\nparent a2f81b6a8f1ff3b0750711409c7538812a52ef40\nauthor Antoine Poinsot <darosior@protonmail.com> 1638625164 +0100\ncommitter Antoine Poinsot <darosior@protonmail.com> 1676121132 +0100\n\nscript/sign: signing support for Miniscripts with hash preimage challenges\n\nPreimages must be externally provided (typically, via a PSBT).\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmPnlCwACgkQ4T/BRc0/\nQwRrdAwAs4BPwEFBYzarYcaEiQqcQZTB9437rOcHtDn7GY1cFMLYUF46I4m6E8sK\nJZ6BJ02N+BnxP9iPJAfDAxgE3RZtkJ7AfGy+pxaEtzAJH5sSpmOWwz6vMuTIP8sx\ncqK11GFOJaHgH9QUUB0O6NNYKXplEiTpb8C6YJN0hrJUnKD3WJ7nIUIbOfxmBMun\nO/Jqq6QGO/kmtPXWuoVR4V1ytRwvV8nQWEhTvHRbFffFXfw0t4kNmnGKn9EWxwr7\naacVnAIMNT3JCaHM23Q7FrvOWGcqjeL96XiYl2FaVrUq1n/cIpXOXdptbGuNwbrU\ny4NfAMeD0X1LV7+fnvO8MCGKuLWOSqcBXLBobSv0sfzwH7uEi7rZTzkSacOoMT8+\nf1+//me3UIxGMd7ERH8j3cIJ4MJsdGMeorKsja26TpdsXHbaTssDtLRXqdQzwRvt\nz2MT8ygFuXAL81KO87Xut1dwAzUEl4K/2492hJHQ8sVrFA8WjLty9fzVuZ2CYuZ7\nF1o1+meg\n=EEv/\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2f81b6a8f1ff3b0750711409c7538812a52ef40",
          "sha": "a2f81b6a8f1ff3b0750711409c7538812a52ef40",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a2f81b6a8f1ff3b0750711409c7538812a52ef40"
        }
      ],
      "message": "script/sign: signing support for Miniscripts with hash preimage challenges\n\nPreimages must be externally provided (typically, via a PSBT).",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-11T13:12:12Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-12-04T13:39:24Z"
      },
      "sha": "560e62b1e221832ae99ff8684559a7b8f9df84a7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBhOGZjOWUyMDBiNTAxOGMxZWZkNmY5MTI2ZWI0MDVjYTBiZWVlYTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a8fc9e200b5018c1efd6f9126eb405ca0beeea3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0a8fc9e200b5018c1efd6f9126eb405ca0beeea3",
      "tree": {
        "sha": "8c1957cfa4eec5087bda4c446ba936b41b490e00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c1957cfa4eec5087bda4c446ba936b41b490e00"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8c1957cfa4eec5087bda4c446ba936b41b490e00\nparent 560e62b1e221832ae99ff8684559a7b8f9df84a7\nauthor Antoine Poinsot <darosior@protonmail.com> 1660295965 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1676121132 +0100\n\nwallet: check solvability using descriptor in AvailableCoins\n\nThis is a workaround for Miniscript descriptors containing hash\nchallenges. For those we can't mock the signature creator without making\nOP_EQUAL mockable in the interpreter, so CalculateMaximumInputSize will\nalways return -1 and outputs for these descriptors would appear\nunsolvable while they actually are.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmPnlCwACgkQ4T/BRc0/\nQwTRWwwA4YP4yDPLKvfuk9aQeW9dSK/vg8pvZ0w0oTRGJd/D+mZZmDbPgfm/sj61\nUTvZXlTWbHnzpB5sxHTGjezVs7Ox7eZCN89ypZxyazNZEBr72GsSX7/lfzmS87cM\ntNesPjkrcd6Rj9+v0eaAsRbfr7CgYQUoUIWwQQvK1Ah9pK+JrL2W13HCsXYDT/Q9\nGLeT6xTGqVP4dlS1scner1MRRbkGF+jdtO+WjcZ2zVMfVNv3Z97hSeC08gZyDkfM\nef6hCs1AS2BXlq2bgrwRAkZcAuWexR6D0//6PY13iyoLNb/58Ei/1c8Dw4atDViQ\n5hsF/2Mxn2bidNMYwSrKiB34/dUylbrfP5hVzwAdBReoDRKjxMpK3yXZ6s+dZ7yN\nKDfRtaNzLM51kkTwjeGOdXb1hTfHlufSMPJ3oUfL7X47xhQlavAEIDX9mMM9MUVS\n1YkWN1OuWFMceG7rJtOrdATNi0sVK9t+1JW0Pmx2nQWaNlSZWI4KkhgkwZ3Vxxjr\nX+wSpyzs\n=EQ2I\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/560e62b1e221832ae99ff8684559a7b8f9df84a7",
          "sha": "560e62b1e221832ae99ff8684559a7b8f9df84a7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/560e62b1e221832ae99ff8684559a7b8f9df84a7"
        }
      ],
      "message": "wallet: check solvability using descriptor in AvailableCoins\n\nThis is a workaround for Miniscript descriptors containing hash\nchallenges. For those we can't mock the signature creator without making\nOP_EQUAL mockable in the interpreter, so CalculateMaximumInputSize will\nalways return -1 and outputs for these descriptors would appear\nunsolvable while they actually are.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-11T13:12:12Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2022-08-12T09:19:25Z"
      },
      "sha": "0a8fc9e200b5018c1efd6f9126eb405ca0beeea3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ1N2I3ZjIwMjFkMjM2OWY2ZTg4Y2RmMGY1NjJhYWIyN2M1MWJlYWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d57b7f2021d2369f6e88cdf0f562aab27c51beaf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d57b7f2021d2369f6e88cdf0f562aab27c51beaf",
      "tree": {
        "sha": "ff67e5cbf01e3830700fa5abc84d1b1a6e32a8fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff67e5cbf01e3830700fa5abc84d1b1a6e32a8fb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ff67e5cbf01e3830700fa5abc84d1b1a6e32a8fb\nparent 0a8fc9e200b5018c1efd6f9126eb405ca0beeea3\nauthor Antoine Poinsot <darosior@protonmail.com> 1676113407 +0100\ncommitter Antoine Poinsot <darosior@protonmail.com> 1676121133 +0100\n\nrefactor: make descriptors in Miniscript functional test more readable\n\nWe'll add more of them in the next commit, let's keep it bearable.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmPnlC0ACgkQ4T/BRc0/\nQwT4rQv+K1E2G2S1dWh6MhFj+jTMlPg8+lZu/btpf/Ex8UK0x5XnCH4m5SsTSt3J\ns5z872VgVO2R0V1iIRT84MREFt6xxx+jo06MPI1B7hTC8h7HYkjxhPfbAF9p6xpe\n4Fum7CBIcQ1ihGvJNsHgjBz7Il3feoDqjbakWflqwQ0j8EfIN6tuvco0OOupvVKz\n1uQig6wupTRX8PexctKuTOFhCLucVJE1O5Wqw2IwcevVkDRaEh1Rty3EQ8GVIDHD\nTq3oozrDp6s1W5KhonICJZidqamvQc+ziEUrR+pYQCtfosHOYxR1nM9xhYjDhXE8\neyyKjfwcmiQ/goVaZIGVG7Dbrzt8RG4/QWQUpKE7DaEfQyFjkQS+RLIh3Qq9oj4A\nNdPMVeaC53c3uKsnw3SvrDrrLkqzTwIHuhM0ZU6TJd/2opEp18d97ePIJdCAryPg\nHbHRQ6EKkTqjW8UVylDdOPxUhhBb9/1DSWqZ11aOSFoyZ4LBtkh6KD5s7qn8jEyw\nrVAL7BAn\n=qPLu\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a8fc9e200b5018c1efd6f9126eb405ca0beeea3",
          "sha": "0a8fc9e200b5018c1efd6f9126eb405ca0beeea3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0a8fc9e200b5018c1efd6f9126eb405ca0beeea3"
        }
      ],
      "message": "refactor: make descriptors in Miniscript functional test more readable\n\nWe'll add more of them in the next commit, let's keep it bearable.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-11T13:12:13Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-11T11:03:27Z"
      },
      "sha": "d57b7f2021d2369f6e88cdf0f562aab27c51beaf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYxMWUxMjUwMmE1ODg3ZmZiNzUxYmI5MmZhZGFhMzM0ZDQ4NDgyNGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/611e12502a5887ffb751bb92fadaa334d484824b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/611e12502a5887ffb751bb92fadaa334d484824b",
      "tree": {
        "sha": "71a6ec166e41f80b3f8c9bfae9898a819379951e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71a6ec166e41f80b3f8c9bfae9898a819379951e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 71a6ec166e41f80b3f8c9bfae9898a819379951e\nparent d57b7f2021d2369f6e88cdf0f562aab27c51beaf\nauthor Antoine Poinsot <darosior@protonmail.com> 1642692976 +0100\ncommitter Antoine Poinsot <darosior@protonmail.com> 1676121133 +0100\n\nqa: functional test Miniscript signing with key and timelocks\n\nWe'll need a better integration of the hash preimages PSBT fields to\nsatisfy Miniscript with such challenges from the RPC.\n\nThanks to Greg Sanders for his examples and suggestions to improve this\ntest.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmPnlC0ACgkQ4T/BRc0/\nQwQAawv/fQPnF3ey3qra9KOv4oKmFp76ZzmkogTcsFA/FpO039nShL/ysozxqPGl\nee7qWqVu95RvIUUkQ3CxEysYoKoQjZxYiV4L56OAJw2uhMWbVuwvLJmRKENY0yh/\ngF0wlgBKBdxlK9v+5rVs42R8gWaxqY4K9vZvM8p0TEwfR6qVKyWQTAV+u1yFiq6k\nGfTp+3zTmHJ5pgvJeP30S2pamdi7gAKzwUoAg1OoOGhjuZJOVE8PoACEi+fDWL4x\n/I/bpiLKoUwV3Iqfv5K1ztNuuUOVmUiYQaOxtHZYNe9dP5l9tCYAm2/cdKhCfw/X\nvf5szxloI7rRnxfT0aJRg6vXZn6lPnauzJgHEfPxB5Lx1rurKifQjzw2Ssv/W4p6\nAfSBAQ5qssZkdsOmHmxIXvQSpngpAd2flMLLlhPHCyI5h6nWLiZZTPIjUIVev71u\n/HkP/yHPuR4EiVfIqLHYSI++cuR8FoitUzsfQK/oDRZnl5iEb3fTdUvLdsPCR318\n2jxrnPby\n=QT3m\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d57b7f2021d2369f6e88cdf0f562aab27c51beaf",
          "sha": "d57b7f2021d2369f6e88cdf0f562aab27c51beaf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d57b7f2021d2369f6e88cdf0f562aab27c51beaf"
        }
      ],
      "message": "qa: functional test Miniscript signing with key and timelocks\n\nWe'll need a better integration of the hash preimages PSBT fields to\nsatisfy Miniscript with such challenges from the RPC.\n\nThanks to Greg Sanders for his examples and suggestions to improve this\ntest.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-11T13:12:13Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2022-01-20T15:36:16Z"
      },
      "sha": "611e12502a5887ffb751bb92fadaa334d484824b"
    },
    {
      "event": "commented",
      "id": 1426765831,
      "node_id": "IC_kwDOABII585VCrgH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1426765831",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-11T13:16:02Z",
      "updated_at": "2023-02-11T13:16:02Z",
      "author_association": "MEMBER",
      "body": "@instagibbs thanks for the suggestions and the examples. This functional test was clearly lacking imagination. :) However what you suggest is already thoroughly tested by the unit tests (and to a lesser extent by the fuzz tests). But it's inexpensive to test also in the functional test so i included your examples and added a couple more things to test for each descriptor: the number of signatures expected (always equal to the number of private keys we have in the descriptor), whether this \"completes\" the transaction or not, and the expected witness stack size of the satisfaction (to assert we used the expected satisfaction path).\r\n\r\n@sipa thanks, i think it'll be helpful to reviewers now and to future readers. I squashed [Simplify InputStack constructor calls](https://github.com/sipa/bitcoin/commit/69b1a492c2c2acc70edbf9abe8d433d3d708211f) into the first commit of this PR. I cherry-picked all your commits adding comments and explanations about the satisfaction logic, that i squashed in a single documentation commit (now the second commit of this PR). I was going to say the two commits aligning the properties with the website belong in another PR.. But it's a tiny diff and the `e` property is related to signing, so i just cherry-picked them as well (squashed in one commit).",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1426765831",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "mentioned",
      "id": 8496488007,
      "node_id": "MEE_lADOABII585CYdnBzwAAAAH6bh5H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8496488007",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-11T13:16:02Z"
    },
    {
      "event": "subscribed",
      "id": 8496488016,
      "node_id": "SE_lADOABII585CYdnBzwAAAAH6bh5Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8496488016",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-11T13:16:02Z"
    },
    {
      "event": "mentioned",
      "id": 8496488026,
      "node_id": "MEE_lADOABII585CYdnBzwAAAAH6bh5a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8496488026",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-11T13:16:02Z"
    },
    {
      "event": "subscribed",
      "id": 8496488034,
      "node_id": "SE_lADOABII585CYdnBzwAAAAH6bh5i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8496488034",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-11T13:16:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8496488185,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAH6bh75",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8496488185",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-11T13:16:04Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE3ZTM1NDcyNDFkNTkzYmM5MmM1YzZiMzZjNTQyODRkOWQ5ZjNmZWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17e3547241d593bc92c5c6b36c54284d9d9f3feb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/17e3547241d593bc92c5c6b36c54284d9d9f3feb",
      "tree": {
        "sha": "3306b3b1b83b54b8755885bf19a3c6a1a39ed628",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3306b3b1b83b54b8755885bf19a3c6a1a39ed628"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3306b3b1b83b54b8755885bf19a3c6a1a39ed628\nparent 611e12502a5887ffb751bb92fadaa334d484824b\nauthor Antoine Poinsot <darosior@protonmail.com> 1645444103 +0100\ncommitter Antoine Poinsot <darosior@protonmail.com> 1676130677 +0100\n\nqa: add a fuzz target generating random nodes from a binary encoding\n\nThis is a \"dumb\" way of randomly generating a Miniscript node from\nfuzzer input. It defines a strict binary encoding and will always generate\na node defined from the encoding without \"helping\" to create valid nodes.\nIt will cut through as soon as it encounters an invalid fragment so\nhopefully the fuzzer can tend to learn the encoding and generate valid\nnodes with a higher probability.\n\nOn a valid generated node a number of invariants are checked, especially\naround the satisfactions and testing them against the Script\ninterpreter.\n\nThe node generation and testing is modular in order to later introduce\nother ways to generate nodes from fuzzer inputs with minimal code.\n\nCo-Authored-By: Pieter Wuille <pieter@wuille.net>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmPnuXUACgkQ4T/BRc0/\nQwQftgwAxnoO31tGYXM/dD5bQSTdp3kH/NeA75kny28TnKChG7H8JlXQVPkNUoo+\nUcxwySBoZrIm7CDLmT88PrOupeIkqPtNRIZcU2/SD/7DBnqvKoitbowmOwyLZlEV\nRrWXONf8X/+ALlT2OxDHa4YqERhuR47P/NxUe8ZX5aT/WZC/ev1l3FBeWkozw65A\nwkxEe9vkDvYPOtXrHaNBPaC7ZLjI2k+ORivtgllYFQ8HhVDtaxEVgfRYGL9vTZlD\nhP2SaC2yykJ65SroHTfSWTjhi5Lqzhqx3h9xw7zY7c6gMKQoWPL2YDTQnD91HsYn\nq+OhkVEUx4Vgz1PlNNh2yy7ca5eCh/+3h3UGxwSZhMKqrdhswtFuEeD7HVms0dYB\nh/I8CGzxrZM2Vnk2qqVB5NVOVVK4BiM3kEIGfO+ab4sCEE9OFTaOm8yGtBWE2Iqz\nFdSD9urCmqBSsAT1gKO5Vb3kejewiNYtcWfwhl8t2BaVNBvesM6QanzI8Nmt4X7/\n0Xt4698Q\n=Q89w\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/611e12502a5887ffb751bb92fadaa334d484824b",
          "sha": "611e12502a5887ffb751bb92fadaa334d484824b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/611e12502a5887ffb751bb92fadaa334d484824b"
        }
      ],
      "message": "qa: add a fuzz target generating random nodes from a binary encoding\n\nThis is a \"dumb\" way of randomly generating a Miniscript node from\nfuzzer input. It defines a strict binary encoding and will always generate\na node defined from the encoding without \"helping\" to create valid nodes.\nIt will cut through as soon as it encounters an invalid fragment so\nhopefully the fuzzer can tend to learn the encoding and generate valid\nnodes with a higher probability.\n\nOn a valid generated node a number of invariants are checked, especially\naround the satisfactions and testing them against the Script\ninterpreter.\n\nThe node generation and testing is modular in order to later introduce\nother ways to generate nodes from fuzzer inputs with minimal code.\n\nCo-Authored-By: Pieter Wuille <pieter@wuille.net>",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-11T15:51:17Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2022-02-21T11:48:23Z"
      },
      "sha": "17e3547241d593bc92c5c6b36c54284d9d9f3feb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg0MGEzOTYwMjkzMTY4OTZiZWRhNDY2MDBhZWMzYzFhZjA5YTg5OWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/840a396029316896beda46600aec3c1af09a899c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/840a396029316896beda46600aec3c1af09a899c",
      "tree": {
        "sha": "c218ac129f0f64ff82f0493d86eff332e15b4968",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c218ac129f0f64ff82f0493d86eff332e15b4968"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c218ac129f0f64ff82f0493d86eff332e15b4968\nparent 17e3547241d593bc92c5c6b36c54284d9d9f3feb\nauthor Antoine Poinsot <darosior@protonmail.com> 1649932742 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1676130678 +0100\n\nqa: add a \"smart\" Miniscript fuzz target\n\nAt the expense of more complexity, this target generates a valid\nMiniscript node at every iteration.\n\nThis target will at first run populate a list of recipe (a map from\ndesired type to possible ways of creating such type) and curate it\n(remove the unavailable or redundant recipes).\nThen, at each iteration it will pick a type, choose a manner to create a\nnode of such type from the available recipes, and then\npseudo-recursively do the same for the type constraints of the picked\nrecipe.\n\nFor instance, if it is instructed based on the fuzzer output to create a\nMiniscript node of type 'Bd', it could choose to create an 'or_i(subA, subB)'\nnodes with type constraints 'B' for subA and 'Bd' for subB. It then\nconsults the recipes for creating subA and subB, etc...\n\nHere is the list of all the existing recipes, by type constraint:\n\nB: 0()\nB: 1()\nB: older()\nB: after()\nB: sha256()\nB: hash256()\nB: ripemd160()\nB: hash160()\nB: c:(K)\nB: d:(Vz)\nB: j:(Bn)\nB: n:(B)\nB: and_v(V,B)\nB: and_b(B,W)\nB: or_b(Bd,Wd)\nB: or_d(Bdu,B)\nB: or_i(B,B)\nB: andor(Bdu,B,B)\nB: thresh(Bdu)\nB: thresh(Bdu,Wdu)\nB: thresh(Bdu,Wdu,Wdu)\nB: multi()\n\nV: v:(B)\nV: and_v(V,V)\nV: or_c(Bdu,V)\nV: or_i(V,V)\nV: andor(Bdu,V,V)\n\nK: pk_k()\nK: pk_h()\nK: and_v(V,K)\nK: or_i(K,K)\nK: andor(Bdu,K,K)\n\nW: a:(B)\nW: s:(Bo)\n\nBz: 0()\nBz: 1()\nBz: older()\nBz: after()\nBz: n:(Bz)\nBz: and_v(Vz,Bz)\nBz: or_d(Bzdu,Bz)\nBz: andor(Bzdu,Bz,Bz)\nBz: thresh(Bzdu)\n\nVz: v:(Bz)\nVz: and_v(Vz,Vz)\nVz: or_c(Bzdu,Vz)\nVz: andor(Bzdu,Vz,Vz)\n\nBo: sha256()\nBo: hash256()\nBo: ripemd160()\nBo: hash160()\nBo: c:(Ko)\nBo: d:(Vz)\nBo: j:(Bon)\nBo: n:(Bo)\nBo: and_v(Vz,Bo)\nBo: and_v(Vo,Bz)\nBo: or_d(Bodu,Bz)\nBo: or_i(Bz,Bz)\nBo: andor(Bzdu,Bo,Bo)\nBo: andor(Bodu,Bz,Bz)\nBo: thresh(Bodu)\n\nVo: v:(Bo)\nVo: and_v(Vz,Vo)\nVo: and_v(Vo,Vz)\nVo: or_c(Bodu,Vz)\nVo: or_i(Vz,Vz)\nVo: andor(Bzdu,Vo,Vo)\nVo: andor(Bodu,Vz,Vz)\n\nKo: pk_k()\nKo: and_v(Vz,Ko)\nKo: andor(Bzdu,Ko,Ko)\n\nBn: sha256()\nBn: hash256()\nBn: ripemd160()\nBn: hash160()\nBn: c:(Kn)\nBn: d:(Vz)\nBn: j:(Bn)\nBn: n:(Bn)\nBn: and_v(Vz,Bn)\nBn: and_v(Vn,B)\nBn: and_b(Bn,W)\nBn: multi()\n\nVn: v:(Bn)\nVn: and_v(Vz,Vn)\nVn: and_v(Vn,V)\n\nKn: pk_k()\nKn: pk_h()\nKn: and_v(Vz,Kn)\nKn: and_v(Vn,K)\n\nBon: sha256()\nBon: hash256()\nBon: ripemd160()\nBon: hash160()\nBon: c:(Kon)\nBon: d:(Vz)\nBon: j:(Bon)\nBon: n:(Bon)\nBon: and_v(Vz,Bon)\nBon: and_v(Von,Bz)\n\nVon: v:(Bon)\nVon: and_v(Vz,Von)\nVon: and_v(Von,Vz)\n\nKon: pk_k()\nKon: and_v(Vz,Kon)\n\nBd: 0()\nBd: sha256()\nBd: hash256()\nBd: ripemd160()\nBd: hash160()\nBd: c:(Kd)\nBd: d:(Vz)\nBd: j:(Bn)\nBd: n:(Bd)\nBd: and_b(Bd,Wd)\nBd: or_b(Bd,Wd)\nBd: or_d(Bdu,Bd)\nBd: or_i(B,Bd)\nBd: or_i(Bd,B)\nBd: andor(Bdu,B,Bd)\nBd: thresh(Bdu)\nBd: thresh(Bdu,Wdu)\nBd: thresh(Bdu,Wdu,Wdu)\nBd: multi()\n\nKd: pk_k()\nKd: pk_h()\nKd: or_i(K,Kd)\nKd: or_i(Kd,K)\nKd: andor(Bdu,K,Kd)\n\nWd: a:(Bd)\nWd: s:(Bod)\n\nBzd: 0()\nBzd: n:(Bzd)\nBzd: or_d(Bzdu,Bzd)\nBzd: andor(Bzdu,Bz,Bzd)\nBzd: thresh(Bzdu)\n\nBod: sha256()\nBod: hash256()\nBod: ripemd160()\nBod: hash160()\nBod: c:(Kod)\nBod: d:(Vz)\nBod: j:(Bon)\nBod: n:(Bod)\nBod: or_d(Bodu,Bzd)\nBod: or_i(Bz,Bzd)\nBod: or_i(Bzd,Bz)\nBod: andor(Bzdu,Bo,Bod)\nBod: andor(Bodu,Bz,Bzd)\nBod: thresh(Bodu)\n\nKod: pk_k()\nKod: andor(Bzdu,Ko,Kod)\n\nBu: 0()\nBu: 1()\nBu: sha256()\nBu: hash256()\nBu: ripemd160()\nBu: hash160()\nBu: c:(K)\nBu: d:(Vz)\nBu: j:(Bnu)\nBu: n:(B)\nBu: and_v(V,Bu)\nBu: and_b(B,W)\nBu: or_b(Bd,Wd)\nBu: or_d(Bdu,Bu)\nBu: or_i(Bu,Bu)\nBu: andor(Bdu,Bu,Bu)\nBu: thresh(Bdu)\nBu: thresh(Bdu,Wdu)\nBu: thresh(Bdu,Wdu,Wdu)\nBu: multi()\n\nBzu: 0()\nBzu: 1()\nBzu: n:(Bz)\nBzu: and_v(Vz,Bzu)\nBzu: or_d(Bzdu,Bzu)\nBzu: andor(Bzdu,Bzu,Bzu)\nBzu: thresh(Bzdu)\n\nBou: sha256()\nBou: hash256()\nBou: ripemd160()\nBou: hash160()\nBou: c:(Ko)\nBou: d:(Vz)\nBou: j:(Bonu)\nBou: n:(Bo)\nBou: and_v(Vz,Bou)\nBou: and_v(Vo,Bzu)\nBou: or_d(Bodu,Bzu)\nBou: or_i(Bzu,Bzu)\nBou: andor(Bzdu,Bou,Bou)\nBou: andor(Bodu,Bzu,Bzu)\nBou: thresh(Bodu)\n\nBnu: sha256()\nBnu: hash256()\nBnu: ripemd160()\nBnu: hash160()\nBnu: c:(Kn)\nBnu: d:(Vz)\nBnu: j:(Bnu)\nBnu: n:(Bn)\nBnu: and_v(Vz,Bnu)\nBnu: and_v(Vn,Bu)\nBnu: and_b(Bn,W)\nBnu: multi()\n\nBonu: sha256()\nBonu: hash256()\nBonu: ripemd160()\nBonu: hash160()\nBonu: c:(Kon)\nBonu: d:(Vz)\nBonu: j:(Bonu)\nBonu: n:(Bon)\nBonu: and_v(Vz,Bonu)\nBonu: and_v(Von,Bzu)\n\nBdu: 0()\nBdu: sha256()\nBdu: hash256()\nBdu: ripemd160()\nBdu: hash160()\nBdu: c:(Kd)\nBdu: d:(Vz)\nBdu: j:(Bnu)\nBdu: n:(Bd)\nBdu: and_b(Bd,Wd)\nBdu: or_b(Bd,Wd)\nBdu: or_d(Bdu,Bdu)\nBdu: or_i(Bu,Bdu)\nBdu: or_i(Bdu,Bu)\nBdu: andor(Bdu,Bu,Bdu)\nBdu: thresh(Bdu)\nBdu: thresh(Bdu,Wdu)\nBdu: thresh(Bdu,Wdu,Wdu)\nBdu: multi()\n\nWdu: a:(Bdu)\nWdu: s:(Bodu)\n\nBzdu: 0()\nBzdu: n:(Bzd)\nBzdu: or_d(Bzdu,Bzdu)\nBzdu: andor(Bzdu,Bzu,Bzdu)\nBzdu: thresh(Bzdu)\n\nBodu: sha256()\nBodu: hash256()\nBodu: ripemd160()\nBodu: hash160()\nBodu: c:(Kod)\nBodu: d:(Vz)\nBodu: j:(Bonu)\nBodu: n:(Bod)\nBodu: or_d(Bodu,Bzdu)\nBodu: or_i(Bzu,Bzdu)\nBodu: or_i(Bzdu,Bzu)\nBodu: andor(Bzdu,Bou,Bodu)\nBodu: andor(Bodu,Bzu,Bzdu)\nBodu: thresh(Bodu)\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmPnuXYACgkQ4T/BRc0/\nQwQgnwwAz0GVVUkQt1UK5UQgX55GgUvNWsUVqAOSNYVBMxwUslvb7OxH24/rRZDG\nPgIU03od7ByEtmUj3h8MsbDhZ/WHELYDk79wFnLHgN9gIbCji3lvkbPJm6fmbtVE\nEalT+DBPwFwtMGZEW6AJQ1WsAHHo8U/BhLEje2oLkR9aVKj334E0sHSIY+TYDXR6\nFq6a1IlnMY+C0daiZeQ4/6NxmwABW+FDSAfgHXiIC1cBj2tm/VGy1BCq0H/H+8bz\ngM2MV0xa3ALDFKMSYPUsjHFXH920cePR9kf4UCQs4L7oLGo01hxUs8RpjTHyQLDj\nRVMynvivUEkT97u4MLqKHxBm7cHQnpIQPcOH4ElijavP0eQEa58JX5v9Szvg6V4H\nUOXd/QF0FbrXlNlIRM2CTLsQRN8iE3ThEqtrxtYbh8AkfBPJ1YInYo/Zu3taYhdL\noUscvLAS5z/KlVDGkmx6UcWQSnAKHklY61sYxG4CnmoejgqHRa76B/ThSCEK2g0q\no0niPDjC\n=rVGN\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17e3547241d593bc92c5c6b36c54284d9d9f3feb",
          "sha": "17e3547241d593bc92c5c6b36c54284d9d9f3feb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/17e3547241d593bc92c5c6b36c54284d9d9f3feb"
        }
      ],
      "message": "qa: add a \"smart\" Miniscript fuzz target\n\nAt the expense of more complexity, this target generates a valid\nMiniscript node at every iteration.\n\nThis target will at first run populate a list of recipe (a map from\ndesired type to possible ways of creating such type) and curate it\n(remove the unavailable or redundant recipes).\nThen, at each iteration it will pick a type, choose a manner to create a\nnode of such type from the available recipes, and then\npseudo-recursively do the same for the type constraints of the picked\nrecipe.\n\nFor instance, if it is instructed based on the fuzzer output to create a\nMiniscript node of type 'Bd', it could choose to create an 'or_i(subA, subB)'\nnodes with type constraints 'B' for subA and 'Bd' for subB. It then\nconsults the recipes for creating subA and subB, etc...\n\nHere is the list of all the existing recipes, by type constraint:\n\nB: 0()\nB: 1()\nB: older()\nB: after()\nB: sha256()\nB: hash256()\nB: ripemd160()\nB: hash160()\nB: c:(K)\nB: d:(Vz)\nB: j:(Bn)\nB: n:(B)\nB: and_v(V,B)\nB: and_b(B,W)\nB: or_b(Bd,Wd)\nB: or_d(Bdu,B)\nB: or_i(B,B)\nB: andor(Bdu,B,B)\nB: thresh(Bdu)\nB: thresh(Bdu,Wdu)\nB: thresh(Bdu,Wdu,Wdu)\nB: multi()\n\nV: v:(B)\nV: and_v(V,V)\nV: or_c(Bdu,V)\nV: or_i(V,V)\nV: andor(Bdu,V,V)\n\nK: pk_k()\nK: pk_h()\nK: and_v(V,K)\nK: or_i(K,K)\nK: andor(Bdu,K,K)\n\nW: a:(B)\nW: s:(Bo)\n\nBz: 0()\nBz: 1()\nBz: older()\nBz: after()\nBz: n:(Bz)\nBz: and_v(Vz,Bz)\nBz: or_d(Bzdu,Bz)\nBz: andor(Bzdu,Bz,Bz)\nBz: thresh(Bzdu)\n\nVz: v:(Bz)\nVz: and_v(Vz,Vz)\nVz: or_c(Bzdu,Vz)\nVz: andor(Bzdu,Vz,Vz)\n\nBo: sha256()\nBo: hash256()\nBo: ripemd160()\nBo: hash160()\nBo: c:(Ko)\nBo: d:(Vz)\nBo: j:(Bon)\nBo: n:(Bo)\nBo: and_v(Vz,Bo)\nBo: and_v(Vo,Bz)\nBo: or_d(Bodu,Bz)\nBo: or_i(Bz,Bz)\nBo: andor(Bzdu,Bo,Bo)\nBo: andor(Bodu,Bz,Bz)\nBo: thresh(Bodu)\n\nVo: v:(Bo)\nVo: and_v(Vz,Vo)\nVo: and_v(Vo,Vz)\nVo: or_c(Bodu,Vz)\nVo: or_i(Vz,Vz)\nVo: andor(Bzdu,Vo,Vo)\nVo: andor(Bodu,Vz,Vz)\n\nKo: pk_k()\nKo: and_v(Vz,Ko)\nKo: andor(Bzdu,Ko,Ko)\n\nBn: sha256()\nBn: hash256()\nBn: ripemd160()\nBn: hash160()\nBn: c:(Kn)\nBn: d:(Vz)\nBn: j:(Bn)\nBn: n:(Bn)\nBn: and_v(Vz,Bn)\nBn: and_v(Vn,B)\nBn: and_b(Bn,W)\nBn: multi()\n\nVn: v:(Bn)\nVn: and_v(Vz,Vn)\nVn: and_v(Vn,V)\n\nKn: pk_k()\nKn: pk_h()\nKn: and_v(Vz,Kn)\nKn: and_v(Vn,K)\n\nBon: sha256()\nBon: hash256()\nBon: ripemd160()\nBon: hash160()\nBon: c:(Kon)\nBon: d:(Vz)\nBon: j:(Bon)\nBon: n:(Bon)\nBon: and_v(Vz,Bon)\nBon: and_v(Von,Bz)\n\nVon: v:(Bon)\nVon: and_v(Vz,Von)\nVon: and_v(Von,Vz)\n\nKon: pk_k()\nKon: and_v(Vz,Kon)\n\nBd: 0()\nBd: sha256()\nBd: hash256()\nBd: ripemd160()\nBd: hash160()\nBd: c:(Kd)\nBd: d:(Vz)\nBd: j:(Bn)\nBd: n:(Bd)\nBd: and_b(Bd,Wd)\nBd: or_b(Bd,Wd)\nBd: or_d(Bdu,Bd)\nBd: or_i(B,Bd)\nBd: or_i(Bd,B)\nBd: andor(Bdu,B,Bd)\nBd: thresh(Bdu)\nBd: thresh(Bdu,Wdu)\nBd: thresh(Bdu,Wdu,Wdu)\nBd: multi()\n\nKd: pk_k()\nKd: pk_h()\nKd: or_i(K,Kd)\nKd: or_i(Kd,K)\nKd: andor(Bdu,K,Kd)\n\nWd: a:(Bd)\nWd: s:(Bod)\n\nBzd: 0()\nBzd: n:(Bzd)\nBzd: or_d(Bzdu,Bzd)\nBzd: andor(Bzdu,Bz,Bzd)\nBzd: thresh(Bzdu)\n\nBod: sha256()\nBod: hash256()\nBod: ripemd160()\nBod: hash160()\nBod: c:(Kod)\nBod: d:(Vz)\nBod: j:(Bon)\nBod: n:(Bod)\nBod: or_d(Bodu,Bzd)\nBod: or_i(Bz,Bzd)\nBod: or_i(Bzd,Bz)\nBod: andor(Bzdu,Bo,Bod)\nBod: andor(Bodu,Bz,Bzd)\nBod: thresh(Bodu)\n\nKod: pk_k()\nKod: andor(Bzdu,Ko,Kod)\n\nBu: 0()\nBu: 1()\nBu: sha256()\nBu: hash256()\nBu: ripemd160()\nBu: hash160()\nBu: c:(K)\nBu: d:(Vz)\nBu: j:(Bnu)\nBu: n:(B)\nBu: and_v(V,Bu)\nBu: and_b(B,W)\nBu: or_b(Bd,Wd)\nBu: or_d(Bdu,Bu)\nBu: or_i(Bu,Bu)\nBu: andor(Bdu,Bu,Bu)\nBu: thresh(Bdu)\nBu: thresh(Bdu,Wdu)\nBu: thresh(Bdu,Wdu,Wdu)\nBu: multi()\n\nBzu: 0()\nBzu: 1()\nBzu: n:(Bz)\nBzu: and_v(Vz,Bzu)\nBzu: or_d(Bzdu,Bzu)\nBzu: andor(Bzdu,Bzu,Bzu)\nBzu: thresh(Bzdu)\n\nBou: sha256()\nBou: hash256()\nBou: ripemd160()\nBou: hash160()\nBou: c:(Ko)\nBou: d:(Vz)\nBou: j:(Bonu)\nBou: n:(Bo)\nBou: and_v(Vz,Bou)\nBou: and_v(Vo,Bzu)\nBou: or_d(Bodu,Bzu)\nBou: or_i(Bzu,Bzu)\nBou: andor(Bzdu,Bou,Bou)\nBou: andor(Bodu,Bzu,Bzu)\nBou: thresh(Bodu)\n\nBnu: sha256()\nBnu: hash256()\nBnu: ripemd160()\nBnu: hash160()\nBnu: c:(Kn)\nBnu: d:(Vz)\nBnu: j:(Bnu)\nBnu: n:(Bn)\nBnu: and_v(Vz,Bnu)\nBnu: and_v(Vn,Bu)\nBnu: and_b(Bn,W)\nBnu: multi()\n\nBonu: sha256()\nBonu: hash256()\nBonu: ripemd160()\nBonu: hash160()\nBonu: c:(Kon)\nBonu: d:(Vz)\nBonu: j:(Bonu)\nBonu: n:(Bon)\nBonu: and_v(Vz,Bonu)\nBonu: and_v(Von,Bzu)\n\nBdu: 0()\nBdu: sha256()\nBdu: hash256()\nBdu: ripemd160()\nBdu: hash160()\nBdu: c:(Kd)\nBdu: d:(Vz)\nBdu: j:(Bnu)\nBdu: n:(Bd)\nBdu: and_b(Bd,Wd)\nBdu: or_b(Bd,Wd)\nBdu: or_d(Bdu,Bdu)\nBdu: or_i(Bu,Bdu)\nBdu: or_i(Bdu,Bu)\nBdu: andor(Bdu,Bu,Bdu)\nBdu: thresh(Bdu)\nBdu: thresh(Bdu,Wdu)\nBdu: thresh(Bdu,Wdu,Wdu)\nBdu: multi()\n\nWdu: a:(Bdu)\nWdu: s:(Bodu)\n\nBzdu: 0()\nBzdu: n:(Bzd)\nBzdu: or_d(Bzdu,Bzdu)\nBzdu: andor(Bzdu,Bzu,Bzdu)\nBzdu: thresh(Bzdu)\n\nBodu: sha256()\nBodu: hash256()\nBodu: ripemd160()\nBodu: hash160()\nBodu: c:(Kod)\nBodu: d:(Vz)\nBodu: j:(Bonu)\nBodu: n:(Bod)\nBodu: or_d(Bodu,Bzdu)\nBodu: or_i(Bzu,Bzdu)\nBodu: or_i(Bzdu,Bzu)\nBodu: andor(Bzdu,Bou,Bodu)\nBodu: andor(Bodu,Bzu,Bzdu)\nBodu: thresh(Bodu)\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-11T15:51:18Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2022-04-14T10:39:02Z"
      },
      "sha": "840a396029316896beda46600aec3c1af09a899c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8496820027,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAH6cy87",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8496820027",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-11T15:52:14Z"
    },
    {
      "event": "reviewed",
      "id": 1295765939,
      "node_id": "PRR_kwDOABII585NO9Gz",
      "url": null,
      "actor": null,
      "commit_id": "36478ac00ef0a82a82052032e68d513a92ea38b8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/24149/commits/36478ac00ef0a82a82052032e68d513a92ea38b8\r\n\r\nreviewed tests only",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-1295765939",
      "submitted_at": "2023-02-13T14:36:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
    },
    {
      "event": "review_requested",
      "id": 8505176937,
      "node_id": "RRE_lADOABII585CYdnBzwAAAAH68rNp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8505176937",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-13T14:36:16Z",
      "requested_reviewer": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZjN2ExN2E4ZTBlZWMzNzdmODNlZDEzOTlmMDAzYWU3MGI4OTgyNzA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "tree": {
        "sha": "3c3d8a5eb4d3078e287c27d6921a2c55611d65e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c3d8a5eb4d3078e287c27d6921a2c55611d65e4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3c3d8a5eb4d3078e287c27d6921a2c55611d65e4\nparent 840a396029316896beda46600aec3c1af09a899c\nauthor Antoine Poinsot <darosior@protonmail.com> 1676116672 +0100\ncommitter Antoine Poinsot <darosior@protonmail.com> 1676299165 +0100\n\npsbt: support externally provided preimages for Miniscript satisfaction\n\nCo-Authored-By: Andrew Chow <github@achow101.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmPqS50ACgkQ4T/BRc0/\nQwR6ZQwA0z6ptPJbH2wJi9HW5tNPqAauLAQDw0MybxY092d9oWjBDLYSs2iTn7mV\ntb51KZMZkzzGZxwnlB+sD+aRiFXVCfBKfjEK+ajxiZRGRdEHfyySdDshi00my6YN\n6cauiZIj0XNoXjnb67p9BxJfOljEiiVOZqc01KMBY6DnPADilfG7k56zSA6tNYAQ\nY6pthznrAzFB12rmGzCqM1PFgYa3VoIer1aaXpSl8bbY4tgz6iiKwjcO2w/UuWXr\nFYS484Kn6XbIQDlCj5WLyEnu0pqBxderzgmEHnEpJxI/jOPHJG0wlsW4IFmuzFa/\nr/FioXPUuHwFrQutUGYdR48GaSKz8hu+OCr2aM6bOOm1aI0Xrexbqki/QCTJ1KF9\nNfHWjh3oCqSG/khS2sQWa+8K99jxrU33Cj2j1VX3zDeg807V0Qkzw7sjcOZDyVlm\nlRDxCpQh0erFe0qT4IsvW9QBkL7gcDTyy6hHtshQg31YVRSBzwI9WuMyUBep0cjk\nRvUuG4y9\n=Dnf7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/840a396029316896beda46600aec3c1af09a899c",
          "sha": "840a396029316896beda46600aec3c1af09a899c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/840a396029316896beda46600aec3c1af09a899c"
        }
      ],
      "message": "psbt: support externally provided preimages for Miniscript satisfaction\n\nCo-Authored-By: Andrew Chow <github@achow101.com>",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-13T14:39:25Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2023-02-11T11:57:52Z"
      },
      "sha": "6c7a17a8e0eec377f83ed1399f003ae70b898270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8505216152,
      "node_id": "HRFPE_lADOABII585CYdnBzwAAAAH680yY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8505216152",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-13T14:39:56Z"
    },
    {
      "event": "reviewed",
      "id": 1296428327,
      "node_id": "PRR_kwDOABII585NRe0n",
      "url": null,
      "actor": null,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 6c7a17a8e0eec377f83ed1399f003ae70b898270 (to the extent that it's not my own code).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-1296428327",
      "submitted_at": "2023-02-13T21:06:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
    },
    {
      "event": "review_requested",
      "id": 8508903118,
      "node_id": "RRE_lADOABII585CYdnBzwAAAAH7K47O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8508903118",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-13T21:07:03Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "milestoned",
      "id": 8513975976,
      "node_id": "MIE_lADOABII585CYdnBzwAAAAH7ePao",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8513975976",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-14T10:50:49Z",
      "milestone": {
        "title": "25.0"
      }
    },
    {
      "event": "commented",
      "id": 1430404755,
      "node_id": "IC_kwDOABII585VQj6T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1430404755",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-14T21:30:47Z",
      "updated_at": "2023-02-14T21:30:47Z",
      "author_association": "MEMBER",
      "body": "ACK 6c7a17a8e0eec377f83ed1399f003ae70b898270\r\n\r\nReviewed code and non-fuzz tests.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1430404755",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "commented",
      "id": 1431108853,
      "node_id": "IC_kwDOABII585VTPz1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1431108853",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-15T10:33:46Z",
      "updated_at": "2023-02-15T10:33:46Z",
      "author_association": "MEMBER",
      "body": "@darosior do I understand correctly that you need #26567 in order for [PSBT stuff](https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1183382594) to work? Can I just combine both PR's to continue the test I was doing, or are there more changes required?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1431108853",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "mentioned",
      "id": 8524536191,
      "node_id": "MEE_lADOABII585CYdnBzwAAAAH8Ghl_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8524536191",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-15T10:33:46Z"
    },
    {
      "event": "subscribed",
      "id": 8524536205,
      "node_id": "SE_lADOABII585CYdnBzwAAAAH8GhmN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8524536205",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-15T10:33:46Z"
    },
    {
      "event": "commented",
      "id": 1431118379,
      "node_id": "IC_kwDOABII585VTSIr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1431118379",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-15T10:39:05Z",
      "updated_at": "2023-02-15T10:39:05Z",
      "author_association": "MEMBER",
      "body": "@Sjors see https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1103625462. A minimal PSBT integration is part of this PR now. We treat Miniscript-related data when we are given a PSBT. However to fill Miniscript-related data to a PSBT from our wallet will need more work than just #26567, and also some design decisions to be taken.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1431118379",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24149"
    },
    {
      "event": "mentioned",
      "id": 8524586003,
      "node_id": "MEE_lADOABII585CYdnBzwAAAAH8GtwT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8524586003",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-15T10:39:06Z"
    },
    {
      "event": "subscribed",
      "id": 8524586047,
      "node_id": "SE_lADOABII585CYdnBzwAAAAH8Gtw_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8524586047",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-15T10:39:06Z"
    },
    {
      "event": "merged",
      "id": 8535132931,
      "node_id": "ME_lADOABII585CYdnBzwAAAAH8u8sD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8535132931",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fb82d91a9c34761f23be7649370106d9cc49e66f",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb82d91a9c34761f23be7649370106d9cc49e66f",
      "created_at": "2023-02-16T10:01:57Z"
    },
    {
      "event": "closed",
      "id": 8535132999,
      "node_id": "CE_lADOABII585CYdnBzwAAAAH8u8tH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8535132999",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-16T10:01:57Z"
    },
    {
      "event": "referenced",
      "id": 8538462540,
      "node_id": "REFE_lADOABII585CYdnBzwAAAAH87plM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8538462540",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "afcbb93e471ebfb6c8c16042b26d2e6834bb6919",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/afcbb93e471ebfb6c8c16042b26d2e6834bb6919",
      "created_at": "2023-02-16T15:47:05Z"
    },
    {
      "event": "referenced",
      "id": 8539056876,
      "node_id": "REFE_lADOABII585CYdnBzwAAAAH896rs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8539056876",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2256a8855bfdb726d449214a53bab07fd60cb1f9",
      "commit_url": "https://api.github.com/repos/sipa/miniscript/commits/2256a8855bfdb726d449214a53bab07fd60cb1f9",
      "created_at": "2023-02-16T16:43:00Z"
    },
    {
      "event": "reviewed",
      "id": 1303201964,
      "node_id": "PRR_kwDOABII585NrUis",
      "url": null,
      "actor": null,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-1303201964",
      "submitted_at": "2023-02-17T11:14:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
    },
    {
      "event": "referenced",
      "id": 8570456834,
      "node_id": "REFE_lADOABII585CYdnBzwAAAAH-1ssC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8570456834",
      "actor": {
        "login": "domob1812",
        "id": 4943644,
        "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/domob1812",
        "html_url": "https://github.com/domob1812",
        "followers_url": "https://api.github.com/users/domob1812/followers",
        "following_url": "https://api.github.com/users/domob1812/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/domob1812/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/domob1812/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
        "organizations_url": "https://api.github.com/users/domob1812/orgs",
        "repos_url": "https://api.github.com/users/domob1812/repos",
        "events_url": "https://api.github.com/users/domob1812/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/domob1812/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0b68fe04956afc0896752739077e36d91eb42299",
      "commit_url": "https://api.github.com/repos/domob1812/namecoin-core/commits/0b68fe04956afc0896752739077e36d91eb42299",
      "created_at": "2023-02-21T12:32:25Z"
    },
    {
      "event": "referenced",
      "id": 8578985912,
      "node_id": "REFE_lADOABII585CYdnBzwAAAAH_WO-4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8578985912",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8b4dc94734a2472a201296376bfb18f982e6d92f",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b4dc94734a2472a201296376bfb18f982e6d92f",
      "created_at": "2023-02-22T09:37:16Z"
    },
    {
      "event": "referenced",
      "id": 8608348936,
      "node_id": "REFE_lADOABII585CYdnBzwAAAAIBGPsI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8608348936",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0603bdba60eb95941d96e0f69c3c0e3c84181120",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/0603bdba60eb95941d96e0f69c3c0e3c84181120",
      "created_at": "2023-02-25T19:13:18Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806178300",
      "pull_request_review_id": 882103227,
      "id": 806178300,
      "node_id": "PRRC_kwDOABII584wDU38",
      "diff_hunk": "@@ -225,6 +230,54 @@ size_t ComputeScriptLen(NodeType nodetype, Type sub0typ, size_t subsize, uint32_\n //! A helper sanitizer/checker for the output of CalcType.\n Type SanitizeType(Type x);\n \n+//! An object representing a sequence of witness stack elements.\n+struct InputStack {\n+    /** Whether this stack is valid for its intended purpose (satisfaction or dissatisfaction of a Node).\n+     *  The MAYBE value is used for size estimation, when keys/preimages may actually be unavailable,\n+     *  but may be available at signing time. This makes the InputStack structure and signing logic,\n+     *  filled with dummy signatures/preimages usable for witness size estimation.\n+     */\n+    Availability available = Availability::YES;\n+    //! Whether this stack contains a digital signature.\n+    bool has_sig = false;\n+    //! Whether this stack is malleable (can be turned into an equally valid other stack by a third party).\n+    bool malleable = false;\n+    //! Whether this stack is non-canonical (using a construction known to be unnecessary for satisfaction).\n+    bool non_canon = false;\n+    //! Serialized witness size.\n+    size_t size = 0;\n+    //! Data elements.\n+    std::vector<std::vector<unsigned char>> stack;\n+    //! Construct an empty stack (valid).\n+    InputStack() {}\n+    //! Construct a valid single-element stack (with an element up to 75 bytes).\n+    InputStack(std::vector<unsigned char> in) : size(in.size() + 1), stack(Vector(std::move(in))) {}\n+    //! Change availability\n+    InputStack& Available(Availability avail);\n+    //! Mark this input stack as having a signature.\n+    InputStack& WithSig();\n+    //! Mark this input stack as non-canonical (known to not be necessary in non-malleable satisfactions).\n+    InputStack& NonCanon();\n+    //! Mark this input stack as malleable.\n+    InputStack& Malleable(bool x = true);",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 45,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "b2e3582323b1e3dfded7eb0a2597fd74ba52e4df",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In b2e3582323b1e3dfded7eb0a2597fd74ba52e4df \"miniscript: satisfaction support\"\r\n\r\nI think these should be named with a `Set` prefix as otherwise they read like they are functions to check these properties rather than setting them.",
      "created_at": "2022-02-14T19:38:43Z",
      "updated_at": "2022-02-14T20:49:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r806178300",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806178300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": 256,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806183392",
      "pull_request_review_id": 882103227,
      "id": 806183392,
      "node_id": "PRRC_kwDOABII584wDWHg",
      "diff_hunk": "@@ -282,6 +282,77 @@ size_t ComputeScriptLen(NodeType nodetype, Type sub0typ, size_t subsize, uint32_\n     return 0;\n }\n \n+InputStack& InputStack::Available(Availability avail) {\n+    available = avail;\n+    if (avail == Availability::NO) {\n+        stack.clear();\n+        size = std::numeric_limits<size_t>::max();\n+        has_sig = false;\n+        malleable = false;\n+        non_canon = false;\n+    }\n+    return *this;\n+}\n+\n+InputStack& InputStack::WithSig() {\n+    has_sig = true;\n+    return *this;\n+}\n+\n+InputStack& InputStack::NonCanon() {\n+    non_canon = true;\n+    return *this;\n+}\n+\n+InputStack& InputStack::Malleable(bool x) {\n+    malleable = x;\n+    return *this;\n+}\n+\n+InputStack operator+(InputStack a, InputStack b) {\n+    a.stack = Cat(std::move(a.stack), std::move(b.stack));\n+    a.size += b.size;\n+    a.has_sig |= b.has_sig;\n+    a.malleable |= b.malleable;\n+    a.non_canon |= b.non_canon;\n+    if (a.available == Availability::NO || b.available == Availability::NO) {\n+        a.Available(Availability::NO);\n+    } else if (a.available == Availability::MAYBE || b.available == Availability::MAYBE) {\n+        a.Available(Availability::MAYBE);\n+    }\n+    return a;\n+}\n+\n+InputStack Choose(InputStack a, InputStack b, bool nonmalleable) {\n+    // If only one (or neither) is valid, pick the other one.\n+    if (a.available == Availability::NO) return b;\n+    if (b.available == Availability::NO) return a;\n+    // If both are valid, they must be distinct.\n+    if (nonmalleable) {\n+        // If both options are weak, any result is fine; it just needs the malleable marker.",
      "path": "src/script/miniscript.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "b2e3582323b1e3dfded7eb0a2597fd74ba52e4df",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In b2e3582323b1e3dfded7eb0a2597fd74ba52e4df \"miniscript: satisfaction support\"\r\n\r\nIs there a doc somewhere that defines \"weak\" and \"strong\" in this context?",
      "created_at": "2022-02-14T19:45:41Z",
      "updated_at": "2022-02-14T20:49:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r806183392",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806183392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806197176",
      "pull_request_review_id": 882103227,
      "id": 806197176,
      "node_id": "PRRC_kwDOABII584wDZe4",
      "diff_hunk": "@@ -676,6 +744,166 @@ struct Node {\n         return {{}, {}};\n     }\n \n+\n+    template<typename Ctx>\n+    internal::InputResult ProduceInput(const Ctx& ctx, bool nonmal) const {\n+        using namespace internal;\n+\n+        auto helper = [&ctx, nonmal](const Node& node, Span<InputResult> subres) -> InputResult {\n+            switch (node.nodetype) {\n+                case NodeType::PK_K: {\n+                    std::vector<unsigned char> sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO, InputStack(std::move(sig)).WithSig().Available(avail));\n+                }\n+                case NodeType::PK_H: {\n+                    std::vector<unsigned char> key = ctx.ToPKBytes(node.keys[0]), sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO + InputStack(key), (InputStack(std::move(sig)).WithSig() + InputStack(key)).Available(avail));\n+                }\n+                case NodeType::MULTI: {\n+                    std::vector<InputStack> sats = Vector(ZERO);\n+                    for (size_t i = 0; i < node.keys.size(); ++i) {\n+                        std::vector<unsigned char> sig;\n+                        Availability avail = ctx.Sign(node.keys[i], sig);\n+                        auto sat = InputStack(std::move(sig)).WithSig().Available(avail);\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0]);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back(Choose(sats[j], std::move(sats[j - 1]) + sat, nonmal));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = ZERO;\n+                    for (size_t i = 0; i < node.k; ++i) nsat = std::move(nsat) + ZERO;\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case NodeType::THRESH: {\n+                    std::vector<InputStack> sats = Vector(EMPTY);\n+                    for (size_t i = 0; i < subres.size(); ++i) {\n+                        auto& res = subres[subres.size() - i - 1];\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0] + res.nsat);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back(Choose(sats[j] + res.nsat, std::move(sats[j - 1]) + res.sat, nonmal));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(res.sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = INVALID;\n+                    for (size_t i = 0; i < sats.size(); ++i) {\n+                        if (i != node.k) nsat = Choose(std::move(nsat), std::move(sats[i]), nonmal);\n+                    }\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case NodeType::OLDER: {\n+                    return InputResult(INVALID, ctx.CheckOlder(node.k) ? EMPTY : INVALID);\n+                }\n+                case NodeType::AFTER: {\n+                    return InputResult(INVALID, ctx.CheckAfter(node.k) ? EMPTY : INVALID);\n+                }\n+                case NodeType::SHA256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatSHA256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).Available(avail));\n+                }\n+                case NodeType::RIPEMD160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatRIPEMD160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).Available(avail));\n+                }\n+                case NodeType::HASH256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).Available(avail));\n+                }\n+                case NodeType::HASH160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).Available(avail));\n+                }\n+                case NodeType::AND_V: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult((y.nsat + x.sat).NonCanon(), y.sat + x.sat);\n+                }\n+                case NodeType::AND_B: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult(Choose(Choose(y.nsat + x.nsat, (y.sat + x.nsat).NonCanon(), nonmal), (y.nsat + x.sat).NonCanon(), nonmal), y.sat + x.sat);\n+                }\n+                case NodeType::OR_B: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    return InputResult(z.nsat + x.nsat, Choose(Choose(z.nsat + x.sat, z.sat + x.nsat, nonmal), (z.sat + x.sat).NonCanon(), nonmal));\n+                }\n+                case NodeType::OR_C: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    return InputResult(INVALID, Choose(std::move(x.sat), z.sat + x.nsat, nonmal));\n+                }\n+                case NodeType::OR_D: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    auto nsat = z.nsat + x.nsat, sat_l = x.sat, sat_r = z.sat + x.nsat;",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 188,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "b2e3582323b1e3dfded7eb0a2597fd74ba52e4df",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In b2e3582323b1e3dfded7eb0a2597fd74ba52e4df \"miniscript: satisfaction support\"\r\n\r\nThis line appears to not be doing anything.",
      "created_at": "2022-02-14T20:05:09Z",
      "updated_at": "2022-02-14T20:49:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r806197176",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806197176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806216748",
      "pull_request_review_id": 882103227,
      "id": 806216748,
      "node_id": "PRRC_kwDOABII584wDeQs",
      "diff_hunk": "@@ -297,29 +302,39 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n     BOOST_CHECK_MESSAGE(left_paths.empty(), \"Not all expected key paths found: \" + prv);\n }\n \n-void Check(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n+void Check(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub,\n+           int flags, const std::vector<std::vector<std::string>>& scripts, const std::optional<OutputType>& type,\n+           const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY, uint32_t spender_nlocktime=0, uint32_t spender_nsequence=0)",
      "path": "src/test/descriptor_tests.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "96e9de9304edf5feec87adf5ee56ad0f526459b8",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 96e9de9304edf5feec87adf5ee56ad0f526459b8 \"script/sign: signing support for Miniscript with timelocks\"\r\n\r\nIn `DoCheck`, `spender_nsequence` is `CTxIn::SEQUENCE_FINAL`, should it be that here as well (instead of 0)?",
      "created_at": "2022-02-14T20:33:12Z",
      "updated_at": "2022-02-14T20:49:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r806216748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806216748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811146800",
      "pull_request_review_id": 888708611,
      "id": 811146800,
      "node_id": "PRRC_kwDOABII584wWR4w",
      "diff_hunk": "@@ -282,6 +282,77 @@ size_t ComputeScriptLen(NodeType nodetype, Type sub0typ, size_t subsize, uint32_\n     return 0;\n }\n \n+InputStack& InputStack::Available(Availability avail) {\n+    available = avail;\n+    if (avail == Availability::NO) {\n+        stack.clear();\n+        size = std::numeric_limits<size_t>::max();\n+        has_sig = false;\n+        malleable = false;\n+        non_canon = false;\n+    }\n+    return *this;\n+}\n+\n+InputStack& InputStack::WithSig() {\n+    has_sig = true;\n+    return *this;\n+}\n+\n+InputStack& InputStack::NonCanon() {\n+    non_canon = true;\n+    return *this;\n+}\n+\n+InputStack& InputStack::Malleable(bool x) {\n+    malleable = x;\n+    return *this;\n+}\n+\n+InputStack operator+(InputStack a, InputStack b) {\n+    a.stack = Cat(std::move(a.stack), std::move(b.stack));\n+    a.size += b.size;\n+    a.has_sig |= b.has_sig;\n+    a.malleable |= b.malleable;\n+    a.non_canon |= b.non_canon;\n+    if (a.available == Availability::NO || b.available == Availability::NO) {\n+        a.Available(Availability::NO);\n+    } else if (a.available == Availability::MAYBE || b.available == Availability::MAYBE) {\n+        a.Available(Availability::MAYBE);\n+    }\n+    return a;\n+}\n+\n+InputStack Choose(InputStack a, InputStack b, bool nonmalleable) {\n+    // If only one (or neither) is valid, pick the other one.\n+    if (a.available == Availability::NO) return b;\n+    if (b.available == Availability::NO) return a;\n+    // If both are valid, they must be distinct.\n+    if (nonmalleable) {\n+        // If both options are weak, any result is fine; it just needs the malleable marker.",
      "path": "src/script/miniscript.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "b2e3582323b1e3dfded7eb0a2597fd74ba52e4df",
      "in_reply_to_id": 806183392,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The website defines it as `HASSIG`. That a satisfaction is weak means that it isn't protected by a signature, strong is the opposite. Note this property can be analyzed statically on the Witness Script: it is the 's' property (`NeedsSignature()`, a requirement to be `IsSaneTopLevel()`).",
      "created_at": "2022-02-21T13:49:15Z",
      "updated_at": "2022-02-21T13:49:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r811146800",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811146800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811170683",
      "pull_request_review_id": 888742766,
      "id": 811170683,
      "node_id": "PRRC_kwDOABII584wWXt7",
      "diff_hunk": "@@ -297,29 +302,39 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n     BOOST_CHECK_MESSAGE(left_paths.empty(), \"Not all expected key paths found: \" + prv);\n }\n \n-void Check(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n+void Check(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub,\n+           int flags, const std::vector<std::vector<std::string>>& scripts, const std::optional<OutputType>& type,\n+           const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY, uint32_t spender_nlocktime=0, uint32_t spender_nsequence=0)",
      "path": "src/test/descriptor_tests.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "96e9de9304edf5feec87adf5ee56ad0f526459b8",
      "in_reply_to_id": 806216748,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, both work. I'm putting `CTxIn::SEQUENCE_FINAL`.",
      "created_at": "2022-02-21T14:15:26Z",
      "updated_at": "2022-02-21T14:15:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r811170683",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811170683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811183472",
      "pull_request_review_id": 888760739,
      "id": 811183472,
      "node_id": "PRRC_kwDOABII584wWa1w",
      "diff_hunk": "@@ -225,6 +230,54 @@ size_t ComputeScriptLen(NodeType nodetype, Type sub0typ, size_t subsize, uint32_\n //! A helper sanitizer/checker for the output of CalcType.\n Type SanitizeType(Type x);\n \n+//! An object representing a sequence of witness stack elements.\n+struct InputStack {\n+    /** Whether this stack is valid for its intended purpose (satisfaction or dissatisfaction of a Node).\n+     *  The MAYBE value is used for size estimation, when keys/preimages may actually be unavailable,\n+     *  but may be available at signing time. This makes the InputStack structure and signing logic,\n+     *  filled with dummy signatures/preimages usable for witness size estimation.\n+     */\n+    Availability available = Availability::YES;\n+    //! Whether this stack contains a digital signature.\n+    bool has_sig = false;\n+    //! Whether this stack is malleable (can be turned into an equally valid other stack by a third party).\n+    bool malleable = false;\n+    //! Whether this stack is non-canonical (using a construction known to be unnecessary for satisfaction).\n+    bool non_canon = false;\n+    //! Serialized witness size.\n+    size_t size = 0;\n+    //! Data elements.\n+    std::vector<std::vector<unsigned char>> stack;\n+    //! Construct an empty stack (valid).\n+    InputStack() {}\n+    //! Construct a valid single-element stack (with an element up to 75 bytes).\n+    InputStack(std::vector<unsigned char> in) : size(in.size() + 1), stack(Vector(std::move(in))) {}\n+    //! Change availability\n+    InputStack& Available(Availability avail);\n+    //! Mark this input stack as having a signature.\n+    InputStack& WithSig();\n+    //! Mark this input stack as non-canonical (known to not be necessary in non-malleable satisfactions).\n+    InputStack& NonCanon();\n+    //! Mark this input stack as malleable.\n+    InputStack& Malleable(bool x = true);",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 45,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "b2e3582323b1e3dfded7eb0a2597fd74ba52e4df",
      "in_reply_to_id": 806178300,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-02-21T14:29:28Z",
      "updated_at": "2022-02-21T14:29:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r811183472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811183472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": 256,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844983186",
      "pull_request_review_id": 934850577,
      "id": 844983186,
      "node_id": "PRRC_kwDOABII584yXWuS",
      "diff_hunk": "@@ -342,29 +350,40 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n     BOOST_CHECK_MESSAGE(left_paths.empty(), \"Not all expected key paths found: \" + prv);\n }\n \n-void Check(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n+void Check(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub,\n+           int flags, const std::vector<std::vector<std::string>>& scripts, const std::optional<OutputType>& type,\n+           const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY, uint32_t spender_nlocktime=0,\n+           uint32_t spender_nsequence=CTxIn::SEQUENCE_FINAL, std::map<std::vector<uint8_t>, std::vector<uint8_t>> preimages={})\n {\n     bool found_apostrophes_in_prv = false;\n     bool found_apostrophes_in_pub = false;\n \n     // Do not replace apostrophes with 'h' in prv and pub\n-    DoCheck(prv, pub, norm_prv, norm_pub, flags, scripts, type, paths);\n+    DoCheck(prv, pub, norm_prv, norm_pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */false,",
      "path": "src/test/descriptor_tests.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "8cd2c3c45ecefdd6659b81c9a5dd6a85a2711b01",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    DoCheck(prv, pub, norm_prv, norm_pub, flags, scripts, type, paths, /*replace_apostrophe_with_h_in_prv=*/false,\r\n```\r\nAnywhere you are adding / touching named args, please use the [style from the developer docs](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c-named-arguments).",
      "created_at": "2022-04-07T10:37:37Z",
      "updated_at": "2022-04-07T10:37:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r844983186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844983186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 362,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/923781764",
      "pull_request_review_id": 1042429269,
      "id": 923781764,
      "node_id": "PRRC_kwDOABII5843D8qE",
      "diff_hunk": "@@ -813,6 +867,189 @@ struct Node {\n         return !TreeEvalMaybe<set>(upfn);\n     }\n \n+    template<typename Ctx>\n+    internal::InputResult ProduceInput(const Ctx& ctx) const {\n+        using namespace internal;\n+\n+        auto helper = [&ctx](const Node& node, Span<InputResult> subres) -> InputResult {\n+            switch (node.fragment) {\n+                case Fragment::PK_K: {\n+                    std::vector<unsigned char> sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO, InputStack(std::move(sig)).SetWithSig().SetAvailable(avail));\n+                }\n+                case Fragment::PK_H: {\n+                    std::vector<unsigned char> key = ctx.ToPKBytes(node.keys[0]), sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO + InputStack(key), (InputStack(std::move(sig)).SetWithSig() + InputStack(key)).SetAvailable(avail));\n+                }\n+                case Fragment::MULTI: {\n+                    std::vector<InputStack> sats = Vector(ZERO);\n+                    for (size_t i = 0; i < node.keys.size(); ++i) {\n+                        std::vector<unsigned char> sig;\n+                        Availability avail = ctx.Sign(node.keys[i], sig);\n+                        auto sat = InputStack(std::move(sig)).SetWithSig().SetAvailable(avail);\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0]);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back(sats[j] | (std::move(sats[j - 1]) + sat));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = ZERO;\n+                    for (size_t i = 0; i < node.k; ++i) nsat = std::move(nsat) + ZERO;\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case Fragment::THRESH: {\n+                    std::vector<InputStack> sats = Vector(EMPTY);\n+                    for (size_t i = 0; i < subres.size(); ++i) {\n+                        auto& res = subres[subres.size() - i - 1];\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0] + res.nsat);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back((sats[j] + res.nsat) | (std::move(sats[j - 1]) + res.sat));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(res.sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = INVALID;\n+                    for (size_t i = 0; i < sats.size(); ++i) {\n+                        // i==k is the satisfaction; i==0 is the canonical dissatisfaction; the rest are non-canonical.\n+                        if (i != 0 && i != node.k) sats[i].SetNonCanon();\n+                        if (i != node.k) nsat = std::move(nsat) | std::move(sats[i]);\n+                    }\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case Fragment::OLDER: {\n+                    return InputResult(INVALID, ctx.CheckOlder(node.k) ? EMPTY : INVALID);\n+                }\n+                case Fragment::AFTER: {\n+                    return InputResult(INVALID, ctx.CheckAfter(node.k) ? EMPTY : INVALID);\n+                }\n+                case Fragment::SHA256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatSHA256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::RIPEMD160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatRIPEMD160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::HASH256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::HASH160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::AND_V: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult((y.nsat + x.sat).SetNonCanon(), y.sat + x.sat);\n+                }\n+                case Fragment::AND_B: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult((y.nsat + x.nsat) | (y.sat + x.nsat).SetNonCanon() | (y.nsat + x.sat).SetNonCanon(), y.sat + x.sat);\n+                }\n+                case Fragment::OR_B: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    // The (sat(Z) sat(X)) solution is overcomplete (attacker can change either into dsat).\n+                    return InputResult(z.nsat + x.nsat, (z.nsat + x.sat) | (z.sat + x.nsat) | (z.sat + x.sat).SetMalleable());",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 161,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3bedfb5b13e863508cb9b0d44fa03cc991151927",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 3bedfb5b13e863508cb9b0d44fa03cc991151927 \"miniscript: satisfaction support\"\r\n\r\nThe satisfactions table lists sat(z), sat(x) as non-canonical. Should that also have `SetNonCanon()`?",
      "created_at": "2022-07-18T19:31:04Z",
      "updated_at": "2022-07-18T19:57:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r923781764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/923781764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 959,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/923783117",
      "pull_request_review_id": 1042429269,
      "id": 923783117,
      "node_id": "PRRC_kwDOABII5843D8_N",
      "diff_hunk": "@@ -676,6 +744,166 @@ struct Node {\n         return {{}, {}};\n     }\n \n+\n+    template<typename Ctx>\n+    internal::InputResult ProduceInput(const Ctx& ctx, bool nonmal) const {\n+        using namespace internal;\n+\n+        auto helper = [&ctx, nonmal](const Node& node, Span<InputResult> subres) -> InputResult {\n+            switch (node.nodetype) {\n+                case NodeType::PK_K: {\n+                    std::vector<unsigned char> sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO, InputStack(std::move(sig)).WithSig().Available(avail));\n+                }\n+                case NodeType::PK_H: {\n+                    std::vector<unsigned char> key = ctx.ToPKBytes(node.keys[0]), sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO + InputStack(key), (InputStack(std::move(sig)).WithSig() + InputStack(key)).Available(avail));\n+                }\n+                case NodeType::MULTI: {\n+                    std::vector<InputStack> sats = Vector(ZERO);\n+                    for (size_t i = 0; i < node.keys.size(); ++i) {\n+                        std::vector<unsigned char> sig;\n+                        Availability avail = ctx.Sign(node.keys[i], sig);\n+                        auto sat = InputStack(std::move(sig)).WithSig().Available(avail);\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0]);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back(Choose(sats[j], std::move(sats[j - 1]) + sat, nonmal));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = ZERO;\n+                    for (size_t i = 0; i < node.k; ++i) nsat = std::move(nsat) + ZERO;\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case NodeType::THRESH: {\n+                    std::vector<InputStack> sats = Vector(EMPTY);\n+                    for (size_t i = 0; i < subres.size(); ++i) {\n+                        auto& res = subres[subres.size() - i - 1];\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0] + res.nsat);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back(Choose(sats[j] + res.nsat, std::move(sats[j - 1]) + res.sat, nonmal));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(res.sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = INVALID;\n+                    for (size_t i = 0; i < sats.size(); ++i) {\n+                        if (i != node.k) nsat = Choose(std::move(nsat), std::move(sats[i]), nonmal);\n+                    }\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case NodeType::OLDER: {\n+                    return InputResult(INVALID, ctx.CheckOlder(node.k) ? EMPTY : INVALID);\n+                }\n+                case NodeType::AFTER: {\n+                    return InputResult(INVALID, ctx.CheckAfter(node.k) ? EMPTY : INVALID);\n+                }\n+                case NodeType::SHA256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatSHA256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).Available(avail));\n+                }\n+                case NodeType::RIPEMD160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatRIPEMD160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).Available(avail));\n+                }\n+                case NodeType::HASH256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).Available(avail));\n+                }\n+                case NodeType::HASH160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).Available(avail));\n+                }\n+                case NodeType::AND_V: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult((y.nsat + x.sat).NonCanon(), y.sat + x.sat);\n+                }\n+                case NodeType::AND_B: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult(Choose(Choose(y.nsat + x.nsat, (y.sat + x.nsat).NonCanon(), nonmal), (y.nsat + x.sat).NonCanon(), nonmal), y.sat + x.sat);\n+                }\n+                case NodeType::OR_B: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    return InputResult(z.nsat + x.nsat, Choose(Choose(z.nsat + x.sat, z.sat + x.nsat, nonmal), (z.sat + x.sat).NonCanon(), nonmal));\n+                }\n+                case NodeType::OR_C: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    return InputResult(INVALID, Choose(std::move(x.sat), z.sat + x.nsat, nonmal));\n+                }\n+                case NodeType::OR_D: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    auto nsat = z.nsat + x.nsat, sat_l = x.sat, sat_r = z.sat + x.nsat;",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 188,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "b2e3582323b1e3dfded7eb0a2597fd74ba52e4df",
      "in_reply_to_id": 806197176,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 3bedfb5b13e863508cb9b0d44fa03cc991151927 \"miniscript: satisfaction support\"\r\n\r\nThis line is still here.",
      "created_at": "2022-07-18T19:32:53Z",
      "updated_at": "2022-07-18T19:57:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r923783117",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/923783117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/923792873",
      "pull_request_review_id": 1042429269,
      "id": 923792873,
      "node_id": "PRRC_kwDOABII5843D_Xp",
      "diff_hunk": "@@ -842,6 +1079,47 @@ struct Node {\n         });\n     }\n \n+    //! Determine whether a Miniscript node is satisfiable. fn(node) will be invoked for all\n+    //! key, time, and hashing nodes, and should return their satisfiability.\n+    template<typename F>\n+    bool IsSatisfiable(F fn) const\n+    {\n+        // TreeEval() doesn't support bool as NodeType, so use int instead.\n+        return TreeEval<int>([&fn](const Node& node, Span<int> subs) {\n+            switch (node.fragment) {\n+                case Fragment::JUST_0:\n+                    return false;\n+                case Fragment::JUST_1:\n+                    return true;\n+                case Fragment::PK_K:\n+                case Fragment::PK_H:\n+                case Fragment::MULTI:\n+                case Fragment::AFTER:\n+                case Fragment::OLDER:\n+                case Fragment::HASH256:\n+                case Fragment::HASH160:\n+                case Fragment::SHA256:\n+                case Fragment::RIPEMD160:\n+                    return bool{fn(node)};\n+                case Fragment::ANDOR:\n+                    return (subs[0] && subs[1]) || subs[2];\n+                case Fragment::AND_V:\n+                case Fragment::AND_B:\n+                    return subs[0] && subs[1];\n+                case Fragment::OR_B:\n+                case Fragment::OR_C:\n+                case Fragment::OR_D:\n+                case Fragment::OR_I:\n+                    return subs[0] || subs[1];\n+                case Fragment::THRESH:\n+                    return std::count(subs.begin(), subs.end(), true) >= node.k;\n+                default: // wrappers\n+                    assert(subs.size() == 1);\n+                    return !!subs[0];",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 298,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3bedfb5b13e863508cb9b0d44fa03cc991151927",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 3bedfb5b13e863508cb9b0d44fa03cc991151927 \"miniscript: satisfaction support\"\r\n\r\nWhy a double negation?",
      "created_at": "2022-07-18T19:44:03Z",
      "updated_at": "2022-07-18T19:57:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r923792873",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/923792873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/923799522",
      "pull_request_review_id": 1042429269,
      "id": 923799522,
      "node_id": "PRRC_kwDOABII5843EA_i",
      "diff_hunk": "@@ -672,6 +685,7 @@ class DummySignatureChecker final : public BaseSignatureChecker\n     bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, ScriptExecutionData& execdata, ScriptError* serror) const override { return sig.size() != 0; }\n     bool CheckLockTime(const CScriptNum& nLockTime) const override { return true; }\n     bool CheckSequence(const CScriptNum& nSequence) const override { return true; }\n+    bool CheckEqual(const std::vector<unsigned char>& vch1, const std::vector<unsigned char>& vch2) const override { return true; }",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "8f1b45bf256b7454d1b790038a00eb537b9bbb70",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 8f1b45bf256b7454d1b790038a00eb537b9bbb70 \"script/sign: signing support for Miniscripts with hash preimage challenges\"\r\n\r\nI think this line should be in the previous commit.",
      "created_at": "2022-07-18T19:53:01Z",
      "updated_at": "2022-07-18T19:57:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r923799522",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/923799522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924514128",
      "pull_request_review_id": 1043453717,
      "id": 924514128,
      "node_id": "PRRC_kwDOABII5843GvdQ",
      "diff_hunk": "@@ -813,6 +867,189 @@ struct Node {\n         return !TreeEvalMaybe<set>(upfn);\n     }\n \n+    template<typename Ctx>\n+    internal::InputResult ProduceInput(const Ctx& ctx) const {\n+        using namespace internal;\n+\n+        auto helper = [&ctx](const Node& node, Span<InputResult> subres) -> InputResult {\n+            switch (node.fragment) {\n+                case Fragment::PK_K: {\n+                    std::vector<unsigned char> sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO, InputStack(std::move(sig)).SetWithSig().SetAvailable(avail));\n+                }\n+                case Fragment::PK_H: {\n+                    std::vector<unsigned char> key = ctx.ToPKBytes(node.keys[0]), sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO + InputStack(key), (InputStack(std::move(sig)).SetWithSig() + InputStack(key)).SetAvailable(avail));\n+                }\n+                case Fragment::MULTI: {\n+                    std::vector<InputStack> sats = Vector(ZERO);\n+                    for (size_t i = 0; i < node.keys.size(); ++i) {\n+                        std::vector<unsigned char> sig;\n+                        Availability avail = ctx.Sign(node.keys[i], sig);\n+                        auto sat = InputStack(std::move(sig)).SetWithSig().SetAvailable(avail);\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0]);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back(sats[j] | (std::move(sats[j - 1]) + sat));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = ZERO;\n+                    for (size_t i = 0; i < node.k; ++i) nsat = std::move(nsat) + ZERO;\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case Fragment::THRESH: {\n+                    std::vector<InputStack> sats = Vector(EMPTY);\n+                    for (size_t i = 0; i < subres.size(); ++i) {\n+                        auto& res = subres[subres.size() - i - 1];\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0] + res.nsat);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back((sats[j] + res.nsat) | (std::move(sats[j - 1]) + res.sat));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(res.sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = INVALID;\n+                    for (size_t i = 0; i < sats.size(); ++i) {\n+                        // i==k is the satisfaction; i==0 is the canonical dissatisfaction; the rest are non-canonical.\n+                        if (i != 0 && i != node.k) sats[i].SetNonCanon();\n+                        if (i != node.k) nsat = std::move(nsat) | std::move(sats[i]);\n+                    }\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case Fragment::OLDER: {\n+                    return InputResult(INVALID, ctx.CheckOlder(node.k) ? EMPTY : INVALID);\n+                }\n+                case Fragment::AFTER: {\n+                    return InputResult(INVALID, ctx.CheckAfter(node.k) ? EMPTY : INVALID);\n+                }\n+                case Fragment::SHA256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatSHA256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::RIPEMD160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatRIPEMD160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::HASH256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::HASH160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::AND_V: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult((y.nsat + x.sat).SetNonCanon(), y.sat + x.sat);\n+                }\n+                case Fragment::AND_B: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult((y.nsat + x.nsat) | (y.sat + x.nsat).SetNonCanon() | (y.nsat + x.sat).SetNonCanon(), y.sat + x.sat);\n+                }\n+                case Fragment::OR_B: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    // The (sat(Z) sat(X)) solution is overcomplete (attacker can change either into dsat).\n+                    return InputResult(z.nsat + x.nsat, (z.nsat + x.sat) | (z.sat + x.nsat) | (z.sat + x.sat).SetMalleable());",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 161,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3bedfb5b13e863508cb9b0d44fa03cc991151927",
      "in_reply_to_id": 923781764,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed. This enables stricter testing. Also, it looks like we are missing a few `SetMalleable()` here, as per the specs:\r\n> The non-canonical options for and_b, or_b, and thresh are always overcomplete (reason 3), so instead use DONTUSE there as well (with HASSIG flag if the original non-canonical solution had one). \r\n\r\n@sipa does the following diff seem correct to you?\r\n```diff\r\ndiff --git a/src/script/miniscript.h b/src/script/miniscript.h\r\nindex 5c04c40587..e94105d0f4 100644\r\n--- a/src/script/miniscript.h\r\n+++ b/src/script/miniscript.h\r\n@@ -951,12 +951,12 @@ public:\r\n                 }\r\n                 case Fragment::AND_B: {\r\n                     auto& x = subres[0], &y = subres[1];\r\n-                    return InputResult((y.nsat + x.nsat) | (y.sat + x.nsat).SetNonCanon() | (y.nsat + x.sat).SetNonCanon(), y.sat + x.sat);\r\n+                    return InputResult((y.nsat + x.nsat) | (y.sat + x.nsat).SetMalleable().SetNonCanon() | (y.nsat + x.sat).SetMalleable().SetNonCanon(), y.sat + x.sat);\r\n                 }\r\n                 case Fragment::OR_B: {\r\n                     auto& x = subres[0], &z = subres[1];\r\n                     // The (sat(Z) sat(X)) solution is overcomplete (attacker can change either into dsat).\r\n-                    return InputResult(z.nsat + x.nsat, (z.nsat + x.sat) | (z.sat + x.nsat) | (z.sat + x.sat).SetMalleable());\r\n+                    return InputResult(z.nsat + x.nsat, (z.nsat + x.sat) | (z.sat + x.nsat) | (z.sat + x.sat).SetMalleable().SetNonCanon());\r\n                 }\r\n                 case Fragment::OR_C: {\r\n                     auto& x = subres[0], &z = subres[1];\r\n``` ",
      "created_at": "2022-07-19T13:37:42Z",
      "updated_at": "2022-07-19T13:37:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r924514128",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924514128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 959,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924514282",
      "pull_request_review_id": 1043453924,
      "id": 924514282,
      "node_id": "PRRC_kwDOABII5843Gvfq",
      "diff_hunk": "@@ -842,6 +1079,47 @@ struct Node {\n         });\n     }\n \n+    //! Determine whether a Miniscript node is satisfiable. fn(node) will be invoked for all\n+    //! key, time, and hashing nodes, and should return their satisfiability.\n+    template<typename F>\n+    bool IsSatisfiable(F fn) const\n+    {\n+        // TreeEval() doesn't support bool as NodeType, so use int instead.\n+        return TreeEval<int>([&fn](const Node& node, Span<int> subs) {\n+            switch (node.fragment) {\n+                case Fragment::JUST_0:\n+                    return false;\n+                case Fragment::JUST_1:\n+                    return true;\n+                case Fragment::PK_K:\n+                case Fragment::PK_H:\n+                case Fragment::MULTI:\n+                case Fragment::AFTER:\n+                case Fragment::OLDER:\n+                case Fragment::HASH256:\n+                case Fragment::HASH160:\n+                case Fragment::SHA256:\n+                case Fragment::RIPEMD160:\n+                    return bool{fn(node)};\n+                case Fragment::ANDOR:\n+                    return (subs[0] && subs[1]) || subs[2];\n+                case Fragment::AND_V:\n+                case Fragment::AND_B:\n+                    return subs[0] && subs[1];\n+                case Fragment::OR_B:\n+                case Fragment::OR_C:\n+                case Fragment::OR_D:\n+                case Fragment::OR_I:\n+                    return subs[0] || subs[1];\n+                case Fragment::THRESH:\n+                    return std::count(subs.begin(), subs.end(), true) >= node.k;\n+                default: // wrappers\n+                    assert(subs.size() == 1);\n+                    return !!subs[0];",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 298,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3bedfb5b13e863508cb9b0d44fa03cc991151927",
      "in_reply_to_id": 923792873,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To match the lambda return type. `subs[0]` is an `int` but we want a `bool`.",
      "created_at": "2022-07-19T13:37:50Z",
      "updated_at": "2022-07-19T13:37:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r924514282",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924514282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924514496",
      "pull_request_review_id": 1043454238,
      "id": 924514496,
      "node_id": "PRRC_kwDOABII5843GvjA",
      "diff_hunk": "@@ -672,6 +685,7 @@ class DummySignatureChecker final : public BaseSignatureChecker\n     bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, ScriptExecutionData& execdata, ScriptError* serror) const override { return sig.size() != 0; }\n     bool CheckLockTime(const CScriptNum& nLockTime) const override { return true; }\n     bool CheckSequence(const CScriptNum& nSequence) const override { return true; }\n+    bool CheckEqual(const std::vector<unsigned char>& vch1, const std::vector<unsigned char>& vch2) const override { return true; }",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "8f1b45bf256b7454d1b790038a00eb537b9bbb70",
      "in_reply_to_id": 923799522,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why? The previous commit does not need it, it only cares about the interpreter.",
      "created_at": "2022-07-19T13:38:01Z",
      "updated_at": "2022-07-19T13:38:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r924514496",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924514496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924515165",
      "pull_request_review_id": 1043455216,
      "id": 924515165,
      "node_id": "PRRC_kwDOABII5843Gvtd",
      "diff_hunk": "@@ -676,6 +744,166 @@ struct Node {\n         return {{}, {}};\n     }\n \n+\n+    template<typename Ctx>\n+    internal::InputResult ProduceInput(const Ctx& ctx, bool nonmal) const {\n+        using namespace internal;\n+\n+        auto helper = [&ctx, nonmal](const Node& node, Span<InputResult> subres) -> InputResult {\n+            switch (node.nodetype) {\n+                case NodeType::PK_K: {\n+                    std::vector<unsigned char> sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO, InputStack(std::move(sig)).WithSig().Available(avail));\n+                }\n+                case NodeType::PK_H: {\n+                    std::vector<unsigned char> key = ctx.ToPKBytes(node.keys[0]), sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO + InputStack(key), (InputStack(std::move(sig)).WithSig() + InputStack(key)).Available(avail));\n+                }\n+                case NodeType::MULTI: {\n+                    std::vector<InputStack> sats = Vector(ZERO);\n+                    for (size_t i = 0; i < node.keys.size(); ++i) {\n+                        std::vector<unsigned char> sig;\n+                        Availability avail = ctx.Sign(node.keys[i], sig);\n+                        auto sat = InputStack(std::move(sig)).WithSig().Available(avail);\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0]);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back(Choose(sats[j], std::move(sats[j - 1]) + sat, nonmal));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = ZERO;\n+                    for (size_t i = 0; i < node.k; ++i) nsat = std::move(nsat) + ZERO;\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case NodeType::THRESH: {\n+                    std::vector<InputStack> sats = Vector(EMPTY);\n+                    for (size_t i = 0; i < subres.size(); ++i) {\n+                        auto& res = subres[subres.size() - i - 1];\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0] + res.nsat);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back(Choose(sats[j] + res.nsat, std::move(sats[j - 1]) + res.sat, nonmal));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(res.sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = INVALID;\n+                    for (size_t i = 0; i < sats.size(); ++i) {\n+                        if (i != node.k) nsat = Choose(std::move(nsat), std::move(sats[i]), nonmal);\n+                    }\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case NodeType::OLDER: {\n+                    return InputResult(INVALID, ctx.CheckOlder(node.k) ? EMPTY : INVALID);\n+                }\n+                case NodeType::AFTER: {\n+                    return InputResult(INVALID, ctx.CheckAfter(node.k) ? EMPTY : INVALID);\n+                }\n+                case NodeType::SHA256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatSHA256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).Available(avail));\n+                }\n+                case NodeType::RIPEMD160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatRIPEMD160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).Available(avail));\n+                }\n+                case NodeType::HASH256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).Available(avail));\n+                }\n+                case NodeType::HASH160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).Available(avail));\n+                }\n+                case NodeType::AND_V: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult((y.nsat + x.sat).NonCanon(), y.sat + x.sat);\n+                }\n+                case NodeType::AND_B: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult(Choose(Choose(y.nsat + x.nsat, (y.sat + x.nsat).NonCanon(), nonmal), (y.nsat + x.sat).NonCanon(), nonmal), y.sat + x.sat);\n+                }\n+                case NodeType::OR_B: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    return InputResult(z.nsat + x.nsat, Choose(Choose(z.nsat + x.sat, z.sat + x.nsat, nonmal), (z.sat + x.sat).NonCanon(), nonmal));\n+                }\n+                case NodeType::OR_C: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    return InputResult(INVALID, Choose(std::move(x.sat), z.sat + x.nsat, nonmal));\n+                }\n+                case NodeType::OR_D: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    auto nsat = z.nsat + x.nsat, sat_l = x.sat, sat_r = z.sat + x.nsat;",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 188,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "b2e3582323b1e3dfded7eb0a2597fd74ba52e4df",
      "in_reply_to_id": 806197176,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Woops. Done!",
      "created_at": "2022-07-19T13:38:34Z",
      "updated_at": "2022-07-19T13:38:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r924515165",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924515165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924613712",
      "pull_request_review_id": 1043601134,
      "id": 924613712,
      "node_id": "PRRC_kwDOABII5843HHxQ",
      "diff_hunk": "@@ -813,6 +867,189 @@ struct Node {\n         return !TreeEvalMaybe<set>(upfn);\n     }\n \n+    template<typename Ctx>\n+    internal::InputResult ProduceInput(const Ctx& ctx) const {\n+        using namespace internal;\n+\n+        auto helper = [&ctx](const Node& node, Span<InputResult> subres) -> InputResult {\n+            switch (node.fragment) {\n+                case Fragment::PK_K: {\n+                    std::vector<unsigned char> sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO, InputStack(std::move(sig)).SetWithSig().SetAvailable(avail));\n+                }\n+                case Fragment::PK_H: {\n+                    std::vector<unsigned char> key = ctx.ToPKBytes(node.keys[0]), sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO + InputStack(key), (InputStack(std::move(sig)).SetWithSig() + InputStack(key)).SetAvailable(avail));\n+                }\n+                case Fragment::MULTI: {\n+                    std::vector<InputStack> sats = Vector(ZERO);\n+                    for (size_t i = 0; i < node.keys.size(); ++i) {\n+                        std::vector<unsigned char> sig;\n+                        Availability avail = ctx.Sign(node.keys[i], sig);\n+                        auto sat = InputStack(std::move(sig)).SetWithSig().SetAvailable(avail);\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0]);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back(sats[j] | (std::move(sats[j - 1]) + sat));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = ZERO;\n+                    for (size_t i = 0; i < node.k; ++i) nsat = std::move(nsat) + ZERO;\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case Fragment::THRESH: {\n+                    std::vector<InputStack> sats = Vector(EMPTY);\n+                    for (size_t i = 0; i < subres.size(); ++i) {\n+                        auto& res = subres[subres.size() - i - 1];\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0] + res.nsat);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back((sats[j] + res.nsat) | (std::move(sats[j - 1]) + res.sat));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(res.sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = INVALID;\n+                    for (size_t i = 0; i < sats.size(); ++i) {\n+                        // i==k is the satisfaction; i==0 is the canonical dissatisfaction; the rest are non-canonical.\n+                        if (i != 0 && i != node.k) sats[i].SetNonCanon();\n+                        if (i != node.k) nsat = std::move(nsat) | std::move(sats[i]);\n+                    }\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case Fragment::OLDER: {\n+                    return InputResult(INVALID, ctx.CheckOlder(node.k) ? EMPTY : INVALID);\n+                }\n+                case Fragment::AFTER: {\n+                    return InputResult(INVALID, ctx.CheckAfter(node.k) ? EMPTY : INVALID);\n+                }\n+                case Fragment::SHA256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatSHA256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::RIPEMD160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatRIPEMD160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::HASH256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::HASH160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::AND_V: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult((y.nsat + x.sat).SetNonCanon(), y.sat + x.sat);\n+                }\n+                case Fragment::AND_B: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult((y.nsat + x.nsat) | (y.sat + x.nsat).SetNonCanon() | (y.nsat + x.sat).SetNonCanon(), y.sat + x.sat);\n+                }\n+                case Fragment::OR_B: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    // The (sat(Z) sat(X)) solution is overcomplete (attacker can change either into dsat).\n+                    return InputResult(z.nsat + x.nsat, (z.nsat + x.sat) | (z.sat + x.nsat) | (z.sat + x.sat).SetMalleable());",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 161,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3bedfb5b13e863508cb9b0d44fa03cc991151927",
      "in_reply_to_id": 923781764,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~~I'd follow @achow101's suggestion but not @darosior's.~~\r\n\r\nThe reason is that adding SetMalleable() is \"weakening\" the self-testing ability, while SetNonCanon() is \"strengthening\" it. \r\n\r\nThe malleability flag influences the signer's choices, so it should only need to be added when we're certain the signer logic can't already figure it out on its own. In OR_B, having an alternative (z.nsat + x.nsat) choice should be sufficient, always available, and not have any signatures. That implies the (z.nsat + x.sat) and (z.sat + x.nsat) choices should be treated as malleable anyway.\r\n\r\nOn the other hand, the non-canonical flag is effectively an assertion: it doesn't influence the signing logic, except for raising an error if a non-canonical choice ends up being actually used. These should be added wherever we believe, based on higher-level reasoning, that certain choices are off-limits.",
      "created_at": "2022-07-19T15:01:21Z",
      "updated_at": "2022-07-19T15:13:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r924613712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924613712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 959,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924620199",
      "pull_request_review_id": 1043610830,
      "id": 924620199,
      "node_id": "PRRC_kwDOABII5843HJWn",
      "diff_hunk": "@@ -672,6 +685,7 @@ class DummySignatureChecker final : public BaseSignatureChecker\n     bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, ScriptExecutionData& execdata, ScriptError* serror) const override { return sig.size() != 0; }\n     bool CheckLockTime(const CScriptNum& nLockTime) const override { return true; }\n     bool CheckSequence(const CScriptNum& nSequence) const override { return true; }\n+    bool CheckEqual(const std::vector<unsigned char>& vch1, const std::vector<unsigned char>& vch2) const override { return true; }",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "8f1b45bf256b7454d1b790038a00eb537b9bbb70",
      "in_reply_to_id": 923799522,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The previous commit adds `CheckEqual`, whereas this commit adds `LookupPreimage`. It's not immediately obvious how these are related, and IMO it makes more sense to introduce the `CheckEqual`s in the same commit even if unneeded immediately.",
      "created_at": "2022-07-19T15:06:09Z",
      "updated_at": "2022-07-19T15:06:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r924620199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924620199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924631109",
      "pull_request_review_id": 1043621383,
      "id": 924631109,
      "node_id": "PRRC_kwDOABII5843HMBF",
      "diff_hunk": "@@ -813,6 +867,189 @@ struct Node {\n         return !TreeEvalMaybe<set>(upfn);\n     }\n \n+    template<typename Ctx>\n+    internal::InputResult ProduceInput(const Ctx& ctx) const {\n+        using namespace internal;\n+\n+        auto helper = [&ctx](const Node& node, Span<InputResult> subres) -> InputResult {\n+            switch (node.fragment) {\n+                case Fragment::PK_K: {\n+                    std::vector<unsigned char> sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO, InputStack(std::move(sig)).SetWithSig().SetAvailable(avail));\n+                }\n+                case Fragment::PK_H: {\n+                    std::vector<unsigned char> key = ctx.ToPKBytes(node.keys[0]), sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO + InputStack(key), (InputStack(std::move(sig)).SetWithSig() + InputStack(key)).SetAvailable(avail));\n+                }\n+                case Fragment::MULTI: {\n+                    std::vector<InputStack> sats = Vector(ZERO);\n+                    for (size_t i = 0; i < node.keys.size(); ++i) {\n+                        std::vector<unsigned char> sig;\n+                        Availability avail = ctx.Sign(node.keys[i], sig);\n+                        auto sat = InputStack(std::move(sig)).SetWithSig().SetAvailable(avail);\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0]);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back(sats[j] | (std::move(sats[j - 1]) + sat));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = ZERO;\n+                    for (size_t i = 0; i < node.k; ++i) nsat = std::move(nsat) + ZERO;\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case Fragment::THRESH: {\n+                    std::vector<InputStack> sats = Vector(EMPTY);\n+                    for (size_t i = 0; i < subres.size(); ++i) {\n+                        auto& res = subres[subres.size() - i - 1];\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0] + res.nsat);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back((sats[j] + res.nsat) | (std::move(sats[j - 1]) + res.sat));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(res.sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = INVALID;\n+                    for (size_t i = 0; i < sats.size(); ++i) {\n+                        // i==k is the satisfaction; i==0 is the canonical dissatisfaction; the rest are non-canonical.\n+                        if (i != 0 && i != node.k) sats[i].SetNonCanon();\n+                        if (i != node.k) nsat = std::move(nsat) | std::move(sats[i]);\n+                    }\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case Fragment::OLDER: {\n+                    return InputResult(INVALID, ctx.CheckOlder(node.k) ? EMPTY : INVALID);\n+                }\n+                case Fragment::AFTER: {\n+                    return InputResult(INVALID, ctx.CheckAfter(node.k) ? EMPTY : INVALID);\n+                }\n+                case Fragment::SHA256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatSHA256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::RIPEMD160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatRIPEMD160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::HASH256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::HASH160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::AND_V: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult((y.nsat + x.sat).SetNonCanon(), y.sat + x.sat);\n+                }\n+                case Fragment::AND_B: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult((y.nsat + x.nsat) | (y.sat + x.nsat).SetNonCanon() | (y.nsat + x.sat).SetNonCanon(), y.sat + x.sat);\n+                }\n+                case Fragment::OR_B: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    // The (sat(Z) sat(X)) solution is overcomplete (attacker can change either into dsat).\n+                    return InputResult(z.nsat + x.nsat, (z.nsat + x.sat) | (z.sat + x.nsat) | (z.sat + x.sat).SetMalleable());",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 161,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3bedfb5b13e863508cb9b0d44fa03cc991151927",
      "in_reply_to_id": 923781764,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Actually, no, let's make both changes. It matches the site, and the fact that there is an independent reason why these choices are off-limit doesn't change the fact that they are indeed malleable too. The code should express that, and if we choose not, it deserves a long comment about it's not being marked as such.",
      "created_at": "2022-07-19T15:12:37Z",
      "updated_at": "2022-07-19T15:12:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r924631109",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924631109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 959,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924683543",
      "pull_request_review_id": 1043689475,
      "id": 924683543,
      "node_id": "PRRC_kwDOABII5843HY0X",
      "diff_hunk": "@@ -813,6 +867,189 @@ struct Node {\n         return !TreeEvalMaybe<set>(upfn);\n     }\n \n+    template<typename Ctx>\n+    internal::InputResult ProduceInput(const Ctx& ctx) const {\n+        using namespace internal;\n+\n+        auto helper = [&ctx](const Node& node, Span<InputResult> subres) -> InputResult {\n+            switch (node.fragment) {\n+                case Fragment::PK_K: {\n+                    std::vector<unsigned char> sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO, InputStack(std::move(sig)).SetWithSig().SetAvailable(avail));\n+                }\n+                case Fragment::PK_H: {\n+                    std::vector<unsigned char> key = ctx.ToPKBytes(node.keys[0]), sig;\n+                    Availability avail = ctx.Sign(node.keys[0], sig);\n+                    return InputResult(ZERO + InputStack(key), (InputStack(std::move(sig)).SetWithSig() + InputStack(key)).SetAvailable(avail));\n+                }\n+                case Fragment::MULTI: {\n+                    std::vector<InputStack> sats = Vector(ZERO);\n+                    for (size_t i = 0; i < node.keys.size(); ++i) {\n+                        std::vector<unsigned char> sig;\n+                        Availability avail = ctx.Sign(node.keys[i], sig);\n+                        auto sat = InputStack(std::move(sig)).SetWithSig().SetAvailable(avail);\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0]);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back(sats[j] | (std::move(sats[j - 1]) + sat));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = ZERO;\n+                    for (size_t i = 0; i < node.k; ++i) nsat = std::move(nsat) + ZERO;\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case Fragment::THRESH: {\n+                    std::vector<InputStack> sats = Vector(EMPTY);\n+                    for (size_t i = 0; i < subres.size(); ++i) {\n+                        auto& res = subres[subres.size() - i - 1];\n+                        std::vector<InputStack> next_sats;\n+                        next_sats.push_back(sats[0] + res.nsat);\n+                        for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back((sats[j] + res.nsat) | (std::move(sats[j - 1]) + res.sat));\n+                        next_sats.push_back(std::move(sats[sats.size() - 1]) + std::move(res.sat));\n+                        sats = std::move(next_sats);\n+                    }\n+                    InputStack nsat = INVALID;\n+                    for (size_t i = 0; i < sats.size(); ++i) {\n+                        // i==k is the satisfaction; i==0 is the canonical dissatisfaction; the rest are non-canonical.\n+                        if (i != 0 && i != node.k) sats[i].SetNonCanon();\n+                        if (i != node.k) nsat = std::move(nsat) | std::move(sats[i]);\n+                    }\n+                    assert(node.k <= sats.size());\n+                    return InputResult(std::move(nsat), std::move(sats[node.k]));\n+                }\n+                case Fragment::OLDER: {\n+                    return InputResult(INVALID, ctx.CheckOlder(node.k) ? EMPTY : INVALID);\n+                }\n+                case Fragment::AFTER: {\n+                    return InputResult(INVALID, ctx.CheckAfter(node.k) ? EMPTY : INVALID);\n+                }\n+                case Fragment::SHA256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatSHA256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::RIPEMD160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatRIPEMD160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::HASH256: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH256(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::HASH160: {\n+                    std::vector<unsigned char> preimage;\n+                    Availability avail = ctx.SatHASH160(node.data, preimage);\n+                    return InputResult(ZERO32, InputStack(std::move(preimage)).SetAvailable(avail));\n+                }\n+                case Fragment::AND_V: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult((y.nsat + x.sat).SetNonCanon(), y.sat + x.sat);\n+                }\n+                case Fragment::AND_B: {\n+                    auto& x = subres[0], &y = subres[1];\n+                    return InputResult((y.nsat + x.nsat) | (y.sat + x.nsat).SetNonCanon() | (y.nsat + x.sat).SetNonCanon(), y.sat + x.sat);\n+                }\n+                case Fragment::OR_B: {\n+                    auto& x = subres[0], &z = subres[1];\n+                    // The (sat(Z) sat(X)) solution is overcomplete (attacker can change either into dsat).\n+                    return InputResult(z.nsat + x.nsat, (z.nsat + x.sat) | (z.sat + x.nsat) | (z.sat + x.sat).SetMalleable());",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 161,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3bedfb5b13e863508cb9b0d44fa03cc991151927",
      "in_reply_to_id": 923781764,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-07-19T15:53:40Z",
      "updated_at": "2022-07-19T15:53:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r924683543",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924683543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 959,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924749544",
      "pull_request_review_id": 1043794644,
      "id": 924749544,
      "node_id": "PRRC_kwDOABII5843Ho7o",
      "diff_hunk": "@@ -672,6 +685,7 @@ class DummySignatureChecker final : public BaseSignatureChecker\n     bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, ScriptExecutionData& execdata, ScriptError* serror) const override { return sig.size() != 0; }\n     bool CheckLockTime(const CScriptNum& nLockTime) const override { return true; }\n     bool CheckSequence(const CScriptNum& nSequence) const override { return true; }\n+    bool CheckEqual(const std::vector<unsigned char>& vch1, const std::vector<unsigned char>& vch2) const override { return true; }",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "8f1b45bf256b7454d1b790038a00eb537b9bbb70",
      "in_reply_to_id": 923799522,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My rationale was that adding `CheckEqual` to the `DummySignatureChecker` is related to the descriptor: it makes a descriptor with timelocks reported as solvable (which in turn allows us to mark them as such in the unit tests). On the other hand the previous commit aims to be the isolated 3-lines-diff that touches consensus code, and only do that.\r\n\r\nNot that i feel too strongly about it of course!",
      "created_at": "2022-07-19T16:56:32Z",
      "updated_at": "2022-07-19T16:56:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r924749544",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924749544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924842709",
      "pull_request_review_id": 1043915829,
      "id": 924842709,
      "node_id": "PRRC_kwDOABII5843H_rV",
      "diff_hunk": "@@ -263,6 +263,8 @@ class BaseSignatureChecker\n          return false;\n     }\n \n+    virtual bool CheckEqual(const std::vector<unsigned char>& vch1, const std::vector<unsigned char>& vch2) const { return vch1 == vch2; }",
      "path": "src/script/interpreter.h",
      "position": null,
      "original_position": 4,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "26cd5992d59c52529a6c261315fd0353803a7901",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I vaguely recall having a discussion about this already, but I can't remember the conclusion.\r\n\r\nIs this function needed just to make the dummy signing pass verification in the signing logic? If so, it may be easier to only add a way to bypass that verification check for dummy signing in the first place.\r\n\r\nI'm somewhat uncomfortable with making a change to consensus code like this just for that purpose.",
      "created_at": "2022-07-19T18:35:15Z",
      "updated_at": "2022-07-19T18:35:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r924842709",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924842709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925341728",
      "pull_request_review_id": 1044651761,
      "id": 925341728,
      "node_id": "PRRC_kwDOABII5843J5gg",
      "diff_hunk": "@@ -263,6 +263,8 @@ class BaseSignatureChecker\n          return false;\n     }\n \n+    virtual bool CheckEqual(const std::vector<unsigned char>& vch1, const std::vector<unsigned char>& vch2) const { return vch1 == vch2; }",
      "path": "src/script/interpreter.h",
      "position": null,
      "original_position": 4,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "26cd5992d59c52529a6c261315fd0353803a7901",
      "in_reply_to_id": 924842709,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, it's only to pass the `IsSolvable` check and, yes, it is unfortunate. Previous discussion [logs here](https://gnusha.org/miniscript/2022-02-24.log). TL;DR:\r\n- I tested a few things and isolating a 3-lines patch to the interpreter was the only \"reasonable\" solution i could come up with that didn't change the existing logic\r\n- `IsSolvable` is overkill already, we could just drop the `VerifyScript` there and not need the interpreter patch here:\r\nhttps://github.com/bitcoin/bitcoin/blob/0897b189e4242321cd03339e7dde5c4d963d0e48/src/script/sign.cpp#L640-L646\r\n\r\nBut just getting rid of `VerifyScript` isn't enough. We still need to keep `ProduceSignature`, which will in turn call `VerifyScript` again. And since this path is used at \"real\" signing time too, it gets pretty convoluted to special case `IsSolvable` without using the `DummySignatureChecker`.\r\n\r\nI think a cleaner path forward would be to revise the implementation of `IsSolvable` altogether, detangling it from the signing code. It dates from back when there were no descriptors. Nowadays everything we can sign for (that \"is solvable\") can be represented as a descriptor. So how about re-defining `IsSolvable` as \"a descriptor can be inferred from this script, and this descriptor is solvable (ie not raw)\"?\r\nIt's probably a good cleanup of legacy code on its own too, so it could have its own PR and i would rebase this one on top of it and drop the interpreter patch.\r\n\r\nEDIT: a branch implementing this on top of this PR: https://github.com/darosior/bitcoin/tree/miniscript_wallet_signing_new_is_solvable",
      "created_at": "2022-07-20T08:45:29Z",
      "updated_at": "2022-07-20T10:30:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r925341728",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925341728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925844683",
      "pull_request_review_id": 1045379465,
      "id": 925844683,
      "node_id": "PRRC_kwDOABII5843L0TL",
      "diff_hunk": "@@ -263,6 +263,8 @@ class BaseSignatureChecker\n          return false;\n     }\n \n+    virtual bool CheckEqual(const std::vector<unsigned char>& vch1, const std::vector<unsigned char>& vch2) const { return vch1 == vch2; }",
      "path": "src/script/interpreter.h",
      "position": null,
      "original_position": 4,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "26cd5992d59c52529a6c261315fd0353803a7901",
      "in_reply_to_id": 924842709,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIRC, the DummySignatureCreator isn't just used for testing solvability, but also for determining the size of produced signatures before actual keys are available. If so, we still have a dependence on ProduceSignature in that context.\r\n\r\nThat said, it seems possible to just remove both VerifyScript calls in script/sign.cpp's ProduceSignature and IsSolvable. No tests break.",
      "created_at": "2022-07-20T16:54:18Z",
      "updated_at": "2022-07-20T16:54:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r925844683",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925844683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/943484238",
      "pull_request_review_id": 1069717335,
      "id": 943484238,
      "node_id": "PRRC_kwDOABII5844PG1O",
      "diff_hunk": "@@ -263,6 +263,8 @@ class BaseSignatureChecker\n          return false;\n     }\n \n+    virtual bool CheckEqual(const std::vector<unsigned char>& vch1, const std::vector<unsigned char>& vch2) const { return vch1 == vch2; }",
      "path": "src/script/interpreter.h",
      "position": null,
      "original_position": 4,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "26cd5992d59c52529a6c261315fd0353803a7901",
      "in_reply_to_id": 924842709,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry for the late reply.\r\n\r\nYes. I think it would be nice to get rid of it entirely but indeed only redefining `IsSolvable` doesn't permit that, It's sufficient for dropping the interpreter patch here though.\r\n\r\nI don't know about removing the belt-and-suspender  `VerifyScript` check in `ProduceSignature`. I'd be more comfortable with just re-defining `IsSolvable`. I've done that in #25664.",
      "created_at": "2022-08-11T13:27:16Z",
      "updated_at": "2022-08-11T13:27:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r943484238",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/943484238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950532827",
      "pull_request_review_id": 1079318735,
      "id": 950532827,
      "node_id": "PRRC_kwDOABII5844p_rb",
      "diff_hunk": "@@ -32,6 +62,9 @@ class BaseSignatureCreator {\n     /** Create a singular (non-script) signature. */\n     virtual bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const =0;\n     virtual bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const =0;\n+\n+    //! Fetch a preimage corresponding to this hash.\n+    virtual bool LookupPreimage(SignatureData& sig_data, const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const =0;",
      "path": "src/script/sign.h",
      "position": null,
      "original_position": 43,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "84cd88642fd9fc542593c9253fec4038408c2802",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I find slightly ugly to expose `SignatureData` to the `SignatureCreator` interface. I'd say that `SignatureData` is the \"upper\" interface of the script/sign logic, which it exposes to its users. And `SignatureCreator` is part of the \"lower\" interface - it's how one can provide simple individual signature logic to script/sign. So it feels awkward to make the `SignatureCreator` implementations (which should deal with simple low-level things like signatures) be exposed to this `SignatureData` class which deals with script signing. This isn't more than a philosophical concern about code structure, but I'd like to offer an alternative.\r\n\r\nTrying to draw an analogy with how keys/signatures are handled, there is the somewhat weird observation that hash preimages are both key material (which should really go in a `SigningProvider`, as it's a kind of secret) and signature material (which rightfully belongs in `SigningData`, as something that will end up in the witness). I don't think that's a problem - maybe it belongs in both. So a possibility is:\r\n* Add functionality to `SigningProvider` to hold/lookup preimages.\r\n* Have an overridable LookupPreimage in `SignatureCreator` that takes a `const SigningProvider&` as argument (like CreateSig etc). It's so simple it could have a default implementation, looking things up in the provider. Dummy implementations could override it by return success with zero-byte ones.\r\n* Still have preimage data in `SignatureData` too, accessed/controlled by a non-overridable ::CreatePreimage function (mimicking ::CreateSig in script/sign.cpp), which can invoke LookupPreimage on the `SignatureCreator` if needed, but can also access the \"cached\" version in `SignatureData`.\r\n\r\nThis means that `SignatureCreator` implementations only need to know about `SigningProvider`, like before, but can still override. It also avoids the need to pass a `SignatureData` to SignSignature.\r\n\r\n---\r\n\r\nAn alternative, if the above is too complex, is to introduce a simple `PreimageData` structure, make `LookupPreimage` take `const PreimageData&`, and add a `PreimageData` field to `SignatureData`.\r\n\r\n---\r\n\r\nLastly, if none of the above are doable: can `SignatureData&` here and the argument to SignSignature be made a const reference?\r\n",
      "created_at": "2022-08-19T20:18:32Z",
      "updated_at": "2022-08-19T20:21:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r950532827",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950532827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950544682",
      "pull_request_review_id": 1079335882,
      "id": 950544682,
      "node_id": "PRRC_kwDOABII5844qCkq",
      "diff_hunk": "@@ -443,11 +450,18 @@ struct Satisfier {\n \n \n     //! Hash preimage satisfactions.\n-    // TODO\n-    miniscript::Availability SatSHA256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const { return miniscript::Availability::NO; }\n-    miniscript::Availability SatRIPEMD160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const { return miniscript::Availability::NO; }\n-    miniscript::Availability SatHASH256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const { return miniscript::Availability::NO; }\n-    miniscript::Availability SatHASH160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const { return miniscript::Availability::NO; }\n+    miniscript::Availability SatSHA256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return m_creator.LookupPreimage(m_sig_data, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;\n+    }\n+    miniscript::Availability SatRIPEMD160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return m_creator.LookupPreimage(m_sig_data, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;\n+    }\n+    miniscript::Availability SatHASH256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return m_creator.LookupPreimage(m_sig_data, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "84cd88642fd9fc542593c9253fec4038408c2802",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Using a single map/lookup for all types of preimages may be undesirable in an edge case: if `h=SHA256(SHA256(x))`, then both `x` and `SHA256(x)` can be correct preimages (under Hash256 and SHA256 respectively), and both might be used in a single script.\r\n",
      "created_at": "2022-08-19T20:40:25Z",
      "updated_at": "2022-08-19T20:40:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r950544682",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950544682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957584192",
      "pull_request_review_id": 1089052519,
      "id": 957584192,
      "node_id": "PRRC_kwDOABII5845E5NA",
      "diff_hunk": "@@ -32,6 +62,9 @@ class BaseSignatureCreator {\n     /** Create a singular (non-script) signature. */\n     virtual bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const =0;\n     virtual bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const =0;\n+\n+    //! Fetch a preimage corresponding to this hash.\n+    virtual bool LookupPreimage(SignatureData& sig_data, const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const =0;",
      "path": "src/script/sign.h",
      "position": null,
      "original_position": 43,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "84cd88642fd9fc542593c9253fec4038408c2802",
      "in_reply_to_id": 950532827,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see. But since `SignatureData` is already largely exposed to the inner of `ProduceSignature`, what would you think of just making it a parameter in `SignSignature` (instead of creating a fresh one there)? Because actually it's not necessary to expose it to `SignatureCreator`:\r\n\r\n\r\n<details>\r\n<summary>Quick and dirty diff on the tip of the PR</summary>\r\n\r\n```diff\r\ndiff --git a/src/script/sign.cpp b/src/script/sign.cpp\r\nindex 4fe738dfd5..f337e8ba48 100644\r\n--- a/src/script/sign.cpp\r\n+++ b/src/script/sign.cpp\r\n@@ -89,13 +89,6 @@ bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider&\r\n     return true;\r\n }\r\n \r\n-bool MutableTransactionSignatureCreator::LookupPreimage(SignatureData& sig_data, const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\r\n-    auto it = sig_data.hash_preimages.find(hash);\r\n-    if (it == sig_data.hash_preimages.end()) return false;\r\n-    preimage = it->second;\r\n-    return true;\r\n-}\r\n-\r\n static bool GetCScript(const SigningProvider& provider, const SignatureData& sigdata, const CScriptID& scriptid, CScript& script)\r\n {\r\n     if (provider.GetCScript(scriptid, script)) {\r\n@@ -390,6 +383,17 @@ static CScript PushAll(const std::vector<valtype>& values)\r\n     return result;\r\n }\r\n \r\n+template<typename M, typename K, typename V>\r\n+bool LookupHelper(const M& map, const K& key, V& value)\r\n+{\r\n+    auto it = map.find(key);\r\n+    if (it != map.end()) {\r\n+        value = it->second;\r\n+        return true;\r\n+    }\r\n+    return false;\r\n+}\r\n+\r\n /**\r\n  * Context for solving a Miniscript.\r\n  * If enough material (access to keys, hash preimages, ..) is given, produces a valid satisfaction.\r\n@@ -451,16 +455,16 @@ struct Satisfier {\r\n \r\n     //! Hash preimage satisfactions.\r\n     miniscript::Availability SatSHA256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\r\n-        return m_creator.LookupPreimage(m_sig_data, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;\r\n+        return LookupHelper(m_sig_data.hash_preimages, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;\r\n     }\r\n     miniscript::Availability SatRIPEMD160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\r\n-        return m_creator.LookupPreimage(m_sig_data, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;\r\n+        return LookupHelper(m_sig_data.hash_preimages, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;\r\n     }\r\n     miniscript::Availability SatHASH256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\r\n-        return m_creator.LookupPreimage(m_sig_data, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;\r\n+        return LookupHelper(m_sig_data.hash_preimages, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;\r\n     }\r\n     miniscript::Availability SatHASH160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\r\n-        return m_creator.LookupPreimage(m_sig_data, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;\r\n+        return LookupHelper(m_sig_data.hash_preimages, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;\r\n     }\r\n };\r\n \r\n@@ -720,11 +724,6 @@ public:\r\n         sig.assign(64, '\\000');\r\n         return true;\r\n     }\r\n-\r\n-    bool LookupPreimage(SignatureData& sig_data, const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const override {\r\n-        preimage.assign(32, '\\000');\r\n-        return true;\r\n-    }\r\n };\r\n \r\n }\r\ndiff --git a/src/script/sign.h b/src/script/sign.h\r\nindex fdb3244d5d..8df1fbc98d 100644\r\n--- a/src/script/sign.h\r\n+++ b/src/script/sign.h\r\n@@ -62,9 +62,6 @@ public:\r\n     /** Create a singular (non-script) signature. */\r\n     virtual bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const =0;\r\n     virtual bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const =0;\r\n-\r\n-    //! Fetch a preimage corresponding to this hash.\r\n-    virtual bool LookupPreimage(SignatureData& sig_data, const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const =0;\r\n };\r\n \r\n /** A signature creator for transactions. */\r\n@@ -83,7 +80,6 @@ public:\r\n     const BaseSignatureChecker& Checker() const override { return checker; }\r\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\r\n     bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const override;\r\n-    bool LookupPreimage(SignatureData& sig_data, const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const override;\r\n };\r\n \r\n /** A signature creator that just produces 71-byte empty signatures. */\r\n```\r\n\r\n</details>\r\n\r\n> can [...] the argument to SignSignature be made a const reference?\r\n\r\nIt's modified by `SignSignature` so it wouldn't be possible to make it a const reference.",
      "created_at": "2022-08-29T17:04:30Z",
      "updated_at": "2022-08-29T17:05:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r957584192",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957584192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958488772",
      "pull_request_review_id": 1090331952,
      "id": 958488772,
      "node_id": "PRRC_kwDOABII5845IWDE",
      "diff_hunk": "@@ -443,11 +450,18 @@ struct Satisfier {\n \n \n     //! Hash preimage satisfactions.\n-    // TODO\n-    miniscript::Availability SatSHA256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const { return miniscript::Availability::NO; }\n-    miniscript::Availability SatRIPEMD160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const { return miniscript::Availability::NO; }\n-    miniscript::Availability SatHASH256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const { return miniscript::Availability::NO; }\n-    miniscript::Availability SatHASH160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const { return miniscript::Availability::NO; }\n+    miniscript::Availability SatSHA256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return m_creator.LookupPreimage(m_sig_data, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;\n+    }\n+    miniscript::Availability SatRIPEMD160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return m_creator.LookupPreimage(m_sig_data, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;\n+    }\n+    miniscript::Availability SatHASH256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return m_creator.LookupPreimage(m_sig_data, hash, preimage) ? miniscript::Availability::YES : miniscript::Availability::NO;",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "84cd88642fd9fc542593c9253fec4038408c2802",
      "in_reply_to_id": 950544682,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch. Thanks.",
      "created_at": "2022-08-30T13:33:17Z",
      "updated_at": "2022-08-30T13:33:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r958488772",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958488772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1073955788",
      "pull_request_review_id": 1254129729,
      "id": 1073955788,
      "node_id": "PRRC_kwDOABII585AA0PM",
      "diff_hunk": "@@ -381,6 +382,73 @@ static CScript PushAll(const std::vector<valtype>& values)\n     return result;\n }\n \n+/**\n+ * Context for solving a Miniscript.\n+ * If enough material (access to keys, hash preimages, ..) is given, produces a valid satisfaction.\n+ */\n+struct Satisfier {\n+    typedef CPubKey Key;\n+\n+    const SigningProvider& m_provider;\n+    SignatureData& m_sig_data;\n+    const BaseSignatureCreator& m_creator;\n+    const CScript& m_witness_script;\n+\n+    explicit Satisfier(const SigningProvider& provider, SignatureData& sig_data, const BaseSignatureCreator& creator,",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "6503ece5fda960cbfd8cfa76d7891f7cd0faa5a8",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mark the arguments as `LIFETIMEBOUND`?",
      "created_at": "2023-01-18T19:00:27Z",
      "updated_at": "2023-01-18T20:49:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1073955788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1073955788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 397,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1073958344",
      "pull_request_review_id": 1254129729,
      "id": 1073958344,
      "node_id": "PRRC_kwDOABII585AA03I",
      "diff_hunk": "@@ -317,6 +318,11 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n                     txdata.Init(spend, std::move(utxos), /*force=*/true);\n                     MutableTransactionSignatureCreator creator{spend, 0, CAmount{0}, &txdata, SIGHASH_DEFAULT};\n                     SignatureData sigdata;\n+                    // We assume there is no collusion between the hashes (eg h1=SHA256(SHA256(x)) and h2=SHA256(x))",
      "path": "src/test/descriptor_tests.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3d8e2897e1659c649e18d306c58e65ec9880a04c",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "typo: `collision` ?",
      "created_at": "2023-01-18T19:03:04Z",
      "updated_at": "2023-01-18T20:49:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1073958344",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1073958344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1074017653",
      "pull_request_review_id": 1254129729,
      "id": 1074017653,
      "node_id": "PRRC_kwDOABII585ABDV1",
      "diff_hunk": "@@ -117,12 +159,197 @@ struct KeyConverter {\n     }\n };\n \n+/** A class that encapsulates all signing/hash revealing operations. */\n+struct Satisfier : public KeyConverter {\n+    //! Which keys/timelocks/hash preimages are available.\n+    std::set<Challenge> supported;\n+\n+    //! Implement simplified CLTV logic: stack value must exactly match an entry in `supported`.\n+    bool CheckAfter(uint32_t value) const {\n+        return supported.count(Challenge(ChallengeType::AFTER, value));\n+    }\n+\n+    //! Implement simplified CSV logic: stack value must exactly match an entry in `supported`.\n+    bool CheckOlder(uint32_t value) const {\n+        return supported.count(Challenge(ChallengeType::OLDER, value));\n+    }\n+\n+    //! Produce a signature for the given key.\n+    miniscript::Availability Sign(const CPubKey& key, std::vector<unsigned char>& sig) const {\n+        if (supported.count(Challenge(ChallengeType::PK, ChallengeNumber(key)))) {\n+            auto it = g_testdata->signatures.find(key);\n+            if (it == g_testdata->signatures.end()) return miniscript::Availability::NO;\n+            sig = it->second;\n+            return miniscript::Availability::YES;\n+        }\n+        return miniscript::Availability::NO;\n+    }\n+\n+    //! Helper function for the various hash based satisfactions.\n+    miniscript::Availability SatHash(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage, ChallengeType chtype) const {\n+        if (!supported.count(Challenge(chtype, ChallengeNumber(hash)))) return miniscript::Availability::NO;\n+        const auto& m =\n+            chtype == ChallengeType::SHA256 ? g_testdata->sha256_preimages :\n+            chtype == ChallengeType::HASH256 ? g_testdata->hash256_preimages :\n+            chtype == ChallengeType::RIPEMD160 ? g_testdata->ripemd160_preimages :\n+            g_testdata->hash160_preimages;\n+        auto it = m.find(hash);\n+        if (it == m.end()) return miniscript::Availability::NO;\n+        preimage = it->second;\n+        return miniscript::Availability::YES;\n+    }\n+\n+    // Functions that produce the preimage for hashes of various types.\n+    miniscript::Availability SatSHA256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const { return SatHash(hash, preimage, ChallengeType::SHA256); }\n+    miniscript::Availability SatRIPEMD160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const { return SatHash(hash, preimage, ChallengeType::RIPEMD160); }\n+    miniscript::Availability SatHASH256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const { return SatHash(hash, preimage, ChallengeType::HASH256); }\n+    miniscript::Availability SatHASH160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const { return SatHash(hash, preimage, ChallengeType::HASH160); }\n+};\n+\n+/** Mocking signature/timelock checker.\n+ *\n+ * It holds a pointer to a Satisfier object, to determine which timelocks are supposed to be available.\n+ */\n+class TestSignatureChecker : public BaseSignatureChecker {\n+    const Satisfier *ctx;\n+\n+public:\n+    TestSignatureChecker(const Satisfier *in_ctx) : ctx(in_ctx) {}",
      "path": "src/test/miniscript_tests.cpp",
      "position": null,
      "original_position": 165,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "49290ac88f753639507a6053937a0c26bd5d42b2",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Pass by reference, and mark `LIFETIMEBOUND` ?",
      "created_at": "2023-01-18T19:59:26Z",
      "updated_at": "2023-01-18T20:49:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1074017653",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1074017653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1074029527",
      "pull_request_review_id": 1254129729,
      "id": 1074029527,
      "node_id": "PRRC_kwDOABII585ABGPX",
      "diff_hunk": "@@ -235,6 +240,55 @@ size_t ComputeScriptLen(Fragment fragment, Type sub0typ, size_t subsize, uint32_\n //! A helper sanitizer/checker for the output of CalcType.\n Type SanitizeType(Type x);\n \n+//! An object representing a sequence of witness stack elements.\n+struct InputStack {\n+    /** Whether this stack is valid for its intended purpose (satisfaction or dissatisfaction of a Node).\n+     *  The MAYBE value is used for size estimation, when keys/preimages may actually be unavailable,\n+     *  but may be available at signing time. This makes the InputStack structure and signing logic,\n+     *  filled with dummy signatures/preimages usable for witness size estimation.\n+     */\n+    Availability available = Availability::YES;\n+    //! Whether this stack contains a digital signature.\n+    bool has_sig = false;\n+    //! Whether this stack is malleable (can be turned into an equally valid other stack by a third party).\n+    bool malleable = false;\n+    //! Whether this stack is non-canonical (using a construction known to be unnecessary for satisfaction).\n+    //! Note that this flag does not affect the satisfaction algorithm; it is only used for sanity checking.\n+    bool non_canon = false;\n+    //! Serialized witness size.\n+    size_t size = 0;\n+    //! Data elements.\n+    std::vector<std::vector<unsigned char>> stack;\n+    //! Construct an empty stack (valid).\n+    InputStack() {}\n+    //! Construct a valid single-element stack (with an element up to 75 bytes).\n+    InputStack(std::vector<unsigned char> in) : size(in.size() + 1), stack(Vector(std::move(in))) {}\n+    //! Change availability\n+    InputStack& SetAvailable(Availability avail);\n+    //! Mark this input stack as having a signature.\n+    InputStack& SetWithSig();\n+    //! Mark this input stack as non-canonical (known to not be necessary in non-malleable satisfactions).\n+    InputStack& SetNonCanon();\n+    //! Mark this input stack as malleable.\n+    InputStack& SetMalleable(bool x = true);\n+    //! Concatenate two input stacks.\n+    friend InputStack operator+(InputStack a, InputStack b);\n+    //! Choose between two potential input stacks.\n+    friend InputStack operator|(InputStack a, InputStack b);\n+};\n+\n+static const auto ZERO = InputStack(std::vector<unsigned char>());",
      "path": "src/script/miniscript.h",
      "position": 54,
      "original_position": 53,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "49290ac88f753639507a6053937a0c26bd5d42b2",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe worth adding some comments to these. I suggest:\r\n\r\n```c++\r\n/** A stack consisting of a single zero-length element (interpreted as 0 by the script interpreter in numeric context). */\r\nstatic const auto ZERO = InputStack(std::vector<unsigned char>());\r\n/** A stack consisting of a single malleable 32-byte 0x0000...0000 element (for dissatisfying hash challenges). */\r\nstatic const auto ZERO32 = InputStack(std::vector<unsigned char>(32, 0)).SetMalleable();\r\n/** A stack consisting of a single 0x01 element (interpreted as 1 by the script interpreted in numeric context). */\r\nstatic const auto ONE = InputStack(Vector((unsigned char)1));\r\n/** The empty stack. */\r\nstatic const auto EMPTY = InputStack();\r\n/** A stack representing the lack of any (dis)satisfactions. */\r\nstatic const auto INVALID = InputStack().SetAvailable(Availability::NO);\r\n```\r\n",
      "created_at": "2023-01-18T20:14:26Z",
      "updated_at": "2023-01-18T20:49:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1074029527",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1074029527"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 281,
      "original_line": 281,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1074031621",
      "pull_request_review_id": 1254129729,
      "id": 1074031621,
      "node_id": "PRRC_kwDOABII585ABGwF",
      "diff_hunk": "@@ -785,6 +839,188 @@ struct Node {\n         assert(false);\n     }\n \n+    template<typename Ctx>\n+    internal::InputResult ProduceInput(const Ctx& ctx) const {\n+        using namespace internal;\n+\n+        auto helper = [&ctx](const Node& node, Span<InputResult> subres) -> InputResult {",
      "path": "src/script/miniscript.h",
      "position": 85,
      "original_position": 76,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "49290ac88f753639507a6053937a0c26bd5d42b2",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe worth adding a comment, like `Internal function which is invoked for every tree node, constructing satisfaction/dissatisfactions given those of its subnodes.`.",
      "created_at": "2023-01-18T20:16:59Z",
      "updated_at": "2023-01-18T20:49:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1074031621",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1074031621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 855,
      "original_line": 855,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1074033951",
      "pull_request_review_id": 1254129729,
      "id": 1074033951,
      "node_id": "PRRC_kwDOABII585ABHUf",
      "diff_hunk": "@@ -842,6 +1079,47 @@ struct Node {\n         });\n     }\n \n+    //! Determine whether a Miniscript node is satisfiable. fn(node) will be invoked for all\n+    //! key, time, and hashing nodes, and should return their satisfiability.\n+    template<typename F>\n+    bool IsSatisfiable(F fn) const\n+    {\n+        // TreeEval() doesn't support bool as NodeType, so use int instead.\n+        return TreeEval<int>([&fn](const Node& node, Span<int> subs) {\n+            switch (node.fragment) {\n+                case Fragment::JUST_0:\n+                    return false;\n+                case Fragment::JUST_1:\n+                    return true;\n+                case Fragment::PK_K:\n+                case Fragment::PK_H:\n+                case Fragment::MULTI:\n+                case Fragment::AFTER:\n+                case Fragment::OLDER:\n+                case Fragment::HASH256:\n+                case Fragment::HASH160:\n+                case Fragment::SHA256:\n+                case Fragment::RIPEMD160:\n+                    return bool{fn(node)};\n+                case Fragment::ANDOR:\n+                    return (subs[0] && subs[1]) || subs[2];\n+                case Fragment::AND_V:\n+                case Fragment::AND_B:\n+                    return subs[0] && subs[1];\n+                case Fragment::OR_B:\n+                case Fragment::OR_C:\n+                case Fragment::OR_D:\n+                case Fragment::OR_I:\n+                    return subs[0] || subs[1];\n+                case Fragment::THRESH:\n+                    return std::count(subs.begin(), subs.end(), true) >= node.k;\n+                default: // wrappers\n+                    assert(subs.size() == 1);\n+                    return !!subs[0];",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 298,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3bedfb5b13e863508cb9b0d44fa03cc991151927",
      "in_reply_to_id": 923792873,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "An alternative here would be adding `-> bool` to the lambda definition, I think, if we care.",
      "created_at": "2023-01-18T20:19:39Z",
      "updated_at": "2023-01-18T20:49:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1074033951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1074033951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080530644",
      "pull_request_review_id": 1254129729,
      "id": 1080530644,
      "node_id": "PRRC_kwDOABII585AZ5bU",
      "diff_hunk": "@@ -381,6 +382,73 @@ static CScript PushAll(const std::vector<valtype>& values)\n     return result;\n }\n \n+/**\n+ * Context for solving a Miniscript.\n+ * If enough material (access to keys, hash preimages, ..) is given, produces a valid satisfaction.\n+ */\n+struct Satisfier {\n+    typedef CPubKey Key;\n+\n+    const SigningProvider& m_provider;\n+    SignatureData& m_sig_data;\n+    const BaseSignatureCreator& m_creator;\n+    const CScript& m_witness_script;\n+\n+    explicit Satisfier(const SigningProvider& provider, SignatureData& sig_data, const BaseSignatureCreator& creator,\n+                       const CScript& witscript) : m_provider(provider),\n+                                                   m_sig_data(sig_data),\n+                                                   m_creator(creator),\n+                                                   m_witness_script(witscript) {}\n+\n+    bool KeyCompare(const Key& a, const Key& b) const {",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "6503ece5fda960cbfd8cfa76d7891f7cd0faa5a8",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can be `static` (and non-`const` then).",
      "created_at": "2023-01-18T20:36:31Z",
      "updated_at": "2023-01-18T20:49:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1080530644",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080530644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 403,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080534576",
      "pull_request_review_id": 1254129729,
      "id": 1080534576,
      "node_id": "PRRC_kwDOABII585AZ6Yw",
      "diff_hunk": "@@ -416,9 +484,21 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     {\n         CScript witnessscript(result[0].begin(), result[0].end());\n         sigdata.witness_script = witnessscript;\n-        TxoutType subType;\n+\n+        TxoutType subType{TxoutType::NONSTANDARD};\n         solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0, sigdata) && subType != TxoutType::SCRIPTHASH && subType != TxoutType::WITNESS_V0_SCRIPTHASH && subType != TxoutType::WITNESS_V0_KEYHASH;\n+\n+        // Don't try to satisfy using Miniscript if it was a multisig as it would have already been handled by\n+        // SignStep, which appends partial signatures to the witness stack and we must not temper with to keep\n+        // compatibility with the extractor relying on this behaviour to combine witnesses.\n+        if (!solved && subType != TxoutType::MULTISIG) {",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "6503ece5fda960cbfd8cfa76d7891f7cd0faa5a8",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you think this could be `if (!solved && result.empty()) {` instead? From a cursory reading, it looks like only `TxoutType::MULTISIG` populates `result` without fully solving, so that should match the exact behavior we want, without needing to special case `MULTISIG`, and without needing a slightly-concerning `result.clear()`.",
      "created_at": "2023-01-18T20:41:38Z",
      "updated_at": "2023-01-18T20:49:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1080534576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080534576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 494,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080537839",
      "pull_request_review_id": 1254129729,
      "id": 1080537839,
      "node_id": "PRRC_kwDOABII585AZ7Lv",
      "diff_hunk": "@@ -644,19 +662,18 @@ void SignatureData::MergeSignatureData(SignatureData sigdata)\n     signatures.insert(std::make_move_iterator(sigdata.signatures.begin()), std::make_move_iterator(sigdata.signatures.end()));\n }\n \n-bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)\n+bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType, SignatureData sigdata)\n {\n     assert(nIn < txTo.vin.size());\n \n     MutableTransactionSignatureCreator creator(txTo, nIn, amount, nHashType);\n \n-    SignatureData sigdata;\n     bool ret = ProduceSignature(provider, creator, fromPubKey, sigdata);\n     UpdateInput(txTo.vin.at(nIn), sigdata);\n     return ret;\n }\n \n-bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType, SignatureData sigdata)",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3d8e2897e1659c649e18d306c58e65ec9880a04c",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `sigdata` argument here should probably be passed to the call to `SignSignature()` below?\r\n\r\nAlso, here too, does `SignatureData sigdata` need to be passed by value?\r\n\r\n",
      "created_at": "2023-01-18T20:45:48Z",
      "updated_at": "2023-01-18T20:49:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1080537839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080537839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 676,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080538605",
      "pull_request_review_id": 1254129729,
      "id": 1080538605,
      "node_id": "PRRC_kwDOABII585AZ7Xt",
      "diff_hunk": "@@ -91,9 +95,24 @@ struct SignatureData {\n /** Produce a script signature using a generic signature creator. */\n bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& scriptPubKey, SignatureData& sigdata);\n \n-/** Produce a script signature for a transaction. */\n-bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n-bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n+/**\n+ * Produce a satisfying script (scriptSig or witness).\n+ *\n+ * @param provider   Utility containing the information necessary to solve a script.\n+ * @param fromPubKey The script to produce a satisfaction for.\n+ * @param txTo       The spending transaction.\n+ * @param nIn        The index of the input in `txTo` refering the output being spent.\n+ * @param amount     The value of the output being spent.\n+ * @param nHashType  Signature hash type.\n+ * @param sig_data   Additional data provided to solve a script. Filled with the resulting satisfying",
      "path": "src/script/sign.h",
      "position": 27,
      "original_position": 27,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3d8e2897e1659c649e18d306c58e65ec9880a04c",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Passed by value, so nothing can be returned in it?",
      "created_at": "2023-01-18T20:46:47Z",
      "updated_at": "2023-01-18T20:49:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1080538605",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080538605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080539964",
      "pull_request_review_id": 1254129729,
      "id": 1080539964,
      "node_id": "PRRC_kwDOABII585AZ7s8",
      "diff_hunk": "@@ -644,19 +662,18 @@ void SignatureData::MergeSignatureData(SignatureData sigdata)\n     signatures.insert(std::make_move_iterator(sigdata.signatures.begin()), std::make_move_iterator(sigdata.signatures.end()));\n }\n \n-bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)\n+bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType, SignatureData sigdata)",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3d8e2897e1659c649e18d306c58e65ec9880a04c",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Pass `SignatureData sigdata` by value, is that necessary?",
      "created_at": "2023-01-18T20:48:33Z",
      "updated_at": "2023-01-18T20:49:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1080539964",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080539964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 665,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1086673062",
      "pull_request_review_id": 1269401970,
      "id": 1086673062,
      "node_id": "PRRC_kwDOABII585AxVCm",
      "diff_hunk": "@@ -279,6 +279,76 @@ size_t ComputeScriptLen(Fragment fragment, Type sub0typ, size_t subsize, uint32_\n     assert(false);\n }\n \n+InputStack& InputStack::SetAvailable(Availability avail) {\n+    available = avail;\n+    if (avail == Availability::NO) {\n+        stack.clear();\n+        size = std::numeric_limits<size_t>::max();\n+        has_sig = false;\n+        malleable = false;\n+        non_canon = false;\n+    }\n+    return *this;\n+}\n+\n+InputStack& InputStack::SetWithSig() {\n+    has_sig = true;\n+    return *this;\n+}\n+\n+InputStack& InputStack::SetNonCanon() {\n+    non_canon = true;\n+    return *this;\n+}\n+\n+InputStack& InputStack::SetMalleable(bool x) {\n+    malleable = x;\n+    return *this;\n+}\n+\n+InputStack operator+(InputStack a, InputStack b) {\n+    a.stack = Cat(std::move(a.stack), std::move(b.stack));\n+    if (a.available != Availability::NO && b.available != Availability::NO) a.size += b.size;\n+    a.has_sig |= b.has_sig;\n+    a.malleable |= b.malleable;\n+    a.non_canon |= b.non_canon;\n+    if (a.available == Availability::NO || b.available == Availability::NO) {\n+        a.SetAvailable(Availability::NO);\n+    } else if (a.available == Availability::MAYBE || b.available == Availability::MAYBE) {\n+        a.SetAvailable(Availability::MAYBE);\n+    }\n+    return a;\n+}\n+\n+InputStack operator|(InputStack a, InputStack b) {\n+    // If only one (or neither) is valid, pick the other one.",
      "path": "src/script/miniscript.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "75eee1679a081fe5b6d236af3449b459b0723625",
      "in_reply_to_id": null,
      "user": {
        "login": "benma",
        "id": 1225267,
        "node_id": "MDQ6VXNlcjEyMjUyNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1225267?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benma",
        "html_url": "https://github.com/benma",
        "followers_url": "https://api.github.com/users/benma/followers",
        "following_url": "https://api.github.com/users/benma/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benma/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benma/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benma/subscriptions",
        "organizations_url": "https://api.github.com/users/benma/orgs",
        "repos_url": "https://api.github.com/users/benma/repos",
        "events_url": "https://api.github.com/users/benma/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benma/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggestion: \"If only one is invalid, pick the other one. If both are invalid, pick an arbitrary one.\"\r\n\r\nThe current comment seems to say the opposite of what the code does.",
      "created_at": "2023-01-25T13:57:24Z",
      "updated_at": "2023-01-25T13:57:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1086673062",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1086673062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 324,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087111158",
      "pull_request_review_id": 1270015240,
      "id": 1087111158,
      "node_id": "PRRC_kwDOABII585Ay__2",
      "diff_hunk": "@@ -279,6 +279,76 @@ size_t ComputeScriptLen(Fragment fragment, Type sub0typ, size_t subsize, uint32_\n     assert(false);\n }\n \n+InputStack& InputStack::SetAvailable(Availability avail) {\n+    available = avail;\n+    if (avail == Availability::NO) {\n+        stack.clear();\n+        size = std::numeric_limits<size_t>::max();\n+        has_sig = false;\n+        malleable = false;\n+        non_canon = false;\n+    }\n+    return *this;\n+}\n+\n+InputStack& InputStack::SetWithSig() {\n+    has_sig = true;\n+    return *this;\n+}\n+\n+InputStack& InputStack::SetNonCanon() {\n+    non_canon = true;\n+    return *this;\n+}\n+\n+InputStack& InputStack::SetMalleable(bool x) {\n+    malleable = x;\n+    return *this;\n+}\n+\n+InputStack operator+(InputStack a, InputStack b) {\n+    a.stack = Cat(std::move(a.stack), std::move(b.stack));\n+    if (a.available != Availability::NO && b.available != Availability::NO) a.size += b.size;\n+    a.has_sig |= b.has_sig;\n+    a.malleable |= b.malleable;\n+    a.non_canon |= b.non_canon;\n+    if (a.available == Availability::NO || b.available == Availability::NO) {\n+        a.SetAvailable(Availability::NO);\n+    } else if (a.available == Availability::MAYBE || b.available == Availability::MAYBE) {\n+        a.SetAvailable(Availability::MAYBE);\n+    }\n+    return a;\n+}\n+\n+InputStack operator|(InputStack a, InputStack b) {\n+    // If only one (or neither) is valid, pick the other one.",
      "path": "src/script/miniscript.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "75eee1679a081fe5b6d236af3449b459b0723625",
      "in_reply_to_id": 1086673062,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, indeed. That's a typo in my code.",
      "created_at": "2023-01-25T19:58:57Z",
      "updated_at": "2023-01-25T19:58:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1087111158",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087111158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 324,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088066029",
      "pull_request_review_id": 1271371985,
      "id": 1088066029,
      "node_id": "PRRC_kwDOABII585A2pHt",
      "diff_hunk": "@@ -644,19 +662,18 @@ void SignatureData::MergeSignatureData(SignatureData sigdata)\n     signatures.insert(std::make_move_iterator(sigdata.signatures.begin()), std::make_move_iterator(sigdata.signatures.end()));\n }\n \n-bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)\n+bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType, SignatureData sigdata)",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3d8e2897e1659c649e18d306c58e65ec9880a04c",
      "in_reply_to_id": 1080539964,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, i think i initially did that to not have to modify all the call sites (by using a default value in the declaration) when i started writing this and i forgot to change it. Thanks, fixed it (will push once i addressed all comments).",
      "created_at": "2023-01-26T16:21:04Z",
      "updated_at": "2023-01-26T16:21:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1088066029",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088066029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 665,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088068683",
      "pull_request_review_id": 1271375739,
      "id": 1088068683,
      "node_id": "PRRC_kwDOABII585A2pxL",
      "diff_hunk": "@@ -317,6 +318,11 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n                     txdata.Init(spend, std::move(utxos), /*force=*/true);\n                     MutableTransactionSignatureCreator creator{spend, 0, CAmount{0}, &txdata, SIGHASH_DEFAULT};\n                     SignatureData sigdata;\n+                    // We assume there is no collusion between the hashes (eg h1=SHA256(SHA256(x)) and h2=SHA256(x))",
      "path": "src/test/descriptor_tests.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3d8e2897e1659c649e18d306c58e65ec9880a04c",
      "in_reply_to_id": 1073958344,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Evil hashes colluding!",
      "created_at": "2023-01-26T16:23:17Z",
      "updated_at": "2023-01-26T16:23:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1088068683",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088068683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088130840",
      "pull_request_review_id": 1271468680,
      "id": 1088130840,
      "node_id": "PRRC_kwDOABII585A248Y",
      "diff_hunk": "@@ -416,9 +484,21 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     {\n         CScript witnessscript(result[0].begin(), result[0].end());\n         sigdata.witness_script = witnessscript;\n-        TxoutType subType;\n+\n+        TxoutType subType{TxoutType::NONSTANDARD};\n         solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0, sigdata) && subType != TxoutType::SCRIPTHASH && subType != TxoutType::WITNESS_V0_SCRIPTHASH && subType != TxoutType::WITNESS_V0_KEYHASH;\n+\n+        // Don't try to satisfy using Miniscript if it was a multisig as it would have already been handled by\n+        // SignStep, which appends partial signatures to the witness stack and we must not temper with to keep\n+        // compatibility with the extractor relying on this behaviour to combine witnesses.\n+        if (!solved && subType != TxoutType::MULTISIG) {",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "6503ece5fda960cbfd8cfa76d7891f7cd0faa5a8",
      "in_reply_to_id": 1080534576,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, it is equivalent. I've made the change and updated the comment accordingly. Curious why you found `result.clear()` to be slightly-concerning though? It's what we do at the beginning of every `SignStep()` (and the Miniscript satisfier is kind of a more modern `SignStep()`).",
      "created_at": "2023-01-26T17:18:28Z",
      "updated_at": "2023-01-26T17:18:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1088130840",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088130840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 494,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088131573",
      "pull_request_review_id": 1271469794,
      "id": 1088131573,
      "node_id": "PRRC_kwDOABII585A25H1",
      "diff_hunk": "@@ -842,6 +1079,47 @@ struct Node {\n         });\n     }\n \n+    //! Determine whether a Miniscript node is satisfiable. fn(node) will be invoked for all\n+    //! key, time, and hashing nodes, and should return their satisfiability.\n+    template<typename F>\n+    bool IsSatisfiable(F fn) const\n+    {\n+        // TreeEval() doesn't support bool as NodeType, so use int instead.\n+        return TreeEval<int>([&fn](const Node& node, Span<int> subs) {\n+            switch (node.fragment) {\n+                case Fragment::JUST_0:\n+                    return false;\n+                case Fragment::JUST_1:\n+                    return true;\n+                case Fragment::PK_K:\n+                case Fragment::PK_H:\n+                case Fragment::MULTI:\n+                case Fragment::AFTER:\n+                case Fragment::OLDER:\n+                case Fragment::HASH256:\n+                case Fragment::HASH160:\n+                case Fragment::SHA256:\n+                case Fragment::RIPEMD160:\n+                    return bool{fn(node)};\n+                case Fragment::ANDOR:\n+                    return (subs[0] && subs[1]) || subs[2];\n+                case Fragment::AND_V:\n+                case Fragment::AND_B:\n+                    return subs[0] && subs[1];\n+                case Fragment::OR_B:\n+                case Fragment::OR_C:\n+                case Fragment::OR_D:\n+                case Fragment::OR_I:\n+                    return subs[0] || subs[1];\n+                case Fragment::THRESH:\n+                    return std::count(subs.begin(), subs.end(), true) >= node.k;\n+                default: // wrappers\n+                    assert(subs.size() == 1);\n+                    return !!subs[0];",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 298,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "3bedfb5b13e863508cb9b0d44fa03cc991151927",
      "in_reply_to_id": 923792873,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added `-> bool` to the lambda definition as suggested.",
      "created_at": "2023-01-26T17:19:13Z",
      "updated_at": "2023-01-26T17:19:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1088131573",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088131573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088226950",
      "pull_request_review_id": 1271609688,
      "id": 1088226950,
      "node_id": "PRRC_kwDOABII585A3QaG",
      "diff_hunk": "@@ -416,9 +484,21 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     {\n         CScript witnessscript(result[0].begin(), result[0].end());\n         sigdata.witness_script = witnessscript;\n-        TxoutType subType;\n+\n+        TxoutType subType{TxoutType::NONSTANDARD};\n         solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0, sigdata) && subType != TxoutType::SCRIPTHASH && subType != TxoutType::WITNESS_V0_SCRIPTHASH && subType != TxoutType::WITNESS_V0_KEYHASH;\n+\n+        // Don't try to satisfy using Miniscript if it was a multisig as it would have already been handled by\n+        // SignStep, which appends partial signatures to the witness stack and we must not temper with to keep\n+        // compatibility with the extractor relying on this behaviour to combine witnesses.\n+        if (!solved && subType != TxoutType::MULTISIG) {",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "6503ece5fda960cbfd8cfa76d7891f7cd0faa5a8",
      "in_reply_to_id": 1080534576,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My intuitive reading was just that the old code effectively says \"unless doing multisig, just wipe whatever we have as partial solving data and start over using miniscript logic\", which may make someone wonder if truly nothing except multisig will have some important output we shouldn't delete.\r\n\r\nThe code I suggested instead conveys \"only try miniscript if we don't already have any signing output\" which doesn't require the reader to know that only multisig actually produces non-final partial solving data.",
      "created_at": "2023-01-26T18:55:49Z",
      "updated_at": "2023-01-26T18:55:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1088226950",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088226950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 494,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088228910",
      "pull_request_review_id": 1271611565,
      "id": 1088228910,
      "node_id": "PRRC_kwDOABII585A3Q4u",
      "diff_hunk": "@@ -416,9 +484,21 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     {\n         CScript witnessscript(result[0].begin(), result[0].end());\n         sigdata.witness_script = witnessscript;\n-        TxoutType subType;\n+\n+        TxoutType subType{TxoutType::NONSTANDARD};\n         solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0, sigdata) && subType != TxoutType::SCRIPTHASH && subType != TxoutType::WITNESS_V0_SCRIPTHASH && subType != TxoutType::WITNESS_V0_KEYHASH;\n+\n+        // Don't try to satisfy using Miniscript if it was a multisig as it would have already been handled by\n+        // SignStep, which appends partial signatures to the witness stack and we must not temper with to keep\n+        // compatibility with the extractor relying on this behaviour to combine witnesses.\n+        if (!solved && subType != TxoutType::MULTISIG) {",
      "path": "src/script/sign.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "6503ece5fda960cbfd8cfa76d7891f7cd0faa5a8",
      "in_reply_to_id": 1080534576,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense.",
      "created_at": "2023-01-26T18:57:18Z",
      "updated_at": "2023-01-26T18:57:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1088228910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088228910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 494,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1097609192",
      "pull_request_review_id": 1285541393,
      "id": 1097609192,
      "node_id": "PRRC_kwDOABII585BbC_o",
      "diff_hunk": "@@ -20,6 +20,39 @@\n     \"or_i(and_b(pk(029ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0),a:and_b(pk(025f05815e3a1a8a83bfbb03ce016c9a2ee31066b98f567f6227df1d76ec4bd143),a:and_b(pk(025625f41e4a065efc06d5019cbbd56fe8c07595af1231e7cbc03fafb87ebb71ec),a:and_b(pk(02a27c8b850a00f67da3499b60562673dcf5fdfb82b7e17652a7ac54416812aefd),s:pk(03e618ec5f384d6e19ca9ebdb8e2119e5bef978285076828ce054e55c4daf473e2))))),and_v(v:thresh(2,pkh(tpubD6NzVbkrYhZ4YK67cd5fDe4fBVmGB2waTDrAt1q4ey9HPq9veHjWkw3VpbaCHCcWozjkhgAkWpFrxuPMUrmXVrLHMfEJ9auoZA6AS1g3grC/*),a:pkh(033841045a531e1adf9910a6ec279589a90b3b8a904ee64ffd692bd08a8996c1aa),a:pkh(02aebf2d10b040eb936a6f02f44ee82f8b34f5c1ccb20ff3949c2b28206b7c1068)),older(4209713)))\",\n ]\n \n+MINISCRIPTS_PRIV = [\n+    # One of two keys, of which one private key is known\n+    {\n+        \"ms\": \"or_i(pk(tprv8ZgxMBicQKsPerQj6m35no46amfKQdjY7AhLnmatHYXs8S4MTgeZYkWAn4edSGwwL3vkSiiGqSZQrmy5D3P5gBoqgvYP2fCUpBwbKTMTAkL/*),pk(tpubD6NzVbkrYhZ4YPAbyf6urxqqnmJF79PzQtyERAmvkSVS9fweCTjxjDh22Z5St9fGb1a5DUCv8G27nYupKP1Ctr1pkamJossoetzws1moNRn/*))\",\n+        \"sequence\": None,\n+        \"locktime\": None,\n+    },\n+    # A more complex policy, that can't be satisfied through the first branch (need for a preimage)",
      "path": "test/functional/wallet_miniscript.py",
      "position": 56,
      "original_position": 11,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "6f781a0be869aefbe31e48c44fdf9ac0e6238fb3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can this link an open issue describing what exactly is left to be done to support it?",
      "created_at": "2023-02-06T16:18:22Z",
      "updated_at": "2023-02-06T17:54:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1097609192",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1097609192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1097632933",
      "pull_request_review_id": 1285541393,
      "id": 1097632933,
      "node_id": "PRRC_kwDOABII585BbIyl",
      "diff_hunk": "@@ -20,6 +20,39 @@\n     \"or_i(and_b(pk(029ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0),a:and_b(pk(025f05815e3a1a8a83bfbb03ce016c9a2ee31066b98f567f6227df1d76ec4bd143),a:and_b(pk(025625f41e4a065efc06d5019cbbd56fe8c07595af1231e7cbc03fafb87ebb71ec),a:and_b(pk(02a27c8b850a00f67da3499b60562673dcf5fdfb82b7e17652a7ac54416812aefd),s:pk(03e618ec5f384d6e19ca9ebdb8e2119e5bef978285076828ce054e55c4daf473e2))))),and_v(v:thresh(2,pkh(tpubD6NzVbkrYhZ4YK67cd5fDe4fBVmGB2waTDrAt1q4ey9HPq9veHjWkw3VpbaCHCcWozjkhgAkWpFrxuPMUrmXVrLHMfEJ9auoZA6AS1g3grC/*),a:pkh(033841045a531e1adf9910a6ec279589a90b3b8a904ee64ffd692bd08a8996c1aa),a:pkh(02aebf2d10b040eb936a6f02f44ee82f8b34f5c1ccb20ff3949c2b28206b7c1068)),older(4209713)))\",\n ]\n \n+MINISCRIPTS_PRIV = [\n+    # One of two keys, of which one private key is known\n+    {\n+        \"ms\": \"or_i(pk(tprv8ZgxMBicQKsPerQj6m35no46amfKQdjY7AhLnmatHYXs8S4MTgeZYkWAn4edSGwwL3vkSiiGqSZQrmy5D3P5gBoqgvYP2fCUpBwbKTMTAkL/*),pk(tpubD6NzVbkrYhZ4YPAbyf6urxqqnmJF79PzQtyERAmvkSVS9fweCTjxjDh22Z5St9fGb1a5DUCv8G27nYupKP1Ctr1pkamJossoetzws1moNRn/*))\",",
      "path": "test/functional/wallet_miniscript.py",
      "position": null,
      "original_position": 7,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "6f781a0be869aefbe31e48c44fdf9ac0e6238fb3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe have lists with all the tprv/tpub/pk and insert them directly into the strings? Could make these easier to read and easier to write more in the future with less copy/paste/accidental key publication\r\n\r\ne.g. I wanted to add the liquid style backoff key examples\r\n\r\n```\r\ntprv1 = \"tprv8ZgxMBicQKsPerQj6m35no46amfKQdjY7AhLnmatHYXs8S4MTgeZYkWAn4edSGwwL3vkSiiGqSZQrmy5D3P5gBoqgvYP2fCUpBwbKTMTAkL/*\"\r\ntprv2 = \"tprv8ZgxMBicQKsPd3cbrKjE5GKKJLDEidhtzSSmPVtSPyoHQGL2LZw49yt9foZsN9BeiC5VqRaESUSDV2PS9w7zAVBSK6EQH3CZW9sMKxSKDwD/*\"\r\ntpubs = [\"tpubD6NzVbkrYhZ4YPAbyf6urxqqnmJF79PzQtyERAmvkSVS9fweCTjxjDh22Z5St9fGb1a5DUCv8G27nYupKP1Ctr1pkamJossoetzws1moNRn\",\r\n    \"tpubD6NzVbkrYhZ4YMQC15JS7QcrsAyfGrGiykweqMmPxTkEVScu7vCZLNpPXW1XphHwzsgmqdHWDQAfucbM72EEB1ZEyfgZxYvkZjYVXx1xS9p\",\r\n    \"tpubD6NzVbkrYhZ4YU9vM1s53UhD75UyJatx8EMzMZ3VUjR2FciNfLLkAw6a4pWACChzobTseNqdWk4G7ZdBqRDLtLSACKykTScmqibb1ZrCvJu\",\r\n    \"tpubD6NzVbkrYhZ4XRMcMFMMFvzVt6jaDAtjZhD7JLwdPdMm9xa76DnxYYP7w9TZGJDVFkek3ArwVsuacheqqPog8TH5iBCX1wuig8PLXim4n9a\",\r\n    \"tpubD6NzVbkrYhZ4WsqRzDmkL82SWcu42JzUvKWzrJHQ8EC2vEHRHkXj1De93sD3biLrKd8XGnamXURGjMbYavbszVDXpjXV2cGUERucLJkE6cy\"]\r\npk = \"02aebf2d10b040eb936a6f02f44ee82f8b34f5c1ccb20ff3949c2b28206b7c1068\"\r\n\r\nMINISCRIPTS_PRIV = [\r\n    # Liquid-like federated pegin with emergency recovery privkeys\r\n    {\r\n        \"ms\": f\"or_i(and_b(pk({tpubs[0]}),a:and_b(pk({tpubs[1]}),a:and_b(pk({tpubs[2]}),a:and_b(pk({tpubs[3]}),s:pk({pk}))))),and_v(v:thresh(2,pkh({tprv1}),a:pkh({tprv2}),a:pkh({tpubs[4]})),older(420)))\",\r\n        \"sequence\": 420,\r\n        \"locktime\": None,\r\n    },\r\n```",
      "created_at": "2023-02-06T16:38:04Z",
      "updated_at": "2023-02-06T17:54:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1097632933",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1097632933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1103625462",
      "pull_request_review_id": 1294529799,
      "id": 1103625462,
      "node_id": "PRRC_kwDOABII585Bx_z2",
      "diff_hunk": "@@ -20,6 +20,39 @@\n     \"or_i(and_b(pk(029ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0),a:and_b(pk(025f05815e3a1a8a83bfbb03ce016c9a2ee31066b98f567f6227df1d76ec4bd143),a:and_b(pk(025625f41e4a065efc06d5019cbbd56fe8c07595af1231e7cbc03fafb87ebb71ec),a:and_b(pk(02a27c8b850a00f67da3499b60562673dcf5fdfb82b7e17652a7ac54416812aefd),s:pk(03e618ec5f384d6e19ca9ebdb8e2119e5bef978285076828ce054e55c4daf473e2))))),and_v(v:thresh(2,pkh(tpubD6NzVbkrYhZ4YK67cd5fDe4fBVmGB2waTDrAt1q4ey9HPq9veHjWkw3VpbaCHCcWozjkhgAkWpFrxuPMUrmXVrLHMfEJ9auoZA6AS1g3grC/*),a:pkh(033841045a531e1adf9910a6ec279589a90b3b8a904ee64ffd692bd08a8996c1aa),a:pkh(02aebf2d10b040eb936a6f02f44ee82f8b34f5c1ccb20ff3949c2b28206b7c1068)),older(4209713)))\",\n ]\n \n+MINISCRIPTS_PRIV = [\n+    # One of two keys, of which one private key is known\n+    {\n+        \"ms\": \"or_i(pk(tprv8ZgxMBicQKsPerQj6m35no46amfKQdjY7AhLnmatHYXs8S4MTgeZYkWAn4edSGwwL3vkSiiGqSZQrmy5D3P5gBoqgvYP2fCUpBwbKTMTAkL/*),pk(tpubD6NzVbkrYhZ4YPAbyf6urxqqnmJF79PzQtyERAmvkSVS9fweCTjxjDh22Z5St9fGb1a5DUCv8G27nYupKP1Ctr1pkamJossoetzws1moNRn/*))\",\n+        \"sequence\": None,\n+        \"locktime\": None,\n+    },\n+    # A more complex policy, that can't be satisfied through the first branch (need for a preimage)",
      "path": "test/functional/wallet_miniscript.py",
      "position": 56,
      "original_position": 11,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "6f781a0be869aefbe31e48c44fdf9ac0e6238fb3",
      "in_reply_to_id": 1097609192,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Initially i wanted to tackle all the PSBT integration in a followup (see https://github.com/bitcoin/bitcoin/pull/24149#issuecomment-1046944178). This comment made me (finally) have a look at what should be done. I think `analyzepsbt`, `utxoupdatepsbt` would need to be updated to support hash preimages. Maybe `walletprocesspsbt` too, but i'm not sure yet (for instance hash preimages could be imported separately and kept in a signing provider?). However i think we should first make those commands not rely on a dry run of the signer anymore (Similarly to what i do in https://github.com/bitcoin/bitcoin/pull/26567 with the input size estimation).\r\n\r\nGiven this followup would be blocked by preparatory work and since the the patch for supporting the preimages provided directly in the PSBT by external software is trivial (basically @achow101's patch from above https://github.com/bitcoin/bitcoin/pull/24149#pullrequestreview-882103227), i added a commit that implements it and tests satisfying using a path with a preimage check.",
      "created_at": "2023-02-11T13:16:06Z",
      "updated_at": "2023-02-11T13:16:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1103625462",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1103625462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1103625470",
      "pull_request_review_id": 1294529810,
      "id": 1103625470,
      "node_id": "PRRC_kwDOABII585Bx_z-",
      "diff_hunk": "@@ -20,6 +20,39 @@\n     \"or_i(and_b(pk(029ffbe722b147f3035c87cb1c60b9a5947dd49c774cc31e94773478711a929ac0),a:and_b(pk(025f05815e3a1a8a83bfbb03ce016c9a2ee31066b98f567f6227df1d76ec4bd143),a:and_b(pk(025625f41e4a065efc06d5019cbbd56fe8c07595af1231e7cbc03fafb87ebb71ec),a:and_b(pk(02a27c8b850a00f67da3499b60562673dcf5fdfb82b7e17652a7ac54416812aefd),s:pk(03e618ec5f384d6e19ca9ebdb8e2119e5bef978285076828ce054e55c4daf473e2))))),and_v(v:thresh(2,pkh(tpubD6NzVbkrYhZ4YK67cd5fDe4fBVmGB2waTDrAt1q4ey9HPq9veHjWkw3VpbaCHCcWozjkhgAkWpFrxuPMUrmXVrLHMfEJ9auoZA6AS1g3grC/*),a:pkh(033841045a531e1adf9910a6ec279589a90b3b8a904ee64ffd692bd08a8996c1aa),a:pkh(02aebf2d10b040eb936a6f02f44ee82f8b34f5c1ccb20ff3949c2b28206b7c1068)),older(4209713)))\",\n ]\n \n+MINISCRIPTS_PRIV = [\n+    # One of two keys, of which one private key is known\n+    {\n+        \"ms\": \"or_i(pk(tprv8ZgxMBicQKsPerQj6m35no46amfKQdjY7AhLnmatHYXs8S4MTgeZYkWAn4edSGwwL3vkSiiGqSZQrmy5D3P5gBoqgvYP2fCUpBwbKTMTAkL/*),pk(tpubD6NzVbkrYhZ4YPAbyf6urxqqnmJF79PzQtyERAmvkSVS9fweCTjxjDh22Z5St9fGb1a5DUCv8G27nYupKP1Ctr1pkamJossoetzws1moNRn/*))\",",
      "path": "test/functional/wallet_miniscript.py",
      "position": null,
      "original_position": 7,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "6f781a0be869aefbe31e48c44fdf9ac0e6238fb3",
      "in_reply_to_id": 1097632933,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. I added a refactoring commit to update the watchonly descriptors, and then use the keys list in the signing test too.",
      "created_at": "2023-02-11T13:16:09Z",
      "updated_at": "2023-02-11T13:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1103625470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1103625470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1104552550",
      "pull_request_review_id": 1295765939,
      "id": 1104552550,
      "node_id": "PRRC_kwDOABII585B1iJm",
      "diff_hunk": "@@ -266,6 +286,7 @@ def run_test(self):\n                 ms[\"locktime\"],\n                 ms[\"sigs_count\"],\n                 ms[\"stack_size\"],\n+                ms.get(\"sha256_preimages\"),",
      "path": "test/functional/wallet_miniscript.py",
      "position": 242,
      "original_position": 54,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "36478ac00ef0a82a82052032e68d513a92ea38b8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "comment above should be updated I think:\r\n\r\n\"# Test we can sign most Miniscript (all but ones requiring preimages, for now)\"",
      "created_at": "2023-02-13T14:34:23Z",
      "updated_at": "2023-02-13T14:36:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1104552550",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1104552550"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 289,
      "original_line": 289,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1104560393",
      "pull_request_review_id": 1295777966,
      "id": 1104560393,
      "node_id": "PRRC_kwDOABII585B1kEJ",
      "diff_hunk": "@@ -266,6 +286,7 @@ def run_test(self):\n                 ms[\"locktime\"],\n                 ms[\"sigs_count\"],\n                 ms[\"stack_size\"],\n+                ms.get(\"sha256_preimages\"),",
      "path": "test/functional/wallet_miniscript.py",
      "position": 242,
      "original_position": 54,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "36478ac00ef0a82a82052032e68d513a92ea38b8",
      "in_reply_to_id": 1104552550,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, updated.",
      "created_at": "2023-02-13T14:40:09Z",
      "updated_at": "2023-02-13T14:40:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1104560393",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1104560393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 289,
      "original_line": 289,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1105008572",
      "pull_request_review_id": 1296428327,
      "id": 1105008572,
      "node_id": "PRRC_kwDOABII585B3Re8",
      "diff_hunk": "@@ -108,7 +109,8 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n             tx.vin[j].prevout.n = j;\n             tx.vin[j].prevout.hash = txPrev->GetHash();\n         }\n-        BOOST_CHECK(SignSignature(keystore, *txPrev, tx, 0, SIGHASH_ALL));\n+        SignatureData empty;\n+        BOOST_CHECK(SignSignature(keystore, *txPrev, tx, 0, SIGHASH_ALL, empty));",
      "path": "src/test/orphanage_tests.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "560e62b1e221832ae99ff8684559a7b8f9df84a7",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Given the need for all these dummy `SignatureData` objects that need to be created in calls, would it make sense to add another overload of `SignSignature` that has no `SignaturaData&` argument?",
      "created_at": "2023-02-13T20:58:06Z",
      "updated_at": "2023-02-13T21:06:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1105008572",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1105008572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 113,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1105320169",
      "pull_request_review_id": 1296869578,
      "id": 1105320169,
      "node_id": "PRRC_kwDOABII585B4djp",
      "diff_hunk": "@@ -108,7 +109,8 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n             tx.vin[j].prevout.n = j;\n             tx.vin[j].prevout.hash = txPrev->GetHash();\n         }\n-        BOOST_CHECK(SignSignature(keystore, *txPrev, tx, 0, SIGHASH_ALL));\n+        SignatureData empty;\n+        BOOST_CHECK(SignSignature(keystore, *txPrev, tx, 0, SIGHASH_ALL, empty));",
      "path": "src/test/orphanage_tests.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "560e62b1e221832ae99ff8684559a7b8f9df84a7",
      "in_reply_to_id": 1105008572,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will do if i need to retouch.",
      "created_at": "2023-02-14T05:47:30Z",
      "updated_at": "2023-02-14T05:47:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1105320169",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1105320169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 113,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1109650266",
      "pull_request_review_id": 1303201964,
      "id": 1109650266,
      "node_id": "PRRC_kwDOABII585CI-ta",
      "diff_hunk": "@@ -130,6 +174,732 @@ struct ScriptParserContext {\n     }\n } SCRIPT_PARSER_CONTEXT;\n \n+//! Context to produce a satisfaction for a Miniscript node using the pre-computed data.\n+struct SatisfierContext: ParserContext {\n+    // Timelock challenges satisfaction. Make the value (deterministically) vary to explore different\n+    // paths.\n+    bool CheckAfter(uint32_t value) const { return value % 2; }\n+    bool CheckOlder(uint32_t value) const { return value % 2; }\n+\n+    // Signature challenges fulfilled with a dummy signature, if it was one of our dummy keys.\n+    miniscript::Availability Sign(const CPubKey& key, std::vector<unsigned char>& sig) const {\n+        const auto it = TEST_DATA.dummy_sigs.find(key);\n+        if (it == TEST_DATA.dummy_sigs.end()) return miniscript::Availability::NO;\n+        if (it->second.second) {\n+            // Key is \"available\"\n+            sig = it->second.first;\n+            return miniscript::Availability::YES;\n+        } else {\n+            return miniscript::Availability::NO;\n+        }\n+    }\n+\n+    //! Lookup generalization for all the hash satisfactions below\n+    miniscript::Availability LookupHash(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage,\n+                                        const std::map<std::vector<unsigned char>, std::vector<unsigned char>>& map) const\n+    {\n+        const auto it = map.find(hash);\n+        if (it == map.end()) return miniscript::Availability::NO;\n+        preimage = it->second;\n+        return miniscript::Availability::YES;\n+    }\n+    miniscript::Availability SatSHA256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return LookupHash(hash, preimage, TEST_DATA.sha256_preimages);\n+    }\n+    miniscript::Availability SatRIPEMD160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return LookupHash(hash, preimage, TEST_DATA.ripemd160_preimages);\n+    }\n+    miniscript::Availability SatHASH256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return LookupHash(hash, preimage, TEST_DATA.hash256_preimages);\n+    }\n+    miniscript::Availability SatHASH160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return LookupHash(hash, preimage, TEST_DATA.hash160_preimages);\n+    }\n+} SATISFIER_CTX;\n+\n+//! Context to check a satisfaction against the pre-computed data.\n+struct CheckerContext: BaseSignatureChecker {\n+    TestData *test_data;\n+\n+    // Signature checker methods. Checks the right dummy signature is used.\n+    bool CheckECDSASignature(const std::vector<unsigned char>& sig, const std::vector<unsigned char>& vchPubKey,\n+                             const CScript& scriptCode, SigVersion sigversion) const override\n+    {\n+        const CPubKey key{vchPubKey};\n+        const auto it = TEST_DATA.dummy_sigs.find(key);\n+        if (it == TEST_DATA.dummy_sigs.end()) return false;\n+        return it->second.first == sig;\n+    }\n+    bool CheckLockTime(const CScriptNum& nLockTime) const override { return nLockTime.GetInt64() & 1; }\n+    bool CheckSequence(const CScriptNum& nSequence) const override { return nSequence.GetInt64() & 1; }\n+} CHECKER_CTX;\n+\n+//! Context to check for duplicates when instancing a Node.\n+struct KeyComparator {\n+    bool KeyCompare(const CPubKey& a, const CPubKey& b) const {\n+        return a < b;\n+    }\n+} KEY_COMP;\n+\n+// A dummy scriptsig to pass to VerifyScript (we always use Segwit v0).\n+const CScript DUMMY_SCRIPTSIG;\n+\n+using Fragment = miniscript::Fragment;\n+using NodeRef = miniscript::NodeRef<CPubKey>;\n+using Node = miniscript::Node<CPubKey>;\n+using Type = miniscript::Type;\n+// https://github.com/llvm/llvm-project/issues/53444\n+// NOLINTNEXTLINE(misc-unused-using-decls)\n+using miniscript::operator\"\" _mst;\n+\n+//! Construct a miniscript node as a shared_ptr.\n+template<typename... Args> NodeRef MakeNodeRef(Args&&... args) { return miniscript::MakeNodeRef<CPubKey>(KEY_COMP, std::forward<Args>(args)...); }",
      "path": "src/test/fuzz/miniscript.cpp",
      "position": 167,
      "original_position": 167,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm looks like this checks for duplicate keys on every single node created whereas we could just check that on the top-level node in `GenNode()`?",
      "created_at": "2023-02-17T11:14:25Z",
      "updated_at": "2023-02-17T11:14:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1109650266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1109650266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 256,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1109682908",
      "pull_request_review_id": 1303261603,
      "id": 1109682908,
      "node_id": "PRRC_kwDOABII585CJGrc",
      "diff_hunk": "@@ -130,6 +174,732 @@ struct ScriptParserContext {\n     }\n } SCRIPT_PARSER_CONTEXT;\n \n+//! Context to produce a satisfaction for a Miniscript node using the pre-computed data.\n+struct SatisfierContext: ParserContext {\n+    // Timelock challenges satisfaction. Make the value (deterministically) vary to explore different\n+    // paths.\n+    bool CheckAfter(uint32_t value) const { return value % 2; }\n+    bool CheckOlder(uint32_t value) const { return value % 2; }\n+\n+    // Signature challenges fulfilled with a dummy signature, if it was one of our dummy keys.\n+    miniscript::Availability Sign(const CPubKey& key, std::vector<unsigned char>& sig) const {\n+        const auto it = TEST_DATA.dummy_sigs.find(key);\n+        if (it == TEST_DATA.dummy_sigs.end()) return miniscript::Availability::NO;\n+        if (it->second.second) {\n+            // Key is \"available\"\n+            sig = it->second.first;\n+            return miniscript::Availability::YES;\n+        } else {\n+            return miniscript::Availability::NO;\n+        }\n+    }\n+\n+    //! Lookup generalization for all the hash satisfactions below\n+    miniscript::Availability LookupHash(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage,\n+                                        const std::map<std::vector<unsigned char>, std::vector<unsigned char>>& map) const\n+    {\n+        const auto it = map.find(hash);\n+        if (it == map.end()) return miniscript::Availability::NO;\n+        preimage = it->second;\n+        return miniscript::Availability::YES;\n+    }\n+    miniscript::Availability SatSHA256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return LookupHash(hash, preimage, TEST_DATA.sha256_preimages);\n+    }\n+    miniscript::Availability SatRIPEMD160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return LookupHash(hash, preimage, TEST_DATA.ripemd160_preimages);\n+    }\n+    miniscript::Availability SatHASH256(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return LookupHash(hash, preimage, TEST_DATA.hash256_preimages);\n+    }\n+    miniscript::Availability SatHASH160(const std::vector<unsigned char>& hash, std::vector<unsigned char>& preimage) const {\n+        return LookupHash(hash, preimage, TEST_DATA.hash160_preimages);\n+    }\n+} SATISFIER_CTX;\n+\n+//! Context to check a satisfaction against the pre-computed data.\n+struct CheckerContext: BaseSignatureChecker {\n+    TestData *test_data;\n+\n+    // Signature checker methods. Checks the right dummy signature is used.\n+    bool CheckECDSASignature(const std::vector<unsigned char>& sig, const std::vector<unsigned char>& vchPubKey,\n+                             const CScript& scriptCode, SigVersion sigversion) const override\n+    {\n+        const CPubKey key{vchPubKey};\n+        const auto it = TEST_DATA.dummy_sigs.find(key);\n+        if (it == TEST_DATA.dummy_sigs.end()) return false;\n+        return it->second.first == sig;\n+    }\n+    bool CheckLockTime(const CScriptNum& nLockTime) const override { return nLockTime.GetInt64() & 1; }\n+    bool CheckSequence(const CScriptNum& nSequence) const override { return nSequence.GetInt64() & 1; }\n+} CHECKER_CTX;\n+\n+//! Context to check for duplicates when instancing a Node.\n+struct KeyComparator {\n+    bool KeyCompare(const CPubKey& a, const CPubKey& b) const {\n+        return a < b;\n+    }\n+} KEY_COMP;\n+\n+// A dummy scriptsig to pass to VerifyScript (we always use Segwit v0).\n+const CScript DUMMY_SCRIPTSIG;\n+\n+using Fragment = miniscript::Fragment;\n+using NodeRef = miniscript::NodeRef<CPubKey>;\n+using Node = miniscript::Node<CPubKey>;\n+using Type = miniscript::Type;\n+// https://github.com/llvm/llvm-project/issues/53444\n+// NOLINTNEXTLINE(misc-unused-using-decls)\n+using miniscript::operator\"\" _mst;\n+\n+//! Construct a miniscript node as a shared_ptr.\n+template<typename... Args> NodeRef MakeNodeRef(Args&&... args) { return miniscript::MakeNodeRef<CPubKey>(KEY_COMP, std::forward<Args>(args)...); }",
      "path": "src/test/fuzz/miniscript.cpp",
      "position": 167,
      "original_position": 167,
      "commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "original_commit_id": "6c7a17a8e0eec377f83ed1399f003ae70b898270",
      "in_reply_to_id": 1109650266,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/27117",
      "created_at": "2023-02-17T11:43:08Z",
      "updated_at": "2023-02-17T11:43:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24149#discussion_r1109682908",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1109682908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24149"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 256,
      "original_line": 256,
      "side": "RIGHT"
    }
  ]
}