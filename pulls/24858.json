{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858",
    "id": 910455666,
    "node_id": "PR_kwDOABII5842RHNy",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/24858",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/24858.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/24858.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/bcb0cacac28e98a39dc856c574a0872fe17059e9",
    "number": 24858,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "incorrect blk file size calculation during reindex results in recoverable blk file corruption",
    "user": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixes #21379.\r\n\r\nThe blocks/blk?????.dat files are mutated and become increasingly malformed, or corrupt, as a result of running the re-indexing process.\r\nThe mutations occur after the re-indexing process has finished, as new blocks are appended, but are a result of a re-indexing process miscalculation that lingers in the block manager's `m_blockfile_info` `nSize` data until node restart.\r\nThese additions to the blk files are non-fatal, but also not desirable.\r\nThat is, this is a form of data corruption that the reading code is lenient enough to process (it skips the extra bytes), but it adds some scary looking log messages as it encounters them.\r\n\r\nThe summary of the problem is that the re-index process double counts the size of the serialization header (magic message start bytes [4 bytes] + length [4 bytes] = 8 bytes) while calculating the blk data file size (both values already account for the serialization header's size, hence why it is over accounted).\r\n\r\nThis bug manifests itself in a few different ways, after re-indexing, when a new block from a peer is processed:\r\n1. If the new block will not fit into the last blk file processed while re-indexing, while remaining under the 128MiB limit, then the blk file is flushed to disk and truncated to a size that is 8 greater than it should be. The truncation adds zero bytes (see `FlatFileSeq::Flush` and `TruncateFile`).\r\n1. If the last blk file processed while re-indexing has logical space for the new block under the 128 MiB limit:\r\n    1. If the blk file was not already large enough to hold the new block, then the zeros are, in effect, added by `fseek` when the file is opened for writing. Eight zero bytes are added to the end of the last blk file just before the new block is written. This happens because the write offset is 8 too great due to the miscalculation. The result is 8 zero bytes between the end of the last block and the beginning of the next block's magic + length + block.\r\n    1. If the blk file was already large enough to hold the new block, then the current existing file contents remain in the 8 byte gap between the end of the last block and the beginning of the next block's magic + length + block. Commonly, when this occcurs, it is due to the blk file containing blocks that are not connected to the block tree during reindex and are thus left behind by the reindex process and later overwritten when new blocks are added. The orphaned blocks can be valid blocks, but due to the nature of concurrent block download, the parent may not have been retrieved and written by the time the node was previously shutdown.",
    "labels": [
      {
        "id": 219890555,
        "node_id": "MDU6TGFiZWwyMTk4OTA1NTU=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Block%20storage",
        "name": "Block storage",
        "color": "000000",
        "default": false
      }
    ],
    "created_at": "2022-04-14T23:40:39Z",
    "updated_at": "2022-10-14T12:56:36Z",
    "closed_at": "2022-10-12T18:14:46Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-10-12T18:14:46Z",
    "merge_commit_sha": "cc12b8947b6d3f6c4b9cd4d147543dce693c6758",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "mruddy:issue_21379",
      "ref": "issue_21379",
      "sha": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 26165777,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNjE2NTc3Nw==",
        "name": "bitcoin",
        "full_name": "mruddy/bitcoin",
        "owner": {
          "login": "mruddy",
          "id": 6440430,
          "node_id": "MDQ6VXNlcjY0NDA0MzA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mruddy",
          "html_url": "https://github.com/mruddy",
          "followers_url": "https://api.github.com/users/mruddy/followers",
          "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
          "organizations_url": "https://api.github.com/users/mruddy/orgs",
          "repos_url": "https://api.github.com/users/mruddy/repos",
          "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/mruddy/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/mruddy/bitcoin",
        "fork": true,
        "url": "https://api.github.com/repos/mruddy/bitcoin",
        "archive_url": "https://api.github.com/repos/mruddy/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/mruddy/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/mruddy/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/mruddy/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/mruddy/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/mruddy/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/mruddy/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/mruddy/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/mruddy/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/mruddy/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/mruddy/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/mruddy/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/mruddy/bitcoin/events",
        "forks_url": "https://api.github.com/repos/mruddy/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/mruddy/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/mruddy/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/mruddy/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/mruddy/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/mruddy/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/mruddy/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/mruddy/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/mruddy/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/mruddy/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/mruddy/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/mruddy/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/mruddy/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/mruddy/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/mruddy/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/mruddy/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:mruddy/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/mruddy/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/mruddy/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/mruddy/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/mruddy/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/mruddy/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/mruddy/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/mruddy/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/mruddy/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/mruddy/bitcoin/hooks",
        "svn_url": "https://github.com/mruddy/bitcoin",
        "homepage": "",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 230316,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-24T09:42:05Z",
        "created_at": "2014-11-04T11:20:28Z",
        "updated_at": "2022-12-07T18:05:32Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "29d540b7ada890dd588c4825d40c27c5e6f20061",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 68,
    "deletions": 5,
    "changed_files": 5,
    "commits": 1,
    "review_comments": 42,
    "comments": 19
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 6437920269,
      "node_id": "HRFPE_lADOABII585H1H8VzwAAAAF_ut4N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6437920269",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-15T00:05:26Z"
    },
    {
      "event": "labeled",
      "id": 6438092237,
      "node_id": "LE_lADOABII585H1H8VzwAAAAF_vX3N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6438092237",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-15T01:00:49Z",
      "label": {
        "name": "Block storage",
        "color": "000000"
      }
    },
    {
      "event": "labeled",
      "id": 6438092243,
      "node_id": "LE_lADOABII585H1H8VzwAAAAF_vX3T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6438092243",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-15T01:00:49Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 6438092252,
      "node_id": "LE_lADOABII585H1H8VzwAAAAF_vX3c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6438092252",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-15T01:00:49Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 1099788622,
      "node_id": "IC_kwDOABII585BjXFO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1099788622",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-15T02:16:09Z",
      "updated_at": "2022-04-15T02:21:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "An easy way to reproduce this issue is to:\r\n1. setup a new temp node data directory containing only the `blocks` directory that contains only one 516 byte long file, blk00000.dat\r\n    1. the blk00000.dat file contains\r\n        1. the 8 byte serialization header for the genesis block\r\n        1. the genesis block (blockhash 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f)\r\n        1. the 8 byte serialization header for block at height 2\r\n        1. the block at height 2 (blockhash 000000006a625f06636b8bb6ac7b960a8d03705d1ace08b1a19da3fdcc99ddbd)\r\n\r\n    in other words:\r\n\r\n    ```\r\n    $ cd /tmp/btc && find .\r\n    .\r\n    ./blocks\r\n    ./blocks/blk00000.dat\r\n    $ sha256sum blocks/blk00000.dat\r\n    713be71e35a2bc25481cc66b465da1e439df1c2570d065fa0aecc11eaecbea94  blocks/blk00000.dat\r\n    $ xxd -g 4 blocks/blk00000.dat\r\n    00000000: f9beb4d9 1d010000 01000000 00000000  ................\r\n    00000010: 00000000 00000000 00000000 00000000  ................\r\n    00000020: 00000000 00000000 00000000 3ba3edfd  ............;...\r\n    00000030: 7a7b12b2 7ac72c3e 67768f61 7fc81bc3  z{..z.,>gv.a....\r\n    00000040: 888a5132 3a9fb8aa 4b1e5e4a 29ab5f49  ..Q2:...K.^J)._I\r\n    00000050: ffff001d 1dac2b7c 01010000 00010000  ......+|........\r\n    00000060: 00000000 00000000 00000000 00000000  ................\r\n    00000070: 00000000 00000000 00000000 0000ffff  ................\r\n    00000080: ffff4d04 ffff001d 01044554 68652054  ..M.......EThe T\r\n    00000090: 696d6573 2030332f 4a616e2f 32303039  imes 03/Jan/2009\r\n    000000a0: 20436861 6e63656c 6c6f7220 6f6e2062   Chancellor on b\r\n    000000b0: 72696e6b 206f6620 7365636f 6e642062  rink of second b\r\n    000000c0: 61696c6f 75742066 6f722062 616e6b73  ailout for banks\r\n    000000d0: ffffffff 0100f205 2a010000 00434104  ........*....CA.\r\n    000000e0: 678afdb0 fe554827 1967f1a6 7130b710  g....UH'.g..q0..\r\n    000000f0: 5cd6a828 e03909a6 7962e0ea 1f61deb6  \\..(.9..yb...a..\r\n    00000100: 49f6bc3f 4cef38c4 f35504e5 1ec112de  I..?L.8..U......\r\n    00000110: 5c384df7 ba0b8d57 8a4c702b 6bf11d5f  \\8M....W.Lp+k.._\r\n    00000120: ac000000 00f9beb4 d9d70000 00010000  ................\r\n    00000130: 004860eb 18bf1b16 20e37e94 90fc8a42  .H`..... .~....B\r\n    00000140: 7514416f d75159ab 86688e9a 83000000  u.Ao.QY..h......\r\n    00000150: 00d5fdcc 541e25de 1c7a5add edf24858  ....T.%..zZ...HX\r\n    00000160: b8bb665c 9f36ef74 4ee42c31 6022c90f  ..f\\.6.tN.,1`\"..\r\n    00000170: 9bb0bc66 49ffff00 1d08d2bd 61010100  ...fI.......a...\r\n    00000180: 00000100 00000000 00000000 00000000  ................\r\n    00000190: 00000000 00000000 00000000 00000000  ................\r\n    000001a0: 000000ff ffffff07 04ffff00 1d010bff  ................\r\n    000001b0: ffffff01 00f2052a 01000000 43410472  .......*....CA.r\r\n    000001c0: 11a824f5 5b505228 e4c3d519 4c1fcfaa  ..$.[PR(....L...\r\n    000001d0: 15a456ab df37f9b9 d97a4040 afc073de  ..V..7...z@@..s.\r\n    000001e0: e6c89064 984f0338 5237d921 67c13e23  ...d.O.8R7.!g.>#\r\n    000001f0: 6446b417 ab79a0fc ae412ae3 316b77ac  dF...y...A*.1kw.\r\n    00000200: 00000000                             ....\r\n    ```\r\n\r\n\r\n1. start the node with the command line similar to: `bitcoin-qt -debug -datadir=/tmp/btc -reindex`\r\n1. wait for header synchronization to finish and you see this in the debug log:\r\n`UpdatedBlockTip: new block hash=00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048`\r\n1. shutdown the node\r\n\r\n\r\n\r\nWe setup like this in order to hit the case where an \"Out of order block\" is found during reindexing and it is left disconnected since it's ancestor block at height 1 (blockhash 00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048) is not present in the blk00000.dat file for the reindexing process to attach.\r\n\r\nNow, if we examine the blk00000.dat file, we can see that the corruption has occured at offset 0x125 through 0x12c. The serialization header and data for block at height 1 follow at offset 0x12d:\r\n\r\n```\r\n$ xxd -g 4 -l 524 blocks/blk00000.dat\r\n00000000: f9beb4d9 1d010000 01000000 00000000  ................\r\n00000010: 00000000 00000000 00000000 00000000  ................\r\n00000020: 00000000 00000000 00000000 3ba3edfd  ............;...\r\n00000030: 7a7b12b2 7ac72c3e 67768f61 7fc81bc3  z{..z.,>gv.a....\r\n00000040: 888a5132 3a9fb8aa 4b1e5e4a 29ab5f49  ..Q2:...K.^J)._I\r\n00000050: ffff001d 1dac2b7c 01010000 00010000  ......+|........\r\n00000060: 00000000 00000000 00000000 00000000  ................\r\n00000070: 00000000 00000000 00000000 0000ffff  ................\r\n00000080: ffff4d04 ffff001d 01044554 68652054  ..M.......EThe T\r\n00000090: 696d6573 2030332f 4a616e2f 32303039  imes 03/Jan/2009\r\n000000a0: 20436861 6e63656c 6c6f7220 6f6e2062   Chancellor on b\r\n000000b0: 72696e6b 206f6620 7365636f 6e642062  rink of second b\r\n000000c0: 61696c6f 75742066 6f722062 616e6b73  ailout for banks\r\n000000d0: ffffffff 0100f205 2a010000 00434104  ........*....CA.\r\n000000e0: 678afdb0 fe554827 1967f1a6 7130b710  g....UH'.g..q0..\r\n000000f0: 5cd6a828 e03909a6 7962e0ea 1f61deb6  \\..(.9..yb...a..\r\n00000100: 49f6bc3f 4cef38c4 f35504e5 1ec112de  I..?L.8..U......\r\n00000110: 5c384df7 ba0b8d57 8a4c702b 6bf11d5f  \\8M....W.Lp+k.._\r\n00000120: ac000000 00f9beb4 d9d70000 00f9beb4  ................      <----- offset 0x125 through 0x12c demonstrate the incorrect offset calculated by the reindexing process. those bytes are from the original data that was already in the file and were erroneously not overwritten due to the bad offset.\r\n00000130: d9d70000 00010000 006fe28c 0ab6f1b3  .........o......\r\n00000140: 72c1a6a2 46ae63f7 4f931e83 65e15a08  r...F.c.O...e.Z.\r\n00000150: 9c68d619 00000000 00982051 fd1e4ba7  .h........ Q..K.\r\n00000160: 44bbbe68 0e1fee14 677ba1a3 c3540bf7  D..h....g{...T..\r\n00000170: b1cdb606 e857233e 0e61bc66 49ffff00  .....W#>.a.fI...\r\n00000180: 1d01e362 99010100 00000100 00000000  ...b............\r\n00000190: 00000000 00000000 00000000 00000000  ................\r\n000001a0: 00000000 00000000 000000ff ffffff07  ................\r\n000001b0: 04ffff00 1d0104ff ffffff01 00f2052a  ...............*\r\n000001c0: 01000000 43410496 b538e853 519c726a  ....CA...8.SQ.rj\r\n000001d0: 2c91e61e c11600ae 1390813a 627c66fb  ,..........:b|f.\r\n000001e0: 8be7947b e63c52da 75893795 15d4e0a6  ...{.<R.u.7.....\r\n000001f0: 04f81417 81e62294 721166bf 621e73a8  ......\".r.f.b.s.\r\n00000200: 2cbf2342 c858eeac 00000000           ,.#B.X......\r\n```\r\n1. If we now restart the node with the same command line as before, `bitcoin-qt -debug -datadir=/tmp/btc -reindex` we will soon see a message in the debug.log like:\r\n`LoadExternalBlockFile: Deserialize or I/O error - ReadCompactSize(): size too large: iostream error`",
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1099788622",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "commented",
      "id": 1100000135,
      "node_id": "IC_kwDOABII585BkKuH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100000135",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-15T09:39:03Z",
      "updated_at": "2022-04-15T09:39:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "Attached here is the blk00000.dat file with sha256sum of\r\n`713be71e35a2bc25481cc66b465da1e439df1c2570d065fa0aecc11eaecbea94` used by my easy reproduction comment above https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1099788622. \r\n\r\nSimply remove the \".txt\" file extension that I had to add in order to upload it here.\r\n\r\n[blk00000.dat.txt](https://github.com/bitcoin/bitcoin/files/8495215/blk00000.dat.txt)\r\n",
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1100000135",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "reviewed",
      "id": 943752530,
      "node_id": "PRR_kwDOABII5844QIVS",
      "url": null,
      "actor": null,
      "commit_id": "2da96174b95831c374b2452657c431254fea8e53",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Concept ACK, sounds good to me, and it is also well documented.\r\n\r\nI will test it in locally with your use case described",
      "user": {
        "login": "vincenzopalazzo",
        "id": 17150045,
        "node_id": "MDQ6VXNlcjE3MTUwMDQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/17150045?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vincenzopalazzo",
        "html_url": "https://github.com/vincenzopalazzo",
        "followers_url": "https://api.github.com/users/vincenzopalazzo/followers",
        "following_url": "https://api.github.com/users/vincenzopalazzo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vincenzopalazzo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vincenzopalazzo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vincenzopalazzo/subscriptions",
        "organizations_url": "https://api.github.com/users/vincenzopalazzo/orgs",
        "repos_url": "https://api.github.com/users/vincenzopalazzo/repos",
        "events_url": "https://api.github.com/users/vincenzopalazzo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vincenzopalazzo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#pullrequestreview-943752530",
      "submitted_at": "2022-04-15T21:31:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
    },
    {
      "event": "commented",
      "id": 1101385689,
      "node_id": "IC_kwDOABII585Bpc_Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1101385689",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-18T12:54:05Z",
      "updated_at": "2022-04-18T12:54:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "noting for historical purposes that this updates a fix made by https://github.com/bitcoin/bitcoin/pull/5864 @theuni",
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1101385689",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "mentioned",
      "id": 6447833964,
      "node_id": "MEE_lADOABII585H1H8VzwAAAAGAUiNs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6447833964",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-18T12:54:06Z"
    },
    {
      "event": "subscribed",
      "id": 6447833970,
      "node_id": "SE_lADOABII585H1H8VzwAAAAGAUiNy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6447833970",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-18T12:54:06Z"
    },
    {
      "event": "commented",
      "id": 1101497557,
      "node_id": "IC_kwDOABII585Bp4TV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1101497557",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-18T15:26:47Z",
      "updated_at": "2022-04-18T15:26:47Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, will review this week.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1101497557",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "reviewed",
      "id": 944897633,
      "node_id": "PRR_kwDOABII5844Uf5h",
      "url": null,
      "actor": null,
      "commit_id": "2da96174b95831c374b2452657c431254fea8e53",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nAn alternative, extremely simple way to see that `-reindex` adds 8 bytes is is to just observe `debug.log` during startup: Here for regtest, with a datadir that has only the genesis block:\r\nMaster, before Reindex:\r\n` LoadBlockIndexDB: last block file info: CBlockFileInfo(blocks=1, size=293, heights=0...0, time=2011-02-02...2011-02-02)`\r\n\r\nMaster, after Reindex:\r\n`LoadBlockIndexDB: last block file info: CBlockFileInfo(blocks=1, size=301, heights=0...0, time=2011-02-02...2011-02-02)`\r\n\r\nThe size goes up by 8 bytes from 293 to 301, where as it stays at 293 with this branch.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#pullrequestreview-944897633",
      "submitted_at": "2022-04-18T23:11:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6451357479,
      "node_id": "HRFPE_lADOABII585H1H8VzwAAAAGAh-cn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6451357479",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-19T01:57:23Z"
    },
    {
      "event": "commented",
      "id": 1101961207,
      "node_id": "IC_kwDOABII585Brpf3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1101961207",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-19T03:40:18Z",
      "updated_at": "2022-04-19T03:40:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, will review soon.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1101961207",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "reviewed",
      "id": 947253618,
      "node_id": "PRR_kwDOABII5844dfFy",
      "url": null,
      "actor": null,
      "commit_id": "66b8d3c23d999651c79ac03e7558d4248a200ba1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 66b8d3c23d999651c79ac03e7558d4248a200ba1 ([`jamesob/ackr/24858.1.mruddy.reindex_log_test_incorre`](https://github.com/jamesob/bitcoin/tree/ackr/24858.1.mruddy.reindex_log_test_incorre))\r\n\r\nTested locally. The source of the bug (reading through SaveBlockToDisk -> FindBlockPos) is still somewhat unclear to me... I guess I'm trying to determine where those 8 header bytes are accounted for in the case of an existing block during reindex. In other words, exactly what line is responsible for the addition of those 8 bytes to the `FlatFilePos* dbp`, which is passed into SaveBlockToDisk.\r\n\r\nNear as I can figure, the answer to that question is somewhere in the `LoadExternalBlockFile -> AcceptBlock` call chain.\r\n\r\n[after writing the above and rereading the code]\r\n\r\nMy best guess is that those 8 bytes are included in LoadExternalBlockFile (`nRewind = blkdat.GetPos()`) after an existing block is read (which then determines the value of `dbp`), whereas during the addition of a new block, no existing data is read and therefore those 8 header bytes are unaccounted for.\r\n\r\nAnyway, I've tested this patch pretty extensively:\r\n- multiple subsequent -reindex calls with -stopatheight=105000\r\n- using this branch with an existing mainnet datadir, waiting for new tips to come in, switching back to master and ensuring init happens properly\r\n- revert change in validation.cpp, ensure included unittests fail\r\n\r\nSo I have good confidence that this is safe and correct.\r\n\r\nThanks for working on this; I think this is a pretty important issue to iron out even if it doesn't immediately cause true data corruption. It's the kind of thing that could easily cascade into a bigger problem.\r\n\r\n\r\n<details><summary>Show signature data</summary>\r\n<p>\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 66b8d3c23d999651c79ac03e7558d4248a200ba1 ([`jamesob/ackr/24858.1.mruddy.reindex_log_test_incorre`](https://github.com/jamesob/bitcoin/tree/ackr/24858.1.mruddy.reindex_log_test_incorre))\r\n\r\nTested locally. The source of the bug (reading through SaveBlockToDisk -> FindBlockPos) is still somewhat unclear to me... I guess I'm trying to determine where those 8 header bytes are accounted for in the case of an existing block during reindex. In other words, exactly what line is responsible for the addition of those 8 bytes to the `FlatFilePos* dbp`, which is passed into SaveBlockToDisk.\r\n\r\nNear as I can figure, the answer to that question is somewhere in the `LoadExternalBlockFile -> AcceptBlock` call chain.\r\n\r\n[after writing the above and rereading the code]\r\n\r\nMy best guess is that those 8 bytes are included in LoadExternalBlockFile (`nRewind = blkdat.GetPos()`) after an existing block is read (which then determines the value of `dbp`), whereas during the addition of a new block, no existing data is read and therefore those 8 header bytes are unaccounted for.\r\n\r\nAnyway, I've tested this patch pretty extensively:\r\n- - multiple subsequent -reindex calls with -stopatheight=105000\r\n- - using this branch with an existing mainnet datadir, waiting for new tips to come in, switching back to master and ensuring init happens properly\r\n- - revert change in validation.cpp, ensure included unittests fail\r\n\r\nSo I have good confidence that this is safe and correct.\r\n\r\nThanks for working on this; I think this is a pretty important issue to iron out even if it doesn't immediately cause true data corruption. It's the kind of thing that could easily cascade into a bigger problem.\r\n\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmJgK0AACgkQepNdrbLE\r\nTwXXJA/8Cq4RgrVcKBTB7zYjgqM5d2aQo7R++nMyF+5ZW+fPHY9kn9uR3YXJgVHb\r\nu68TsFFAY/CS3ziNLmBsjsOS4yOvDzdz5m9f6Eso78qsLyf7qix3gOlCkGZGuGy3\r\nSr8FHYrgV4AuqdOQMlUnLLyZAf9ItDpF/OOcMm61IVM5MgMfXlnntod9bPil+AAI\r\nG6COVrL9P4/RRgs1oxRuVeP+RXRwwyNzJbavjThd8pnpd5JAFpcs8z9FGDmLlQaV\r\nZ4tVJvwoFohYhK5AoqnX13A+lIGRZoHqEihd2P++3wrzA1DiLQHXv2+3umRX6sSl\r\nApjhFBf68rH006BTe0OOoyakYMHPPJCleD+1W730Tk5/NxiuBO6ES4B7Yw4lEI4f\r\nZBXtVDha+3vRnUFXSUzAWIetfgoSOny3EC7rst9FOtd+I0W4lzbKGj4+Zh1PpB45\r\nrx9ygnPV3h7shkAbla/zJL3L7luAlBgQkdYoHCEOTeGtuvtQ16yHpDDFgbRHlzh/\r\n1BeFr7/l03YM8i3rayB4UYUfuvEc2LuY4QOPYjyrgS0FZNY1z+lec+BWirul8Kz0\r\nNsY25rHLiQYW70hh+5HcidFKs9LoiYfZ22eWuWpZTle07CClrV2xNGB36SO4AiuR\r\nQComx/Z7uTFYdWD7tkwawgJzv/LHtxthEYpvacRJvro1Tj1rCQQ=\r\n=R1e1\r\n-----END PGP SIGNATURE-----\r\n\r\n```\r\n\r\n</p></details>\r\n\r\n<details><summary>Show platform data</summary>\r\n<p>\r\n\r\n```\r\nTested on Linux-5.10.0-11-amd64-x86_64-with-glibc2.31\r\n\r\nConfigured with ./configure LDFLAGS=-L/home/james/src/bitcoin/db4/lib/ CPPFLAGS=-I/home/james/src/bitcoin/db4/include/ CXXFLAGS=-fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare -Wsign-compare -Werror=thread-safety-analysis --enable-wallet --enable-debug --with-daemon --enable-natpmp-default\r\n\r\nCompiled with /usr/bin/ccache /usr/local/bin/clang++ -std=c++17 -mavx -mavx2 -mpclmul -fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare -Wsign-compare -Werror=thread-safety-analysis -O0 -g3 -ftrapv -fdebug-prefix-map=$(abs_top_srcdir)=.  -Wstack-protector -fstack-protector-all -fcf-protection=full -fstack-clash-protection -msse4.1 -msse4.2 -msse4 -msha  i\r\n\r\nCompiler version: Debian clang version 13.0.1-++20220126092033+75e33f71c2da-1~exp1~20220126212112.63\r\n```\r\n\r\n</p></details>\r\n\r\n",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#pullrequestreview-947253618",
      "submitted_at": "2022-04-20T15:49:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
    },
    {
      "event": "commented",
      "id": 1104179409,
      "node_id": "IC_kwDOABII585B0HDR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1104179409",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-20T16:54:39Z",
      "updated_at": "2022-04-20T16:54:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "> My best guess is that those 8 bytes are included in LoadExternalBlockFile (nRewind = blkdat.GetPos()) after an existing block is read (which then determines the value of dbp), whereas during the addition of a new block, no existing data is read and therefore those 8 header bytes are unaccounted for.\r\n\r\n@jamesob Thanks for the review! You're very close and you have the right idea. The exact line where they come from is in `CChainState::LoadExternalBlockFile` at the line `dbp->nPos = nBlockPos;` https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L4288\r\nThat is why blindly adding another 8 on the call to `FindBlockPos` in `BlockManager::SaveBlockToDisk` is wrong for already known blocks.",
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1104179409",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "mentioned",
      "id": 6464772341,
      "node_id": "MEE_lADOABII585H1H8VzwAAAAGBVJj1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6464772341",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-20T16:54:39Z"
    },
    {
      "event": "subscribed",
      "id": 6464772348,
      "node_id": "SE_lADOABII585H1H8VzwAAAAGBVJj8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6464772348",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-20T16:54:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6466039334,
      "node_id": "HRFPE_lADOABII585H1H8VzwAAAAGBZ-4m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6466039334",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-20T20:22:26Z"
    },
    {
      "event": "renamed",
      "id": 6468138160,
      "node_id": "RTE_lADOABII585H1H8VzwAAAAGBh_Sw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6468138160",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-21T05:54:42Z",
      "rename": {
        "from": "reindex, log, test: incorrect blk file size calculation during reindex results in undesirable blk file malformedness",
        "to": "incorrect blk file size calculation during reindex results in undesirable blk file malformedness"
      }
    },
    {
      "event": "unlabeled",
      "id": 6468138614,
      "node_id": "UNLE_lADOABII585H1H8VzwAAAAGBh_Z2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6468138614",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-21T05:54:48Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 6468138615,
      "node_id": "UNLE_lADOABII585H1H8VzwAAAAGBh_Z3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6468138615",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-21T05:54:48Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 1114270108,
      "node_id": "IC_kwDOABII585Cammc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1114270108",
      "actor": {
        "login": "droid192",
        "id": 52429424,
        "node_id": "MDQ6VXNlcjUyNDI5NDI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/52429424?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/droid192",
        "html_url": "https://github.com/droid192",
        "followers_url": "https://api.github.com/users/droid192/followers",
        "following_url": "https://api.github.com/users/droid192/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/droid192/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/droid192/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/droid192/subscriptions",
        "organizations_url": "https://api.github.com/users/droid192/orgs",
        "repos_url": "https://api.github.com/users/droid192/repos",
        "events_url": "https://api.github.com/users/droid192/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/droid192/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-01T15:52:17Z",
      "updated_at": "2022-05-01T16:09:25Z",
      "author_association": "NONE",
      "body": "please add error recovery to `rescan` such that from any ioerror the following blk.dat files can still be imported while/after the missing data is downloaded form a peer. Currently all considered blk.dat files after  yield 0 imported blocks (btw one could stop after first ioerror  right away!)\r\nalso: does it reverse already padded blk.dats that got touched by `reindex` ?\r\nIt reduces stress from network and oneself!",
      "user": {
        "login": "droid192",
        "id": 52429424,
        "node_id": "MDQ6VXNlcjUyNDI5NDI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/52429424?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/droid192",
        "html_url": "https://github.com/droid192",
        "followers_url": "https://api.github.com/users/droid192/followers",
        "following_url": "https://api.github.com/users/droid192/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/droid192/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/droid192/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/droid192/subscriptions",
        "organizations_url": "https://api.github.com/users/droid192/orgs",
        "repos_url": "https://api.github.com/users/droid192/repos",
        "events_url": "https://api.github.com/users/droid192/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/droid192/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1114270108",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "commented",
      "id": 1114955764,
      "node_id": "IC_kwDOABII585CdN_0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1114955764",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-02T14:23:33Z",
      "updated_at": "2022-05-02T14:23:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Currently all considered blk.dat files after yield 0 imported blocks (btw one could stop after first ioerror right away!)\r\n\r\nThat can be the case, but it is not the case a lot of the time. For example, this issue deals with the cases where reads fail, and get skipped, in-between blocks. The case where no subsequent blocks get imported is where an actual block read fails and that makes every subsequent block appear to be out of order. That's a different thing.\r\n\r\n> does it reverse already padded blk.dats\r\n\r\nNo, this change does not attempt to alter the block files if an error is found (and skipped). This change attempts to stop setting up data that is used by later processing which winds up corrupting the block files.\r\n\r\nI'd like to keep this change focused on fixing the original issue and not trying to re-design the import processes.",
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1114955764",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "reviewed",
      "id": 960849459,
      "node_id": "PRR_kwDOABII5845RWYz",
      "url": null,
      "actor": null,
      "commit_id": "425fc8813307b8d96a48e4b45d0a7b00bbc2289e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 425fc8813307b8d96a48e4b45d0a7b00bbc2289e, but I think the current fix is more confusing and fragile than it needs to be. I would suggest something like https://github.com/ryanofsky/bitcoin/commit/07c05a1b24bf42e57f8c229f505ed448a6df81f7 as a more straightforward fix that just passes new `FindBlockPos` calls the same position that the original `FindBlockPos` returned, instead of trying to work around the position being different by tweaking the size.\r\n\r\nOverall though this is a nice improvement adding a useful test and dealing with a scary looking bug.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#pullrequestreview-960849459",
      "submitted_at": "2022-05-03T20:40:16Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
    },
    {
      "event": "commented",
      "id": 1118276909,
      "node_id": "IC_kwDOABII585Cp40t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1118276909",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-05T08:03:39Z",
      "updated_at": "2022-05-05T08:03:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ryanofsky Thanks for the review. I've put updates related to your comments into 011f6ec54fffb7600ae300851cc9816423f3f4dd. I'll squash the commits after positive code review of these.\r\n\r\nI still like what I have in `SaveBlockToDisk` regarding what is passed into `FindBlockPos` for the second parameter, `nAddSize`. When the position and size is known, we pass that in. When only size is known, we pass in block size + header size because we know that's what we'll have to add to the file. And, by doing it this way, we don't have to re-adjust the known position on the way out of `SaveBlockToDisk`. We will never pass the same position into `FindBlockPos` for a given block because we either don't know the position, or we pass in where we found the block. The only question is whether we should pass in the positon  that `FindBlockPos` previously returned. I don't see the advantage to doing that because it's kind of like trying to pretend that we don't know what we do know.",
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1118276909",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "mentioned",
      "id": 6554510017,
      "node_id": "MEE_lADOABII585H1H8VzwAAAAGGreLB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6554510017",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-05T08:03:39Z"
    },
    {
      "event": "subscribed",
      "id": 6554510025,
      "node_id": "SE_lADOABII585H1H8VzwAAAAGGreLJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6554510025",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-05T08:03:39Z"
    },
    {
      "event": "commented",
      "id": 1118281119,
      "node_id": "IC_kwDOABII585Cp52f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1118281119",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-05T08:08:04Z",
      "updated_at": "2022-05-05T08:08:04Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.\r\n\r\n(The linter needs appeasing when you repush; consider presenting this pull in its intended final form to ease review.)\r\n```\r\nThe subject line of commit hash 011f6ec54fffb7600ae300851cc9816423f3f4dd is followed by a non-empty line. Subject lines should always be followed by a blank line.\r\n```\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1118281119",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJjYjBjYWNhYzI4ZTk4YTM5ZGM4NTZjNTc0YTA4NzJmZTE3MDU5ZTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "tree": {
        "sha": "fe1cc8fb1af65d3a1e2ae1a4ff79139af15f734c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe1cc8fb1af65d3a1e2ae1a4ff79139af15f734c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59ac8bacd573891d84e8ab96ff43ea12bd266f26",
          "sha": "59ac8bacd573891d84e8ab96ff43ea12bd266f26",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/59ac8bacd573891d84e8ab96ff43ea12bd266f26"
        }
      ],
      "message": "reindex, log, test: fixes #21379\n\nThis fixes a blk file size calculation made during reindex that results in increased blk file malformity.\nThe fix is to avoid double counting the size of the serialization header during reindex.\nThis adds a unit test to reproduce the bug before the fix and to ensure that it does not recur.\nThese changes include a log message change also so as to not be as alarming. This is a common and recoverable\ndata corruption. These messages can now be filtered by the debug log reindex category.",
      "committer": {
        "name": "mruddy",
        "email": "6440430+mruddy@users.noreply.github.com",
        "date": "2022-05-07T11:11:29Z"
      },
      "author": {
        "name": "mruddy",
        "email": "6440430+mruddy@users.noreply.github.com",
        "date": "2022-04-14T22:44:34Z"
      },
      "sha": "bcb0cacac28e98a39dc856c574a0872fe17059e9"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6567415447,
      "node_id": "HRFPE_lADOABII585H1H8VzwAAAAGHcs6X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6567415447",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-07T11:58:12Z"
    },
    {
      "event": "commented",
      "id": 1120206793,
      "node_id": "IC_kwDOABII585CxP_J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1120206793",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-07T13:07:19Z",
      "updated_at": "2022-05-07T13:07:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "ok, i squashed the commits and rebased onto the latest master. bcb0cacac28e98a39dc856c574a0872fe17059e9 is the latest \r\n after working through the feedback. i tested and it still looks good.",
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1120206793",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "commented",
      "id": 1124789132,
      "node_id": "IC_kwDOABII585DCuuM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1124789132",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-12T09:52:24Z",
      "updated_at": "2022-05-12T09:52:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "just to summarize, i think bcb0cacac28e98a39dc856c574a0872fe17059e9 is the final form of this patch. it's a small, targeted, and uncomplicated bug fix. i think that if we can get some final reviews that this would be ready to merge. thanks!",
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1124789132",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "commented",
      "id": 1148496050,
      "node_id": "IC_kwDOABII585EdKiy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1148496050",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-07T10:39:28Z",
      "updated_at": "2022-06-07T10:39:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Is there anything that I can do to get this merged? It's ready to merge as far as I can tell.",
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1148496050",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "renamed",
      "id": 6777567436,
      "node_id": "RTE_lADOABII585H1H8VzwAAAAGT-XjM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6777567436",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-09T12:34:24Z",
      "rename": {
        "from": "incorrect blk file size calculation during reindex results in undesirable blk file malformedness",
        "to": "incorrect blk file size calculation during reindex results in recoverable blk file corruption"
      }
    },
    {
      "event": "reviewed",
      "id": 1004412712,
      "node_id": "PRR_kwDOABII58473h8o",
      "url": null,
      "actor": null,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK bcb0cacac28e98a39dc856c574a0872fe17059e9. This is a disturbing bug with an easy fix which seems well-worth merging.\r\n\r\n> I still like what I have in `SaveBlockToDisk` regarding what is passed into `FindBlockPos` for the second parameter, `nAddSize`. When the position and size is known, we pass that in. When only size is known, we pass in block size + header size because we know that's what we'll have to add to the file.\r\n\r\nTo me, this sounds more complicated that just passing the same size.\r\n\r\n> And, by doing it this way, we don't have to re-adjust the known position on the way out of `SaveBlockToDisk`.\r\n\r\nThis is inaccurate because WriteBlockToDisk is adjusting the position here if dbp is null. Instead of SaveBlockToDisk sometimes adjusting the position, and sometimes not adjusting it, I think it is clearer if SaveBlockToDisk always adjusts the position as in https://github.com/ryanofsky/bitcoin/commit/07c05a1b24bf42e57f8c229f505ed448a6df81f7. Just making the adjustment in SaveBlockToDisk explicit at all is improvement. I'm pretty sure I stared at this code for an hour before I noticed the hidden adjustment in WriteBlockToDisk that was critical to making it work.\r\n\r\n> We will never pass the same position into `FindBlockPos` for a given block because we either don't know the position, or we pass in where we found the block. The only question is whether we should pass in the positon  that `FindBlockPos` previously returned. I don't see the advantage to doing that because it's kind of like trying to pretend that we don't know what we do know.\r\n\r\nI don't know why you are mentioning the position-not-known case because that is the working case, not the broken case, and no change we are discussing affects it. Also no code is \"trying to pretend\" anything in that case that I can see.\r\n\r\nThe advantage to passing the same position to FindBlockPos that it previously returned is that code is easier to explain and less likely to break if a variable has one meaning within a function, instead of two different meanings. This bug is **directly** caused by two different position values being used for the same block in FindBlockPos. You are working around two different position values being for being used for the same block by introducing two different size values for the same block. I think if we just used just one position and one size for a block in FindBlockPos, code would be easier to understand and less fragile.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#pullrequestreview-1004412712",
      "submitted_at": "2022-06-13T16:32:00Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
    },
    {
      "event": "commented",
      "id": 1155006934,
      "node_id": "IC_kwDOABII585E2AHW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1155006934",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-14T10:31:33Z",
      "updated_at": "2022-06-14T10:31:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ryanofsky Thanks for the code review ACK!\r\n\r\nI appreciate your comments and I spent quite a while responding to them.\r\nIn the end, I decided not to post my responses in order to avoid confusion and focus on this being ready to merge.\r\nI hear you though. I think we accomplish the same result just in a pretty minorly different way that comes down to personal preference.",
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1155006934",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "mentioned",
      "id": 6803109162,
      "node_id": "MEE_lADOABII585H1H8VzwAAAAGVfzUq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6803109162",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-14T10:31:33Z"
    },
    {
      "event": "subscribed",
      "id": 6803109184,
      "node_id": "SE_lADOABII585H1H8VzwAAAAGVfzVA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6803109184",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-14T10:31:33Z"
    },
    {
      "event": "reviewed",
      "id": 1027938042,
      "node_id": "PRR_kwDOABII5849RRb6",
      "url": null,
      "actor": null,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK bcb0cacac28e98a39dc856c574a0872fe17059e9 (reviewed code and did some testing, I agree that it fixes the bug).\r\n\r\nnits below are non-blocking and could be left to follow-ups. \r\n\r\nIn general, I got the impression that the `SaveBlockToDisk` / `FindBlockPos` code could benefit from doc improvements and possibly refactors to improve the quality of code, even though it's obviously a critical area.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#pullrequestreview-1027938042",
      "submitted_at": "2022-07-05T04:48:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
    },
    {
      "event": "reviewed",
      "id": 1048570690,
      "node_id": "PRR_kwDOABII584-f-tC",
      "url": null,
      "actor": null,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I want to propose my own alternative approach, which I think is easier to understand: https://github.com/LarryRuane/bitcoin/commit/e8b90d475b193c1c1b1a74d7751c9ec830c82867. This version hides the 8 bytes adjustment within `FindBlockPos`, which is where it belongs. In my view, `SaveBlockToDisk` should not need to be aware of this detail.",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#pullrequestreview-1048570690",
      "submitted_at": "2022-07-27T01:39:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
    },
    {
      "event": "reviewed",
      "id": 1051852827,
      "node_id": "PRR_kwDOABII584-sgAb",
      "url": null,
      "actor": null,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#pullrequestreview-1051852827",
      "submitted_at": "2022-07-27T03:53:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
    },
    {
      "event": "reviewed",
      "id": 1053374783,
      "node_id": "PRR_kwDOABII584-yTk_",
      "url": null,
      "actor": null,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK. Reproduced the issue on master and tested succesfully the fix proposed.\r\n\r\nTested on \r\nLinux 5.15.0-41-generic  x86_64 x86_64 x86_64 GNU/Linux\r\nCompiled with \r\ngcc  11.2.0\r\n",
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#pullrequestreview-1053374783",
      "submitted_at": "2022-07-28T01:07:20Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
    },
    {
      "event": "reviewed",
      "id": 1054528728,
      "node_id": "PRR_kwDOABII584-2tTY",
      "url": null,
      "actor": null,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK.\r\n\r\ngcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04) \r\n\r\nLinux 5.11.0-43-generic #47~20.04.2-Ubuntu SMP x86_64 x86_64 x86_64 GNU/Linux\r\n",
      "user": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#pullrequestreview-1054528728",
      "submitted_at": "2022-07-28T17:53:18Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
    },
    {
      "event": "reviewed",
      "id": 1056167873,
      "node_id": "PRR_kwDOABII584-89fB",
      "url": null,
      "actor": null,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "tACK https://github.com/bitcoin/bitcoin/pull/24858/commits/bcb0cacac28e98a39dc856c574a0872fe17059e9\r\n\r\nVerified the error on master branch as described in https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1099788622 and  https://github.com/bitcoin/bitcoin/pull/24858#pullrequestreview-944897633. This PR fixes it.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#pullrequestreview-1056167873",
      "submitted_at": "2022-07-30T01:15:23Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
    },
    {
      "event": "commented",
      "id": 1205707862,
      "node_id": "IC_kwDOABII585H3aRW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1205707862",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-04T19:57:41Z",
      "updated_at": "2022-08-04T20:00:28Z",
      "author_association": "MEMBER",
      "body": "I think this would be a good bug to fix, so it would be nice to see some progress here. @mruddy do you think you'll be able to address some of the outstanding feedback? I think it might be good to at least incorporate some of the clarifying commentary that @ryanofsky proposed.\r\n\r\nThis PR is a step in the right direction; the fix could possibly clearer, along the lines of what @ryanofsky or @LarryRuane have suggested. But in any case, one of these approaches should be committed to, reviewed, and merged (with credit to @mruddy in any case for proposing the conceptual solution).\r\n\r\nEdit: to be clear, merging this PR as-is would be a big improvement over the current state of things. I think we're bikeshedding a little at this point, and a follow-up could be done if necessary. ",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1205707862",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "mentioned",
      "id": 7131079877,
      "node_id": "MEE_lADOABII585H1H8VzwAAAAGpC6TF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7131079877",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-04T19:57:41Z"
    },
    {
      "event": "subscribed",
      "id": 7131079886,
      "node_id": "SE_lADOABII585H1H8VzwAAAAGpC6TO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7131079886",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-04T19:57:41Z"
    },
    {
      "event": "mentioned",
      "id": 7131079895,
      "node_id": "MEE_lADOABII585H1H8VzwAAAAGpC6TX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7131079895",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-04T19:57:41Z"
    },
    {
      "event": "subscribed",
      "id": 7131079899,
      "node_id": "SE_lADOABII585H1H8VzwAAAAGpC6Tb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7131079899",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-04T19:57:42Z"
    },
    {
      "event": "mentioned",
      "id": 7131079910,
      "node_id": "MEE_lADOABII585H1H8VzwAAAAGpC6Tm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7131079910",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-04T19:57:42Z"
    },
    {
      "event": "subscribed",
      "id": 7131079916,
      "node_id": "SE_lADOABII585H1H8VzwAAAAGpC6Ts",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7131079916",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-04T19:57:42Z"
    },
    {
      "event": "commented",
      "id": 1206278126,
      "node_id": "IC_kwDOABII585H5lfu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206278126",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T10:07:48Z",
      "updated_at": "2022-10-06T00:04:58Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1206278126",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "commented",
      "id": 1211195961,
      "node_id": "IC_kwDOABII585IMWI5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211195961",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T19:50:30Z",
      "updated_at": "2022-08-10T19:50:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "If I have to change something, then I'd probably go back in the direction that @LarryRuane suggested with e8b90d475b193c1c1b1a74d7751c9ec830c82867. I'd have to review and test those changes closer, but at a glance, they seem plausible. They are close to my original fix in that they keep the change within `FindBlockPos`. I changed to the current approach trying to be responsive to feedback in April. I'd probably avoid adding comments in any potential future commit as those seem to cause a relatively large amount of friction. The current commit has gathered review, testing, and works, so I hate to start the process all over again. But, if this fix isn't going to get merged for some reason, then let me know and I'll do it.",
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1211195961",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "mentioned",
      "id": 7166776575,
      "node_id": "MEE_lADOABII585H1H8VzwAAAAGrLFT_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7166776575",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T19:50:30Z"
    },
    {
      "event": "subscribed",
      "id": 7166776582,
      "node_id": "SE_lADOABII585H1H8VzwAAAAGrLFUG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7166776582",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T19:50:30Z"
    },
    {
      "event": "commented",
      "id": 1213627499,
      "node_id": "IC_kwDOABII585IVnxr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213627499",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-13T01:31:13Z",
      "updated_at": "2022-08-13T01:31:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "tested code-review ACK bcb0cacac28e98a39dc856c574a0872fe17059e9\r\nI strongly agree with [@jamesob](https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1205707862), this should get merged asap; any possible improvements can be done in a follow-up PR. My apologies for stirring the pot too much!",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1213627499",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "commented",
      "id": 1276286709,
      "node_id": "IC_kwDOABII585MEpb1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1276286709",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T14:35:43Z",
      "updated_at": "2022-10-12T14:35:43Z",
      "author_association": "MEMBER",
      "body": "I think this is ready for merge.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#issuecomment-1276286709",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24858"
    },
    {
      "event": "merged",
      "id": 7574238249,
      "node_id": "ME_lADOABII585H1H8VzwAAAAHDdbQp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7574238249",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "cc12b8947b6d3f6c4b9cd4d147543dce693c6758",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc12b8947b6d3f6c4b9cd4d147543dce693c6758",
      "created_at": "2022-10-12T18:14:46Z"
    },
    {
      "event": "closed",
      "id": 7574238299,
      "node_id": "CE_lADOABII585H1H8VzwAAAAHDdbRb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7574238299",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T18:14:46Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 7590155632,
      "node_id": "HRDE_lADOABII585H1H8VzwAAAAHEaJVw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7590155632",
      "actor": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-14T12:56:36Z"
    },
    {
      "event": "referenced",
      "id": 7648533853,
      "node_id": "REFE_lADOABII585H1H8VzwAAAAHH411d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7648533853",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e0075d67c27d12174ad3f6dbd19e0d245e7d3ed1",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/e0075d67c27d12174ad3f6dbd19e0d245e7d3ed1",
      "created_at": "2022-10-23T15:26:48Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852467662",
      "pull_request_review_id": 944897633,
      "id": 852467662,
      "node_id": "PRRC_kwDOABII584yz5_O",
      "diff_hunk": "@@ -611,7 +611,12 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n     if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n+        // pos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes).\n+        // nAddSize already has 8 added to it too. we subtract 8 to avoid over accounting for the serialization\n+        // header. such over accounting was a long standing bug that added undesirable 8 byte gaps into blk data files following\n+        // a -reindex operation. for more info, see https://github.com/bitcoin/bitcoin/issues/21379\n+        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize - 8, m_blockfile_info[nFile].nSize);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "2da96174b95831c374b2452657c431254fea8e53",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think an alternative fix would be to have two distinct calls to `FindBlockPos` in `BlockManager::SaveBlockToDisk` conditional on whether `dbp == nullptr` (not adding 8 to nAddSize parameter if that is the case). Maybe that would be a little bit clearer than adding and substracting 8.\r\n\r\nIn general, such a high percentage of code in  `FindBlockPos()` is conditional on `fKnown` or `!fKnown` that I wonder whether it would make sense to refactor this into two separate functions (not here, but as a possible follow-up).",
      "created_at": "2022-04-18T22:54:06Z",
      "updated_at": "2022-04-18T23:12:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r852467662",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852467662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 619,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852467981",
      "pull_request_review_id": 944897633,
      "id": 852467981,
      "node_id": "PRRC_kwDOABII584yz6EN",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2011-2022 The Bitcoin Core developers",
      "path": "src/test/blockmanager_tests.cpp",
      "position": null,
      "original_position": 1,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "2da96174b95831c374b2452657c431254fea8e53",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: remove 2011- , it's new",
      "created_at": "2022-04-18T22:54:54Z",
      "updated_at": "2022-04-18T23:11:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r852467981",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852467981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852471681",
      "pull_request_review_id": 944897633,
      "id": 852471681,
      "node_id": "PRRC_kwDOABII584yz6-B",
      "diff_hunk": "@@ -4356,7 +4356,18 @@ void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s: Deserialize or I/O error - %s\\n\", __func__, e.what());\n+                // historical bugs added extra data to the block files that does not deserialize cleanly.\n+                // commonly this data is between readable blocks, but it does not really matter. such data is not fatal to the import process.\n+                // the code that reads the block files deals with invalid data by simply ignoring it.\n+                // it continues to search for the next {4 byte magic message start bytes + 4 byte length + block} that does deserialize cleanly\n+                // and passes all of the other block validation checks dealing with POW and the merkle root, etc...\n+                // we merely note with this informational log message when unexpected data is encountered.\n+                // we could also be experiencing a storage system read error, or a read of a previous bad write. these are possible, but\n+                // less likely scenarios. we don't have enough information to tell a difference here.\n+                // the reindex process is not the place to attempt to clean and/or compact the block files. if so desired, a studious node operator\n+                // may use knowledge of the fact that the block files are not entirely pristine in order to prepare a set of pristine, and\n+                // perhaps ordered, block files for later reindexing.\n+                LogPrint(BCLog::REINDEX, \"%s: unexpected data at file offset 0x%x - %s. continuing\\n\", __func__, (nRewind - 1), e.what());",
      "path": "src/validation.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "2da96174b95831c374b2452657c431254fea8e53",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wonder whether it might be better to keep this an unconditional log, so that there is a higher chance of getting reports such as the one in #21379.\r\nI think the expectation is that it shouldn't be possible to get this warning (unless there is actual disk corruption) after this PR, unless you have an existing datadir that is already slightly corrupted by past reindexes.",
      "created_at": "2022-04-18T23:04:19Z",
      "updated_at": "2022-04-18T23:11:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r852471681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852471681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4392,
      "original_line": 4392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852491726",
      "pull_request_review_id": 944926396,
      "id": 852491726,
      "node_id": "PRRC_kwDOABII584yz_3O",
      "diff_hunk": "@@ -611,7 +611,12 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n     if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n+        // pos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes).\n+        // nAddSize already has 8 added to it too. we subtract 8 to avoid over accounting for the serialization\n+        // header. such over accounting was a long standing bug that added undesirable 8 byte gaps into blk data files following\n+        // a -reindex operation. for more info, see https://github.com/bitcoin/bitcoin/issues/21379\n+        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize - 8, m_blockfile_info[nFile].nSize);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "2da96174b95831c374b2452657c431254fea8e53",
      "in_reply_to_id": 852467662,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the review!\r\n\r\nI resonate with what you said about not subtracting 8 within `BlockManager::FindBlockPos` for code clarity. Subtracting 8 was just the first simplest fix that I thought of.\r\n\r\nBuilding off of your idea, instead of making two different calls, we could get the same effect by doing something like the following in `BlockManager::SaveBlockToDisk`:\r\n\r\n```\r\n    const auto position_known = dbp != nullptr;\r\n    const auto additional_size = nBlockSize + (position_known ? 0 : 8);\r\n    if (!FindBlockPos(blockPos, additional_size, nHeight, active_chain, block.GetBlockTime(), position_known)) {\r\n```",
      "created_at": "2022-04-18T23:57:25Z",
      "updated_at": "2022-04-18T23:57:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r852491726",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852491726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 619,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852492114",
      "pull_request_review_id": 944926830,
      "id": 852492114,
      "node_id": "PRRC_kwDOABII584yz_9S",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2011-2022 The Bitcoin Core developers",
      "path": "src/test/blockmanager_tests.cpp",
      "position": null,
      "original_position": 1,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "2da96174b95831c374b2452657c431254fea8e53",
      "in_reply_to_id": 852467981,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok, i will update when i update the commit along with updates from the other comments",
      "created_at": "2022-04-18T23:58:28Z",
      "updated_at": "2022-04-18T23:58:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r852492114",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852492114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852496122",
      "pull_request_review_id": 944931964,
      "id": 852496122,
      "node_id": "PRRC_kwDOABII584y0A76",
      "diff_hunk": "@@ -4356,7 +4356,18 @@ void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s: Deserialize or I/O error - %s\\n\", __func__, e.what());\n+                // historical bugs added extra data to the block files that does not deserialize cleanly.\n+                // commonly this data is between readable blocks, but it does not really matter. such data is not fatal to the import process.\n+                // the code that reads the block files deals with invalid data by simply ignoring it.\n+                // it continues to search for the next {4 byte magic message start bytes + 4 byte length + block} that does deserialize cleanly\n+                // and passes all of the other block validation checks dealing with POW and the merkle root, etc...\n+                // we merely note with this informational log message when unexpected data is encountered.\n+                // we could also be experiencing a storage system read error, or a read of a previous bad write. these are possible, but\n+                // less likely scenarios. we don't have enough information to tell a difference here.\n+                // the reindex process is not the place to attempt to clean and/or compact the block files. if so desired, a studious node operator\n+                // may use knowledge of the fact that the block files are not entirely pristine in order to prepare a set of pristine, and\n+                // perhaps ordered, block files for later reindexing.\n+                LogPrint(BCLog::REINDEX, \"%s: unexpected data at file offset 0x%x - %s. continuing\\n\", __func__, (nRewind - 1), e.what());",
      "path": "src/validation.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "2da96174b95831c374b2452657c431254fea8e53",
      "in_reply_to_id": 852471681,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I did consider keeping this log message unconditional. I think we'd get a fair number of false positive reports if we leave this scary log message as it was. This bug has been around for about 7 years, and maybe more if you count the bugs that the last fix tried to handle. So, there are probably a lot of blk files that have been _recoverably_ corrupted (i.e. corrupted in a way that is still processable). To me, it's more of a notification for a concerned node operator that really cares about having a clean set of blk files. The new message gives the exact offset to go look, and maybe edit the file, if you really want to. But, The existing message doesn't really do much to help the operator. It kind of just scares them, even though the processing goes on. Maybe there is a balance that we need to hit. But, I'm not sure what that looks like besides this right now.",
      "created_at": "2022-04-19T00:10:35Z",
      "updated_at": "2022-04-19T00:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r852496122",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852496122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4392,
      "original_line": 4392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852532300",
      "pull_request_review_id": 944976204,
      "id": 852532300,
      "node_id": "PRRC_kwDOABII584y0JxM",
      "diff_hunk": "@@ -611,7 +611,12 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n     if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n+        // pos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes).\n+        // nAddSize already has 8 added to it too. we subtract 8 to avoid over accounting for the serialization\n+        // header. such over accounting was a long standing bug that added undesirable 8 byte gaps into blk data files following\n+        // a -reindex operation. for more info, see https://github.com/bitcoin/bitcoin/issues/21379\n+        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize - 8, m_blockfile_info[nFile].nSize);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "2da96174b95831c374b2452657c431254fea8e53",
      "in_reply_to_id": 852467662,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "made updates for this in 66b8d3c23d999651c79ac03e7558d4248a200ba1",
      "created_at": "2022-04-19T01:58:10Z",
      "updated_at": "2022-04-19T01:58:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r852532300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852532300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 619,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/853007258",
      "pull_request_review_id": 945625443,
      "id": 853007258,
      "node_id": "PRRC_kwDOABII584y19ua",
      "diff_hunk": "@@ -4356,7 +4356,18 @@ void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s: Deserialize or I/O error - %s\\n\", __func__, e.what());\n+                // historical bugs added extra data to the block files that does not deserialize cleanly.\n+                // commonly this data is between readable blocks, but it does not really matter. such data is not fatal to the import process.\n+                // the code that reads the block files deals with invalid data by simply ignoring it.\n+                // it continues to search for the next {4 byte magic message start bytes + 4 byte length + block} that does deserialize cleanly\n+                // and passes all of the other block validation checks dealing with POW and the merkle root, etc...\n+                // we merely note with this informational log message when unexpected data is encountered.\n+                // we could also be experiencing a storage system read error, or a read of a previous bad write. these are possible, but\n+                // less likely scenarios. we don't have enough information to tell a difference here.\n+                // the reindex process is not the place to attempt to clean and/or compact the block files. if so desired, a studious node operator\n+                // may use knowledge of the fact that the block files are not entirely pristine in order to prepare a set of pristine, and\n+                // perhaps ordered, block files for later reindexing.\n+                LogPrint(BCLog::REINDEX, \"%s: unexpected data at file offset 0x%x - %s. continuing\\n\", __func__, (nRewind - 1), e.what());",
      "path": "src/validation.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "2da96174b95831c374b2452657c431254fea8e53",
      "in_reply_to_id": 852471681,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "okay, makes sense. By the way, node operators also have the option to apply the `linearize-data.py` script in `/contrib/linearize` (which was adjusted in #16802 to deal with this bug, after a report in #14986), but this will also remove orphaned blocks from the blk files.",
      "created_at": "2022-04-19T12:33:09Z",
      "updated_at": "2022-04-19T12:33:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r853007258",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/853007258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4392,
      "original_line": 4392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854198361",
      "pull_request_review_id": 947253618,
      "id": 854198361,
      "node_id": "PRRC_kwDOABII584y6ghZ",
      "diff_hunk": "@@ -785,19 +785,27 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */",
      "path": "src/node/blockstorage.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "66b8d3c23d999651c79ac03e7558d4248a200ba1",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe move this docstring to the header file?",
      "created_at": "2022-04-20T14:21:30Z",
      "updated_at": "2022-04-20T15:49:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r854198361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854198361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 791,
      "original_line": 791,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854234515",
      "pull_request_review_id": 947253618,
      "id": 854234515,
      "node_id": "PRRC_kwDOABII584y6pWT",
      "diff_hunk": "@@ -4356,7 +4356,18 @@ void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {",
      "path": "src/validation.cpp",
      "position": 3,
      "original_position": 3,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "66b8d3c23d999651c79ac03e7558d4248a200ba1",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(comment about existing code, not a criticism on this patch)\r\n\r\nThe breadth of what this is catching is concerning to me - it makes it difficult to tell where we realistically expect exceptions to be thrown, and is making understanding this fix more difficult than I think it otherwise would be. From what I can tell, there are really two lines within this `try` that we expect the catch to handle, \r\n- `blkdat >> block;`\r\n- `if (ReadBlockFromDisk(...`\r\n  - but maybe not even this line, since exceptions are handled within `ReadBlockFromDisk`\r\n\r\nAm I wrong about this? Is there a good reason the try block is so broad?\r\n\r\nIf not, maybe (in future PRs?) we can limit this `try`/`catch` block to the specific line(s) where we expect to throw.",
      "created_at": "2022-04-20T14:51:57Z",
      "updated_at": "2022-04-20T15:49:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r854234515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854234515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4380,
      "original_line": 4380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854254239",
      "pull_request_review_id": 947253618,
      "id": 854254239,
      "node_id": "PRRC_kwDOABII584y6uKf",
      "diff_hunk": "@@ -785,19 +785,27 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr}; // if dbp is not nullptr, then the file and block within it are known to already reside on disk\n+    if (position_known) {\n         blockPos = *dbp;\n-    }\n-    if (!FindBlockPos(blockPos, nBlockSize + 8, nHeight, active_chain, block.GetBlockTime(), dbp != nullptr)) {\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes).\n+        // we add 8 only for new blocks since they will have the serialization header added when written to disk.",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "66b8d3c23d999651c79ac03e7558d4248a200ba1",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Aid to reviewers: the 8 bytes mentioned are added on writing the block to disk in `blockstorage.cpp:WriteBlockToDisk()`.",
      "created_at": "2022-04-20T15:09:02Z",
      "updated_at": "2022-04-20T15:49:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r854254239",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854254239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 798,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854257419",
      "pull_request_review_id": 947253618,
      "id": 854257419,
      "node_id": "PRRC_kwDOABII584y6u8L",
      "diff_hunk": "@@ -785,19 +785,27 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr}; // if dbp is not nullptr, then the file and block within it are known to already reside on disk\n+    if (position_known) {\n         blockPos = *dbp;\n-    }\n-    if (!FindBlockPos(blockPos, nBlockSize + 8, nHeight, active_chain, block.GetBlockTime(), dbp != nullptr)) {\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes).\n+        // we add 8 only for new blocks since they will have the serialization header added when written to disk.\n+        // this avoids over accounting for the serialization header on existing blocks. such over accounting was a long\n+        // standing bug that added undesirable 8 byte gaps into blk data files following a -reindex operation.\n+        // for more info, see https://github.com/bitcoin/bitcoin/issues/21379\n+        nBlockSize += 8U;",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "66b8d3c23d999651c79ac03e7558d4248a200ba1",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could also be phrased as `nBlockSize += sizeof(unsigned int) + CMessageHeader::MESSAGE_START_SIZE` to avoid hardcoding the expected header size.\r\n\r\nWe could also include \r\n```cpp\r\nconstexpr size_t BLOCK_SERIALIZATION_HEADER_LEN = \r\n    sizeof(unsigned int) + CMessageHeader::MESSAGE_START_SIZE;\r\n```\r\nnearby `WriteBlockToDisk` to avoid having that information live too far away from its source of truth.",
      "created_at": "2022-04-20T15:11:50Z",
      "updated_at": "2022-04-20T15:49:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r854257419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854257419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854330013",
      "pull_request_review_id": 947439613,
      "id": 854330013,
      "node_id": "PRRC_kwDOABII584y7Aqd",
      "diff_hunk": "@@ -785,19 +785,27 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */",
      "path": "src/node/blockstorage.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "66b8d3c23d999651c79ac03e7558d4248a200ba1",
      "in_reply_to_id": 854198361,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "i removed that doc string and put the meat of the comment into the context where it made sense on line 792. i figured that the remaining part of the comment \"Store block on disk\" was pretty self-evident for the method named \"SaveBlockToDisk\". if i were to make more changes, then i'd probably rename the parameter to be meaningful and potentially add a comment. but then that begins to make the change larger. so, i'll leave it for now unless i have to to get this merged.",
      "created_at": "2022-04-20T16:23:15Z",
      "updated_at": "2022-04-20T16:23:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r854330013",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854330013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 791,
      "original_line": 791,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854332134",
      "pull_request_review_id": 947442452,
      "id": 854332134,
      "node_id": "PRRC_kwDOABII584y7BLm",
      "diff_hunk": "@@ -785,19 +785,27 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr}; // if dbp is not nullptr, then the file and block within it are known to already reside on disk\n+    if (position_known) {\n         blockPos = *dbp;\n-    }\n-    if (!FindBlockPos(blockPos, nBlockSize + 8, nHeight, active_chain, block.GetBlockTime(), dbp != nullptr)) {\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes).\n+        // we add 8 only for new blocks since they will have the serialization header added when written to disk.",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "66b8d3c23d999651c79ac03e7558d4248a200ba1",
      "in_reply_to_id": 854254239,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "also, the position comes from `CChainState::LoadExternalBlockFile` when it's read in again. that position is past the serialization header already (it points directly at the block data) and thus why we don't need to add 8 with the old code `nBlockSize + 8`.",
      "created_at": "2022-04-20T16:25:33Z",
      "updated_at": "2022-04-20T16:25:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r854332134",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854332134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 798,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854343492",
      "pull_request_review_id": 947458394,
      "id": 854343492,
      "node_id": "PRRC_kwDOABII584y7D9E",
      "diff_hunk": "@@ -785,19 +785,27 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr}; // if dbp is not nullptr, then the file and block within it are known to already reside on disk\n+    if (position_known) {\n         blockPos = *dbp;\n-    }\n-    if (!FindBlockPos(blockPos, nBlockSize + 8, nHeight, active_chain, block.GetBlockTime(), dbp != nullptr)) {\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes).\n+        // we add 8 only for new blocks since they will have the serialization header added when written to disk.\n+        // this avoids over accounting for the serialization header on existing blocks. such over accounting was a long\n+        // standing bug that added undesirable 8 byte gaps into blk data files following a -reindex operation.\n+        // for more info, see https://github.com/bitcoin/bitcoin/issues/21379\n+        nBlockSize += 8U;",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "66b8d3c23d999651c79ac03e7558d4248a200ba1",
      "in_reply_to_id": 854257419,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maybe. this actually crossed my mind. i wasn't sure if it was better to go with the hardcoded 8 that has been around for so long, or to go with the `sizeof(unsigned int)` that could be wrong for LP32 and ILP64 (https://en.cppreference.com/w/cpp/language/types). we may go with what you suggest, but i'd like to get some feedback and make this change on purpose.",
      "created_at": "2022-04-20T16:38:10Z",
      "updated_at": "2022-04-20T18:23:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r854343492",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854343492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854479312",
      "pull_request_review_id": 947656466,
      "id": 854479312,
      "node_id": "PRRC_kwDOABII584y7lHQ",
      "diff_hunk": "@@ -785,19 +785,27 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr}; // if dbp is not nullptr, then the file and block within it are known to already reside on disk\n+    if (position_known) {\n         blockPos = *dbp;\n-    }\n-    if (!FindBlockPos(blockPos, nBlockSize + 8, nHeight, active_chain, block.GetBlockTime(), dbp != nullptr)) {\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes).\n+        // we add 8 only for new blocks since they will have the serialization header added when written to disk.\n+        // this avoids over accounting for the serialization header on existing blocks. such over accounting was a long\n+        // standing bug that added undesirable 8 byte gaps into blk data files following a -reindex operation.\n+        // for more info, see https://github.com/bitcoin/bitcoin/issues/21379\n+        nBlockSize += 8U;",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "66b8d3c23d999651c79ac03e7558d4248a200ba1",
      "in_reply_to_id": 854257419,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "i just found in src/compat/assumptions.h `static_assert(sizeof(unsigned) == 4, \"32-bit unsigned assumed\");`\r\nthat is what i need to feel safe making this change. i'll do it in my next update.",
      "created_at": "2022-04-20T19:21:45Z",
      "updated_at": "2022-04-20T19:21:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r854479312",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854479312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854524043",
      "pull_request_review_id": 947720570,
      "id": 854524043,
      "node_id": "PRRC_kwDOABII584y7wCL",
      "diff_hunk": "@@ -785,19 +785,27 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr}; // if dbp is not nullptr, then the file and block within it are known to already reside on disk\n+    if (position_known) {\n         blockPos = *dbp;\n-    }\n-    if (!FindBlockPos(blockPos, nBlockSize + 8, nHeight, active_chain, block.GetBlockTime(), dbp != nullptr)) {\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes).\n+        // we add 8 only for new blocks since they will have the serialization header added when written to disk.\n+        // this avoids over accounting for the serialization header on existing blocks. such over accounting was a long\n+        // standing bug that added undesirable 8 byte gaps into blk data files following a -reindex operation.\n+        // for more info, see https://github.com/bitcoin/bitcoin/issues/21379\n+        nBlockSize += 8U;",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "66b8d3c23d999651c79ac03e7558d4248a200ba1",
      "in_reply_to_id": 854257419,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "update in 425fc8813307b8d96a48e4b45d0a7b00bbc2289e",
      "created_at": "2022-04-20T20:22:08Z",
      "updated_at": "2022-04-20T20:22:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r854524043",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854524043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854525540",
      "pull_request_review_id": 947722670,
      "id": 854525540,
      "node_id": "PRRC_kwDOABII584y7wZk",
      "diff_hunk": "@@ -785,19 +785,27 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */",
      "path": "src/node/blockstorage.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "66b8d3c23d999651c79ac03e7558d4248a200ba1",
      "in_reply_to_id": 854198361,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "update in 425fc8813307b8d96a48e4b45d0a7b00bbc2289e",
      "created_at": "2022-04-20T20:24:25Z",
      "updated_at": "2022-04-20T20:24:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r854525540",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/854525540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 791,
      "original_line": 791,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/864089748",
      "pull_request_review_id": 960849459,
      "id": 864089748,
      "node_id": "PRRC_kwDOABII584zgPaU",
      "diff_hunk": "@@ -653,6 +653,8 @@ bool BlockManager::FindUndoPos(BlockValidationState& state, int nFile, FlatFileP\n     return true;\n }\n \n+static constexpr size_t BLOCK_SERIALIZATION_HEADER_SIZE = CMessageHeader::MESSAGE_START_SIZE + sizeof(unsigned int);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "425fc8813307b8d96a48e4b45d0a7b00bbc2289e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"reindex, log, test: fixes #21379\" (425fc8813307b8d96a48e4b45d0a7b00bbc2289e)\r\n\r\nCould you add a comment documenting this variable? Would suggest `/** Size of header written by WriteBlockToDisk() before a serialized CBlock */`",
      "created_at": "2022-05-03T18:47:02Z",
      "updated_at": "2022-05-03T20:41:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r864089748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/864089748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 656,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/864117753",
      "pull_request_review_id": 960849459,
      "id": 864117753,
      "node_id": "PRRC_kwDOABII584zgWP5",
      "diff_hunk": "@@ -785,19 +787,27 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr};",
      "path": "src/node/blockstorage.cpp",
      "position": 10,
      "original_position": 19,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "425fc8813307b8d96a48e4b45d0a7b00bbc2289e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"reindex, log, test: fixes #21379\" (425fc8813307b8d96a48e4b45d0a7b00bbc2289e)\r\n\r\nJust IMO, but I don't think adding the `position_known` variable is helpful here. Just adds another piece of state and the name doesn't convey the main thing this variable actually does, which is skip writing to disk.",
      "created_at": "2022-05-03T19:20:22Z",
      "updated_at": "2022-05-03T20:40:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r864117753",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/864117753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 795,
      "original_line": 795,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/864136131",
      "pull_request_review_id": 960849459,
      "id": 864136131,
      "node_id": "PRRC_kwDOABII584zgavD",
      "diff_hunk": "@@ -785,19 +787,27 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr};\n+    if (position_known) {\n         blockPos = *dbp;\n-    }\n-    if (!FindBlockPos(blockPos, nBlockSize + 8, nHeight, active_chain, block.GetBlockTime(), dbp != nullptr)) {\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE).\n+        // we add BLOCK_SERIALIZATION_HEADER_SIZE only for new blocks since they will have the serialization header added when written to disk.\n+        // this avoids over accounting for the serialization header on existing blocks. such over accounting was a long\n+        // standing bug that added undesirable 8 byte gaps into blk data files following a -reindex operation.\n+        // for more info, see https://github.com/bitcoin/bitcoin/issues/21379\n+        nBlockSize += static_cast<unsigned int>(BLOCK_SERIALIZATION_HEADER_SIZE);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "425fc8813307b8d96a48e4b45d0a7b00bbc2289e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"reindex, log, test: fixes #21379\" (425fc8813307b8d96a48e4b45d0a7b00bbc2289e)\r\n\r\nIt seems fragile to be passing `FindBlockPos` different lengths for the same block depending on whether `dbp` is null. The bug in the previous version of the code was not that it was passing the wrong *length* when _dbp_ is non-null. The bug was that it was passing the wrong _position_. (It was passing a different position than the one the original FindBlockPos call returned when the block was first written). Fixing the new position being 8 bytes ahead by making the length 8 bytes shorter seems fragile because it assumes FindBlockPos will be ok with this. Better to just pass later FindBlockPos calls the same position earlier calls returned, than work around this by passing a different length.\r\n\r\nI also think this comment is a little confusing, and that it's generally not helpful for comments to describe bugs in previous versions of the code that are no longer present. Information about the bug is helpful in the other part of the commit to understand the log statement, but I think is just distracting here in this part of the code.\r\n\r\nSuggested an alternate version of this fix in https://github.com/ryanofsky/bitcoin/commit/07c05a1b24bf42e57f8c229f505ed448a6df81f7",
      "created_at": "2022-05-03T19:43:37Z",
      "updated_at": "2022-05-03T20:40:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r864136131",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/864136131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": 798,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/864179556",
      "pull_request_review_id": 960849459,
      "id": 864179556,
      "node_id": "PRRC_kwDOABII584zglVk",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <node/context.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <test/util/setup_common.h>\n+\n+using node::BlockManager;\n+\n+// use BasicTestingSetup here for the data directory configuration, setup, and cleanup\n+BOOST_FIXTURE_TEST_SUITE(blockmanager_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(blockmanager_find_block_pos)\n+{\n+    const auto params {CreateChainParams(ArgsManager{}, CBaseChainParams::MAIN)};\n+    BlockManager blockman {};\n+    CChain chain {};\n+    // simulate adding a genesis block normally\n+    BOOST_CHECK_EQUAL(blockman.SaveBlockToDisk(params->GenesisBlock(), 0, chain, *params, nullptr).nPos, 8U);\n+    // simulate what happens during reindex\n+    // simulate a well-formed genesis block being found at offset 8 in the blk00000.dat file\n+    // the block is found at offset 8 because there is an 8 byte serialization header\n+    // consisting of 4 magic bytes + 4 length bytes before each block in a well-formed blk file.\n+    FlatFilePos pos{0, 8};\n+    BOOST_CHECK_EQUAL(blockman.SaveBlockToDisk(params->GenesisBlock(), 0, chain, *params, &pos).nPos, 8U);\n+    // now simulate what happens after reindex for the first new block processed\n+    // the actual block contents don't matter, just that it's a block.\n+    // verify that the write position is at offset 0x12d.\n+    // this is a check to make sure that https://github.com/bitcoin/bitcoin/issues/21379 does not recur\n+    // 8 bytes (for serialization header) + 285 (for serialized genesis block) = 293\n+    // add another 8 bytes for the second block's serialization header and we get 293 + 8 = 301\n+    BOOST_CHECK_EQUAL(blockman.SaveBlockToDisk(params->GenesisBlock(), 1, chain, *params, nullptr).nPos, 301U);",
      "path": "src/test/blockmanager_tests.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "425fc8813307b8d96a48e4b45d0a7b00bbc2289e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"reindex, log, test: fixes #21379\" (425fc8813307b8d96a48e4b45d0a7b00bbc2289e)\r\n\r\nMay be less fragile to write `8 + GetSerializeSize(GenesisBlock())` instead of `301`",
      "created_at": "2022-05-03T20:11:50Z",
      "updated_at": "2022-05-03T20:40:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r864179556",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/864179556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/865122278",
      "pull_request_review_id": 962272461,
      "id": 865122278,
      "node_id": "PRRC_kwDOABII584zkLfm",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <node/context.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <test/util/setup_common.h>\n+\n+using node::BlockManager;\n+\n+// use BasicTestingSetup here for the data directory configuration, setup, and cleanup\n+BOOST_FIXTURE_TEST_SUITE(blockmanager_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(blockmanager_find_block_pos)\n+{\n+    const auto params {CreateChainParams(ArgsManager{}, CBaseChainParams::MAIN)};\n+    BlockManager blockman {};\n+    CChain chain {};\n+    // simulate adding a genesis block normally\n+    BOOST_CHECK_EQUAL(blockman.SaveBlockToDisk(params->GenesisBlock(), 0, chain, *params, nullptr).nPos, 8U);\n+    // simulate what happens during reindex\n+    // simulate a well-formed genesis block being found at offset 8 in the blk00000.dat file\n+    // the block is found at offset 8 because there is an 8 byte serialization header\n+    // consisting of 4 magic bytes + 4 length bytes before each block in a well-formed blk file.\n+    FlatFilePos pos{0, 8};\n+    BOOST_CHECK_EQUAL(blockman.SaveBlockToDisk(params->GenesisBlock(), 0, chain, *params, &pos).nPos, 8U);\n+    // now simulate what happens after reindex for the first new block processed\n+    // the actual block contents don't matter, just that it's a block.\n+    // verify that the write position is at offset 0x12d.\n+    // this is a check to make sure that https://github.com/bitcoin/bitcoin/issues/21379 does not recur\n+    // 8 bytes (for serialization header) + 285 (for serialized genesis block) = 293\n+    // add another 8 bytes for the second block's serialization header and we get 293 + 8 = 301\n+    BOOST_CHECK_EQUAL(blockman.SaveBlockToDisk(params->GenesisBlock(), 1, chain, *params, nullptr).nPos, 301U);",
      "path": "src/test/blockmanager_tests.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "425fc8813307b8d96a48e4b45d0a7b00bbc2289e",
      "in_reply_to_id": 864179556,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I could do this.\r\n\r\nMy follow-up question is whether to move the `BLOCK_SERIALIZATION_HEADER_SIZE` constant into `node/blockstorage.h` and reference it here too?\r\nFor example, `node::BLOCK_SERIALIZATION_HEADER_SIZE + ::GetSerializeSize(params->GenesisBlock())`, instead of using the magic 8.\r\n\r\nThe tradeoff is that it moves the constant further from the code where it is used. Is that worth doing when the genesis block is immutable? I am fine with either approach. I kind of prefer putting it in the header file, but, I'd just like to get opinions before pushing up another commit.",
      "created_at": "2022-05-04T17:58:48Z",
      "updated_at": "2022-05-04T17:58:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r865122278",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/865122278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/865122449",
      "pull_request_review_id": 962272705,
      "id": 865122449,
      "node_id": "PRRC_kwDOABII584zkLiR",
      "diff_hunk": "@@ -653,6 +653,8 @@ bool BlockManager::FindUndoPos(BlockValidationState& state, int nFile, FlatFileP\n     return true;\n }\n \n+static constexpr size_t BLOCK_SERIALIZATION_HEADER_SIZE = CMessageHeader::MESSAGE_START_SIZE + sizeof(unsigned int);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "425fc8813307b8d96a48e4b45d0a7b00bbc2289e",
      "in_reply_to_id": 864089748,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I'll add this comment in the next commit.",
      "created_at": "2022-05-04T17:59:00Z",
      "updated_at": "2022-05-04T17:59:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r865122449",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/865122449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 656,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/865122616",
      "pull_request_review_id": 962272970,
      "id": 865122616,
      "node_id": "PRRC_kwDOABII584zkLk4",
      "diff_hunk": "@@ -785,19 +787,27 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr};",
      "path": "src/node/blockstorage.cpp",
      "position": 10,
      "original_position": 19,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "425fc8813307b8d96a48e4b45d0a7b00bbc2289e",
      "in_reply_to_id": 864117753,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I did this because `dbp` was compared to `nullptr` three times in this method, and I thought that giving a name to the concept that it represents seemed more descriptive/readable. Whether we have a known position for the block plays a large role in what goes on in `BlockManager::FindBlockPos` one call deeper, so, to me, it adds some continuity to the concept when you add in that context. By calling it `position_known` the reader gets an answer for why we don't write it to disk again -- because it's position in a blk file is already known; it's already written to disk.",
      "created_at": "2022-05-04T17:59:12Z",
      "updated_at": "2022-05-04T17:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r865122616",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/865122616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 795,
      "original_line": 795,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/865242559",
      "pull_request_review_id": 962439209,
      "id": 865242559,
      "node_id": "PRRC_kwDOABII584zko2_",
      "diff_hunk": "@@ -785,19 +787,27 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr};\n+    if (position_known) {\n         blockPos = *dbp;\n-    }\n-    if (!FindBlockPos(blockPos, nBlockSize + 8, nHeight, active_chain, block.GetBlockTime(), dbp != nullptr)) {\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE).\n+        // we add BLOCK_SERIALIZATION_HEADER_SIZE only for new blocks since they will have the serialization header added when written to disk.\n+        // this avoids over accounting for the serialization header on existing blocks. such over accounting was a long\n+        // standing bug that added undesirable 8 byte gaps into blk data files following a -reindex operation.\n+        // for more info, see https://github.com/bitcoin/bitcoin/issues/21379\n+        nBlockSize += static_cast<unsigned int>(BLOCK_SERIALIZATION_HEADER_SIZE);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "425fc8813307b8d96a48e4b45d0a7b00bbc2289e",
      "in_reply_to_id": 864136131,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the review. I can see it both ways. I'm not feeling a big difference either way. To me, it kind of feels like two sides of the same coin.\r\n\r\nWhat I'm thinking is that `BlockManager::FindBlockPos` is multi-purpose. It's kind of funky because of how much within that method is conditioned upon the position being known, or not.\r\nIn one use, it's trying to figure out a spot where it can put the new header + block into a block file while respecting the file size limit.\r\nIn another use, it's trying to compute where it should put new blocks once we're done processing blocks that we already have in a file.\r\nSince in the second use, it knows the actual position and the block size, it can make sense why the passed in size to add, `nAddSize`, is different between the two invocations.\r\n\r\nThanks for providing an example of what you envisoned (07c05a1b24bf42e57f8c229f505ed448a6df81f7).\r\nI kind of like my commit because I don't have to go back and add the header size.\r\nBut, I can also see what you're saying about passing `FindBlockPos` the same positions that it returns.\r\nI'm undecided. Any other thoughts?\r\n\r\nLastly, I'm fine with trimming the comment to take out the info about past bug.\r\n",
      "created_at": "2022-05-04T19:42:42Z",
      "updated_at": "2022-05-04T19:42:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r865242559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/865242559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": 798,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/867349213",
      "pull_request_review_id": 965329304,
      "id": 867349213,
      "node_id": "PRRC_kwDOABII584zsrLd",
      "diff_hunk": "@@ -4356,7 +4356,18 @@ void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {",
      "path": "src/validation.cpp",
      "position": 3,
      "original_position": 3,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "66b8d3c23d999651c79ac03e7558d4248a200ba1",
      "in_reply_to_id": 854234515,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for looking at this. I agree, it's likely an overly broad try-catch block and that it's difficult to reason about what types of exceptions might be thrown, and from where, since there is no compile time concept of \"checked\" exceptions, like in Java. This is why I don't want to try changing it for this PR :-) I'm sure I'll miss something and it'll break at runtime. And, it'll just make the patch larger without impacting the usefulness of this specific fix.\r\n\r\nI can see that `blkdat >> block;` will throw at least `std::ios_base::failure` from at least a couple different places within the deserialization code. These are the exceptions that the original issue reported.",
      "created_at": "2022-05-07T12:54:09Z",
      "updated_at": "2022-05-07T12:54:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r867349213",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/867349213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4380,
      "original_line": 4380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895769516",
      "pull_request_review_id": 1004412712,
      "id": 895769516,
      "node_id": "PRRC_kwDOABII5841ZFus",
      "diff_hunk": "@@ -788,19 +788,24 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr};\n+    if (position_known) {\n         blockPos = *dbp;\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE).\n+        // we add BLOCK_SERIALIZATION_HEADER_SIZE only for new blocks since they will have the serialization header added when written to disk.\n+        nBlockSize += static_cast<unsigned int>(BLOCK_SERIALIZATION_HEADER_SIZE);",
      "path": "src/node/blockstorage.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"reindex, log, test: fixes #21379\" (bcb0cacac28e98a39dc856c574a0872fe17059e9)\r\n\r\nThis comment doesn't address the confusing thing here because it doesn't say why nBlockSize is set to different sizes for the same block depending on position_known. Would suggest a comment that says why the code is using a different size in each case. Could use:\r\n\r\n```c++\r\n// When position_known is false, the CBlock has not been written to the\r\n// disk yet, so the nBlockSize value passed to FindBlockPos needs to be\r\n// set so FindBlockPos allocates enough bytes for the CBlock data *plus*\r\n// the size of the header WriteBlockToDisk will write before the CBlock\r\n// data.\r\n//\r\n// When position_known is true, WriteBlockToDisk will have already been\r\n// called, and it will have adjusted blockPos.nPos to point to the CBlock\r\n// data after the header, instead of to the header, so the nBlockSize\r\n// value passed to FindBlockPos should only include the CBlock size,\r\n// *not* the header size.\r\n```\r\n\r\nI still prefer the approach of passing a consistent size and position to FindBlockPos like https://github.com/ryanofsky/bitcoin/commit/07c05a1b24bf42e57f8c229f505ed448a6df81f7 instead of dealing with an inconsistent position value by introducing an inconsistent size value. But both approaches have the same ultimate effect, so the more important thing is to document the code clearly.",
      "created_at": "2022-06-13T14:13:47Z",
      "updated_at": "2022-06-13T16:32:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r895769516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895769516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": 799,
      "original_start_line": 799,
      "start_side": "RIGHT",
      "line": 802,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/896649670",
      "pull_request_review_id": 1005619441,
      "id": 896649670,
      "node_id": "PRRC_kwDOABII5841ccnG",
      "diff_hunk": "@@ -788,19 +788,24 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr};\n+    if (position_known) {\n         blockPos = *dbp;\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE).\n+        // we add BLOCK_SERIALIZATION_HEADER_SIZE only for new blocks since they will have the serialization header added when written to disk.\n+        nBlockSize += static_cast<unsigned int>(BLOCK_SERIALIZATION_HEADER_SIZE);",
      "path": "src/node/blockstorage.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "in_reply_to_id": 895769516,
      "user": {
        "login": "mruddy",
        "id": 6440430,
        "node_id": "MDQ6VXNlcjY0NDA0MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mruddy",
        "html_url": "https://github.com/mruddy",
        "followers_url": "https://api.github.com/users/mruddy/followers",
        "following_url": "https://api.github.com/users/mruddy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mruddy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mruddy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
        "organizations_url": "https://api.github.com/users/mruddy/orgs",
        "repos_url": "https://api.github.com/users/mruddy/repos",
        "events_url": "https://api.github.com/users/mruddy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mruddy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "First, thanks for the feedback. While I'm not opposed to adding these comments if they help get this merged, I'd rather let the commit stay as it is so that the reviews can accumulate and we can get this stuff merged.",
      "created_at": "2022-06-14T10:27:24Z",
      "updated_at": "2022-06-14T10:27:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r896649670",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/896649670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": 799,
      "original_start_line": 799,
      "start_side": "RIGHT",
      "line": 802,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913299788",
      "pull_request_review_id": 1027938042,
      "id": 913299788,
      "node_id": "PRRC_kwDOABII5842b9lM",
      "diff_hunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <node/context.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <test/util/setup_common.h>\n+\n+using node::BlockManager;\n+using node::BLOCK_SERIALIZATION_HEADER_SIZE;\n+\n+// use BasicTestingSetup here for the data directory configuration, setup, and cleanup\n+BOOST_FIXTURE_TEST_SUITE(blockmanager_tests, BasicTestingSetup)",
      "path": "src/test/blockmanager_tests.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: With the convention [\"`<source_filename>_tests.cpp`\"](https://github.com/bitcoin/bitcoin/blob/87d012324afa285221073540781295f1b7381a15/src/test/README.md?plain=1#L64), the name of the file/test suite should be `blockstorage_tests`.",
      "created_at": "2022-07-05T00:00:55Z",
      "updated_at": "2022-07-05T04:48:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r913299788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913299788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913361932",
      "pull_request_review_id": 1027938042,
      "id": 913361932,
      "node_id": "PRRC_kwDOABII5842cMwM",
      "diff_hunk": "@@ -4378,7 +4378,18 @@ void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s: Deserialize or I/O error - %s\\n\", __func__, e.what());\n+                // historical bugs added extra data to the block files that does not deserialize cleanly.",
      "path": "src/validation.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I would drop the last two sentences (seems a bit verbose and out of place to explain what reindex is not and what studious node operators may do),  and I find long comments like this one easier to read when full sentences start with capitals.\r\n",
      "created_at": "2022-07-05T03:43:58Z",
      "updated_at": "2022-07-05T04:48:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r913361932",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913361932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4381,
      "original_line": 4381,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913370952",
      "pull_request_review_id": 1027938042,
      "id": 913370952,
      "node_id": "PRRC_kwDOABII5842cO9I",
      "diff_hunk": "@@ -788,19 +788,24 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr};\n+    if (position_known) {\n         blockPos = *dbp;\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE).\n+        // we add BLOCK_SERIALIZATION_HEADER_SIZE only for new blocks since they will have the serialization header added when written to disk.\n+        nBlockSize += static_cast<unsigned int>(BLOCK_SERIALIZATION_HEADER_SIZE);",
      "path": "src/node/blockstorage.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "in_reply_to_id": 895769516,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I also think this comment would be helpful, except for the point below.\r\n\r\n> ```c++\r\n> // When position_known is true, WriteBlockToDisk will have already been\r\n> // called, and it will have adjusted blockPos.nPos to point to the CBlock\r\n> // data after the header\r\n> ```\r\nIsn't this incorrect? My understanding is that when `position_known` is true, `blockPos.nPos` was set by the `LoadExternalBlockFile` code which has read past the header in the existing block file and moved the position accordingly - but not `WriteBlockToDisk`, which wasn't called for this block at all during this invocation of `bitcoind`.\r\n",
      "created_at": "2022-07-05T04:13:15Z",
      "updated_at": "2022-07-05T04:52:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r913370952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913370952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": 799,
      "original_start_line": 799,
      "start_side": "RIGHT",
      "line": 802,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913376464",
      "pull_request_review_id": 1027938042,
      "id": 913376464,
      "node_id": "PRRC_kwDOABII5842cQTQ",
      "diff_hunk": "@@ -171,6 +174,7 @@ class BlockManager\n     bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    /** Store block on disk. If dbp is not nullptr, then it provides the known position of the block within a block file on disk. */",
      "path": "src/node/blockstorage.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Just from reading this comment it's not clear to me why this function is even called when the block is already on disk - it apparently doesn't need to be stored in that case.",
      "created_at": "2022-07-05T04:30:32Z",
      "updated_at": "2022-07-05T05:12:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r913376464",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913376464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913943497",
      "pull_request_review_id": 1028847814,
      "id": 913943497,
      "node_id": "PRRC_kwDOABII5842eavJ",
      "diff_hunk": "@@ -788,19 +788,24 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr};\n+    if (position_known) {\n         blockPos = *dbp;\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE).\n+        // we add BLOCK_SERIALIZATION_HEADER_SIZE only for new blocks since they will have the serialization header added when written to disk.\n+        nBlockSize += static_cast<unsigned int>(BLOCK_SERIALIZATION_HEADER_SIZE);",
      "path": "src/node/blockstorage.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "in_reply_to_id": 895769516,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/24858#discussion_r913370952\r\n\r\n> > ```c++\r\n> > // When position_known is true, WriteBlockToDisk will have already been\r\n> > // called, and it will have adjusted blockPos.nPos to point to the CBlock\r\n> > // data after the header\r\n> > ```\r\n> \r\n> Isn't this incorrect?\r\n\r\nI think it is correct 😎. The line that changes `blockPos.nPos` to point after the header instead of before the header is here:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/9fb2a2bc6768ab03fcada9155d52a16ce6f6a0cc/src/node/blockstorage.cpp#L676\r\n\r\nThis is the critical code calculating the block position which is saved in the `CBlockIndex` struct, and written to BlockIndexDb and used when `ReadBlockFromDisk` is called to read back block data.\r\n\r\n> My understanding is that when `position_known` is true, `blockPos.nPos` was set by the `LoadExternalBlockFile` code which has read past the header in the existing block file and moved the position accordingly\r\n\r\nI don't think `LoadExternalBlockFile` is relevant to normal operation, only used when importing or reindexing is requested.\r\n\r\n> but not `WriteBlockToDisk`, which wasn't called for this block at all during this invocation of `bitcoind`.\r\n\r\nIt's true that `WriteBlockToDisk` may or may not have been called during this invocation of `bitcoind`, but it must have been called previously at some point, and the position it returns is written to BlockIndexDb and used to read blocks in future invocations.",
      "created_at": "2022-07-05T15:42:12Z",
      "updated_at": "2022-07-05T15:42:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r913943497",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913943497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": 799,
      "original_start_line": 799,
      "start_side": "RIGHT",
      "line": 802,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913997594",
      "pull_request_review_id": 1028924036,
      "id": 913997594,
      "node_id": "PRRC_kwDOABII5842en8a",
      "diff_hunk": "@@ -788,19 +788,24 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr};\n+    if (position_known) {\n         blockPos = *dbp;\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE).\n+        // we add BLOCK_SERIALIZATION_HEADER_SIZE only for new blocks since they will have the serialization header added when written to disk.\n+        nBlockSize += static_cast<unsigned int>(BLOCK_SERIALIZATION_HEADER_SIZE);",
      "path": "src/node/blockstorage.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "in_reply_to_id": 895769516,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, but the suggested comment is not in `ReadBlockFromDisk` but in `SaveBlockToDisk`, and it is about the case when \"position_known is true\", or `dbp != nullptr`. I think this is only possible when this function is called via `AcceptBlock()` from `LoadExternalBlockFile` which has set the blockPos - the normal operation calls to `SaveBlockToDisk` (via `AcceptBlock()` and `ProcessNewBlock()`) have `dbp==nullptr`, so `position_known` is false and the other half of the comment applies.",
      "created_at": "2022-07-05T16:42:36Z",
      "updated_at": "2022-07-05T16:42:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r913997594",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913997594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": 799,
      "original_start_line": 799,
      "start_side": "RIGHT",
      "line": 802,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914027908",
      "pull_request_review_id": 1028965947,
      "id": 914027908,
      "node_id": "PRRC_kwDOABII5842evWE",
      "diff_hunk": "@@ -788,19 +788,24 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr};\n+    if (position_known) {\n         blockPos = *dbp;\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE).\n+        // we add BLOCK_SERIALIZATION_HEADER_SIZE only for new blocks since they will have the serialization header added when written to disk.\n+        nBlockSize += static_cast<unsigned int>(BLOCK_SERIALIZATION_HEADER_SIZE);",
      "path": "src/node/blockstorage.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "in_reply_to_id": 895769516,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, if you feel it is more useful for the comment to go into those things, feel free to make a suggestion along those lines. My suggestion was rejected anyway so maybe you will have better luck.\r\n\r\nAlso, I wrote this comment to describe a piece of code that I think is unnecessarily confusing. I would personally prefer not to have this piece of code, and not to have this comment explaining it, and instead use a solution like https://github.com/ryanofsky/bitcoin/commit/07c05a1b24bf42e57f8c229f505ed448a6df81f7 which does not require understanding external places where `SaveBlockToDisk` is called to understand, and only requires understanding internally how it always returns the same position.",
      "created_at": "2022-07-05T17:21:20Z",
      "updated_at": "2022-07-05T17:21:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r914027908",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914027908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": 799,
      "original_start_line": 799,
      "start_side": "RIGHT",
      "line": 802,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915032603",
      "pull_request_review_id": 1030374634,
      "id": 915032603,
      "node_id": "PRRC_kwDOABII5842ikob",
      "diff_hunk": "@@ -788,19 +788,24 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr};\n+    if (position_known) {\n         blockPos = *dbp;\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE).\n+        // we add BLOCK_SERIALIZATION_HEADER_SIZE only for new blocks since they will have the serialization header added when written to disk.\n+        nBlockSize += static_cast<unsigned int>(BLOCK_SERIALIZATION_HEADER_SIZE);",
      "path": "src/node/blockstorage.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "in_reply_to_id": 895769516,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't have a strong preference - it seems that both approaches only affect the blockstorage-internal logic, and since neither solution changes the public interface `SaveBlockToDisk`, this sholdn't change what external places will need to know: In particular, that if they pass `dbp!=nullptr`, dbp needs to point right after the header and before the block data (which should be documented in `SaveBlockToDisk` imo).\r\n\r\nHowever, I think that the internal function `FindBlockPos()` would be clearer if it was split up depending on whether the block is known, with so much code being conditional on it: If `dbp!=nullptr` , the function doesn't \"find\" anything new but only updates the block info statistics (and sometimes does a Flush which I'm not convinced is necessary). I had an initial go at this in https://github.com/mzumsande/bitcoin/commits/202207_refactor_findblockpos , which is outside the scope of this PR, but might make sense as a follow-up.",
      "created_at": "2022-07-06T16:20:56Z",
      "updated_at": "2022-07-06T16:20:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r915032603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915032603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": 799,
      "original_start_line": 799,
      "start_side": "RIGHT",
      "line": 802,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/928166861",
      "pull_request_review_id": 1048570690,
      "id": 928166861,
      "node_id": "PRRC_kwDOABII5843UrPN",
      "diff_hunk": "@@ -788,19 +788,24 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr};",
      "path": "src/node/blockstorage.cpp",
      "position": 10,
      "original_position": 10,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, if you retouch (bcb0cacac28e98a39dc856c574a0872fe17059e9)\r\n```suggestion\r\n    const bool position_known{dbp != nullptr};\r\n```",
      "created_at": "2022-07-23T21:31:42Z",
      "updated_at": "2022-07-27T01:39:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r928166861",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/928166861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 795,
      "original_line": 795,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/930542594",
      "pull_request_review_id": 1048570690,
      "id": 930542594,
      "node_id": "PRRC_kwDOABII5843dvQC",
      "diff_hunk": "@@ -788,19 +788,24 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr) {\n+    const auto position_known {dbp != nullptr};\n+    if (position_known) {\n         blockPos = *dbp;\n+    } else {\n+        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for\n+        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes = BLOCK_SERIALIZATION_HEADER_SIZE).\n+        // we add BLOCK_SERIALIZATION_HEADER_SIZE only for new blocks since they will have the serialization header added when written to disk.\n+        nBlockSize += static_cast<unsigned int>(BLOCK_SERIALIZATION_HEADER_SIZE);",
      "path": "src/node/blockstorage.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "in_reply_to_id": 895769516,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with @ryanofsky's [comment](https://github.com/bitcoin/bitcoin/pull/24858/files#r895769516) (above) about consistency. I'd also note that adding 8 to `nBlockSize` is confusing because it's no longer a block size!",
      "created_at": "2022-07-27T01:38:22Z",
      "updated_at": "2022-07-27T14:40:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r930542594",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/930542594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": 799,
      "original_start_line": 799,
      "start_side": "RIGHT",
      "line": 802,
      "original_line": 802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/930593528",
      "pull_request_review_id": 1051852827,
      "id": 930593528,
      "node_id": "PRRC_kwDOABII5843d7r4",
      "diff_hunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <node/blockstorage.h>\n+#include <node/context.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <test/util/setup_common.h>\n+\n+using node::BlockManager;\n+using node::BLOCK_SERIALIZATION_HEADER_SIZE;\n+\n+// use BasicTestingSetup here for the data directory configuration, setup, and cleanup\n+BOOST_FIXTURE_TEST_SUITE(blockmanager_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(blockmanager_find_block_pos)\n+{\n+    const auto params {CreateChainParams(ArgsManager{}, CBaseChainParams::MAIN)};\n+    BlockManager blockman {};\n+    CChain chain {};\n+    // simulate adding a genesis block normally\n+    BOOST_CHECK_EQUAL(blockman.SaveBlockToDisk(params->GenesisBlock(), 0, chain, *params, nullptr).nPos, BLOCK_SERIALIZATION_HEADER_SIZE);\n+    // simulate what happens during reindex\n+    // simulate a well-formed genesis block being found at offset 8 in the blk00000.dat file\n+    // the block is found at offset 8 because there is an 8 byte serialization header\n+    // consisting of 4 magic bytes + 4 length bytes before each block in a well-formed blk file.\n+    FlatFilePos pos{0, BLOCK_SERIALIZATION_HEADER_SIZE};\n+    BOOST_CHECK_EQUAL(blockman.SaveBlockToDisk(params->GenesisBlock(), 0, chain, *params, &pos).nPos, BLOCK_SERIALIZATION_HEADER_SIZE);",
      "path": "src/test/blockmanager_tests.cpp",
      "position": 31,
      "original_position": 31,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This test is slightly unrealistic because it's simulating a normal (new) block add followed by a reindex. A reindex, if it occurs, always happens immediately after the node starts up, before any blocks have been added from peers. As a result of this, this (the second) test call to `SaveBlockToDisk` causes `m_blockfile_info.nBlocks` to increment to 2 [here](https://github.com/bitcoin/bitcoin/blob/6dc3084eec912cf2abfe18d1c05655defaa45e20/src/node/blockstorage.cpp#L615), which is strange, since there's only one block. \r\n\r\nThis doesn't cause any problems now, but some future change could cause this test to break in mysterious ways. \r\n\r\nA way to fix this would be to allocate a new `BlockManager` (and probably `CChain`) for this call, to simulate restarting the node. (The third call to `SaveBlockToDisk`, below, can use the same ones as this one does, because following a reindex, the real node does go ahead and start adding new blocks.)\r\n\r\nIn case it's not clear, I updated that [commit](https://github.com/LarryRuane/bitcoin/commit/e8b90d475b193c1c1b1a74d7751c9ec830c82867) (containing other suggestions) to show what I mean.",
      "created_at": "2022-07-27T03:53:19Z",
      "updated_at": "2022-07-27T03:53:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r930593528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/930593528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/994533957",
      "pull_request_review_id": 1140624261,
      "id": 994533957,
      "node_id": "PRRC_kwDOABII5847R2JF",
      "diff_hunk": "@@ -4356,7 +4356,18 @@ void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s: Deserialize or I/O error - %s\\n\", __func__, e.what());\n+                // historical bugs added extra data to the block files that does not deserialize cleanly.\n+                // commonly this data is between readable blocks, but it does not really matter. such data is not fatal to the import process.\n+                // the code that reads the block files deals with invalid data by simply ignoring it.\n+                // it continues to search for the next {4 byte magic message start bytes + 4 byte length + block} that does deserialize cleanly\n+                // and passes all of the other block validation checks dealing with POW and the merkle root, etc...\n+                // we merely note with this informational log message when unexpected data is encountered.\n+                // we could also be experiencing a storage system read error, or a read of a previous bad write. these are possible, but\n+                // less likely scenarios. we don't have enough information to tell a difference here.\n+                // the reindex process is not the place to attempt to clean and/or compact the block files. if so desired, a studious node operator\n+                // may use knowledge of the fact that the block files are not entirely pristine in order to prepare a set of pristine, and\n+                // perhaps ordered, block files for later reindexing.\n+                LogPrint(BCLog::REINDEX, \"%s: unexpected data at file offset 0x%x - %s. continuing\\n\", __func__, (nRewind - 1), e.what());",
      "path": "src/validation.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "2da96174b95831c374b2452657c431254fea8e53",
      "in_reply_to_id": 852471681,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unrelated: If the intent is to hide this, it would be good to clarify the log level. Currently it defaults to INFO, which is hidden, but this might be about to change, so maybe DEBUG might be better? cc @jonatack Not sure what the plan on the log levels currently is.",
      "created_at": "2022-10-13T11:41:02Z",
      "updated_at": "2022-10-13T11:41:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r994533957",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/994533957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4392,
      "original_line": 4392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/994667976",
      "pull_request_review_id": 1140828223,
      "id": 994667976,
      "node_id": "PRRC_kwDOABII5847SW3I",
      "diff_hunk": "@@ -4356,7 +4356,18 @@ void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s: Deserialize or I/O error - %s\\n\", __func__, e.what());\n+                // historical bugs added extra data to the block files that does not deserialize cleanly.\n+                // commonly this data is between readable blocks, but it does not really matter. such data is not fatal to the import process.\n+                // the code that reads the block files deals with invalid data by simply ignoring it.\n+                // it continues to search for the next {4 byte magic message start bytes + 4 byte length + block} that does deserialize cleanly\n+                // and passes all of the other block validation checks dealing with POW and the merkle root, etc...\n+                // we merely note with this informational log message when unexpected data is encountered.\n+                // we could also be experiencing a storage system read error, or a read of a previous bad write. these are possible, but\n+                // less likely scenarios. we don't have enough information to tell a difference here.\n+                // the reindex process is not the place to attempt to clean and/or compact the block files. if so desired, a studious node operator\n+                // may use knowledge of the fact that the block files are not entirely pristine in order to prepare a set of pristine, and\n+                // perhaps ordered, block files for later reindexing.\n+                LogPrint(BCLog::REINDEX, \"%s: unexpected data at file offset 0x%x - %s. continuing\\n\", __func__, (nRewind - 1), e.what());",
      "path": "src/validation.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "bcb0cacac28e98a39dc856c574a0872fe17059e9",
      "original_commit_id": "2da96174b95831c374b2452657c431254fea8e53",
      "in_reply_to_id": 852471681,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The default loglevel is currently debug and will become info.\n\nWarning and error levels are currently logged unconditionally, and the plan is to log info unconditionally as well.\n\nI've made a note to check this in the severity logging updates.",
      "created_at": "2022-10-13T13:46:14Z",
      "updated_at": "2022-10-13T13:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24858#discussion_r994667976",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/994667976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24858"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4392,
      "original_line": 4392,
      "side": "RIGHT"
    }
  ]
}